{
	"id": "bd28ce934a23b29ba0d2f945fb7604b7",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/contracts/protocol/TuliaPool.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./TuliaVault.sol\";\nimport \"../interfaces/IInterestModel.sol\";\nimport \"../interfaces/IPermit2.sol\";\nimport \"../interfaces/IPoolOrganizer.sol\";\n\n/// @title TuliaPool\n/// @dev Manages the lifecycle of loans including creation, funding, repayment, and defaults.\ncontract TuliaPool is ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    IPermit2 public permit2;\n    IPoolOrganizer public poolOrganizer;\n\n    struct LoanDetails {\n        address lender;\n        IERC20 loanToken;\n        IERC20 repaymentToken;\n        TuliaVault collateralVault;\n        uint256 loanAmount;\n        uint256 interestRate; \n        uint256 repaymentPeriod;\n        IInterestModel interestModel;\n        address borrower;\n        uint256 startBlock;\n        uint256 fundedBlock;\n    }\n\n    enum LoanState { CREATED, PENDING, ACTIVE, CLOSED, DEFAULTED }\n    LoanState public state;\n\n    LoanDetails public loanDetails;\n\n    event LoanOfferCreated(address indexed lender, uint256 loanAmount, address loanToken, address repaymentToken);\n    event LoanActivated(address indexed borrower, uint256 collateralAmount);\n    event LoanFunded(uint256 loanAmount);\n    event RepaymentMade(uint256 amountRepaid);\n    event LoanClosed();\n\n    /// @param lender The address of the lender\n    /// @param loanTokenAddress The address of the token to be loaned\n    /// @param repaymentTokenAddress The token address in which repayments are to be made\n    /// @param collateralVaultAddress The address of the vault where collateral will be stored\n    /// @param loanAmount The amount of the loan\n    /// @param interestRate The interest rate\n    /// @param repaymentPeriod The duration over which the loan must be repaid\n    /// @param interestModel The contract that calculates interest\n    /// @param _permit2 The Permit2 contract for ERC20 token operations\n    /// @param poolOrganizerAddress The Pool Organizer contract for managing pool registrations\n    constructor(\n        address lender,\n        address loanTokenAddress,\n        address repaymentTokenAddress,\n        address collateralVaultAddress,\n        uint256 loanAmount,\n        uint256 interestRate,\n        uint256 repaymentPeriod,\n        IInterestModel interestModel,\n        IPermit2 _permit2,\n        address poolOrganizerAddress\n    ) {\n        require(lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) && repaymentTokenAddress != address(0), \"Invalid input addresses\");\n        permit2 = _permit2;\n        poolOrganizer = IPoolOrganizer(poolOrganizerAddress);\n        loanDetails = LoanDetails({\n            lender: lender,\n            loanToken: IERC20(loanTokenAddress),\n            repaymentToken: IERC20(repaymentTokenAddress),\n            collateralVault: TuliaVault(collateralVaultAddress),\n            loanAmount: loanAmount,\n            interestRate: interestRate,\n            repaymentPeriod: repaymentPeriod,\n            interestModel: interestModel,\n            borrower: address(0),\n            startBlock: block.timestamp,\n            fundedBlock: 0\n        });\n        state = LoanState.CREATED;\n        emit LoanOfferCreated(lender, loanAmount, loanTokenAddress, repaymentTokenAddress);\n    }\n\n    function activateLoan(address borrower, uint256 collateralAmount) external {\n        require(state == LoanState.CREATED, \"Loan not in creatable state\");\n        require(borrower != address(0), \"Invalid borrower address\");\n        uint256 requiredCollateral = calculateRequiredCollateral();\n        require(collateralAmount >= requiredCollateral, \"Insufficient collateral\");\n\n        loanDetails.collateralVault.deposit(collateralAmount, borrower);\n        loanDetails.borrower = borrower;\n        state = LoanState.PENDING;\n        emit LoanActivated(borrower, collateralAmount);\n    }\n\n    function fundLoan() external nonReentrant {\n        require(state == LoanState.PENDING, \"Loan must be in pending state\");\n        loanDetails.loanToken.safeTransferFrom(loanDetails.lender, address(this), loanDetails.loanAmount);\n        loanDetails.fundedBlock = block.timestamp;\n        state = LoanState.ACTIVE;\n        emit LoanFunded(loanDetails.loanAmount);\n    }\n\n    function repay(uint256 amount) external nonReentrant {\n        require(state == LoanState.ACTIVE, \"Loan must be active\");\n        uint256 totalRepayment = loanDetails.loanAmount + calculateInterest();\n        require(amount >= totalRepayment, \"Insufficient amount for repayment\");\n\n        loanDetails.repaymentToken.safeTransferFrom(msg.sender, loanDetails.lender, totalRepayment);\n        _closeLoan();\n        emit RepaymentMade(totalRepayment);\n    }\n\n    function _closeLoan() internal {\n        state = LoanState.CLOSED;\n        poolOrganizer.deregisterPool(address(this));\n        emit LoanClosed();\n    }\n\n    function calculateInterest() public view returns (uint256) {\n        uint256 duration = block.timestamp - loanDetails.startBlock;\n        return loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration);\n    }\n\n    function calculateRequiredCollateral() public view returns (uint256) {\n        uint256 interestForFullTerm = calculateInterest();\n        return loanDetails.loanAmount + interestForFullTerm;\n    }\n\n    function getFundedBlock() public view returns (uint256) {\n        return loanDetails.fundedBlock;\n    }\n\nfunction getLoanState() public view returns (LoanState) {\n    return state;\n}\nfunction getLoanAmount() public view returns (uint256) {\n    return loanDetails.loanAmount;\n}\n\nfunction getCollateralAmount(address user) public view returns (uint256) {\n    return loanDetails.collateralVault.balanceOf(user); // Assuming there's a balanceOf function\n}\n}\n"
			},
			"contracts/contracts/interfaces/IPoolOrganizer.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPoolOrganizer {\r\n    enum PoolType { STANDARD, FLASH_LOAN }\r\n\r\n    struct PoolDetails {\r\n        address lender;\r\n        address borrower;\r\n        uint256 creationTime;\r\n        address vault;\r\n        address loanToken;\r\n        address assetToken;\r\n        uint256 loanAmount;\r\n        uint256 interestRate;\r\n        uint256 repaymentPeriod;\r\n        PoolType poolType; // New field to specify the type of pool\r\n    }\r\n\r\n    function registerPool(\r\n        address pool,\r\n        address lender,\r\n        address borrower,\r\n        address vault,\r\n        address loanToken,\r\n        address assetToken,\r\n        uint256 loanAmount,\r\n        uint256 interestRate,\r\n        uint256 repaymentPeriod,\r\n        PoolType poolType  // Include pool type in registration\r\n    ) external;\r\n\r\n    function deregisterPool(address pool) external;\r\n    function getTotalPools() external view returns (uint256);\r\n    function getPoolsByLender(address lender) external view returns (address[] memory);\r\n    function getPoolDetails(address pool) external view returns (PoolDetails memory);\r\n    function getVaultForPool(address pool) external view returns (address);\r\n    function grantFactoryAccess(address factoryAddress) external;\r\n}\r\n"
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ISignatureTransfer} from \"./ISignatureTransfer.sol\";\nimport {IAllowanceTransfer} from \"./IAllowanceTransfer.sol\";\n\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\n// IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\n}\n"
			},
			"contracts/contracts/interfaces/IInterestModel.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IInterestModel {\r\n    /**\r\n     * @dev Calculates interest on a given principal over a period.\r\n     * @param principal The principal amount.\r\n     * @param rate The interest rate, in basis points for simple and compound, or additional adjustment for market-based.\r\n     * @param time The time period in seconds.\r\n     * @return The amount of interest accrued.\r\n     */\r\n    function calculateInterest(uint256 principal, uint256 rate, uint256 time) external view returns (uint256);\r\n}\r\n"
			},
			"contracts/contracts/protocol/TuliaVault.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../interfaces/IPermit2.sol\";\n\n/// @title TuliaVault\n/// @notice Manages the vault where assets are stored and facilitates tokenized shares representing ownership of the underlying assets.\n/// @dev Extends ERC4626 to utilize a permit system for streamlined deposit operations.\ncontract TuliaVault is ERC4626, ReentrancyGuard {\n    IPermit2 public immutable permitSystem;\n\n    /// @dev Initializes the TuliaVault with necessary details and links to the permit system for handling token operations securely.\n    /// @param asset The ERC20 token that this vault will accept.\n    /// @param name The name of the vault token.\n    /// @param symbol The symbol of the vault token.\n    /// @param _permitSystem Address of the Permit2 contract used for ERC20 token operations.\n    constructor(\n        IERC20 asset,\n        string memory name,\n        string memory symbol,\n        IPermit2 _permitSystem\n    ) ERC4626(asset) ERC20(name, symbol) {\n        permitSystem = _permitSystem;\n    }\n\n    /// @notice Deposits assets into the vault with permit approval, issuing shares of the vault in return.\n    /// @param amount The amount of the underlying asset to deposit.\n    /// @param permitData Data required for the permit including details about the approval.\n    /// @param signature Signature from the token holder approving the deposit.\n    /// @param receiver Address receiving the vault shares.\n    /// @return shares The number of shares issued to the receiver.\n    function depositWithPermit(\n        uint256 amount,\n        IPermit2.PermitSingle memory permitData,\n        bytes calldata signature,\n        address receiver\n    ) public nonReentrant returns (uint256 shares) {\n        // Permit the transfer of tokens to this contract\n        permitSystem.permit(msg.sender, permitData, signature);\n        // Deposit tokens and mint corresponding shares to the receiver\n        shares = deposit(amount, receiver);\n        return shares;\n    }\n\n    /// @notice Allows batch deposits using multiple permits for efficiency in transactions.\n    /// @param permitData Array of permit data for each deposit.\n    /// @param signatures Array of signatures corresponding to each permit data.\n    /// @param receiver Address receiving the vault shares for all deposits.\n    /// @return shares The total number of shares issued to the receiver for all deposits.\n    function depositWithBatchPermit(\n        IPermit2.PermitBatch[] memory permitData,\n        bytes[] calldata signatures,\n        address receiver\n    ) public nonReentrant returns (uint256 shares) {\n        uint256 totalAmount = 0;\n\n        for (uint256 i = 0; i < permitData.length; i++) {\n            // Validate each permit with corresponding signature\n            permitSystem.permit(msg.sender, permitData[i], signatures[i]);\n\n            // Sum up the amounts from each PermitDetails in the PermitBatch\n            for (uint256 j = 0; j < permitData[i].details.length; j++) {\n                totalAmount += permitData[i].details[j].amount;\n            }\n        }\n\n        // Deposit the total amount and mint shares to the receiver\n        shares = deposit(totalAmount, receiver);\n        return shares;\n    }\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20, IERC20Metadata, ERC20} from \"../ERC20.sol\";\nimport {SafeERC20} from \"../utils/SafeERC20.sol\";\nimport {IERC4626} from \"../../../interfaces/IERC4626.sol\";\nimport {Math} from \"../../../utils/math/Math.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n */\nabstract contract ERC4626 is ERC20, IERC4626 {\n    using Math for uint256;\n\n    IERC20 private immutable _asset;\n    uint8 private immutable _underlyingDecimals;\n\n    /**\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\n\n    /**\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\n\n    /**\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\n     */\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    constructor(IERC20 asset_) {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeCall(IERC20Metadata.decimals, ())\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\n        return _convertToShares(assets, Math.Rounding.Ceil);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\n        return _convertToAssets(shares, Math.Rounding.Floor);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\n        uint256 maxAssets = maxDeposit(receiver);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\n        }\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\n        uint256 maxShares = maxMint(receiver);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\n        }\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxAssets = maxWithdraw(owner);\n        if (assets > maxAssets) {\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\n        }\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\n        uint256 maxShares = maxRedeem(owner);\n        if (shares > maxShares) {\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\n        }\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n}\n"
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IEIP712} from \"./IEIP712.sol\";\n\n/// @title AllowanceTransfer\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n/// @dev Requires user's token approval on the Permit2 contract\ninterface IAllowanceTransfer is IEIP712 {\n    /// @notice Thrown when an allowance on a token has expired.\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\n    error AllowanceExpired(uint256 deadline);\n\n    /// @notice Thrown when an allowance on a token has been depleted.\n    /// @param amount The maximum amount allowed\n    error InsufficientAllowance(uint256 amount);\n\n    /// @notice Thrown when too many nonces are invalidated.\n    error ExcessiveInvalidation();\n\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\n    event NonceInvalidation(\n        address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\n    event Approval(\n        address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\n    event Permit(\n        address indexed owner,\n        address indexed token,\n        address indexed spender,\n        uint160 amount,\n        uint48 expiration,\n        uint48 nonce\n    );\n\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\n    event Lockdown(address indexed owner, address token, address spender);\n\n    /// @notice The permit data for a token\n    struct PermitDetails {\n        // ERC20 token address\n        address token;\n        // the maximum amount allowed to spend\n        uint160 amount;\n        // timestamp at which a spender's token allowances become invalid\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice The permit message signed for a single token allowance\n    struct PermitSingle {\n        // the permit data for a single token alownce\n        PermitDetails details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The permit message signed for multiple token allowances\n    struct PermitBatch {\n        // the permit data for multiple token allowances\n        PermitDetails[] details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The saved permissions\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    struct PackedAllowance {\n        // amount allowed\n        uint160 amount;\n        // permission expiry\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice A token spender pair.\n    struct TokenSpenderPair {\n        // the token the spender is approved\n        address token;\n        // the spender address\n        address spender;\n    }\n\n    /// @notice Details for a token transfer.\n    struct AllowanceTransferDetails {\n        // the owner of the token\n        address from;\n        // the recipient of the token\n        address to;\n        // the amount of the token\n        uint160 amount;\n        // the token to be transferred\n        address token;\n    }\n\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\n    function allowance(address user, address token, address spender)\n        external\n        view\n        returns (uint160 amount, uint48 expiration, uint48 nonce);\n\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\n    /// @param token The token to approve\n    /// @param spender The spender address to approve\n    /// @param amount The approved amount of the token\n    /// @param expiration The timestamp at which the approval is no longer valid\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\n\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\n\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\n\n    /// @notice Transfer approved tokens from one address to another\n    /// @param from The address to transfer from\n    /// @param to The address of the recipient\n    /// @param amount The amount of the token to transfer\n    /// @param token The token address to transfer\n    /// @dev Requires the from address to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(address from, address to, uint160 amount, address token) external;\n\n    /// @notice Transfer approved tokens in a batch\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n    /// @dev Requires the from addresses to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\n\n    /// @notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n    /// by batch revoking approvals\n    /// @param approvals Array of approvals to revoke.\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\n\n    /// @notice Invalidate nonces for a given (token, spender) pair\n    /// @param token The token to invalidate nonces for\n    /// @param spender The spender to invalidate nonces for\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\n}\n"
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IEIP712} from \"./IEIP712.sol\";\n\n/// @title SignatureTransfer\n/// @notice Handles ERC20 token transfers through signature based actions\n/// @dev Requires user's token approval on the Permit2 contract\ninterface ISignatureTransfer is IEIP712 {\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n    /// @param maxAmount The maximum amount a spender can request to transfer\n    error InvalidAmount(uint256 maxAmount);\n\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\n    error LengthMismatch();\n\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\n\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\n    struct TokenPermissions {\n        // ERC20 token address\n        address token;\n        // the maximum amount that can be spent\n        uint256 amount;\n    }\n\n    /// @notice The signed permit message for a single token transfer\n    struct PermitTransferFrom {\n        TokenPermissions permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice Specifies the recipient address and amount for batched transfers.\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\n    struct SignatureTransferDetails {\n        // recipient address\n        address to;\n        // spender requested amount\n        uint256 requestedAmount;\n    }\n\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\n    /// @dev Note that a user still signs over a spender address\n    struct PermitBatchTransferFrom {\n        // the tokens and corresponding amounts permitted for a transfer\n        TokenPermissions[] permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n    /// @dev It returns a uint256 bitmap\n    /// @dev The index, or wordPosition is capped at type(uint248).max\n    function nonceBitmap(address, uint256) external view returns (uint256);\n\n    /// @notice Transfers a token using a signed permit message\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers a token using a signed permit message\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\n    /// @dev The wordPos is maxed at type(uint248).max\n    /// @param wordPos A number to index the nonceBitmap at\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IEIP712 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\nimport {IERC20Metadata} from \"../token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n */\ninterface IERC4626 is IERC20, IERC20Metadata {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"IERC4626": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "assetTokenAddress",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxShares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "maxAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "totalManagedAssets",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"asset()": {
								"details": "Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"convertToAssets(uint256)": {
								"details": "Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"convertToShares(uint256)": {
								"details": "Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"deposit(uint256,address)": {
								"details": "Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"maxDeposit(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert."
							},
							"maxMint(address)": {
								"details": "Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert."
							},
							"maxRedeem(address)": {
								"details": "Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert."
							},
							"maxWithdraw(address)": {
								"details": "Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert."
							},
							"mint(uint256,address)": {
								"details": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"previewMint(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
							},
							"previewRedeem(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
							},
							"previewWithdraw(uint256)": {
								"details": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
							},
							"redeem(uint256,address,address)": {
								"details": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalAssets()": {
								"details": "Returns the total amount of the underlying asset that is “managed” by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"withdraw(uint256,address,address)": {
								"details": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assetTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"asset()\":{\"details\":\"Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing. - MUST be an ERC-20 token contract. - MUST NOT revert.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"convertToAssets(uint256)\":{\"details\":\"Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"details\":\"Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - MUST NOT be inclusive of any fees that are charged against assets in the Vault. - MUST NOT show any variations depending on the caller. - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - MUST NOT revert. NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"deposit(uint256,address)\":{\"details\":\"Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   deposit execution, and are accounted for during deposit. - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"maxDeposit(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - MUST return a limited value if receiver is subject to some deposit limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited. - MUST NOT revert.\"},\"maxMint(address)\":{\"details\":\"Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call. - MUST return a limited value if receiver is subject to some mint limit. - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted. - MUST NOT revert.\"},\"maxRedeem(address)\":{\"details\":\"Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock. - MUST NOT revert.\"},\"maxWithdraw(address)\":{\"details\":\"Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - MUST return a limited value if owner is subject to some withdrawal limit or timelock. - MUST NOT revert.\"},\"mint(uint256,address)\":{\"details\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - MUST emit the Deposit event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint   execution, and are accounted for during mint. - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not   approving enough underlying tokens to the Vault contract, etc). NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called   in the same transaction. - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the   deposit would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the   same transaction. - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint   would be accepted, regardless if the user has enough tokens approved, etc. - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the   same transaction. - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the   redemption would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"details\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if   called   in the same transaction. - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though   the withdrawal would be accepted, regardless if the user has enough shares, etc. - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - MUST NOT revert. NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256,address,address)\":{\"details\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   redeem execution, and are accounted for during redeem. - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalAssets()\":{\"details\":\"Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - SHOULD include any compounding that occurs from yield. - MUST be inclusive of any fees that are charged against assets in the Vault. - MUST NOT revert.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"withdraw(uint256,address,address)\":{\"details\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - MUST emit the Withdraw event. - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the   withdraw execution, and are accounted for during withdraw. - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner   not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":\"IERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 317,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 394,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 400,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 402,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 404,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 406,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ERC4626": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this contract and not the \"assets\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in https://eips.ethereum.org/EIPS/eip-4626[EIP-4626]. This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this contract and not the \\\"assets\\\" token which is an independent contract. [CAUTION] ==== In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by verifying the amount received is as expected, using a wrapper that performs these checks such as https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router]. Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()` corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more expensive than it is profitable. More details about the underlying math can be found xref:erc4626.adoc#inflation-attack[here]. The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets will cause the first user to exit to experience reduced losses in detriment to the last users that will experience bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the `_convertToShares` and `_convertToAssets` functions. To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide]. ====\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":\"ERC4626\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 394,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 400,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 402,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 404,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 406,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol:ERC4626",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220fda03608e229e02850301f4c2c009850b03abfa926112a536bf7c3a6bdcc9b5564736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220fda03608e229e02850301f4c2c009850b03abfa926112a536bf7c3a6bdcc9b5564736f6c63430008190033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT LOG0 CALLDATASIZE ADDMOD 0xE2 0x29 0xE0 0x28 POP ADDRESS 0x1F 0x4C 0x2C STOP SWAP9 POP 0xB0 GASPRICE 0xBF 0xA9 0x26 GT 0x2A MSTORE8 PUSH12 0xF7C3A6BDCC9B5564736F6C63 NUMBER STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220fda03608e229e02850301f4c2c009850b03abfa926112a536bf7c3a6bdcc9b5564736f6c63430008190033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT LOG0 CALLDATASIZE ADDMOD 0xE2 0x29 0xE0 0x28 POP ADDRESS 0x1F 0x4C 0x2C STOP SWAP9 POP 0xB0 GASPRICE 0xBF 0xA9 0x26 GT 0x2A MSTORE8 PUSH12 0xF7C3A6BDCC9B5564736F6C63 NUMBER STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "751:5018:8:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "library_deploy_address"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fda03608e229e02850301f4c2c009850b03abfa926112a536bf7c3a6bdcc9b5564736f6c63430008190033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IInterestModel.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/IPoolOrganizer.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaPool.sol",
								"contracts/contracts/protocol/TuliaVault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200ce62137b109283a8b90960c721fac6970552906a99aaa9da3e716f5387b4a2064736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200ce62137b109283a8b90960c721fac6970552906a99aaa9da3e716f5387b4a2064736f6c63430008190033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xE6 0x21 CALLDATACOPY 0xB1 MULMOD 0x28 GASPRICE DUP12 SWAP1 SWAP7 0xC PUSH19 0x1FAC6970552906A99AAA9DA3E716F5387B4A20 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212200ce62137b109283a8b90960c721fac6970552906a99aaa9da3e716f5387b4a2064736f6c63430008190033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xE6 0x21 CALLDATACOPY 0xB1 MULMOD 0x28 GASPRICE DUP12 SWAP1 SWAP7 0xC PUSH19 0x1FAC6970552906A99AAA9DA3E716F5387B4A20 PUSH5 0x736F6C6343 STOP ADDMOD NOT STOP CALLER ",
							"sourceMap": "195:6066:9:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ASSIGNIMMUTABLE",
									"source": 9,
									"value": "library_deploy_address"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200ce62137b109283a8b90960c721fac6970552906a99aaa9da3e716f5387b4a2064736f6c63430008190033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IInterestModel.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/IPoolOrganizer.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaPool.sol",
								"contracts/contracts/protocol/TuliaVault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202df0f932596acbaa7640bcae1414f2af56f8f8df43ccfb76a6a8651503a6103f64736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212202df0f932596acbaa7640bcae1414f2af56f8f8df43ccfb76a6a8651503a6103f64736f6c63430008190033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D CREATE 0xF9 ORIGIN MSIZE PUSH11 0xCBAA7640BCAE1414F2AF56 0xF8 0xF8 0xDF NUMBER 0xCC 0xFB PUSH23 0xA6A8651503A6103F64736F6C6343000819003300000000 ",
							"sourceMap": "203:14914:11:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212202df0f932596acbaa7640bcae1414f2af56f8f8df43ccfb76a6a8651503a6103f64736f6c63430008190033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2D CREATE 0xF9 ORIGIN MSIZE PUSH11 0xCBAA7640BCAE1414F2AF56 0xF8 0xF8 0xDF NUMBER 0xCC 0xFB PUSH23 0xA6A8651503A6103F64736F6C6343000819003300000000 ",
							"sourceMap": "203:14914:11:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "80"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CALLVALUE",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ASSIGNIMMUTABLE",
									"source": 11,
									"value": "library_deploy_address"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202df0f932596acbaa7640bcae1414f2af56f8f8df43ccfb76a6a8651503a6103f64736f6c63430008190033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IInterestModel.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/IPoolOrganizer.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaPool.sol",
								"contracts/contracts/protocol/TuliaVault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"IAllowanceTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "AllowanceExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExcessiveInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "Lockdown",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "oldNonce",
									"type": "uint48"
								}
							],
							"name": "NonceInvalidation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"name": "Permit",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								}
							],
							"name": "invalidateNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
									"name": "approvals",
									"type": "tuple[]"
								}
							],
							"name": "lockdown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch",
									"name": "permitBatch",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"params": {
										"deadline": "The timestamp at which the allowed amount is no longer valid"
									}
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"params": {
										"amount": "The maximum amount allowed"
									}
								}
							]
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"invalidateNonces(address,address,uint48)": {
								"details": "Can't invalidate more than 2**16 nonces per transaction.",
								"params": {
									"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
									"spender": "The spender to invalidate nonces for",
									"token": "The token to invalidate nonces for"
								}
							},
							"lockdown((address,address)[])": {
								"params": {
									"approvals": "Array of approvals to revoke."
								}
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitSingle": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitBatch": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"transferFrom((address,address,uint160,address)[])": {
								"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"amount": "The amount of the token to transfer",
									"from": "The address to transfer from",
									"to": "The address of the recipient",
									"token": "The token address to transfer"
								}
							}
						},
						"title": "AllowanceTransfer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address,address)": "927da105",
							"approve(address,address,uint160,uint48)": "87517c45",
							"invalidateNonces(address,address,uint48)": "65d9723c",
							"lockdown((address,address)[])": "cc53287f",
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "2b67b570",
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "2a2d80d1",
							"transferFrom((address,address,uint160,address)[])": "0d58b1db",
							"transferFrom(address,address,uint160,address)": "36c78516"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"title\":\"AllowanceTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":\"IAllowanceTransfer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has expired."
								}
							],
							"ExcessiveInvalidation()": [
								{
									"notice": "Thrown when too many nonces are invalidated."
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has been depleted."
								}
							]
						},
						"events": {
							"Approval(address,address,address,uint160,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
							},
							"Lockdown(address,address,address)": {
								"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
							},
							"NonceInvalidation(address,address,address,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
							},
							"Permit(address,address,address,uint160,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"invalidateNonces(address,address,uint48)": {
								"notice": "Invalidate nonces for a given (token, spender) pair"
							},
							"lockdown((address,address)[])": {
								"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
							},
							"transferFrom((address,address,uint160,address)[])": {
								"notice": "Transfer approved tokens in a batch"
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Transfer approved tokens from one address to another"
							}
						},
						"notice": "Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts",
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"IEIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IEIP712.sol\":\"IEIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IInterestModel.sol": {
				"IInterestModel": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "principal",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "rate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "time",
									"type": "uint256"
								}
							],
							"name": "calculateInterest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"calculateInterest(uint256,uint256,uint256)": {
								"details": "Calculates interest on a given principal over a period.",
								"params": {
									"principal": "The principal amount.",
									"rate": "The interest rate, in basis points for simple and compound, or additional adjustment for market-based.",
									"time": "The time period in seconds."
								},
								"returns": {
									"_0": "The amount of interest accrued."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"calculateInterest(uint256,uint256,uint256)": "05e1bd8c"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateInterest(uint256,uint256,uint256)\":{\"details\":\"Calculates interest on a given principal over a period.\",\"params\":{\"principal\":\"The principal amount.\",\"rate\":\"The interest rate, in basis points for simple and compound, or additional adjustment for market-based.\",\"time\":\"The time period in seconds.\"},\"returns\":{\"_0\":\"The amount of interest accrued.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IInterestModel.sol\":\"IInterestModel\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IInterestModel.sol\":{\"keccak256\":\"0x5468edc427e44105a5ad9aec77e3aa6e2ba18096773fb0621c1dbd9a56a6df28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8d660c45537d4991407716bdf27da05503917811afa3abee8bf4e603d74cc0e5\",\"dweb:/ipfs/QmRi7rWXavTz9mNRNvSHwYvcgBtHwrutZzT9eVqHJqKU25\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"IPermit2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "AllowanceExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExcessiveInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxAmount",
									"type": "uint256"
								}
							],
							"name": "InvalidAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "Lockdown",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "oldNonce",
									"type": "uint48"
								}
							],
							"name": "NonceInvalidation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"name": "Permit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "word",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "UnorderedNonceInvalidation",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								}
							],
							"name": "invalidateNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wordPos",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "invalidateUnorderedNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
									"name": "approvals",
									"type": "tuple[]"
								}
							],
							"name": "lockdown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nonceBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch",
									"name": "permitBatch",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Users must approve Permit2 before calling any of the transfer functions.",
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"params": {
										"deadline": "The timestamp at which the allowed amount is no longer valid"
									}
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"params": {
										"amount": "The maximum amount allowed"
									}
								}
							],
							"InvalidAmount(uint256)": [
								{
									"params": {
										"maxAmount": "The maximum amount a spender can request to transfer"
									}
								}
							],
							"LengthMismatch()": [
								{
									"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
								}
							]
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"invalidateNonces(address,address,uint48)": {
								"details": "Can't invalidate more than 2**16 nonces per transaction.",
								"params": {
									"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
									"spender": "The spender to invalidate nonces for",
									"token": "The token to invalidate nonces for"
								}
							},
							"invalidateUnorderedNonces(uint256,uint256)": {
								"details": "The wordPos is maxed at type(uint248).max",
								"params": {
									"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
									"wordPos": "A number to index the nonceBitmap at"
								}
							},
							"lockdown((address,address)[])": {
								"params": {
									"approvals": "Array of approvals to revoke."
								}
							},
							"nonceBitmap(address,uint256)": {
								"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitSingle": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitBatch": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"details": "Reverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token"
								}
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer"
								}
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"transferFrom((address,address,uint160,address)[])": {
								"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"amount": "The amount of the token to transfer",
									"from": "The address to transfer from",
									"to": "The address of the recipient",
									"token": "The token address to transfer"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address,address)": "927da105",
							"approve(address,address,uint160,uint48)": "87517c45",
							"invalidateNonces(address,address,uint48)": "65d9723c",
							"invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
							"lockdown((address,address)[])": "cc53287f",
							"nonceBitmap(address,uint256)": "4fe02b44",
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "2b67b570",
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "2a2d80d1",
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7",
							"transferFrom((address,address,uint160,address)[])": "0d58b1db",
							"transferFrom(address,address,uint160,address)": "36c78516"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Users must approve Permit2 before calling any of the transfer functions.\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}],\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"nonceBitmap(address,uint256)\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}],\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"},\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IPermit2.sol\":\"IPermit2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/IPermit2.sol\":{\"keccak256\":\"0xaa631cc9f53e699301d94233007110a345e6779011def484e8dd97b8fe0af771\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc0502cf19c9c18f320a3001201e89e350393b75837f6b7971de18b2de06f30d\",\"dweb:/ipfs/QmT9SfhdJ7VJNNrf94g4H5usyi7ShqWGx7Cqsz9jZTjX96\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has expired."
								}
							],
							"ExcessiveInvalidation()": [
								{
									"notice": "Thrown when too many nonces are invalidated."
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has been depleted."
								}
							],
							"InvalidAmount(uint256)": [
								{
									"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
								}
							]
						},
						"events": {
							"Approval(address,address,address,uint160,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
							},
							"Lockdown(address,address,address)": {
								"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
							},
							"NonceInvalidation(address,address,address,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
							},
							"Permit(address,address,address,uint160,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
							},
							"UnorderedNonceInvalidation(address,uint256,uint256)": {
								"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"invalidateNonces(address,address,uint48)": {
								"notice": "Invalidate nonces for a given (token, spender) pair"
							},
							"invalidateUnorderedNonces(uint256,uint256)": {
								"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
							},
							"lockdown((address,address)[])": {
								"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
							},
							"nonceBitmap(address,uint256)": {
								"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"notice": "Transfers a token using a signed permit message"
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit message"
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"transferFrom((address,address,uint160,address)[])": {
								"notice": "Transfer approved tokens in a batch"
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Transfer approved tokens from one address to another"
							}
						},
						"notice": "Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.",
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IPoolOrganizer.sol": {
				"IPoolOrganizer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "deregisterPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getPoolDetails",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "lender",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "borrower",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "creationTime",
											"type": "uint256"
										},
										{
											"internalType": "address",
											"name": "vault",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "loanToken",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "assetToken",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "loanAmount",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "interestRate",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "repaymentPeriod",
											"type": "uint256"
										},
										{
											"internalType": "enum IPoolOrganizer.PoolType",
											"name": "poolType",
											"type": "uint8"
										}
									],
									"internalType": "struct IPoolOrganizer.PoolDetails",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "lender",
									"type": "address"
								}
							],
							"name": "getPoolsByLender",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTotalPools",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								}
							],
							"name": "getVaultForPool",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "factoryAddress",
									"type": "address"
								}
							],
							"name": "grantFactoryAccess",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "pool",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "lender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "borrower",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "vault",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "loanToken",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "assetToken",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "loanAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "interestRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "repaymentPeriod",
									"type": "uint256"
								},
								{
									"internalType": "enum IPoolOrganizer.PoolType",
									"name": "poolType",
									"type": "uint8"
								}
							],
							"name": "registerPool",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deregisterPool(address)": "7e72c7d7",
							"getPoolDetails(address)": "d3e90fa0",
							"getPoolsByLender(address)": "24a44efb",
							"getTotalPools()": "d3ffe67a",
							"getVaultForPool(address)": "7570e389",
							"grantFactoryAccess(address)": "5d102df7",
							"registerPool(address,address,address,address,address,address,uint256,uint256,uint256,uint8)": "2437769a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"deregisterPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getPoolDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IPoolOrganizer.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"internalType\":\"struct IPoolOrganizer.PoolDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"getPoolsByLender\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"getVaultForPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"}],\"name\":\"grantFactoryAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"enum IPoolOrganizer.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"}],\"name\":\"registerPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IPoolOrganizer.sol\":\"IPoolOrganizer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IPoolOrganizer.sol\":{\"keccak256\":\"0x59ff86f25c1bc3bb33995bab912a576832e70686099fd8425804d1f158750404\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8a718c3608bc8e0e2a3fa6928886033a1bc389198861e6dd2dbe7b1fa5e0ef\",\"dweb:/ipfs/QmYRb22rqgYnZhaFJpHEMCys9QMGDyZzy66JSiAxFwjHJP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ISignatureTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxAmount",
									"type": "uint256"
								}
							],
							"name": "InvalidAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "word",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "UnorderedNonceInvalidation",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wordPos",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "invalidateUnorderedNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nonceBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"params": {
										"maxAmount": "The maximum amount a spender can request to transfer"
									}
								}
							],
							"LengthMismatch()": [
								{
									"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
								}
							]
						},
						"kind": "dev",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"details": "The wordPos is maxed at type(uint248).max",
								"params": {
									"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
									"wordPos": "A number to index the nonceBitmap at"
								}
							},
							"nonceBitmap(address,uint256)": {
								"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"details": "Reverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token"
								}
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer"
								}
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							}
						},
						"title": "SignatureTransfer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
							"nonceBitmap(address,uint256)": "4fe02b44",
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}]},\"kind\":\"dev\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"nonceBitmap(address,uint256)\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}}},\"title\":\"SignatureTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}]},\"events\":{\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"}},\"notice\":\"Handles ERC20 token transfers through signature based actions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/ISignatureTransfer.sol\":\"ISignatureTransfer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
								}
							]
						},
						"events": {
							"UnorderedNonceInvalidation(address,uint256,uint256)": {
								"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
							}
						},
						"kind": "user",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
							},
							"nonceBitmap(address,uint256)": {
								"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"notice": "Transfers a token using a signed permit message"
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit message"
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							}
						},
						"notice": "Handles ERC20 token transfers through signature based actions",
						"version": 1
					}
				}
			},
			"contracts/contracts/protocol/TuliaPool.sol": {
				"TuliaPool": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "lender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "loanTokenAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "repaymentTokenAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "collateralVaultAddress",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "loanAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "interestRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "repaymentPeriod",
									"type": "uint256"
								},
								{
									"internalType": "contract IInterestModel",
									"name": "interestModel",
									"type": "address"
								},
								{
									"internalType": "contract IPermit2",
									"name": "_permit2",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "poolOrganizerAddress",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "borrower",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "collateralAmount",
									"type": "uint256"
								}
							],
							"name": "LoanActivated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "LoanClosed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "loanAmount",
									"type": "uint256"
								}
							],
							"name": "LoanFunded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "lender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "loanAmount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "loanToken",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "repaymentToken",
									"type": "address"
								}
							],
							"name": "LoanOfferCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountRepaid",
									"type": "uint256"
								}
							],
							"name": "RepaymentMade",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "borrower",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "collateralAmount",
									"type": "uint256"
								}
							],
							"name": "activateLoan",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "calculateInterest",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "calculateRequiredCollateral",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "fundLoan",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								}
							],
							"name": "getCollateralAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getFundedBlock",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getLoanAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getLoanState",
							"outputs": [
								{
									"internalType": "enum TuliaPool.LoanState",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "loanDetails",
							"outputs": [
								{
									"internalType": "address",
									"name": "lender",
									"type": "address"
								},
								{
									"internalType": "contract IERC20",
									"name": "loanToken",
									"type": "address"
								},
								{
									"internalType": "contract IERC20",
									"name": "repaymentToken",
									"type": "address"
								},
								{
									"internalType": "contract TuliaVault",
									"name": "collateralVault",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "loanAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "interestRate",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "repaymentPeriod",
									"type": "uint256"
								},
								{
									"internalType": "contract IInterestModel",
									"name": "interestModel",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "borrower",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "startBlock",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "fundedBlock",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "permit2",
							"outputs": [
								{
									"internalType": "contract IPermit2",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "poolOrganizer",
							"outputs": [
								{
									"internalType": "contract IPoolOrganizer",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "repay",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "state",
							"outputs": [
								{
									"internalType": "enum TuliaPool.LoanState",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Manages the lifecycle of loans including creation, funding, repayment, and defaults.",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"params": {
									"_permit2": "The Permit2 contract for ERC20 token operations",
									"collateralVaultAddress": "The address of the vault where collateral will be stored",
									"interestModel": "The contract that calculates interest",
									"interestRate": "The interest rate",
									"lender": "The address of the lender",
									"loanAmount": "The amount of the loan",
									"loanTokenAddress": "The address of the token to be loaned",
									"poolOrganizerAddress": "The Pool Organizer contract for managing pool registrations",
									"repaymentPeriod": "The duration over which the loan must be repaid",
									"repaymentTokenAddress": "The token address in which repayments are to be made"
								}
							}
						},
						"title": "TuliaPool",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0x80\n  jumpi(tag_14, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_25\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x0140\n  swap5\n  0x40\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_14\n  jumpi\n  tag_8\n  dup2\n  tag_1\n  jump\t// in\ntag_8:\n  tag_9\n  0x20\n  dup4\n  add\n  tag_1\n  jump\t// in\ntag_9:\n  swap2\n  tag_10\n  0x40\n  dup3\n  add\n  tag_1\n  jump\t// in\ntag_10:\n  swap2\n  tag_11\n  0x60\n  dup4\n  add\n  tag_1\n  jump\t// in\ntag_11:\n  swap3\n  0x80\n  dup4\n  add\n  mload\n  swap5\n  0xa0\n  dup5\n  add\n  mload\n  swap4\n  0xc0\n  dup2\n  add\n  mload\n  swap1\n  0xe0\n  dup2\n  add\n  mload\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup2\n  and\n  dup2\n  sub\n  tag_14\n  jumpi\n  0x0100\n  dup3\n  add\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  dup2\n  and\n  swap3\n  swap1\n  dup4\n  swap1\n  sub\n  tag_14\n  jumpi\n  0x0120\n  tag_16\n  swap2\n  add\n  tag_1\n  jump\t// in\ntag_16:\n  sstore(0x00, 0x01)\n  swap2\n  sub(shl(0xa0, 0x01), 0x01)\n  dup8\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2557  lender != address(0) */\n  iszero\n  iszero\n  dup1\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2591  lender != address(0) && loanTokenAddress != address(0) */\n  tag_17\n  jumpi\ntag_18:\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2631  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) */\n  dup1\n  tag_19\n  jumpi\ntag_20:\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2670  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) && repaymentTokenAddress != address(0) */\n  dup1\n  tag_21\n  jumpi\ntag_22:\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  iszero\n  tag_23\n  jumpi\n  0x01\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  swap2\n  swap1\n  swap2\n  or\n  swap1\n  sstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2736:2788  poolOrganizer = IPoolOrganizer(poolOrganizerAddress) */\n  0x02\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  sload\n  mload(0x40)\n  swap8\n  swap1\n  swap4\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  0x0160\n  dup11\n  add\n  swap1\n  dup2\n  gt\n  swap1\n  dup11\n  gt\n  or\n  tag_25\n  jumpi\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":3353:3430  LoanOfferCreated(lender, loanAmount, loanTokenAddress, repaymentTokenAddress) */\n  0x3d48195705780f5c10a0d217f778f0f6d562cb1a6a699da31c0d6d756aacedfc\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  swap10\n  0x00\n  0x0140\n  dup12\n  dup15\n  0x0160\n  0x60\n  swap15\n  add\n  0x40\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup14\n  and\n  dup3\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup12\n  and\n  0x20\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup4\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup13\n  and\n  0x40\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup4\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup6\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup15\n  dup4\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n  0x80\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup5\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0xa0\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup6\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0xc0\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup8\n  and\n  0xe0\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0x0100\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":3249:3264  block.timestamp */\n  timestamp\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0x0120\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  dup3\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2812:3303  LoanDetails({... */\n  add\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup10\n  and\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2798:3303  loanDetails = LoanDetails({... */\n  0x03\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  sload\n  and\n  or\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2798:3303  loanDetails = LoanDetails({... */\n  0x03\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  sstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup8\n  and\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  sload(0x04)\n  and\n  or\n  0x04\n  sstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  dup9\n  and\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  sload(0x05)\n  and\n  or\n  0x05\n  sstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  sload(0x06)\n  and\n  or\n  0x06\n  sstore\n  dup11\n  0x07\n  sstore\n  0x08\n  sstore\n  0x09\n  sstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  sload(0x0a)\n  and\n  or\n  0x0a\n  sstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  sload(0x0b)\n  and\n  0x0b\n  sstore\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":3249:3264  block.timestamp */\n  timestamp\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  0x0c\n  sstore\n  sstore(0x0d, 0x00)\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n  swap1\n  0x01\n  dup1\n  0xa8\n  shl\n  sub\n  not\n  and\n  or\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2736:2788  poolOrganizer = IPoolOrganizer(poolOrganizerAddress) */\n  0x02\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  sstore\n  mload(0x40)\n  swap6\n  dup7\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n  0x20\n  dup7\n  add\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n  0x40\n  dup6\n  add\n  mstore\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":3353:3430  LoanOfferCreated(lender, loanAmount, loanTokenAddress, repaymentTokenAddress) */\n  swap3\n  log2\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_25:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\ntag_23:\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n  0x20\n  0x04\n  dup3\n  add\n  mstore\n  0x17\n  0x24\n  dup3\n  add\n  mstore\n  0x496e76616c696420696e70757420616464726573736573000000000000000000\n  0x44\n  dup3\n  add\n  mstore\n  0x64\n  swap1\n  revert\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2670  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) && repaymentTokenAddress != address(0) */\ntag_21:\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  dup7\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2635:2670  repaymentTokenAddress != address(0) */\n  iszero\n  iszero\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2670  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) && repaymentTokenAddress != address(0) */\n  jump(tag_22)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2631  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) */\ntag_19:\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  dup10\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2595:2631  collateralVaultAddress != address(0) */\n  iszero\n  iszero\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2631  lender != address(0) && loanTokenAddress != address(0) && collateralVaultAddress != address(0) */\n  jump(tag_20)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2591  lender != address(0) && loanTokenAddress != address(0) */\ntag_17:\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n  dup6\n  and\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2561:2591  loanTokenAddress != address(0) */\n  iszero\n  iszero\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":2537:2591  lender != address(0) && loanTokenAddress != address(0) */\n  jump(tag_18)\n    /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\ntag_14:\n  0x00\n  dup1\n  revert\ntag_1:\n  mload\n  swap1\n  sub(shl(0xa0, 0x01), 0x01)\n  dup3\n  and\n  dup3\n  sub\n  tag_14\n  jumpi\n  jump\t// out\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x80\n      0x40\n      dup2\n      dup2\n      mstore\n      0x04\n      swap2\n      dup3\n      calldatasize\n      lt\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      0x00\n      swap3\n      shr(0xe0, calldataload(0x00))\n      swap2\n      dup3\n      0x12261ee7\n      eq\n      tag_11\n      jumpi\n      pop\n      dup2\n      0x2e1283e3\n      eq\n      tag_13\n      jumpi\n      dup2\n      0x371fd8e6\n      eq\n      tag_15\n      jumpi\n      dup2\n      0x654c6295\n      eq\n      tag_17\n      jumpi\n      dup2\n      0x6b6d1955\n      eq\n      tag_19\n      jumpi\n      dup2\n      0x8db57994\n      eq\n      tag_21\n      jumpi\n      dup2\n      0x95cb741d\n      eq\n      tag_23\n      jumpi\n      dup2\n      0x9e9f669c\n      eq\n      tag_27\n      jumpi\n      dup2\n      0xc19d93fb\n      eq\n      tag_27\n      jumpi\n      dup2\n      0xc51b9507\n      eq\n      tag_29\n      jumpi\n      dup2\n      0xeb0c4955\n      eq\n      tag_31\n      jumpi\n      dup2\n      0xf30f29dd\n      eq\n      tag_33\n      jumpi\n      pop\n      0xf4b01b18\n      eq\n      tag_35\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_35:\n      jumpi(tag_39, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_39\n      jumpi\n      0x20\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5740:5762  loanDetails.loanAmount */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_39:\n      pop\n      dup1\n      revert\n    tag_33:\n      swap1\n      pop\n      jumpi(tag_43, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_43\n      jumpi\n      tag_45\n      tag_1\n      jump\t// in\n    tag_45:\n      swap2\n      0x24\n      dup1\n      calldataload\n      swap3\n      0xff\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3536:3541  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n      0x05\n      dup2\n      lt\n      iszero\n      tag_46\n      jumpi\n      tag_48\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n      swap5\n      dup6\n      and\n      swap5\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3612:3634  borrower != address(0) */\n      dup6\n      iszero\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      tag_50\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5432:5476  loanDetails.loanAmount + interestForFullTerm */\n      tag_52\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5396:5415  calculateInterest() */\n      tag_53\n      tag_5\n      jump\t// in\n    tag_53:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5432:5454  loanDetails.loanAmount */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5432:5476  loanDetails.loanAmount + interestForFullTerm */\n      tag_3\n      jump\t// in\n    tag_52:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3749:3787  collateralAmount >= requiredCollateral */\n      dup6\n      lt\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      tag_54\n      jumpi\n      0x44\n      0x20\n      swap3\n      dup9\n      dup8\n      swap4\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3853  loanDetails.collateralVault */\n      0x06\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      dup10\n      dup9\n      mload\n      swap8\n      dup9\n      swap7\n      dup8\n      swap6\n      shl(0xe0, 0x6e553f65)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n      dup8\n      mstore\n      dup7\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n      dup5\n      add\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n      gas\n      call\n      dup1\n      iszero\n      tag_56\n      jumpi\n      tag_58\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_59:\n      pop\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3899:3919  loanDetails.borrower */\n      0x0b\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      dup5\n      or\n      swap1\n      sstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3536:3541  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      shl(0xa0, 0x01)\n      or\n      swap1\n      sstore\n      mload\n      swap1\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3980:4021  LoanActivated(borrower, collateralAmount) */\n      0x5150ab7694a22fbc01c642bc10316565247df962fa3f0ac3b5d1a18ba45b485b\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x20\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3980:4021  LoanActivated(borrower, collateralAmount) */\n      log2\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      return\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n    tag_58:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n      swap1\n      dup2\n      returndatasize\n      dup4\n      gt\n      tag_60\n      jumpi\n    tag_61:\n      tag_62\n      dup2\n      dup4\n      tag_4\n      jump\t// in\n    tag_62:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sub\n      slt\n      tag_63\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n      0x00\n      jump(tag_59)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_63:\n      0x00\n      dup1\n      revert\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":3826:3889  loanDetails.collateralVault.deposit(collateralAmount, borrower) */\n    tag_60:\n      pop\n      returndatasize\n      jump(tag_61)\n    tag_56:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup3\n      mload\n      returndatasize\n      dup8\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_54:\n      pop\n      0x17\n      0x64\n      swap3\n      0x20\n      dup6\n      mload\n      swap4\n      shl(0xe5, 0x461bcd)\n      dup6\n      mstore\n      dup5\n      add\n      mstore\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420636f6c6c61746572616c000000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_50:\n      pop\n      0x18\n      0x64\n      swap3\n      0x20\n      dup6\n      mload\n      swap4\n      shl(0xe5, 0x461bcd)\n      dup6\n      mstore\n      dup5\n      add\n      mstore\n      dup3\n      add\n      mstore\n      0x496e76616c696420626f72726f77657220616464726573730000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_48:\n      0x1b\n      0x64\n      swap3\n      0x20\n      dup6\n      mload\n      swap4\n      shl(0xe5, 0x461bcd)\n      dup6\n      mstore\n      dup5\n      add\n      mstore\n      dup3\n      add\n      mstore\n      0x4c6f616e206e6f7420696e20637265617461626c652073746174650000000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_46:\n      pop\n      shl(0xe0, 0x4e487b71)\n      dup7\n      mstore\n      0x21\n      swap1\n      mstore\n      dup5\n      revert\n    tag_43:\n      dup3\n      dup1\n      revert\n    tag_31:\n      pop\n      pop\n      jumpi(tag_39, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_39\n      jumpi\n      0x20\n      swap1\n      tag_69\n      tag_5\n      jump\t// in\n    tag_69:\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_29:\n      pop\n      pop\n      jumpi(tag_39, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_39\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":615:650  IPoolOrganizer public poolOrganizer */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_27:\n      pop\n      pop\n      jumpi(tag_39, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_39\n      jumpi\n      tag_78\n      swap1\n      0xff\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1086:1108  LoanState public state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n      swap1\n      mload\n      swap2\n      dup3\n      swap2\n      dup3\n      tag_2\n      jump\t// in\n    tag_78:\n      sub\n      swap1\n      return\n    tag_23:\n      swap2\n      swap1\n      pop\n      jumpi(tag_43, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_43\n      jumpi\n      0x0160\n      swap3\n      pop\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      dup2\n      dup1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      swap4\n      sload\n      and\n      swap2\n      dup1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      swap1\n      dup1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x06\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x08\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x09\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap3\n      dup5\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x0a\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      swap5\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x0b\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      swap6\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x0c\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap8\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":1115:1145  LoanDetails public loanDetails */\n      0x0d\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap10\n      dup2\n      mload\n      swap12\n      dup13\n      mstore\n      0x20\n      dup13\n      add\n      mstore\n      dup11\n      add\n      mstore\n      0x60\n      dup10\n      add\n      mstore\n      0x80\n      dup9\n      add\n      mstore\n      0xa0\n      dup8\n      add\n      mstore\n      0xc0\n      dup7\n      add\n      mstore\n      0xe0\n      dup6\n      add\n      mstore\n      0x0100\n      dup5\n      add\n      mstore\n      0x0120\n      dup4\n      add\n      mstore\n      0x0140\n      dup3\n      add\n      mstore\n      return\n    tag_21:\n      swap1\n      pop\n      jumpi(tag_43, callvalue)\n      dup3\n      add(calldatasize, not(0x03))\n      slt\n      tag_43\n      jumpi\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_92\n      tag_6\n      jump\t// in\n    tag_92:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0xff\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4094:4099  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n      0x05\n      dup2\n      lt\n      iszero\n      tag_93\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4103:4120  LoanState.PENDING */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4094:4120  state == LoanState.PENDING */\n      sub\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      tag_95\n      jumpi\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4164:4175  loanDetails */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4238:4260  loanDetails.loanAmount */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4361:4395  LoanFunded(loanDetails.loanAmount) */\n      0x9e71d2fb732e68272b7e74ecfd14638673c1d77e19a5d390a3ffff054d57c44b\n      swap4\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x20\n      swap4\n      swap1\n      swap3\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4238:4260  loanDetails.loanAmount */\n      tag_97\n      swap3\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap2\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4231:4235  this */\n      address\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap1\n      dup2\n      and\n      swap2\n      and\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4238:4260  loanDetails.loanAmount */\n      tag_7\n      jump\t// in\n    tag_97:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4297:4312  block.timestamp */\n      timestamp\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4271:4294  loanDetails.fundedBlock */\n      0x0d\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4094:4099  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      and\n      shl(0xa1, 0x01)\n      or\n      swap1\n      sstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4238:4260  loanDetails.loanAmount */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4361:4395  LoanFunded(loanDetails.loanAmount) */\n      log1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4103:4120  LoanState.PENDING */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup2\n      sstore\n      dup1\n      return\n    tag_95:\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x4c6f616e206d75737420626520696e2070656e64696e67207374617465000000\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_93:\n      shl(0xe0, 0x4e487b71)\n      dup5\n      mstore\n      0x21\n      dup3\n      mstore\n      0x24\n      dup5\n      revert\n    tag_19:\n      pop\n      pop\n      jumpi(tag_39, callvalue)\n      dup2\n      add(calldatasize, not(0x03))\n      slt\n      tag_39\n      jumpi\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5396:5415  calculateInterest() */\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5432:5476  loanDetails.loanAmount + interestForFullTerm */\n      tag_69\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5396:5415  calculateInterest() */\n      tag_53\n      tag_5\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_17:\n      dup4\n      dup4\n      jumpi(tag_39, callvalue)\n      0x20\n      swap3\n      dup4\n      add(calldatasize, not(0x03))\n      slt\n      tag_43\n      jumpi\n      dup4\n      tag_108\n      tag_1\n      jump\t// in\n    tag_108:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5880  loanDetails.collateralVault */\n      0x06\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      dup5\n      mload\n      shl(0xe0, 0x70a08231)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5896  loanDetails.collateralVault.balanceOf(user) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap3\n      dup4\n      and\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5896  loanDetails.collateralVault.balanceOf(user) */\n      swap5\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap5\n      swap1\n      swap5\n      mstore\n      dup4\n      swap2\n      0x24\n      swap2\n      dup4\n      swap2\n      and\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5896  loanDetails.collateralVault.balanceOf(user) */\n      gas\n      staticcall\n      swap3\n      dup4\n      iszero\n      tag_109\n      jumpi\n      swap3\n      tag_111\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_112:\n      pop\n      mload\n      swap1\n      dup2\n      mstore\n      return\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5896  loanDetails.collateralVault.balanceOf(user) */\n    tag_111:\n      swap1\n      swap2\n      pop\n      dup3\n      dup2\n      dup2\n      returndatasize\n      dup4\n      gt\n      tag_113\n      jumpi\n    tag_114:\n      tag_115\n      dup2\n      dup4\n      tag_4\n      jump\t// in\n    tag_115:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sub\n      slt\n      tag_63\n      jumpi\n      mload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5853:5896  loanDetails.collateralVault.balanceOf(user) */\n      swap1\n      dup4\n      jump(tag_112)\n    tag_113:\n      pop\n      returndatasize\n      jump(tag_114)\n    tag_109:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup3\n      mload\n      swap1\n      returndatasize\n      swap1\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_15:\n      swap2\n      swap1\n      pop\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x20))\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_122\n      tag_6\n      jump\t// in\n    tag_122:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0xff\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4479:4484  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      0xa0\n      shr\n      and\n      0x05\n      dup2\n      lt\n      iszero\n      tag_123\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4479:4484  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4479:4504  state == LoanState.ACTIVE */\n      sub\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      tag_125\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4563:4607  loanDetails.loanAmount + calculateInterest() */\n      tag_127\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4563:4585  loanDetails.loanAmount */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4588:4607  calculateInterest() */\n      tag_128\n      tag_5\n      jump\t// in\n    tag_128:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4563:4607  loanDetails.loanAmount + calculateInterest() */\n      swap1\n      tag_3\n      jump\t// in\n    tag_127:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap2\n      dup3\n      dup2\n      calldataload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4625:4649  amount >= totalRepayment */\n      lt\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      tag_129\n      jumpi\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4774:4788  totalRepayment */\n      tag_131\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup5\n      dup3\n      sload(0x05)\n      and\n      dup4\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4563:4574  loanDetails */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4742:4752  msg.sender */\n      swap1\n      caller\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4774:4788  totalRepayment */\n      swap1\n      tag_7\n      jump\t// in\n    tag_131:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4479:4484  state */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      sload\n      not(shl(0xa0, 0xff))\n      dup2\n      and\n      shl(0xa0, 0x03)\n      or\n      swap1\n      swap2\n      sstore\n      and\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n      dup2\n      extcodesize\n      iszero\n      tag_63\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x00\n      dup1\n      swap3\n      0x24\n      dup6\n      mload\n      dup1\n      swap6\n      dup2\n      swap4\n      shl(0xe0, 0x7e72c7d7)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n      dup4\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4980:4984  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n      dup8\n      dup5\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n      gas\n      call\n      dup1\n      iszero\n      tag_134\n      jumpi\n      tag_136\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_137:\n      dup5\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4826:4855  RepaymentMade(totalRepayment) */\n      0x4002dba848920f438092e08090cfb5fc47144c22704268b402c9553a1b5adfe6\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x20\n      dup7\n      dup7\n      mload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5001:5013  LoanClosed() */\n      swap1\n      0x409fced1b85ae32a29fb1e18894d8361a5f2653dc27adf7102d86175c2901d7c\n      dup6\n      dup1\n      log1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4826:4855  RepaymentMade(totalRepayment) */\n      log1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x01\n      dup2\n      sstore\n      dup1\n      return\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n    tag_136:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap1\n      swap2\n      swap4\n      pop\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_138\n      jumpi\n      pop\n      dup3\n      mstore\n      0x00\n      swap2\n      dup2\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n      jump(tag_137)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_138:\n      0x41\n      swap1\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore\n      revert(0x00, 0x24)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":4943:4986  poolOrganizer.deregisterPool(address(this)) */\n    tag_134:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup4\n      mload\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_129:\n      0x20\n      0x84\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x21\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420616d6f756e7420666f722072657061796d656e\n      0x44\n      dup3\n      add\n      mstore\n      shl(0xfa, 0x1d)\n      0x64\n      dup3\n      add\n      mstore\n      revert\n    tag_125:\n      swap1\n      0x20\n      0x64\n      swap3\n      mload\n      swap2\n      shl(0xe5, 0x461bcd)\n      dup4\n      mstore\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x68, 0x4c6f616e206d75737420626520616374697665)\n      0x44\n      dup3\n      add\n      mstore\n      revert\n    tag_123:\n      0x21\n      dup4\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore\n      revert(0x00, 0x24)\n    tag_13:\n      dup3\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5562:5585  loanDetails.fundedBlock */\n      0x0d\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_11:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x01))\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_1:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_63\n      jumpi\n      jump\t// out\n    tag_2:\n      swap2\n      swap1\n      0x20\n      dup4\n      add\n      swap3\n      0x05\n      dup3\n      lt\n      iszero\n      tag_150\n      jumpi\n      mstore\n      jump\t// out\n    tag_150:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_3:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_152\n      jumpi\n      jump\t// out\n    tag_152:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_4:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_154\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_154:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5026:5281  function calculateInterest() public view returns (uint256) {... */\n    tag_5:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5132:5154  loanDetails.startBlock */\n      0x0c\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5114:5129  block.timestamp */\n      timestamp\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sub\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5114:5129  block.timestamp */\n      timestamp\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup2\n      gt\n      tag_152\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5196  loanDetails.interestModel */\n      0x0a\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      and\n      0x64\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5196  loanDetails.interestModel */\n      0x07\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5239:5263  loanDetails.interestRate */\n      0x08\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n      swap3\n      mload(0x40)\n      swap6\n      dup7\n      swap5\n      dup6\n      swap4\n      shl(0xe2, 0x01786f63)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n      dup6\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5215:5237  loanDetails.loanAmount */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n      dup6\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n      0x24\n      dup5\n      add\n      mstore\n      0x44\n      dup4\n      add\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_158\n      jumpi\n      0x00\n      swap2\n      tag_160\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5164:5274  return loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n      pop\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5026:5281  function calculateInterest() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n    tag_160:\n      swap1\n      pop\n      0x20\n      dup2\n      jumpi(tag_162, gt(0x20, returndatasize))\n    tag_163:\n      dup2\n      tag_164\n      0x20\n      swap4\n      dup4\n      tag_4\n      jump\t// in\n    tag_164:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sub\n      slt\n      tag_63\n      jumpi\n      mload\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5026:5281  function calculateInterest() public view returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":5171:5274  loanDetails.interestModel.calculateInterest(loanDetails.loanAmount, loanDetails.interestRate, duration) */\n    tag_162:\n      returndatasize\n      swap2\n      pop\n      jump(tag_163)\n    tag_158:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_6:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_167\n      jumpi\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_167:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_7:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup3\n      add\n      swap1\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap4\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup4\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n      swap4\n      dup4\n      and\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup1\n      dup3\n      add\n      swap6\n      swap1\n      swap6\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap4\n      dup5\n      mstore\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0xffffffffffffffff\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      swap1\n      swap2\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      0xa0\n      dup6\n      add\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup5\n      dup4\n      gt\n      dup7\n      dup5\n      lt\n      or\n      tag_154\n      jumpi\n      0x00\n      swap4\n      dup5\n      swap4\n      0x40\n      mstore\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      swap5\n      mload\n      swap1\n      dup3\n      dup7\n      gas\n      call\n      swap1\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      jumpi(tag_171, iszero(returndatasize))\n      returndatasize\n      swap1\n      dup2\n      gt\n      tag_154\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_175\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap2\n      mload(0x40)\n      swap2\n      tag_176\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      not(0x1f)\n      0x1f\n      dup5\n      add\n      and\n      add\n      dup5\n      tag_4\n      jump\t// in\n    tag_176:\n      dup3\n      mstore\n      returndatasize\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup5\n      add\n      returndatacopy\n    tag_177:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      dup4\n      tag_8\n      jump\t// in\n    tag_175:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      swap1\n      dup2\n      iszero\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      swap2\n      dup3\n      tag_178\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_179:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      pop\n      pop\n      tag_180\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1702:1890  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_180:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap1\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      swap1\n      shl(0xe0, 0x5274afe7)\n      dup3\n      mstore\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_178:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup2\n      swap3\n      pop\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      swap2\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      sub\n      slt\n      tag_63\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload\n      dup1\n      iszero\n      swap1\n      dup2\n      iszero\n      sub\n      tag_63\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      0x00\n      dup1\n      jump(tag_179)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n    tag_171:\n      pop\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_175\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap1\n      0x60\n      swap1\n      jump(tag_177)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_8:\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4797:4805  !success */\n      tag_186\n      jumpi\n      pop\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6046:6188  assembly {... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_188:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_186:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      tag_190\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_191:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      tag_192\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      pop\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_192:\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x9996b315)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaPool.sol\":509:5942  contract TuliaPool is ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_190:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      pop\n      dup1\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      jump(tag_191)\n\n    auxdata: 0xa26469706673582212203d1e43bc6e9f3be7edce4c664a25e6a3faad2f65bf82a01f8696f3b47a83edc964736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_address_fromMemory": {
									"entryPoint": 812,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60803461032857601f610dee38819003918201601f19168301916001600160401b038311848410176102995780849261014094604052833981010312610328576100488161032c565b6100546020830161032c565b916100616040820161032c565b9161006e6060830161032c565b9260808301519460a08401519360c08101519060e081015160018060a01b0381168103610328576101008201516001600160a01b0381169290839003610328576101206100bb910161032c565b60015f55916001600160a01b038716151580610316575b80610304575b806102f2575b156102ad57600180546001600160a01b031916919091179055600254604051979093906001600160401b036101608a01908111908a1117610299577f3d48195705780f5c10a0d217f778f0f6d562cb1a6a699da31c0d6d756aacedfc995f6101408b8e61016060609e0160405260018060a01b038d16825260018060a01b038b16602083015260018060a01b038c16604083015260018060a01b0385168e83015260808201528460a08201528560c082015260018060a01b03871660e08201528261010082015242610120820152015260018060a01b03891660018060a01b0319600354161760035560018060a01b03871660018060a01b0319600454161760045560018060a01b03881660018060a01b0319600554161760055560018060a01b031660018060a01b031960065416176006558a60075560085560095560018060a01b031660018060a01b0319600a541617600a5560018060a01b0319600b5416600b5542600c555f600d5560018060a01b03169060018060a81b0319161760025560405195865260018060a01b0316602086015260018060a01b0316604085015260018060a01b031692a2604051610aad90816103418239f35b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152601760248201527f496e76616c696420696e707574206164647265737365730000000000000000006044820152606490fd5b506001600160a01b03861615156100de565b506001600160a01b03891615156100d8565b506001600160a01b03851615156100d2565b5f80fd5b51906001600160a01b03821682036103285756fe6080604081815260049182361015610015575f80fd5b5f925f3560e01c91826312261ee71461077d575081632e1283e31461075f578163371fd8e614610580578163654c6295146104e95781636b6d1955146104c95781638db57994146103d357816395cb741d146103465781639e9f669c14610318578163c19d93fb14610318578163c51b9507146102ef578163eb0c4955146102cb578163f30f29dd146100d2575063f4b01b18146100b1575f80fd5b346100ce57816003193601126100ce576020906007549051908152f35b5080fd5b9050346102c757816003193601126102c7576100ec6107a0565b91602480359260ff60025460a01c1660058110156102b557610274576001600160a01b039485169485156102325761012d610125610834565b6007546107dd565b85106101f0576044602092888793600654168988519788968795636e553f6560e01b87528601528401525af180156101e6576101b7575b50600b80546001600160a01b031916841790556002805460ff60a01b1916600160a01b179055519081527f5150ab7694a22fbc01c642bc10316565247df962fa3f0ac3b5d1a18ba45b485b90602090a280f35b602090813d83116101df575b6101cd81836107fe565b810103126101db575f610164565b5f80fd5b503d6101c3565b82513d87823e3d90fd5b506017606492602085519362461bcd60e51b85528401528201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b506018606492602085519362461bcd60e51b85528401528201527f496e76616c696420626f72726f776572206164647265737300000000000000006044820152fd5b601b606492602085519362461bcd60e51b85528401528201527f4c6f616e206e6f7420696e20637265617461626c6520737461746500000000006044820152fd5b50634e487b7160e01b86526021905284fd5b8280fd5b5050346100ce57816003193601126100ce576020906102e8610834565b9051908152f35b5050346100ce57816003193601126100ce5760025490516001600160a01b039091168152602090f35b5050346100ce57816003193601126100ce576103429060ff60025460a01c169051918291826107b6565b0390f35b919050346102c757826003193601126102c757610160925060018060a01b0390818060035416935416918060055416908060065416600754600854906009549284600a541694600b541695600c5497600d549981519b8c5260208c01528a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152f35b9050346102c757826003193601126102c7576103ed6108c4565b60ff60025460a01c1660058110156104b65760010361047457546003546007547f9e71d2fb732e68272b7e74ecfd14638673c1d77e19a5d390a3ffff054d57c44b93602093909261044d929130916001600160a01b039081169116610918565b42600d556002805460ff60a01b1916600160a11b1790556007549051908152a16001815580f35b6020606492519162461bcd60e51b8352820152601d60248201527f4c6f616e206d75737420626520696e2070656e64696e672073746174650000006044820152fd5b634e487b7160e01b845260218252602484fd5b5050346100ce57816003193601126100ce576020906102e8610125610834565b8383346100ce57602092836003193601126102c757836105076107a0565b60065484516370a0823160e01b81526001600160a01b039283169481019490945283916024918391165afa9283156105755792610546575b5051908152f35b9091508281813d831161056e575b61055e81836107fe565b810103126101db5751908361053f565b503d610554565b8251903d90823e3d90fd5b919050346101db5760203660031901126101db5761059c6108c4565b60ff60025460a01c16600581101561074c57600203610713576105c96007546105c3610834565b906107dd565b91828135106106c75760018060a01b036105ef8482600554168360035416903390610918565b6002805460ff60a01b198116600360a01b179091551690813b156101db575f80926024855180958193637e72c7d760e01b835230878401525af180156106bd5761068a575b847f4002dba848920f438092e08090cfb5fc47144c22704268b402c9553a1b5adfe66020868651907f409fced1b85ae32a29fb1e18894d8361a5f2653dc27adf7102d86175c2901d7c8580a18152a16001815580f35b9091935067ffffffffffffffff82116106aa575082525f91816020610634565b604190634e487b7160e01b5f525260245ffd5b83513d5f823e3d90fd5b6020608492519162461bcd60e51b8352820152602160248201527f496e73756666696369656e7420616d6f756e7420666f722072657061796d656e6044820152601d60fa1b6064820152fd5b906020606492519162461bcd60e51b835282015260136024820152724c6f616e206d7573742062652061637469766560681b6044820152fd5b602183634e487b7160e01b5f525260245ffd5b82346101db575f3660031901126101db57602090600d549051908152f35b346101db575f3660031901126101db576001546001600160a01b03168152602090f35b600435906001600160a01b03821682036101db57565b9190602083019260058210156107c95752565b634e487b7160e01b5f52602160045260245ffd5b919082018092116107ea57565b634e487b7160e01b5f52601160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761082057604052565b634e487b7160e01b5f52604160045260245ffd5b600c5442034281116107ea57602060018060a01b03600a541660646007546008549260405195869485936301786f6360e21b85526004850152602484015260448301525afa9081156108b9575f9161088a575090565b90506020813d6020116108b1575b816108a5602093836107fe565b810103126101db575190565b3d9150610898565b6040513d5f823e3d90fd5b60025f54146108d35760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040516323b872dd60e01b602082019081526001600160a01b039384166024830152938316604482015260648082019590955293845267ffffffffffffffff92909160a08501919084831186841017610820575f9384936040521694519082865af1903d15610a07573d908111610820576109b591604051916109a56020601f19601f84011601846107fe565b82523d5f602084013e5b83610a14565b80519081151591826109e3575b50506109cb5750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126101db57602001518015908115036101db575f806109c2565b506109b5906060906109af565b90610a3b5750805115610a2957805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610a6e575b610a4c575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610a4456fea26469706673582212203d1e43bc6e9f3be7edce4c664a25e6a3faad2f65bf82a01f8696f3b47a83edc964736f6c63430008190033",
							"opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0x328 JUMPI PUSH1 0x1F PUSH2 0xDEE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x299 JUMPI DUP1 DUP5 SWAP3 PUSH2 0x140 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x328 JUMPI PUSH2 0x48 DUP2 PUSH2 0x32C JUMP JUMPDEST PUSH2 0x54 PUSH1 0x20 DUP4 ADD PUSH2 0x32C JUMP JUMPDEST SWAP2 PUSH2 0x61 PUSH1 0x40 DUP3 ADD PUSH2 0x32C JUMP JUMPDEST SWAP2 PUSH2 0x6E PUSH1 0x60 DUP4 ADD PUSH2 0x32C JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP4 ADD MLOAD SWAP5 PUSH1 0xA0 DUP5 ADD MLOAD SWAP4 PUSH1 0xC0 DUP2 ADD MLOAD SWAP1 PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x328 JUMPI PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP3 SWAP1 DUP4 SWAP1 SUB PUSH2 0x328 JUMPI PUSH2 0x120 PUSH2 0xBB SWAP2 ADD PUSH2 0x32C JUMP JUMPDEST PUSH1 0x1 PUSH0 SSTORE SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND ISZERO ISZERO DUP1 PUSH2 0x316 JUMPI JUMPDEST DUP1 PUSH2 0x304 JUMPI JUMPDEST DUP1 PUSH2 0x2F2 JUMPI JUMPDEST ISZERO PUSH2 0x2AD JUMPI PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP8 SWAP1 SWAP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x160 DUP11 ADD SWAP1 DUP2 GT SWAP1 DUP11 GT OR PUSH2 0x299 JUMPI PUSH32 0x3D48195705780F5C10A0D217F778F0F6D562CB1A6A699DA31C0D6D756AACEDFC SWAP10 PUSH0 PUSH2 0x140 DUP12 DUP15 PUSH2 0x160 PUSH1 0x60 SWAP15 ADD PUSH1 0x40 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP14 AND DUP3 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP12 AND PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP13 AND PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP6 AND DUP15 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE DUP5 PUSH1 0xA0 DUP3 ADD MSTORE DUP6 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x120 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE DUP11 PUSH1 0x7 SSTORE PUSH1 0x8 SSTORE PUSH1 0x9 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0xB SLOAD AND PUSH1 0xB SSTORE TIMESTAMP PUSH1 0xC SSTORE PUSH0 PUSH1 0xD SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA8 SHL SUB NOT AND OR PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP3 LOG2 PUSH1 0x40 MLOAD PUSH2 0xAAD SWAP1 DUP2 PUSH2 0x341 DUP3 CODECOPY RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420696E70757420616464726573736573000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND ISZERO ISZERO PUSH2 0xDE JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND ISZERO ISZERO PUSH2 0xD8 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO ISZERO PUSH2 0xD2 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x328 JUMPI JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP3 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x12261EE7 EQ PUSH2 0x77D JUMPI POP DUP2 PUSH4 0x2E1283E3 EQ PUSH2 0x75F JUMPI DUP2 PUSH4 0x371FD8E6 EQ PUSH2 0x580 JUMPI DUP2 PUSH4 0x654C6295 EQ PUSH2 0x4E9 JUMPI DUP2 PUSH4 0x6B6D1955 EQ PUSH2 0x4C9 JUMPI DUP2 PUSH4 0x8DB57994 EQ PUSH2 0x3D3 JUMPI DUP2 PUSH4 0x95CB741D EQ PUSH2 0x346 JUMPI DUP2 PUSH4 0x9E9F669C EQ PUSH2 0x318 JUMPI DUP2 PUSH4 0xC19D93FB EQ PUSH2 0x318 JUMPI DUP2 PUSH4 0xC51B9507 EQ PUSH2 0x2EF JUMPI DUP2 PUSH4 0xEB0C4955 EQ PUSH2 0x2CB JUMPI DUP2 PUSH4 0xF30F29DD EQ PUSH2 0xD2 JUMPI POP PUSH4 0xF4B01B18 EQ PUSH2 0xB1 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0xEC PUSH2 0x7A0 JUMP JUMPDEST SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP3 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI PUSH2 0x274 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x232 JUMPI PUSH2 0x12D PUSH2 0x125 PUSH2 0x834 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x7DD JUMP JUMPDEST DUP6 LT PUSH2 0x1F0 JUMPI PUSH1 0x44 PUSH1 0x20 SWAP3 DUP9 DUP8 SWAP4 PUSH1 0x6 SLOAD AND DUP10 DUP9 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x6E553F65 PUSH1 0xE0 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH2 0x1B7 JUMPI JUMPDEST POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE PUSH32 0x5150AB7694A22FBC01C642BC10316565247DF962FA3F0AC3B5D1A18BA45B485B SWAP1 PUSH1 0x20 SWAP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1DF JUMPI JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI PUSH0 PUSH2 0x164 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x17 PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6C6C61746572616C000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x18 PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x496E76616C696420626F72726F77657220616464726573730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1B PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4C6F616E206E6F7420696E20637265617461626C652073746174650000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE DUP5 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x2E8 PUSH2 0x834 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH2 0x342 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x7B6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0x160 SWAP3 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP1 PUSH1 0x3 SLOAD AND SWAP4 SLOAD AND SWAP2 DUP1 PUSH1 0x5 SLOAD AND SWAP1 DUP1 PUSH1 0x6 SLOAD AND PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD SWAP1 PUSH1 0x9 SLOAD SWAP3 DUP5 PUSH1 0xA SLOAD AND SWAP5 PUSH1 0xB SLOAD AND SWAP6 PUSH1 0xC SLOAD SWAP8 PUSH1 0xD SLOAD SWAP10 DUP2 MLOAD SWAP12 DUP13 MSTORE PUSH1 0x20 DUP13 ADD MSTORE DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0x3ED PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x1 SUB PUSH2 0x474 JUMPI SLOAD PUSH1 0x3 SLOAD PUSH1 0x7 SLOAD PUSH32 0x9E71D2FB732E68272B7E74ECFD14638673C1D77E19A5D390A3FFFF054D57C44B SWAP4 PUSH1 0x20 SWAP4 SWAP1 SWAP3 PUSH2 0x44D SWAP3 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x918 JUMP JUMPDEST TIMESTAMP PUSH1 0xD SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA1 SHL OR SWAP1 SSTORE PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE LOG1 PUSH1 0x1 DUP2 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C6F616E206D75737420626520696E2070656E64696E67207374617465000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 DUP3 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x2E8 PUSH2 0x125 PUSH2 0x834 JUMP JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xCE JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI DUP4 PUSH2 0x507 PUSH2 0x7A0 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP5 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x575 JUMPI SWAP3 PUSH2 0x546 JUMPI JUMPDEST POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x56E JUMPI JUMPDEST PUSH2 0x55E DUP2 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 DUP4 PUSH2 0x53F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x554 JUMP JUMPDEST DUP3 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x59C PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x74C JUMPI PUSH1 0x2 SUB PUSH2 0x713 JUMPI PUSH2 0x5C9 PUSH1 0x7 SLOAD PUSH2 0x5C3 PUSH2 0x834 JUMP JUMPDEST SWAP1 PUSH2 0x7DD JUMP JUMPDEST SWAP2 DUP3 DUP2 CALLDATALOAD LT PUSH2 0x6C7 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x5EF DUP5 DUP3 PUSH1 0x5 SLOAD AND DUP4 PUSH1 0x3 SLOAD AND SWAP1 CALLER SWAP1 PUSH2 0x918 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP2 AND PUSH1 0x3 PUSH1 0xA0 SHL OR SWAP1 SWAP2 SSTORE AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1DB JUMPI PUSH0 DUP1 SWAP3 PUSH1 0x24 DUP6 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x7E72C7D7 PUSH1 0xE0 SHL DUP4 MSTORE ADDRESS DUP8 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH2 0x68A JUMPI JUMPDEST DUP5 PUSH32 0x4002DBA848920F438092E08090CFB5FC47144C22704268B402C9553A1B5ADFE6 PUSH1 0x20 DUP7 DUP7 MLOAD SWAP1 PUSH32 0x409FCED1B85AE32A29FB1E18894D8361A5F2653DC27ADF7102D86175C2901D7C DUP6 DUP1 LOG1 DUP2 MSTORE LOG1 PUSH1 0x1 DUP2 SSTORE DUP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x6AA JUMPI POP DUP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 PUSH2 0x634 JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420616D6F756E7420666F722072657061796D656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x4C6F616E206D75737420626520616374697665 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 SWAP1 PUSH1 0xD SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x7C9 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7EA JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x820 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xC SLOAD TIMESTAMP SUB TIMESTAMP DUP2 GT PUSH2 0x7EA JUMPI PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA SLOAD AND PUSH1 0x64 PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x1786F63 PUSH1 0xE2 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x8B9 JUMPI PUSH0 SWAP2 PUSH2 0x88A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x8B1 JUMPI JUMPDEST DUP2 PUSH2 0x8A5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x898 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0x8D3 JUMPI PUSH1 0x2 PUSH0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP5 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP6 ADD SWAP2 SWAP1 DUP5 DUP4 GT DUP7 DUP5 LT OR PUSH2 0x820 JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH1 0x40 MSTORE AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0xA07 JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0x820 JUMPI PUSH2 0x9B5 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x9A5 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0x7FE JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0xA14 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x9E3 JUMPI JUMPDEST POP POP PUSH2 0x9CB JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI PUSH1 0x20 ADD MLOAD DUP1 ISZERO SWAP1 DUP2 ISZERO SUB PUSH2 0x1DB JUMPI PUSH0 DUP1 PUSH2 0x9C2 JUMP JUMPDEST POP PUSH2 0x9B5 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x9AF JUMP JUMPDEST SWAP1 PUSH2 0xA3B JUMPI POP DUP1 MLOAD ISZERO PUSH2 0xA29 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0xA6E JUMPI JUMPDEST PUSH2 0xA4C JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0xA44 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0x1E NUMBER 0xBC PUSH15 0x9F3BE7EDCE4C664A25E6A3FAAD2F65 0xBF DUP3 LOG0 0x1F DUP7 SWAP7 RETURN 0xB4 PUSH27 0x83EDC964736F6C6343000819003300000000000000000000000000 ",
							"sourceMap": "509:5433:18:-:0;;;;;;;;;;;;;-1:-1:-1;;509:5433:18;;;;-1:-1:-1;;;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;509:5433:18;;;;;;;;;;;;;;:::i;:::-;;-1:-1:-1;509:5433:18;;-1:-1:-1;;;;;509:5433:18;;2537:20;;;:54;;-1:-1:-1;2537:94:18;;;-1:-1:-1;2537:133:18;;;-1:-1:-1;509:5433:18;;;;;;-1:-1:-1;;;;;;509:5433:18;;;;;;;2736:52;509:5433;;;;;;;-1:-1:-1;;;;;509:5433:18;;;;;;;;-1:-1:-1;509:5433:18;;;3353:77;509:5433;-1:-1:-1;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;;;2812:491;;509:5433;;;;;;;;;2812:491;;509:5433;;;;;;;;2812:491;;;509:5433;;2812:491;;509:5433;2812:491;509:5433;2812:491;;509:5433;2812:491;509:5433;2812:491;;509:5433;;;;;;;;;2812:491;;509:5433;2812:491;509:5433;2812:491;;509:5433;3249:15;509:5433;2812:491;;509:5433;2812:491;509:5433;;;;;;;;;;;;;;2798:505;509:5433;;;2798:505;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3249:15;509:5433;;-1:-1:-1;509:5433:18;;;;;;;;;;;;;;;;;2736:52;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3353:77;;509:5433;;;;;;;;;;;;;-1:-1:-1;509:5433:18;;;;;-1:-1:-1;509:5433:18;;;;-1:-1:-1;;;509:5433:18;;;;;;;;;;;;;;;;;;;;2537:133;-1:-1:-1;;;;;;509:5433:18;;2635:35;;2537:133;;:94;-1:-1:-1;;;;;;509:5433:18;;2595:36;;2537:94;;:54;-1:-1:-1;;;;;;509:5433:18;;2561:30;;2537:54;;509:5433;-1:-1:-1;509:5433:18;;;;;-1:-1:-1;;;;;509:5433:18;;;;;;:::o"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 1952,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_enum_LoanState": {
									"entryPoint": 1974,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 2013,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 2046,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_calculateInterest": {
									"entryPoint": 2100,
									"id": 4212,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 2244,
									"id": 351,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_safeTransferFrom": {
									"entryPoint": 2328,
									"id": 1788,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_verifyCallResultFromTarget": {
									"entryPoint": 2580,
									"id": 2213,
									"parameterSlots": 3,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604081815260049182361015610015575f80fd5b5f925f3560e01c91826312261ee71461077d575081632e1283e31461075f578163371fd8e614610580578163654c6295146104e95781636b6d1955146104c95781638db57994146103d357816395cb741d146103465781639e9f669c14610318578163c19d93fb14610318578163c51b9507146102ef578163eb0c4955146102cb578163f30f29dd146100d2575063f4b01b18146100b1575f80fd5b346100ce57816003193601126100ce576020906007549051908152f35b5080fd5b9050346102c757816003193601126102c7576100ec6107a0565b91602480359260ff60025460a01c1660058110156102b557610274576001600160a01b039485169485156102325761012d610125610834565b6007546107dd565b85106101f0576044602092888793600654168988519788968795636e553f6560e01b87528601528401525af180156101e6576101b7575b50600b80546001600160a01b031916841790556002805460ff60a01b1916600160a01b179055519081527f5150ab7694a22fbc01c642bc10316565247df962fa3f0ac3b5d1a18ba45b485b90602090a280f35b602090813d83116101df575b6101cd81836107fe565b810103126101db575f610164565b5f80fd5b503d6101c3565b82513d87823e3d90fd5b506017606492602085519362461bcd60e51b85528401528201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152fd5b506018606492602085519362461bcd60e51b85528401528201527f496e76616c696420626f72726f776572206164647265737300000000000000006044820152fd5b601b606492602085519362461bcd60e51b85528401528201527f4c6f616e206e6f7420696e20637265617461626c6520737461746500000000006044820152fd5b50634e487b7160e01b86526021905284fd5b8280fd5b5050346100ce57816003193601126100ce576020906102e8610834565b9051908152f35b5050346100ce57816003193601126100ce5760025490516001600160a01b039091168152602090f35b5050346100ce57816003193601126100ce576103429060ff60025460a01c169051918291826107b6565b0390f35b919050346102c757826003193601126102c757610160925060018060a01b0390818060035416935416918060055416908060065416600754600854906009549284600a541694600b541695600c5497600d549981519b8c5260208c01528a01526060890152608088015260a087015260c086015260e0850152610100840152610120830152610140820152f35b9050346102c757826003193601126102c7576103ed6108c4565b60ff60025460a01c1660058110156104b65760010361047457546003546007547f9e71d2fb732e68272b7e74ecfd14638673c1d77e19a5d390a3ffff054d57c44b93602093909261044d929130916001600160a01b039081169116610918565b42600d556002805460ff60a01b1916600160a11b1790556007549051908152a16001815580f35b6020606492519162461bcd60e51b8352820152601d60248201527f4c6f616e206d75737420626520696e2070656e64696e672073746174650000006044820152fd5b634e487b7160e01b845260218252602484fd5b5050346100ce57816003193601126100ce576020906102e8610125610834565b8383346100ce57602092836003193601126102c757836105076107a0565b60065484516370a0823160e01b81526001600160a01b039283169481019490945283916024918391165afa9283156105755792610546575b5051908152f35b9091508281813d831161056e575b61055e81836107fe565b810103126101db5751908361053f565b503d610554565b8251903d90823e3d90fd5b919050346101db5760203660031901126101db5761059c6108c4565b60ff60025460a01c16600581101561074c57600203610713576105c96007546105c3610834565b906107dd565b91828135106106c75760018060a01b036105ef8482600554168360035416903390610918565b6002805460ff60a01b198116600360a01b179091551690813b156101db575f80926024855180958193637e72c7d760e01b835230878401525af180156106bd5761068a575b847f4002dba848920f438092e08090cfb5fc47144c22704268b402c9553a1b5adfe66020868651907f409fced1b85ae32a29fb1e18894d8361a5f2653dc27adf7102d86175c2901d7c8580a18152a16001815580f35b9091935067ffffffffffffffff82116106aa575082525f91816020610634565b604190634e487b7160e01b5f525260245ffd5b83513d5f823e3d90fd5b6020608492519162461bcd60e51b8352820152602160248201527f496e73756666696369656e7420616d6f756e7420666f722072657061796d656e6044820152601d60fa1b6064820152fd5b906020606492519162461bcd60e51b835282015260136024820152724c6f616e206d7573742062652061637469766560681b6044820152fd5b602183634e487b7160e01b5f525260245ffd5b82346101db575f3660031901126101db57602090600d549051908152f35b346101db575f3660031901126101db576001546001600160a01b03168152602090f35b600435906001600160a01b03821682036101db57565b9190602083019260058210156107c95752565b634e487b7160e01b5f52602160045260245ffd5b919082018092116107ea57565b634e487b7160e01b5f52601160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761082057604052565b634e487b7160e01b5f52604160045260245ffd5b600c5442034281116107ea57602060018060a01b03600a541660646007546008549260405195869485936301786f6360e21b85526004850152602484015260448301525afa9081156108b9575f9161088a575090565b90506020813d6020116108b1575b816108a5602093836107fe565b810103126101db575190565b3d9150610898565b6040513d5f823e3d90fd5b60025f54146108d35760025f55565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6040516323b872dd60e01b602082019081526001600160a01b039384166024830152938316604482015260648082019590955293845267ffffffffffffffff92909160a08501919084831186841017610820575f9384936040521694519082865af1903d15610a07573d908111610820576109b591604051916109a56020601f19601f84011601846107fe565b82523d5f602084013e5b83610a14565b80519081151591826109e3575b50506109cb5750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126101db57602001518015908115036101db575f806109c2565b506109b5906060906109af565b90610a3b5750805115610a2957805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610a6e575b610a4c575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610a4456fea26469706673582212203d1e43bc6e9f3be7edce4c664a25e6a3faad2f65bf82a01f8696f3b47a83edc964736f6c63430008190033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP3 PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x12261EE7 EQ PUSH2 0x77D JUMPI POP DUP2 PUSH4 0x2E1283E3 EQ PUSH2 0x75F JUMPI DUP2 PUSH4 0x371FD8E6 EQ PUSH2 0x580 JUMPI DUP2 PUSH4 0x654C6295 EQ PUSH2 0x4E9 JUMPI DUP2 PUSH4 0x6B6D1955 EQ PUSH2 0x4C9 JUMPI DUP2 PUSH4 0x8DB57994 EQ PUSH2 0x3D3 JUMPI DUP2 PUSH4 0x95CB741D EQ PUSH2 0x346 JUMPI DUP2 PUSH4 0x9E9F669C EQ PUSH2 0x318 JUMPI DUP2 PUSH4 0xC19D93FB EQ PUSH2 0x318 JUMPI DUP2 PUSH4 0xC51B9507 EQ PUSH2 0x2EF JUMPI DUP2 PUSH4 0xEB0C4955 EQ PUSH2 0x2CB JUMPI DUP2 PUSH4 0xF30F29DD EQ PUSH2 0xD2 JUMPI POP PUSH4 0xF4B01B18 EQ PUSH2 0xB1 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0xEC PUSH2 0x7A0 JUMP JUMPDEST SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP3 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2B5 JUMPI PUSH2 0x274 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP5 DUP6 ISZERO PUSH2 0x232 JUMPI PUSH2 0x12D PUSH2 0x125 PUSH2 0x834 JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x7DD JUMP JUMPDEST DUP6 LT PUSH2 0x1F0 JUMPI PUSH1 0x44 PUSH1 0x20 SWAP3 DUP9 DUP8 SWAP4 PUSH1 0x6 SLOAD AND DUP10 DUP9 MLOAD SWAP8 DUP9 SWAP7 DUP8 SWAP6 PUSH4 0x6E553F65 PUSH1 0xE0 SHL DUP8 MSTORE DUP7 ADD MSTORE DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x1E6 JUMPI PUSH2 0x1B7 JUMPI JUMPDEST POP PUSH1 0xB DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP5 OR SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA0 SHL OR SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE PUSH32 0x5150AB7694A22FBC01C642BC10316565247DF962FA3F0AC3B5D1A18BA45B485B SWAP1 PUSH1 0x20 SWAP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1DF JUMPI JUMPDEST PUSH2 0x1CD DUP2 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI PUSH0 PUSH2 0x164 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x1C3 JUMP JUMPDEST DUP3 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP PUSH1 0x17 PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6C6C61746572616C000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x18 PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x496E76616C696420626F72726F77657220616464726573730000000000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x1B PUSH1 0x64 SWAP3 PUSH1 0x20 DUP6 MLOAD SWAP4 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP6 MSTORE DUP5 ADD MSTORE DUP3 ADD MSTORE PUSH32 0x4C6F616E206E6F7420696E20637265617461626C652073746174650000000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 SWAP1 MSTORE DUP5 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x2E8 PUSH2 0x834 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x2 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH2 0x342 SWAP1 PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND SWAP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x7B6 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0x160 SWAP3 POP PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP1 PUSH1 0x3 SLOAD AND SWAP4 SLOAD AND SWAP2 DUP1 PUSH1 0x5 SLOAD AND SWAP1 DUP1 PUSH1 0x6 SLOAD AND PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD SWAP1 PUSH1 0x9 SLOAD SWAP3 DUP5 PUSH1 0xA SLOAD AND SWAP5 PUSH1 0xB SLOAD AND SWAP6 PUSH1 0xC SLOAD SWAP8 PUSH1 0xD SLOAD SWAP10 DUP2 MLOAD SWAP12 DUP13 MSTORE PUSH1 0x20 DUP13 ADD MSTORE DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE PUSH2 0x140 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C7 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI PUSH2 0x3ED PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x4B6 JUMPI PUSH1 0x1 SUB PUSH2 0x474 JUMPI SLOAD PUSH1 0x3 SLOAD PUSH1 0x7 SLOAD PUSH32 0x9E71D2FB732E68272B7E74ECFD14638673C1D77E19A5D390A3FFFF054D57C44B SWAP4 PUSH1 0x20 SWAP4 SWAP1 SWAP3 PUSH2 0x44D SWAP3 SWAP2 ADDRESS SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x918 JUMP JUMPDEST TIMESTAMP PUSH1 0xD SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT AND PUSH1 0x1 PUSH1 0xA1 SHL OR SWAP1 SSTORE PUSH1 0x7 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE LOG1 PUSH1 0x1 DUP2 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C6F616E206D75737420626520696E2070656E64696E67207374617465000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 DUP3 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xCE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xCE JUMPI PUSH1 0x20 SWAP1 PUSH2 0x2E8 PUSH2 0x125 PUSH2 0x834 JUMP JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xCE JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C7 JUMPI DUP4 PUSH2 0x507 PUSH2 0x7A0 JUMP JUMPDEST PUSH1 0x6 SLOAD DUP5 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 AND GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x575 JUMPI SWAP3 PUSH2 0x546 JUMPI JUMPDEST POP MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP DUP3 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x56E JUMPI JUMPDEST PUSH2 0x55E DUP2 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 DUP4 PUSH2 0x53F JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x554 JUMP JUMPDEST DUP3 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x1DB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH2 0x59C PUSH2 0x8C4 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD PUSH1 0xA0 SHR AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x74C JUMPI PUSH1 0x2 SUB PUSH2 0x713 JUMPI PUSH2 0x5C9 PUSH1 0x7 SLOAD PUSH2 0x5C3 PUSH2 0x834 JUMP JUMPDEST SWAP1 PUSH2 0x7DD JUMP JUMPDEST SWAP2 DUP3 DUP2 CALLDATALOAD LT PUSH2 0x6C7 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x5EF DUP5 DUP3 PUSH1 0x5 SLOAD AND DUP4 PUSH1 0x3 SLOAD AND SWAP1 CALLER SWAP1 PUSH2 0x918 JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF PUSH1 0xA0 SHL NOT DUP2 AND PUSH1 0x3 PUSH1 0xA0 SHL OR SWAP1 SWAP2 SSTORE AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1DB JUMPI PUSH0 DUP1 SWAP3 PUSH1 0x24 DUP6 MLOAD DUP1 SWAP6 DUP2 SWAP4 PUSH4 0x7E72C7D7 PUSH1 0xE0 SHL DUP4 MSTORE ADDRESS DUP8 DUP5 ADD MSTORE GAS CALL DUP1 ISZERO PUSH2 0x6BD JUMPI PUSH2 0x68A JUMPI JUMPDEST DUP5 PUSH32 0x4002DBA848920F438092E08090CFB5FC47144C22704268B402C9553A1B5ADFE6 PUSH1 0x20 DUP7 DUP7 MLOAD SWAP1 PUSH32 0x409FCED1B85AE32A29FB1E18894D8361A5F2653DC27ADF7102D86175C2901D7C DUP6 DUP1 LOG1 DUP2 MSTORE LOG1 PUSH1 0x1 DUP2 SSTORE DUP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP4 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x6AA JUMPI POP DUP3 MSTORE PUSH0 SWAP2 DUP2 PUSH1 0x20 PUSH2 0x634 JUMP JUMPDEST PUSH1 0x41 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 PUSH1 0x84 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420616D6F756E7420666F722072657061796D656E PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0xFA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x4C6F616E206D75737420626520616374697665 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x21 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP3 CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x20 SWAP1 PUSH1 0xD SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x1DB JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1DB JUMPI PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x1DB JUMPI JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x20 DUP4 ADD SWAP3 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x7C9 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7EA JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x820 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xC SLOAD TIMESTAMP SUB TIMESTAMP DUP2 GT PUSH2 0x7EA JUMPI PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xA SLOAD AND PUSH1 0x64 PUSH1 0x7 SLOAD PUSH1 0x8 SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP5 DUP6 SWAP4 PUSH4 0x1786F63 PUSH1 0xE2 SHL DUP6 MSTORE PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x8B9 JUMPI PUSH0 SWAP2 PUSH2 0x88A JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x8B1 JUMPI JUMPDEST DUP2 PUSH2 0x8A5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x7FE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x898 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0x8D3 JUMPI PUSH1 0x2 PUSH0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP4 DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD SWAP6 SWAP1 SWAP6 MSTORE SWAP4 DUP5 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP2 PUSH1 0xA0 DUP6 ADD SWAP2 SWAP1 DUP5 DUP4 GT DUP7 DUP5 LT OR PUSH2 0x820 JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH1 0x40 MSTORE AND SWAP5 MLOAD SWAP1 DUP3 DUP7 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0xA07 JUMPI RETURNDATASIZE SWAP1 DUP2 GT PUSH2 0x820 JUMPI PUSH2 0x9B5 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x9A5 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0x7FE JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0xA14 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x9E3 JUMPI JUMPDEST POP POP PUSH2 0x9CB JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x1DB JUMPI PUSH1 0x20 ADD MLOAD DUP1 ISZERO SWAP1 DUP2 ISZERO SUB PUSH2 0x1DB JUMPI PUSH0 DUP1 PUSH2 0x9C2 JUMP JUMPDEST POP PUSH2 0x9B5 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x9AF JUMP JUMPDEST SWAP1 PUSH2 0xA3B JUMPI POP DUP1 MLOAD ISZERO PUSH2 0xA29 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0xA6E JUMPI JUMPDEST PUSH2 0xA4C JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0xA44 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0x1E NUMBER 0xBC PUSH15 0x9F3BE7EDCE4C664A25E6A3FAAD2F65 0xBF DUP3 LOG0 0x1F DUP7 SWAP7 RETURN 0xB4 PUSH27 0x83EDC964736F6C6343000819003300000000000000000000000000 ",
							"sourceMap": "509:5433:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5740:22;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3536:5;509:5433;;;;;;;;;;;;-1:-1:-1;;;;;509:5433:18;;;;3612:22;;509:5433;;5432:44;5396:19;;:::i;:::-;5432:22;509:5433;5432:44;:::i;:::-;3749:38;;509:5433;;;;;;;;3826:27;509:5433;;;;;;;;;;;;;3826:63;;;;509:5433;;;;3826:63;;;;;;;;509:5433;-1:-1:-1;3899:20:18;509:5433;;-1:-1:-1;;;;;;509:5433:18;;;;;3536:5;509:5433;;-1:-1:-1;;;;509:5433:18;-1:-1:-1;;;509:5433:18;;;;;;;3980:41;;509:5433;;3980:41;509:5433;;3826:63;509:5433;3826:63;;;;;;;;;;;;:::i;:::-;;;509:5433;;;;3826:63;;;509:5433;;;;3826:63;;;;;;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;615:35;509:5433;;;-1:-1:-1;;;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;;1086:22;509:5433;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1115:30;509:5433;;;;;;;1115:30;509:5433;;;;1115:30;509:5433;;1115:30;509:5433;1115:30;509:5433;;1115:30;509:5433;;;1115:30;509:5433;;;1115:30;509:5433;;;1115:30;509:5433;;1115:30;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2227:103:2;;:::i;:::-;509:5433:18;4094:5;509:5433;;;;;;;;;;4103:17;4094:26;509:5433;;;4164:11;509:5433;4238:22;509:5433;4361:34;;509:5433;;;;4238:22;;509:5433;4231:4;;-1:-1:-1;;;;;509:5433:18;;;;;4238:22;:::i;:::-;4297:15;4271:23;509:5433;4094:5;509:5433;;-1:-1:-1;;;;509:5433:18;-1:-1:-1;;;509:5433:18;;;4238:22;509:5433;;;;;;4361:34;4103:17;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;5396:19;5432:44;5396:19;;:::i;509:5433::-;;;;;;;;;;;;;;;;;;;:::i;:::-;5853:27;509:5433;;;-1:-1:-1;;;5853:43:18;;-1:-1:-1;;;;;509:5433:18;;;5853:43;;;509:5433;;;;;;;;;;;5853:43;;;;;;;;;;509:5433;;;;;;;5853:43;;;;;;;;;;;;;;;;;:::i;:::-;;;509:5433;;;;;5853:43;;;;;;;;;;509:5433;;;;;;;;;;;;;;;;;;;-1:-1:-1;;509:5433:18;;;;2227:103:2;;:::i;:::-;509:5433:18;4479:5;509:5433;;;;;;;;;;4479:5;:25;509:5433;;4563:44;:22;509:5433;4588:19;;:::i;:::-;4563:44;;:::i;:::-;509:5433;;;;4625:24;509:5433;;;;;;;4774:14;509:5433;;;;;;4563:11;509:5433;;4742:10;;4774:14;;:::i;:::-;4479:5;509:5433;;-1:-1:-1;;;;509:5433:18;;-1:-1:-1;;;509:5433:18;;;;;;4943:43;;;;;509:5433;;;;;;;;;;;;;4943:43;;4980:4;4943:43;;;509:5433;4943:43;;;;;;;;509:5433;;4826:29;509:5433;;;;5001:12;;;;;509:5433;;4826:29;509:5433;;;;;4943:43;509:5433;;;;;;;;;-1:-1:-1;509:5433:18;;;;;;4943:43;;509:5433;;;;;;;;;;;;4943:43;509:5433;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;509:5433:18;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;509:5433:18;;;;;;5562:23;509:5433;;;;;;;;;;;;;-1:-1:-1;;509:5433:18;;;;;;-1:-1:-1;;;;;509:5433:18;;;;;;;;;;-1:-1:-1;;;;;509:5433:18;;;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;509:5433:18;;;;;-1:-1:-1;509:5433:18;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;5026:255;5132:22;509:5433;5114:15;509:5433;5114:15;509:5433;;;;5171:103;509:5433;;;;;5171:25;509:5433;;;5171:25;509:5433;5239:24;509:5433;;;;;;;;;;;;5171:103;;5215:22;5171:103;;509:5433;;;;;;;;;5171:103;;;;;;;-1:-1:-1;5171:103:18;;;5164:110;5026:255;:::o;5171:103::-;;;;;;;;;;;;;;;;;:::i;:::-;;;509:5433;;;;;5026:255;:::o;5171:103::-;;;-1:-1:-1;5171:103:18;;;509:5433;;;-1:-1:-1;509:5433:18;;;;;2336:287:2;1759:1;2468:7;509:5433:18;2468:19:2;1759:1;;;2468:7;509:5433:18;2336:287:2:o;1759:1::-;509:5433:18;;-1:-1:-1;;;1759:1:2;;;;;;;;;;;509:5433:18;1759:1:2;509:5433:18;;;1759:1:2;;;;1702:188:8;509:5433:18;;-1:-1:-1;;;1829:53:8;;;;;;-1:-1:-1;;;;;509:5433:18;;;1829:53:8;;;509:5433:18;;;;;;;;;;;;;;;;1829:53:8;;;509:5433:18;;1702:188:8;;509:5433:18;;;;1829:53:8;509:5433:18;;;;;;;;;-1:-1:-1;509:5433:18;;;;;;3462:31:9;;;;;;;;509:5433:18;;;;;;;;;;3510:55:9;509:5433:18;;;;;1829:53:8;509:5433:18;;;;;;;;;:::i;:::-;;;;-1:-1:-1;1829:53:8;509:5433:18;;;;3510:55:9;;:::i;:::-;509:5433:18;;4551:22:8;;;;:57;;;;509:5433:18;4547:135:8;;;;1702:188;:::o;4547:135::-;1829:53;509:5433:18;;;4631:40:8;;;;;;;;;509:5433:18;4631:40:8;4551:57;4578:30;;;;1829:53;4578:30;;;509:5433:18;;;;1829:53:8;4578:30;509:5433:18;;;;;;;;;4551:57:8;;;;509:5433:18;;3510:55:9;509:5433:18;;;;;4625:582:9;;4797:8;;-1:-1:-1;509:5433:18;;5874:21:9;:17;;6046:142;;;;;;5870:383;509:5433:18;;-1:-1:-1;;;6225:17:9;;;;;4793:408;509:5433:18;;5045:22:9;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;509:5433:18;;-1:-1:-1;;;5121:24:9;;-1:-1:-1;;;;;509:5433:18;;;5121:24:9;;;509:5433:18;;;5121:24:9;5045:49;5071:18;;;:23;5045:49;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "546600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"activateLoan(address,uint256)": "infinite",
								"calculateInterest()": "infinite",
								"calculateRequiredCollateral()": "infinite",
								"fundLoan()": "infinite",
								"getCollateralAmount(address)": "infinite",
								"getFundedBlock()": "2298",
								"getLoanAmount()": "2537",
								"getLoanState()": "2525",
								"loanDetails()": "23668",
								"permit2()": "2280",
								"poolOrganizer()": "2497",
								"repay(uint256)": "infinite",
								"state()": "2547"
							},
							"internal": {
								"_closeLoan()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "CALLVALUE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1F"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSHSIZE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "CODESIZE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "LT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "25"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "140"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "8"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "8"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "9"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "9"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "10"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "10"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "11"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "C0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "100"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "16"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "16"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2557,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2557,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2557,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "17"
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "18"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "19"
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "20"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "22"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 2736,
									"end": 2788,
									"name": "PUSH",
									"source": 18,
									"value": "2"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP8",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP4",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "160"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP11",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "GT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP11",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "25"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 3353,
									"end": 3430,
									"name": "PUSH",
									"source": 18,
									"value": "3D48195705780F5C10A0D217F778F0F6D562CB1A6A699DA31C0D6D756AACEDFC"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP10",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "140"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP12",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP15",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "160"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "60"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP15",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP14",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP12",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP13",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP15",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP5",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "C0"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "100"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 3249,
									"end": 3264,
									"name": "TIMESTAMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "120"
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 2812,
									"end": 3303,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP10",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 2798,
									"end": 3303,
									"name": "PUSH",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 2798,
									"end": 3303,
									"name": "PUSH",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP8",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP9",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "5"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "5"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "6"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "6"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP11",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "7"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "8"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "9"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 3249,
									"end": 3264,
									"name": "TIMESTAMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "C"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "D"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A8"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "NOT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "OR",
									"source": 18
								},
								{
									"begin": 2736,
									"end": 2788,
									"name": "PUSH",
									"source": 18,
									"value": "2"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP6",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "A0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 3353,
									"end": 3430,
									"name": "SWAP3",
									"source": 18
								},
								{
									"begin": 3353,
									"end": 3430,
									"name": "LOG2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "RETURN",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "25"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B71"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "E0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SHL",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "41"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "23"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "17"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "496E76616C696420696E70757420616464726573736573000000000000000000"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "44"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH",
									"source": 18,
									"value": "64"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "tag",
									"source": 18,
									"value": "21"
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP7",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2635,
									"end": 2670,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2635,
									"end": 2670,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "22"
								},
								{
									"begin": 2537,
									"end": 2670,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "tag",
									"source": 18,
									"value": "19"
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP10",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2595,
									"end": 2631,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2595,
									"end": 2631,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "20"
								},
								{
									"begin": 2537,
									"end": 2631,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "tag",
									"source": 18,
									"value": "17"
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP6",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 2561,
									"end": 2591,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2561,
									"end": 2591,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "18"
								},
								{
									"begin": 2537,
									"end": 2591,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "AND",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "14"
								},
								{
									"begin": 509,
									"end": 5942,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 509,
									"end": 5942,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203d1e43bc6e9f3be7edce4c664a25e6a3faad2f65bf82a01f8696f3b47a83edc964736f6c63430008190033",
									".code": [
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "12261EE7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "2E1283E3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "371FD8E6"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "15"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "654C6295"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "6B6D1955"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "8DB57994"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "95CB741D"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "9E9F669C"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "27"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "C19D93FB"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "27"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "C51B9507"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "EB0C4955"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "F30F29DD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "F4B01B18"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "35"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "35"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5740,
											"end": 5762,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "45"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "45"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 3536,
											"end": 3541,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "46"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 3612,
											"end": 3634,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3612,
											"end": 3634,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5432,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "52"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 5396,
											"end": 5415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "tag",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5432,
											"end": 5454,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 5432,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 5432,
											"end": 5476,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5432,
											"end": 5476,
											"name": "tag",
											"source": 18,
											"value": "52"
										},
										{
											"begin": 5432,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3749,
											"end": 3787,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 3749,
											"end": 3787,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "54"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3853,
											"name": "PUSH",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "6E553F65"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "56"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "58"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3899,
											"end": 3919,
											"name": "PUSH",
											"source": 18,
											"value": "B"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 3536,
											"end": 3541,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3980,
											"end": 4021,
											"name": "PUSH",
											"source": 18,
											"value": "5150AB7694A22FBC01C642BC10316565247DF962FA3F0AC3B5D1A18BA45B485B"
										},
										{
											"begin": 3980,
											"end": 4021,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3980,
											"end": 4021,
											"name": "LOG2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "tag",
											"source": 18,
											"value": "58"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "tag",
											"source": 18,
											"value": "61"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 3826,
											"end": 3889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "tag",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "tag",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "61"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "tag",
											"source": 18,
											"value": "56"
										},
										{
											"begin": 3826,
											"end": 3889,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "54"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "496E73756666696369656E7420636F6C6C61746572616C000000000000000000"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "50"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "18"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "496E76616C696420626F72726F77657220616464726573730000000000000000"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1B"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4C6F616E206E6F7420696E20637265617461626C652073746174650000000000"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "46"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "31"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "69"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "69"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "29"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 615,
											"end": 650,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "27"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 1086,
											"end": 1108,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "78"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "23"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "A"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "B"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "C"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP8",
											"source": 18
										},
										{
											"begin": 1115,
											"end": 1145,
											"name": "PUSH",
											"source": 18,
											"value": "D"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP10",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP12",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP13",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP13",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP11",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP10",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP9",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "C0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "100"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "120"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "140"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 4094,
											"end": 4099,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "93"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4103,
											"end": 4120,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 4094,
											"end": 4120,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "95"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 4164,
											"end": 4175,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 4361,
											"end": 4395,
											"name": "PUSH",
											"source": 18,
											"value": "9E71D2FB732E68272B7E74ECFD14638673C1D77E19A5D390A3FFFF054D57C44B"
										},
										{
											"begin": 4361,
											"end": 4395,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "97"
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 4231,
											"end": 4235,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 4231,
											"end": 4235,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 4238,
											"end": 4260,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "tag",
											"source": 18,
											"value": "97"
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4297,
											"end": 4312,
											"name": "TIMESTAMP",
											"source": 18
										},
										{
											"begin": 4271,
											"end": 4294,
											"name": "PUSH",
											"source": 18,
											"value": "D"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 4094,
											"end": 4099,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 4238,
											"end": 4260,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4361,
											"end": 4395,
											"name": "LOG1",
											"source": 18
										},
										{
											"begin": 4103,
											"end": 4120,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "95"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1D"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4C6F616E206D75737420626520696E2070656E64696E67207374617465000000"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "93"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "19"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5432,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "69"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "53"
										},
										{
											"begin": 5396,
											"end": 5415,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 5396,
											"end": 5415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "39"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "43"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "108"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "108"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5880,
											"name": "PUSH",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "STATICCALL",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "109"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "111"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "112"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "tag",
											"source": 18,
											"value": "111"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "113"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "tag",
											"source": 18,
											"value": "114"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "115"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5853,
											"end": 5896,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "tag",
											"source": 18,
											"value": "115"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "112"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "tag",
											"source": 18,
											"value": "113"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "114"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "tag",
											"source": 18,
											"value": "109"
										},
										{
											"begin": 5853,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "15"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FF"
										},
										{
											"begin": 4479,
											"end": 4484,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "123"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4479,
											"end": 4484,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 4479,
											"end": 4504,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "125"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4607,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "127"
										},
										{
											"begin": 4563,
											"end": 4585,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "128"
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 4588,
											"end": 4607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "tag",
											"source": 18,
											"value": "128"
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4607,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4607,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 4563,
											"end": 4607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4607,
											"name": "tag",
											"source": 18,
											"value": "127"
										},
										{
											"begin": 4563,
											"end": 4607,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 4625,
											"end": 4649,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "129"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 4774,
											"end": 4788,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "131"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4563,
											"end": 4574,
											"name": "PUSH",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 4742,
											"end": 4752,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4742,
											"end": 4752,
											"name": "CALLER",
											"source": 18
										},
										{
											"begin": 4774,
											"end": 4788,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4774,
											"end": 4788,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 4774,
											"end": 4788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4774,
											"end": 4788,
											"name": "tag",
											"source": 18,
											"value": "131"
										},
										{
											"begin": 4774,
											"end": 4788,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4479,
											"end": 4484,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "7E72C7D7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4980,
											"end": 4984,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "134"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "136"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "137"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 4826,
											"end": 4855,
											"name": "PUSH",
											"source": 18,
											"value": "4002DBA848920F438092E08090CFB5FC47144C22704268B402C9553A1B5ADFE6"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5001,
											"end": 5013,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5001,
											"end": 5013,
											"name": "PUSH",
											"source": 18,
											"value": "409FCED1B85AE32A29FB1E18894D8361A5F2653DC27ADF7102D86175C2901D7C"
										},
										{
											"begin": 5001,
											"end": 5013,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5001,
											"end": 5013,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 5001,
											"end": 5013,
											"name": "LOG1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4826,
											"end": 4855,
											"name": "LOG1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "tag",
											"source": 18,
											"value": "136"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "137"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "138"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "41"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "tag",
											"source": 18,
											"value": "134"
										},
										{
											"begin": 4943,
											"end": 4986,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "129"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "84"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "496E73756666696369656E7420616D6F756E7420666F722072657061796D656E"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "125"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "461BCD"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4C6F616E206D75737420626520616374697665"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "68"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "123"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5562,
											"end": 5585,
											"name": "PUSH",
											"source": 18,
											"value": "D"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "150"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "21"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4E487B71"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "41"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 5026,
											"end": 5281,
											"name": "tag",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 5026,
											"end": 5281,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5132,
											"end": 5154,
											"name": "PUSH",
											"source": 18,
											"value": "C"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 5114,
											"end": 5129,
											"name": "TIMESTAMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5114,
											"end": 5129,
											"name": "TIMESTAMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "152"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5196,
											"name": "PUSH",
											"source": 18,
											"value": "A"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 5171,
											"end": 5196,
											"name": "PUSH",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 5239,
											"end": 5263,
											"name": "PUSH",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1786F63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "E2"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5215,
											"end": 5237,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "STATICCALL",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "158"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5164,
											"end": 5274,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5026,
											"end": 5281,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5026,
											"end": 5281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "tag",
											"source": 18,
											"value": "160"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "tag",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 5171,
											"end": 5274,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "tag",
											"source": 18,
											"value": "164"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5026,
											"end": 5281,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5026,
											"end": 5281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "tag",
											"source": 18,
											"value": "162"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "163"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "tag",
											"source": 18,
											"value": "158"
										},
										{
											"begin": 5171,
											"end": 5274,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "167"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "tag",
											"source": 8,
											"value": "7"
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "44"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "A0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP7",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP4",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "171"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "154"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "176"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "NOT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "1F"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 509,
											"end": 5942,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "176"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP5",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "179"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1702,
											"end": 1890,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 8,
											"value": "180"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "5274AFE7"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "178"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SLT",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "63"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "179"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "tag",
											"source": 18,
											"value": "171"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "60"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "177"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 9,
											"value": "188"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "186"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9996B315"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "PUSH",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 509,
											"end": 5942,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "191"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMP",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IInterestModel.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/IPoolOrganizer.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaPool.sol",
								"contracts/contracts/protocol/TuliaVault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"activateLoan(address,uint256)": "f30f29dd",
							"calculateInterest()": "eb0c4955",
							"calculateRequiredCollateral()": "6b6d1955",
							"fundLoan()": "8db57994",
							"getCollateralAmount(address)": "654c6295",
							"getFundedBlock()": "2e1283e3",
							"getLoanAmount()": "f4b01b18",
							"getLoanState()": "9e9f669c",
							"loanDetails()": "95cb741d",
							"permit2()": "12261ee7",
							"poolOrganizer()": "c51b9507",
							"repay(uint256)": "371fd8e6",
							"state()": "c19d93fb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loanTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"repaymentTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralVaultAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract IInterestModel\",\"name\":\"interestModel\",\"type\":\"address\"},{\"internalType\":\"contract IPermit2\",\"name\":\"_permit2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolOrganizerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"LoanActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"}],\"name\":\"LoanFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"loanToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repaymentToken\",\"type\":\"address\"}],\"name\":\"LoanOfferCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRepaid\",\"type\":\"uint256\"}],\"name\":\"RepaymentMade\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"activateLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateRequiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundedBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoanState\",\"outputs\":[{\"internalType\":\"enum TuliaPool.LoanState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"loanToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"repaymentToken\",\"type\":\"address\"},{\"internalType\":\"contract TuliaVault\",\"name\":\"collateralVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repaymentPeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract IInterestModel\",\"name\":\"interestModel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolOrganizer\",\"outputs\":[{\"internalType\":\"contract IPoolOrganizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum TuliaPool.LoanState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the lifecycle of loans including creation, funding, repayment, and defaults.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_permit2\":\"The Permit2 contract for ERC20 token operations\",\"collateralVaultAddress\":\"The address of the vault where collateral will be stored\",\"interestModel\":\"The contract that calculates interest\",\"interestRate\":\"The interest rate\",\"lender\":\"The address of the lender\",\"loanAmount\":\"The amount of the loan\",\"loanTokenAddress\":\"The address of the token to be loaned\",\"poolOrganizerAddress\":\"The Pool Organizer contract for managing pool registrations\",\"repaymentPeriod\":\"The duration over which the loan must be repaid\",\"repaymentTokenAddress\":\"The token address in which repayments are to be made\"}}},\"title\":\"TuliaPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/protocol/TuliaPool.sol\":\"TuliaPool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/IInterestModel.sol\":{\"keccak256\":\"0x5468edc427e44105a5ad9aec77e3aa6e2ba18096773fb0621c1dbd9a56a6df28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8d660c45537d4991407716bdf27da05503917811afa3abee8bf4e603d74cc0e5\",\"dweb:/ipfs/QmRi7rWXavTz9mNRNvSHwYvcgBtHwrutZzT9eVqHJqKU25\"]},\"contracts/contracts/interfaces/IPermit2.sol\":{\"keccak256\":\"0xaa631cc9f53e699301d94233007110a345e6779011def484e8dd97b8fe0af771\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc0502cf19c9c18f320a3001201e89e350393b75837f6b7971de18b2de06f30d\",\"dweb:/ipfs/QmT9SfhdJ7VJNNrf94g4H5usyi7ShqWGx7Cqsz9jZTjX96\"]},\"contracts/contracts/interfaces/IPoolOrganizer.sol\":{\"keccak256\":\"0x59ff86f25c1bc3bb33995bab912a576832e70686099fd8425804d1f158750404\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3c8a718c3608bc8e0e2a3fa6928886033a1bc389198861e6dd2dbe7b1fa5e0ef\",\"dweb:/ipfs/QmYRb22rqgYnZhaFJpHEMCys9QMGDyZzy66JSiAxFwjHJP\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]},\"contracts/contracts/protocol/TuliaPool.sol\":{\"keccak256\":\"0xa5a2c05ce46256b02d6e3681697aade0439b2c6d878e40277401fb310acbc40f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8c50a35b60515aa44b93832917626cd242ad970df5e6a5a6c2a2662518b1084\",\"dweb:/ipfs/QmaSZeDuYW6WMmzBUvNAxNC8ZSpG3CgdizfErBLj4crANV\"]},\"contracts/contracts/protocol/TuliaVault.sol\":{\"keccak256\":\"0xff60aa83840f8aad1edfc7eb6c7cb20398488061000975d0950ed196ac7a9999\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc2ecf5a4ff60c7e930a61d39cf02bf111d626e82807f112c9ece60a6efbb486\",\"dweb:/ipfs/QmWWqBZMMp5Kx9AcuKm2gkPoQfrLmzWsqLDQqyAv75MsX5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 317,
								"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 3834,
								"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
								"label": "permit2",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IPermit2)3585"
							},
							{
								"astId": 3837,
								"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
								"label": "poolOrganizer",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IPoolOrganizer)3675"
							},
							{
								"astId": 3873,
								"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
								"label": "state",
								"offset": 20,
								"slot": "2",
								"type": "t_enum(LoanState)3870"
							},
							{
								"astId": 3876,
								"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
								"label": "loanDetails",
								"offset": 0,
								"slot": "3",
								"type": "t_struct(LoanDetails)3864_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_contract(IERC20)964": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IInterestModel)3573": {
								"encoding": "inplace",
								"label": "contract IInterestModel",
								"numberOfBytes": "20"
							},
							"t_contract(IPermit2)3585": {
								"encoding": "inplace",
								"label": "contract IPermit2",
								"numberOfBytes": "20"
							},
							"t_contract(IPoolOrganizer)3675": {
								"encoding": "inplace",
								"label": "contract IPoolOrganizer",
								"numberOfBytes": "20"
							},
							"t_contract(TuliaVault)4430": {
								"encoding": "inplace",
								"label": "contract TuliaVault",
								"numberOfBytes": "20"
							},
							"t_enum(LoanState)3870": {
								"encoding": "inplace",
								"label": "enum TuliaPool.LoanState",
								"numberOfBytes": "1"
							},
							"t_struct(LoanDetails)3864_storage": {
								"encoding": "inplace",
								"label": "struct TuliaPool.LoanDetails",
								"members": [
									{
										"astId": 3839,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "lender",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 3842,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "loanToken",
										"offset": 0,
										"slot": "1",
										"type": "t_contract(IERC20)964"
									},
									{
										"astId": 3845,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "repaymentToken",
										"offset": 0,
										"slot": "2",
										"type": "t_contract(IERC20)964"
									},
									{
										"astId": 3848,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "collateralVault",
										"offset": 0,
										"slot": "3",
										"type": "t_contract(TuliaVault)4430"
									},
									{
										"astId": 3850,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "loanAmount",
										"offset": 0,
										"slot": "4",
										"type": "t_uint256"
									},
									{
										"astId": 3852,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "interestRate",
										"offset": 0,
										"slot": "5",
										"type": "t_uint256"
									},
									{
										"astId": 3854,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "repaymentPeriod",
										"offset": 0,
										"slot": "6",
										"type": "t_uint256"
									},
									{
										"astId": 3857,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "interestModel",
										"offset": 0,
										"slot": "7",
										"type": "t_contract(IInterestModel)3573"
									},
									{
										"astId": 3859,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "borrower",
										"offset": 0,
										"slot": "8",
										"type": "t_address"
									},
									{
										"astId": 3861,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "startBlock",
										"offset": 0,
										"slot": "9",
										"type": "t_uint256"
									},
									{
										"astId": 3863,
										"contract": "contracts/contracts/protocol/TuliaPool.sol:TuliaPool",
										"label": "fundedBlock",
										"offset": 0,
										"slot": "10",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "352"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/protocol/TuliaVault.sol": {
				"TuliaVault": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "asset",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								},
								{
									"internalType": "contract IPermit2",
									"name": "_permitSystem",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxDeposit",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxMint",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxRedeem",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "max",
									"type": "uint256"
								}
							],
							"name": "ERC4626ExceededMaxWithdraw",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Deposit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "Withdraw",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "convertToAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "convertToShares",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "deposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch[]",
									"name": "permitData",
									"type": "tuple[]"
								},
								{
									"internalType": "bytes[]",
									"name": "signatures",
									"type": "bytes[]"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "depositWithBatchPermit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitData",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "depositWithPermit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "maxMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "maxWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "permitSystem",
							"outputs": [
								{
									"internalType": "contract IPermit2",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewDeposit",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewMint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								}
							],
							"name": "previewRedeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								}
							],
							"name": "previewWithdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "shares",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "redeem",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalAssets",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "assets",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "withdraw",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extends ERC4626 to utilize a permit system for streamlined deposit operations.",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC4626ExceededMaxDeposit(address,uint256,uint256)": [
								{
									"details": "Attempted to deposit more assets than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxMint(address,uint256,uint256)": [
								{
									"details": "Attempted to mint more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxRedeem(address,uint256,uint256)": [
								{
									"details": "Attempted to redeem more shares than the max amount for `receiver`."
								}
							],
							"ERC4626ExceededMaxWithdraw(address,uint256,uint256)": [
								{
									"details": "Attempted to withdraw more assets than the max amount for `receiver`."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"asset()": {
								"details": "See {IERC4626-asset}. "
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the TuliaVault with necessary details and links to the permit system for handling token operations securely.",
								"params": {
									"_permitSystem": "Address of the Permit2 contract used for ERC20 token operations.",
									"asset": "The ERC20 token that this vault will accept.",
									"name": "The name of the vault token.",
									"symbol": "The symbol of the vault token."
								}
							},
							"convertToAssets(uint256)": {
								"details": "See {IERC4626-convertToAssets}. "
							},
							"convertToShares(uint256)": {
								"details": "See {IERC4626-convertToShares}. "
							},
							"decimals()": {
								"details": "Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}."
							},
							"deposit(uint256,address)": {
								"details": "See {IERC4626-deposit}. "
							},
							"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)": {
								"params": {
									"permitData": "Array of permit data for each deposit.",
									"receiver": "Address receiving the vault shares for all deposits.",
									"signatures": "Array of signatures corresponding to each permit data."
								},
								"returns": {
									"shares": "The total number of shares issued to the receiver for all deposits."
								}
							},
							"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)": {
								"params": {
									"amount": "The amount of the underlying asset to deposit.",
									"permitData": "Data required for the permit including details about the approval.",
									"receiver": "Address receiving the vault shares.",
									"signature": "Signature from the token holder approving the deposit."
								},
								"returns": {
									"shares": "The number of shares issued to the receiver."
								}
							},
							"maxDeposit(address)": {
								"details": "See {IERC4626-maxDeposit}. "
							},
							"maxMint(address)": {
								"details": "See {IERC4626-maxMint}. "
							},
							"maxRedeem(address)": {
								"details": "See {IERC4626-maxRedeem}. "
							},
							"maxWithdraw(address)": {
								"details": "See {IERC4626-maxWithdraw}. "
							},
							"mint(uint256,address)": {
								"details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"previewDeposit(uint256)": {
								"details": "See {IERC4626-previewDeposit}. "
							},
							"previewMint(uint256)": {
								"details": "See {IERC4626-previewMint}. "
							},
							"previewRedeem(uint256)": {
								"details": "See {IERC4626-previewRedeem}. "
							},
							"previewWithdraw(uint256)": {
								"details": "See {IERC4626-previewWithdraw}. "
							},
							"redeem(uint256,address,address)": {
								"details": "See {IERC4626-redeem}. "
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalAssets()": {
								"details": "See {IERC4626-totalAssets}. "
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"withdraw(uint256,address,address)": {
								"details": "See {IERC4626-withdraw}. "
							}
						},
						"title": "TuliaVault",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  0xe0\n  dup1\n  0x40\n  mstore\n  jumpi(tag_18, callvalue)\n  bytecodeSize\n  dup1\n  codesize\n  sub\n  dup1\n  swap2\n  tag_7\n  dup3\n  dup6\n  tag_1\n  jump\t// in\ntag_7:\n  dup4\n  codecopy\n  dup2\n  add\n  0x80\n  dup3\n  dup3\n  sub\n  slt\n  tag_18\n  jumpi\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap3\n  dup4\n  dup3\n  and\n  dup3\n  sub\n  tag_18\n  jumpi\n  0x20\n  dup2\n  dup2\n  add\n  mload\n  swap1\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  swap2\n  dup3\n  dup2\n  gt\n  tag_18\n  jumpi\n  dup6\n  tag_14\n  swap2\n  dup4\n  add\n  tag_3\n  jump\t// in\ntag_14:\n  swap5\n  0x40\n  dup3\n  add\n  mload\n  dup4\n  dup2\n  gt\n  tag_18\n  jumpi\n  0x60\n  swap2\n  tag_17\n  swap2\n  dup5\n  add\n  tag_3\n  jump\t// in\ntag_17:\n  swap2\n  add\n  mload\n  swap6\n  dup7\n  and\n  dup7\n  sub\n  tag_18\n  jumpi\n  dup5\n  mload\n  dup3\n  dup2\n  gt\n  tag_33\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  0x03\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  swap2\n  dup3\n  sload\n  swap2\n  0x01\n  swap8\n  dup9\n  dup5\n  dup2\n  shr\n  swap5\n  and\n  dup1\n  iszero\n  tag_22\n  jumpi\ntag_23:\n  dup8\n  dup6\n  lt\n  eq\n  tag_24\n  jumpi\n  dup2\n  swap1\n  0x1f\n  swap5\n  dup6\n  dup2\n  gt\n  tag_26\n  jumpi\ntag_27:\n  pop\n  dup8\n  swap1\n  dup6\n  dup4\n  gt\n  0x01\n  eq\n  tag_28\n  jumpi\n  0x00\n  swap3\n  tag_30\n  jumpi\ntag_31:\n  pop\n  pop\n  not(0x00)\n  dup3\n  dup7\n  shl\n  shr\n  not\n  and\n  swap1\n  dup9\n  shl\n  or\n  dup4\n  sstore\ntag_32:\n  dup1\n  mload\n  swap4\n  dup5\n  gt\n  tag_33\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  0x04\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  swap5\n  dup6\n  sload\n  dup9\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_35\n  jumpi\ntag_36:\n  dup3\n  dup3\n  lt\n  eq\n  tag_37\n  jumpi\n  swap1\n  dup2\n  dup5\n  dup8\n  swap7\n  swap6\n  swap5\n  swap4\n  gt\n  tag_39\n  jumpi\ntag_40:\n  pop\n  dup1\n  swap3\n  dup6\n  gt\n  0x01\n  eq\n  tag_41\n  jumpi\n  pop\n  0x00\n  swap4\n  tag_43\n  jumpi\ntag_44:\n  pop\n  pop\n  dup3\n  dup7\n  shl\n  swap3\n  not(0x00)\n  swap2\n  shl\n  shr\n  not\n  and\n  or\n  swap1\n  sstore\ntag_45:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4240:4268  _tryGetAssetDecimals(asset_) */\n  tag_46\n  dup2\n  tag_4\n  jump\t// in\ntag_46:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  swap1\n  iszero\n  tag_47\n  jumpi\ntag_49:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4278:4328  _underlyingDecimals = success ? assetDecimals : 18 */\n  0xa0\n  mstore\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  0x80\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4338:4353  _asset = asset_ */\n  mstore\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1821:1843  _status = _NOT_ENTERED */\n  0x05\n    /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1716:1717  1 */\n  sstore\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":1200:1228  permitSystem = _permitSystem */\n  0xc0\n  mstore\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  mload(0x80)\n  dup2\n  assignImmutable(\"0x57d03f72a618a841c753598d7d2cbcbbd5f43a73c69f9abc886bd29cf4101ea1\")\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4278:4328  _underlyingDecimals = success ? assetDecimals : 18 */\n  0xa0\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  mload\n  dup2\n  assignImmutable(\"0xc0bf3ddb79e7c5faf09af1eaa09640fae848e430edf7a04658ec05be9ade7aab\")\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":1200:1228  permitSystem = _permitSystem */\n  0xc0\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  mload\n  dup2\n  assignImmutable(\"0xa2d87bfed9ffce410eeb73db13b543e4f8e1158244deff94c16e8199a16f75b2\")\n  return\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\ntag_47:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4326:4328  18 */\n  0x12\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4300:4328  success ? assetDecimals : 18 */\n  jump(tag_49)\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\ntag_43:\n  add\n  mload\n  swap2\n  pop\n  0x00\n  dup1\n  jump(tag_44)\ntag_41:\n  swap3\n  swap2\n  swap1\n  dup9\n  swap6\n  pop\n  not(0x1f)\n  dup6\n  and\n  dup8\n  0x00\n  mstore\n  dup5\n  0x00\n  keccak256\n  swap5\n  0x00\n  swap1\ntag_50:\n  dup3\n  dup3\n  lt\n  tag_51\n  jumpi\n  pop\n  pop\n  dup6\n  gt\n  tag_53\n  jumpi\ntag_54:\n  pop\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  swap1\n  sstore\n  jump(tag_45)\ntag_53:\n  add\n  mload\n  swap1\n  0xf8\n  dup5\n  not(0x00)\n  swap3\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  dup1\n  jump(tag_54)\ntag_51:\n  dup5\n  dup5\n  add\n  mload\n  dup8\n  sstore\n  dup12\n  swap9\n  swap1\n  swap7\n  add\n  swap6\n  swap4\n  dup5\n  add\n  swap4\n  swap1\n  dup2\n  add\n  swap1\n  jump(tag_50)\ntag_39:\n  swap1\n  swap2\n  swap3\n  swap4\n  swap5\n  pop\n  dup7\n  0x00\n  mstore\n  dup2\n  0x00\n  keccak256\n  dup5\n  dup1\n  dup9\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup5\n  dup10\n  lt\n  tag_55\n  jumpi\ntag_56:\n  swap2\n  dup12\n  swap2\n  dup10\n  swap9\n  swap8\n  swap7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_57:\n  dup3\n  dup2\n  lt\n  tag_58\n  jumpi\n  pop\n  pop\n  jump(tag_40)\ntag_58:\n  0x00\n  dup2\n  sstore\n  dup9\n  swap8\n  pop\n  dup12\n  swap2\n  add\n  jump(tag_57)\ntag_55:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_56)\ntag_37:\n  0x22\n  dup8\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore\n  revert(0x00, 0x24)\ntag_35:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_36)\ntag_33:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  0x04\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  mstore\n  revert(0x00, 0x24)\ntag_30:\n  add\n  mload\n  swap1\n  pop\n  0x00\n  dup1\n  jump(tag_31)\ntag_28:\n  swap1\n  dup11\n  swap4\n  pop\n  not(0x1f)\n  dup4\n  and\n  swap2\n  dup8\n  0x00\n  mstore\n  dup10\n  0x00\n  keccak256\n  swap3\n  0x00\ntag_60:\n  dup12\n  dup3\n  dup3\n  lt\n  tag_61\n  jumpi\n  pop\n  pop\n  dup5\n  gt\n  tag_63\n  jumpi\ntag_64:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n  dup4\n  sstore\n  jump(tag_32)\ntag_63:\n  add\n  mload\n  not(0x00)\n  dup4\n  dup9\n  shl\n  0xf8\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  jump(tag_64)\ntag_61:\n  dup4\n  dup6\n  add\n  mload\n  dup7\n  sstore\n  dup15\n  swap8\n  swap1\n  swap6\n  add\n  swap5\n  swap4\n  dup5\n  add\n  swap4\n  add\n  jump(tag_60)\ntag_26:\n  swap1\n  swap2\n  pop\n  dup6\n  0x00\n  mstore\n  dup8\n  0x00\n  keccak256\n  dup6\n  dup1\n  dup6\n  add\n  0x05\n  shr\n  dup3\n  add\n  swap3\n  dup11\n  dup7\n  lt\n  tag_65\n  jumpi\ntag_66:\n  swap2\n  dup13\n  swap2\n  dup7\n  swap6\n  swap5\n  swap4\n  add\n  0x05\n  shr\n  add\n  swap2\ntag_67:\n  dup3\n  dup2\n  lt\n  tag_68\n  jumpi\n  pop\n  pop\n  jump(tag_27)\ntag_68:\n  0x00\n  dup2\n  sstore\n  dup6\n  swap5\n  pop\n  dup13\n  swap2\n  add\n  jump(tag_67)\ntag_65:\n  swap3\n  pop\n  dup2\n  swap3\n  jump(tag_66)\ntag_24:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x22)\n  revert(0x00, 0x24)\ntag_22:\n  swap4\n  0x7f\n  and\n  swap4\n  jump(tag_23)\ntag_18:\n  0x00\n  dup1\n  revert\ntag_1:\n  0x1f\n  swap1\n  swap2\n  add\n  not(0x1f)\n  and\n  dup2\n  add\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n  dup3\n  gt\n  swap1\n  dup3\n  lt\n  or\n  tag_33\n  jumpi\n  0x40\n  mstore\n  jump\t// out\ntag_2:\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_33\n  jumpi\n  0x1f\n  add\n  not(0x1f)\n  and\n  0x20\n  add\n  swap1\n  jump\t// out\ntag_3:\n  dup2\n  0x1f\n  dup3\n  add\n  slt\n  iszero\n  tag_18\n  jumpi\n  dup1\n  mload\n  swap1\n  tag_76\n  dup3\n  tag_2\n  jump\t// in\ntag_76:\n  swap3\n  tag_77\n  mload(0x40)\n  swap5\n  dup6\n  tag_1\n  jump\t// in\ntag_77:\n  dup3\n  dup5\n  mstore\n  0x20\n  dup4\n  dup4\n  add\n  add\n  gt\n  tag_18\n  jumpi\n  dup2\n  0x00\n  swap3\n  0x20\n  dup1\n  swap4\n  add\n  dup4\n  dup7\n  add\n  mcopy\n  dup4\n  add\n  add\n  mstore\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\ntag_4:\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  0x40\n  dup1\n  mload\n  shl(0xe0, 0x313ce567)\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x20\n  dup3\n  add\n  swap1\n  dup2\n  mstore\n  0x04\n  dup3\n  mstore\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  swap1\n  swap3\n  swap2\n  dup4\n  add\n  swap2\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_33\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x00\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  swap4\n  dup5\n  swap4\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4733  address(asset_).staticcall(... */\n  mload\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  swap2\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4640:4733  address(asset_).staticcall(... */\n  gas\n  staticcall\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  jumpi(tag_82, iszero(returndatasize))\n  returndatasize\n  swap1\n  tag_84\n  dup3\n  tag_2\n  jump\t// in\ntag_84:\n  swap2\n  tag_85\n  mload(0x40)\n  swap4\n  dup5\n  tag_1\n  jump\t// in\ntag_85:\n  dup3\n  mstore\n  returndatasize\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x00\n  0x20\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  dup5\n  add\n  returndatacopy\ntag_86:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\n  dup1\n  tag_87\n  jumpi\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\ntag_88:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\n  tag_89\n  jumpi\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\ntag_90:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5012:5029  return (false, 0) */\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5012:5029  return (false, 0) */\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x00\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4503:5036  function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\ntag_89:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x20\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  dup2\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4829:4867  abi.decode(encodedDecimals, (uint256)) */\n  dup2\n  add\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  sub\n  slt\n  tag_18\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x20\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4829:4867  abi.decode(encodedDecimals, (uint256)) */\n  add\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  mload\n  0xff\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4885:4920  returnedDecimals <= type(uint8).max */\n  dup2\n  gt\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4743:5003  if (success && encodedDecimals.length >= 32) {... */\n  tag_90\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4881:4993  if (returnedDecimals <= type(uint8).max) {... */\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4940:4978  return (true, uint8(returnedDecimals)) */\n  swap1\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  0xff\n  0x01\n  swap3\n  and\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4940:4978  return (true, uint8(returnedDecimals)) */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\ntag_87:\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4680:4723  abi.encodeCall(IERC20Metadata.decimals, ()) */\n  0x20\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n  dup2\n  mload\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4758:4786  encodedDecimals.length >= 32 */\n  lt\n  iszero\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":4747:4786  success && encodedDecimals.length >= 32 */\n  jump(tag_88)\n    /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\ntag_82:\n  0x60\n  swap1\n  jump(tag_86)\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_35, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_35:\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x01e1d114\n      eq\n      tag_37\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_39\n      jumpi\n      dup1\n      0x07a2d13a\n      eq\n      tag_59\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_43\n      jumpi\n      dup1\n      0x0a28a477\n      eq\n      tag_45\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_47\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_49\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_51\n      jumpi\n      dup1\n      0x38d52e0f\n      eq\n      tag_53\n      jumpi\n      dup1\n      0x402d267d\n      eq\n      tag_79\n      jumpi\n      dup1\n      0x464582cb\n      eq\n      tag_57\n      jumpi\n      dup1\n      0x4cdad506\n      eq\n      tag_59\n      jumpi\n      dup1\n      0x6e553f65\n      eq\n      tag_61\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_85\n      jumpi\n      dup1\n      0x7b17edf2\n      eq\n      tag_65\n      jumpi\n      dup1\n      0x94bf804d\n      eq\n      tag_67\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_69\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_71\n      jumpi\n      dup1\n      0xb3d7f6b9\n      eq\n      tag_73\n      jumpi\n      dup1\n      0xb460af94\n      eq\n      tag_75\n      jumpi\n      dup1\n      0xba087652\n      eq\n      tag_77\n      jumpi\n      dup1\n      0xc63d75b6\n      eq\n      tag_79\n      jumpi\n      dup1\n      0xc6e6f592\n      eq\n      tag_91\n      jumpi\n      dup1\n      0xce96cb77\n      eq\n      tag_83\n      jumpi\n      dup1\n      0xd905777e\n      eq\n      tag_85\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_87\n      jumpi\n      dup1\n      0xe6adb29c\n      eq\n      tag_89\n      jumpi\n      0xef8b30f7\n      eq\n      tag_91\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_91:\n      tag_14\n      jump\t// in\n    tag_89:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x0120))\n      add(not(0x23), calldatasize)\n      calldataload(0x04)\n      0xc0\n      dup3\n      slt\n      tag_124\n      jumpi\n      0x80\n      mload(0x40)\n      swap3\n      tag_99\n      dup5\n      tag_7\n      jump\t// in\n    tag_99:\n      slt\n      tag_124\n      jumpi\n      mload(0x40)\n      swap2\n      tag_102\n      dup4\n      tag_9\n      jump\t// in\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      calldataload(0x24)\n      dup5\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      dup2\n      mstore\n      calldataload(0x44)\n      dup5\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      0x20\n      dup3\n      add\n      mstore\n      0xffffffffffff\n      calldataload(0x64)\n      dup2\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      0x40\n      dup4\n      add\n      mstore\n      calldataload(0x84)\n      swap1\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      0x60\n      dup3\n      add\n      mstore\n      dup2\n      mstore\n      calldataload(0xa4)\n      dup4\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      0x20\n      dup3\n      add\n      swap1\n      dup2\n      mstore\n      0x40\n      dup3\n      add\n      swap1\n      calldataload(0xc4)\n      dup3\n      mstore\n      calldataload(0xe4)\n      swap2\n      sub(shl(0x40, 0x01), 0x01)\n      dup1\n      dup5\n      gt\n      tag_124\n      jumpi\n      calldatasize\n      0x23\n      dup6\n      add\n      slt\n      iszero\n      tag_124\n      jumpi\n      dup4\n      0x04\n      add\n      calldataload\n      swap1\n      dup2\n      gt\n      tag_124\n      jumpi\n      calldatasize\n      0x24\n      dup3\n      dup7\n      add\n      add\n      gt\n      tag_124\n      jumpi\n      0x0104\n      swap2\n      dup3\n      calldataload\n      swap6\n      dup9\n      dup8\n      and\n      dup8\n      sub\n      tag_124\n      jumpi\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_123\n      tag_29\n      jump\t// in\n    tag_123:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2010  permitSystem */\n      dup9\n      immutable(\"0xa2d87bfed9ffce410eeb73db13b543e4f8e1158244deff94c16e8199a16f75b2\")\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      swap4\n      dup5\n      extcodesize\n      iszero\n      tag_124\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      swap7\n      tag_126\n      swap5\n      0x24\n      tag_127\n      swap4\n      dup11\n      swap7\n      mload(0x40)\n      swap15\n      dup16\n      swap12\n      dup13\n      swap11\n      dup12\n      swap10\n      shl(0xe4, 0x02b67b57)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      dup12\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2018:2028  msg.sender */\n      caller\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      dup13\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      dup7\n      dup12\n      add\n      swap1\n      mload\n      0x60\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      dup3\n      mload\n      and\n      dup5\n      mstore\n      0x20\n      dup3\n      add\n      mload\n      and\n      0x20\n      dup5\n      add\n      mstore\n      dup2\n      0x40\n      dup3\n      add\n      mload\n      swap2\n      0xffffffffffff\n      dup1\n      swap4\n      and\n      0x40\n      dup7\n      add\n      mstore\n      add\n      mload\n      and\n      swap2\n      add\n      mstore\n      jump\n    tag_126:\n      mload\n      and\n      0xa4\n      dup9\n      add\n      mstore\n      mload\n      0xc4\n      dup8\n      add\n      mstore\n      0x0100\n      0xe4\n      dup8\n      add\n      mstore\n      dup6\n      add\n      swap3\n      add\n      tag_20\n      jump\t// in\n    tag_127:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      sub\n      swap3\n      gas\n      call\n      swap1\n      dup2\n      iszero\n      tag_128\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      tag_130\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n      swap3\n      tag_131\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      pop\n      tag_133\n      dup4\n      tag_25\n      jump\t// in\n    tag_133:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2018:2028  msg.sender */\n      swap3\n      dup4\n      swap2\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      tag_28\n      jump\t// in\n    tag_130:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2809:2831  _status = _NOT_ENTERED */\n      0x05\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n    tag_131:\n      tag_134\n      swap1\n      tag_8\n      jump\t// in\n    tag_134:\n      dup5\n      jump(tag_132)\n    tag_128:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":1998:2052  permitSystem.permit(msg.sender, permitData, signature) */\n    tag_124:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      dup1\n      revert\n    tag_87:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x40))\n      tag_139\n      tag_3\n      jump\t// in\n    tag_139:\n      tag_140\n      tag_4\n      jump\t// in\n    tag_140:\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap2\n      and\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      swap2\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_85:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n      tag_145\n      tag_146\n      tag_3\n      jump\t// in\n    tag_146:\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_145:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_83:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_151\n      tag_3\n      jump\t// in\n    tag_151:\n      and\n      0x00\n      mstore\n      mstore(0x20, 0x00)\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload(keccak256(0x00, 0x40))\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_23\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_79:\n      tag_6\n      jump\t// in\n    tag_77:\n      jumpi(tag_124, callvalue)\n      tag_155\n      calldatasize\n      tag_13\n      jump\t// in\n    tag_155:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n      swap1\n      tag_156\n      dup3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6948:6964  balanceOf(owner) */\n    tag_156:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9511:9529  shares > maxShares */\n      dup1\n      dup5\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      pop\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9720:9726  shares */\n      tag_145\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      swap2\n      tag_160\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      swap6\n      tag_23\n      jump\t// in\n    tag_160:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap4\n      dup5\n      swap2\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9720:9726  shares */\n      tag_30\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9507:9613  if (shares > maxShares) {... */\n    tag_157:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe2, 0x2e52afbb)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap4\n      swap1\n      swap4\n      and\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      dup5\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      pop\n      0x44\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      revert\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_75:\n      jumpi(tag_124, callvalue)\n      tag_164\n      calldatasize\n      tag_13\n      jump\t// in\n    tag_164:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_165\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n      tag_166\n      dup4\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6766:6782  balanceOf(owner) */\n    tag_166:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6749:6804  _convertToAssets(balanceOf(owner), Math.Rounding.Floor) */\n      tag_23\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9057:9075  assets > maxAssets */\n      dup1\n      dup5\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9270:9276  shares */\n      tag_145\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      swap1\n      dup4\n      tag_170\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      swap6\n      tag_24\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap4\n      dup5\n      swap3\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9270:9276  shares */\n      tag_30\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9053:9161  if (assets > maxAssets) {... */\n    tag_167:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe2, 0x3fa733bb)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9098:9150  ERC4626ExceededMaxWithdraw(owner, assets, maxAssets) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap4\n      swap1\n      swap4\n      and\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9098:9150  ERC4626ExceededMaxWithdraw(owner, assets, maxAssets) */\n      dup5\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      pop\n      0x44\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      revert\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_73:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      tag_22\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_71:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x40))\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      tag_181\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      tag_182\n      tag_3\n      jump\t// in\n    tag_182:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      tag_27\n      jump\t// in\n    tag_181:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_69:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n      0x00\n      swap1\n      sload(0x04)\n      0x01\n      dup2\n      0x01\n      shr\n      swap1\n      0x01\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_187\n      jumpi\n    tag_188:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_189\n      jumpi\n      dup4\n      dup7\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_191\n      jumpi\n      pop\n      0x01\n      eq\n      tag_193\n      jumpi\n    tag_194:\n      tag_195\n      dup5\n      tag_196\n      dup2\n      dup9\n      sub\n      dup3\n      tag_10\n      jump\t// in\n    tag_196:\n      mload(0x40)\n      swap2\n      dup3\n      swap2\n      dup3\n      tag_1\n      jump\t// in\n    tag_195:\n      sub\n      swap1\n      return\n    tag_193:\n      0x04\n      0x00\n      swap1\n      dup2\n      mstore\n      swap3\n      swap5\n      pop\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n    tag_197:\n      dup3\n      dup5\n      lt\n      tag_198\n      jumpi\n      pop\n      pop\n      pop\n      dup2\n      tag_195\n      swap4\n      tag_196\n      swap3\n      dup3\n      add\n      add\n      swap4\n      jump(tag_194)\n    tag_198:\n      dup1\n      sload\n      dup6\n      dup6\n      add\n      dup8\n      add\n      mstore\n      swap3\n      dup6\n      add\n      swap3\n      dup2\n      add\n      jump(tag_197)\n    tag_191:\n      not(0xff)\n      and\n      dup6\n      dup6\n      add\n      mstore\n      pop\n      pop\n      iszero\n      iszero\n      0x05\n      shl\n      dup3\n      add\n      add\n      swap2\n      pop\n      tag_196\n      dup2\n      tag_195\n      jump(tag_194)\n    tag_189:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x22)\n      revert(0x00, 0x24)\n    tag_187:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_188)\n    tag_67:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x40))\n      0x20\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8810:8816  shares */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      tag_205\n      tag_4\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7313:7357  _convertToAssets(shares, Math.Rounding.Ceil) */\n      swap2\n      tag_206\n      dup2\n      tag_22\n      jump\t// in\n    tag_206:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup1\n      swap4\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8810:8816  shares */\n      tag_28\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_65:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x60))\n      jumpi(tag_124, gt(calldataload(0x04), sub(shl(0x40, 0x01), 0x01)))\n      jumpi(tag_124, iszero(slt(add(calldataload(0x04), 0x23), calldatasize)))\n      calldataload(add(0x04, calldataload(0x04)))\n      tag_215\n      dup2\n      tag_11\n      jump\t// in\n    tag_215:\n      swap1\n      tag_216\n      mload(0x40)\n      swap3\n      dup4\n      tag_10\n      jump\t// in\n    tag_216:\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      calldatasize\n      0x24\n      dup3\n      0x05\n      shl\n      calldataload(0x04)\n      add\n      add\n      gt\n      tag_124\n      jumpi\n      add(calldataload(0x04), 0x24)\n      swap2\n    tag_219:\n      0x24\n      dup3\n      0x05\n      shl\n      calldataload(0x04)\n      add\n      add\n      dup4\n      lt\n      tag_220\n      jumpi\n      dup4\n      jumpi(tag_124, gt(calldataload(0x24), sub(shl(0x40, 0x01), 0x01)))\n      jumpi(tag_124, iszero(slt(add(calldataload(0x24), 0x23), calldatasize)))\n      jumpi(tag_124, gt(calldataload(add(0x04, calldataload(0x24))), sub(shl(0x40, 0x01), 0x01)))\n      calldatasize\n      0x24\n      dup1\n      calldataload\n      0x04\n      add\n      calldataload\n      0x05\n      shl\n      dup2\n      calldataload\n      add\n      add\n      gt\n      tag_124\n      jumpi\n      calldataload(0x44)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      sub\n      tag_124\n      jumpi\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2227:2330  modifier nonReentrant() {... */\n      tag_232\n      tag_29\n      jump\t// in\n    tag_232:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2856:2869  uint256 i = 0 */\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2851:3279  for (uint256 i = 0; i < permitData.length; i++) {... */\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2894:2897  i++ */\n    tag_233:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2871:2892  i < permitData.length */\n      dup3\n      lt\n      iszero\n      tag_234\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3010:3023  permitData[i] */\n      tag_236\n      dup3\n      dup3\n      tag_18\n      jump\t// in\n    tag_236:\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      calldataload(add(0x04, calldataload(0x24)))\n      dup4\n      lt\n      iszero\n      tag_237\n      jumpi\n      add(sub(calldatasize, calldataload(0x24)), not(0x42))\n      0x24\n      dup5\n      0x05\n      shl\n      dup2\n      calldataload\n      add\n      add\n      calldataload\n      slt\n      iszero\n      tag_124\n      jumpi\n      0x24\n      dup4\n      0x05\n      shl\n      dup2\n      calldataload\n      add\n      add\n      calldataload\n      calldataload(0x24)\n      add\n      swap1\n      sub(shl(0x40, 0x01), 0x01)\n      0x24\n      dup4\n      add\n      calldataload\n      gt\n      tag_124\n      jumpi\n      0x24\n      dup3\n      add\n      calldataload\n      calldatasize\n      sub\n      0x44\n      dup4\n      add\n      sgt\n      tag_124\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:2990  permitSystem */\n      immutable(\"0xa2d87bfed9ffce410eeb73db13b543e4f8e1158244deff94c16e8199a16f75b2\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n      extcodesize\n      iszero\n      tag_124\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      swap2\n      shl(0xe0, 0x2a2d80d1)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n      dup4\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2998:3008  msg.sender */\n      caller\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n      dup5\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x60\n      0x24\n      dup5\n      add\n      mstore\n      0xc4\n      dup4\n      add\n      swap2\n      dup1\n      mload\n      swap3\n      0x60\n      0x64\n      dup7\n      add\n      mstore\n      dup4\n      mload\n      dup1\n      swap2\n      mstore\n      0x20\n      0xe4\n      dup7\n      add\n      swap5\n      add\n      swap1\n      0x00\n    tag_247:\n      dup2\n      dup2\n      lt\n      tag_248\n      jumpi\n      pop\n      pop\n      pop\n      tag_250\n      0x00\n      swap4\n      dup6\n      swap4\n      0x40\n      dup6\n      swap5\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      0x20\n      dup3\n      add\n      mload\n      and\n      0x84\n      dup8\n      add\n      mstore\n      add\n      mload\n      0xa4\n      dup6\n      add\n      mstore\n      not(0x03)\n      dup5\n      dup4\n      sub\n      add\n      0x44\n      dup6\n      add\n      mstore\n      0x44\n      0x24\n      dup3\n      add\n      calldataload\n      swap2\n      add\n      tag_20\n      jump\t// in\n    tag_250:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n      sub\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      dup4\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:2990  permitSystem */\n      immutable(\"0xa2d87bfed9ffce410eeb73db13b543e4f8e1158244deff94c16e8199a16f75b2\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n      gas\n      call\n      dup1\n      iszero\n      tag_128\n      jumpi\n      tag_253\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_254:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3136:3149  uint256 j = 0 */\n      pop\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3185:3188  j++ */\n    tag_255:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3155:3168  permitData[i] */\n      tag_256\n      dup4\n      dup4\n      tag_18\n      jump\t// in\n    tag_256:\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3155:3176  permitData[i].details */\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3151:3183  j < permitData[i].details.length */\n      dup2\n      lt\n      iszero\n      tag_257\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      swap4\n      dup5\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3208:3254  totalAmount += permitData[i].details[j].amount */\n      tag_259\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3223:3247  permitData[i].details[j] */\n      tag_260\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3223:3236  permitData[i] */\n      dup7\n      tag_261\n      dup11\n      dup11\n      tag_18\n      jump\t// in\n    tag_261:\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3223:3244  permitData[i].details */\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3223:3247  permitData[i].details[j] */\n      tag_18\n      jump\t// in\n    tag_260:\n      mload\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3223:3254  permitData[i].details[j].amount */\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload\n      and\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3208:3254  totalAmount += permitData[i].details[j].amount */\n      swap1\n      tag_21\n      jump\t// in\n    tag_259:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3185:3188  j++ */\n      swap5\n      pop\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3136:3149  uint256 j = 0 */\n      jump(tag_255)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":3151:3183  j < permitData[i].details.length */\n    tag_257:\n      pop\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2856:2869  uint256 i = 0 */\n      swap1\n      jump(tag_233)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2978:3039  permitSystem.permit(msg.sender, permitData[i], signatures[i]) */\n    tag_253:\n      tag_262\n      swap1\n      tag_8\n      jump\t// in\n    tag_262:\n      dup4\n      jump(tag_254)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_248:\n      swap1\n      swap2\n      swap5\n      0x20\n      0x80\n      dup3\n      tag_263\n      0x01\n      swap5\n      dup11\n      swap15\n      swap12\n      swap15\n      mload\n      0x60\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      dup3\n      mload\n      and\n      dup5\n      mstore\n      0x20\n      dup3\n      add\n      mload\n      and\n      0x20\n      dup5\n      add\n      mstore\n      dup2\n      0x40\n      dup3\n      add\n      mload\n      swap2\n      0xffffffffffff\n      dup1\n      swap4\n      and\n      0x40\n      dup7\n      add\n      mstore\n      add\n      mload\n      and\n      swap2\n      add\n      mstore\n      jump\n    tag_263:\n      swap9\n      swap12\n      swap9\n      add\n      swap7\n      add\n      swap3\n      swap2\n      add\n      jump(tag_247)\n    tag_237:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2871:2892  i < permitData.length */\n    tag_234:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2871:2892  i < permitData.length */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      tag_130\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_265\n      dup3\n      tag_25\n      jump\t// in\n    tag_265:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      swap3\n      calldataload(0x44)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":2998:3008  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      tag_28\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_220:\n      dup3\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_124\n      jumpi\n      0x60\n      calldataload(0x04)\n      dup3\n      add\n      calldatasize\n      sub\n      not(0x23)\n      add\n      slt\n      tag_124\n      jumpi\n      mload(0x40)\n      swap1\n      tag_270\n      dup3\n      tag_7\n      jump\t// in\n    tag_270:\n      0x24\n      dup2\n      calldataload(0x04)\n      add\n      add\n      calldataload\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_124\n      jumpi\n      dup2\n      calldataload(0x04)\n      add\n      add\n      calldatasize\n      0x43\n      dup3\n      add\n      slt\n      iszero\n      tag_124\n      jumpi\n      0x24\n      dup2\n      add\n      calldataload\n      swap1\n      tag_275\n      dup3\n      tag_11\n      jump\t// in\n    tag_275:\n      swap2\n      tag_276\n      mload(0x40)\n      swap4\n      dup5\n      tag_10\n      jump\t// in\n    tag_276:\n      dup1\n      dup4\n      mstore\n      0x20\n      dup4\n      add\n      calldatasize\n      0x44\n      dup4\n      0x07\n      shl\n      dup6\n      add\n      add\n      gt\n      tag_124\n      jumpi\n      0x44\n      dup4\n      add\n      swap1\n    tag_279:\n      0x44\n      dup4\n      0x07\n      shl\n      dup6\n      add\n      add\n      dup3\n      lt\n      tag_280\n      jumpi\n      pop\n      pop\n      pop\n      pop\n      swap3\n      dup3\n      0x64\n      0x20\n      swap5\n      swap4\n      0x24\n      swap7\n      dup7\n      swap6\n      mstore\n      tag_282\n      0x44\n      dup3\n      calldataload(0x04)\n      add\n      add\n      tag_5\n      jump\t// in\n    tag_282:\n      dup6\n      dup5\n      add\n      mstore\n      calldataload(0x04)\n      add\n      add\n      calldataload\n      0x40\n      dup3\n      add\n      mstore\n      dup2\n      mstore\n      add\n      swap4\n      add\n      swap3\n      swap1\n      pop\n      jump(tag_219)\n    tag_280:\n      0x80\n      dup3\n      calldatasize\n      sub\n      slt\n      tag_124\n      jumpi\n      mload(0x40)\n      swap1\n      tag_285\n      dup3\n      tag_9\n      jump\t// in\n    tag_285:\n      tag_286\n      dup4\n      tag_5\n      jump\t// in\n    tag_286:\n      dup3\n      mstore\n      0x20\n      dup4\n      add\n      calldataload\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_124\n      jumpi\n      dup3\n      0x20\n      swap3\n      dup4\n      0x80\n      swap6\n      add\n      mstore\n      tag_289\n      0x40\n      dup7\n      add\n      tag_12\n      jump\t// in\n    tag_289:\n      0x40\n      dup3\n      add\n      mstore\n      tag_290\n      0x60\n      dup7\n      add\n      tag_12\n      jump\t// in\n    tag_290:\n      0x60\n      dup3\n      add\n      mstore\n      dup2\n      mstore\n      add\n      swap2\n      add\n      swap1\n      jump(tag_279)\n    tag_61:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x40))\n      0x20\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":8163:8169  shares */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      tag_302\n      tag_4\n      jump\t// in\n    tag_302:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_133\n      dup4\n      tag_25\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_59:\n      tag_2\n      jump\t// in\n    tag_57:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":584:622  IPermit2 public immutable permitSystem */\n      immutable(\"0xa2d87bfed9ffce410eeb73db13b543e4f8e1158244deff94c16e8199a16f75b2\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_53:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5716:5722  _asset */\n      immutable(\"0x57d03f72a618a841c753598d7d2cbcbbd5f43a73c69f9abc886bd29cf4101ea1\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_51:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      0xff\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5546:5565  _underlyingDecimals */\n      immutable(\"0xc0bf3ddb79e7c5faf09af1eaa09640fae848e430edf7a04658ec05be9ade7aab\")\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n      0xff\n      dup2\n      gt\n      tag_316\n      jumpi\n      0x20\n      swap1\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_316:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_49:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x60))\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      tag_181\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      tag_323\n      tag_3\n      jump\t// in\n    tag_323:\n      tag_324\n      tag_4\n      jump\t// in\n    tag_324:\n      calldataload(0x44)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      tag_325\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup4\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup4\n      tag_26\n      jump\t// in\n    tag_325:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      tag_27\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_47:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_45:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7514:7558  _convertToShares(assets, Math.Rounding.Ceil) */\n      tag_24\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_43:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x40))\n      tag_339\n      tag_3\n      jump\t// in\n    tag_339:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_340\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_342\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      dup3\n      0x00\n      mstore\n      0x20\n      mstore\n      dup1\n      keccak256(0x00, 0x40)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      swap3\n      log3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_342:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_340:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      revert\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_39:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      0x01\n      dup2\n      0x01\n      shr\n      swap1\n      0x01\n      dup4\n      and\n      swap3\n      dup4\n      iszero\n      tag_348\n      jumpi\n    tag_349:\n      0x20\n      swap4\n      dup5\n      dup5\n      lt\n      dup2\n      eq\n      tag_189\n      jumpi\n      dup4\n      dup7\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_191\n      jumpi\n      pop\n      0x01\n      eq\n      tag_354\n      jumpi\n      tag_195\n      dup5\n      tag_196\n      dup2\n      dup9\n      sub\n      dup3\n      tag_10\n      jump\t// in\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x00\n      swap1\n      dup2\n      mstore\n      swap3\n      swap5\n      pop\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n    tag_358:\n      dup3\n      dup5\n      lt\n      tag_359\n      jumpi\n      pop\n      pop\n      pop\n      dup2\n      tag_195\n      swap4\n      tag_196\n      swap3\n      dup3\n      add\n      add\n      swap4\n      jump(tag_194)\n    tag_359:\n      dup1\n      sload\n      dup6\n      dup6\n      add\n      dup8\n      add\n      mstore\n      swap3\n      dup6\n      add\n      swap3\n      dup2\n      add\n      jump(tag_358)\n    tag_348:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_349)\n    tag_37:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      tag_145\n      tag_15\n      jump\t// in\n    tag_1:\n      0x20\n      0x40\n      swap3\n      dup2\n      dup4\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap2\n      dup3\n      dup3\n      dup7\n      add\n      mstore\n      add\n      dup5\n      dup5\n      add\n      mcopy\n      0x00\n      dup3\n      dup3\n      add\n      dup5\n      add\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_2:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6248:6293  _convertToAssets(shares, Math.Rounding.Floor) */\n      tag_23\n      jump\t// in\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_3:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_124\n      jumpi\n      jump\t// out\n    tag_4:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_124\n      jumpi\n      jump\t// out\n    tag_5:\n      calldataload\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_124\n      jumpi\n      jump\t// out\n    tag_6:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      tag_381\n      tag_3\n      jump\t// in\n    tag_381:\n      pop\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6433:6450  type(uint256).max */\n      not(0x00)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      mstore\n      return\n    tag_7:\n      0x60\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_382\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_382:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_8:\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_382\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_9:\n      0x80\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_382\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_10:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      or\n      tag_382\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_11:\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_382\n      jumpi\n      0x05\n      shl\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_12:\n      calldataload\n      swap1\n      0xffffffffffff\n      dup3\n      and\n      dup3\n      sub\n      tag_124\n      jumpi\n      jump\t// out\n    tag_13:\n      0x60\n      swap1\n      not(0x03)\n      add\n      slt\n      tag_124\n      jumpi\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      calldataload(0x24)\n      dup3\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      swap2\n      calldataload(0x44)\n      swap1\n      dup2\n      and\n      dup2\n      sub\n      tag_124\n      jumpi\n      swap1\n      jump\t// out\n    tag_14:\n      jumpi(tag_124, callvalue)\n      jumpi(tag_124, slt(add(not(0x03), calldatasize), 0x20))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      calldataload(0x04)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6046:6091  _convertToShares(assets, Math.Rounding.Floor) */\n      tag_25\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n    tag_15:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5883:5887  this */\n      address\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      0x24\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5864  _asset */\n      immutable(\"0x57d03f72a618a841c753598d7d2cbcbbd5f43a73c69f9abc886bd29cf4101ea1\")\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_128\n      jumpi\n      0x00\n      swap2\n      tag_407\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5851:5889  return _asset.balanceOf(address(this)) */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n    tag_407:\n      swap1\n      pop\n      0x20\n      dup2\n      jumpi(tag_409, gt(0x20, returndatasize))\n    tag_410:\n      dup2\n      tag_411\n      0x20\n      swap4\n      dup4\n      tag_10\n      jump\t// in\n    tag_411:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sub\n      slt\n      tag_124\n      jumpi\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5780:5896  function totalAssets() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":5858:5889  _asset.balanceOf(address(this)) */\n    tag_409:\n      returndatasize\n      swap2\n      pop\n      jump(tag_410)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_18:\n      dup1\n      mload\n      dup3\n      lt\n      iszero\n      tag_237\n      jumpi\n      0x20\n      swap2\n      0x05\n      shl\n      add\n      add\n      swap1\n      jump\t// out\n    tag_20:\n      swap1\n      dup1\n      0x20\n      swap4\n      swap3\n      dup2\n      dup5\n      mstore\n      dup5\n      dup5\n      add\n      calldatacopy\n      0x00\n      dup3\n      dup3\n      add\n      dup5\n      add\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_21:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_316\n      jumpi\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      tag_418\n      tag_15\n      jump\t// in\n    tag_418:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10342:10425  shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding) */\n      tag_423\n      swap3\n      tag_31\n      jump\t// in\n    tag_423:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10219:10432  function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n    tag_23:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10356:10369  totalAssets() */\n      tag_424\n      tag_15\n      jump\t// in\n    tag_424:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10372:10373  1 */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10372:10373  1 */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_423\n      swap3\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_24:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      0x01\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      tag_432\n      tag_15\n      jump\t// in\n    tag_432:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      0x01\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10005:10088  assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding) */\n      tag_423\n      swap3\n      tag_31\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9882:10095  function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      0x01\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10060:10073  totalAssets() */\n      tag_438\n      tag_15\n      jump\t// in\n    tag_438:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      0x01\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_423\n      swap3\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_26:\n      swap2\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup1\n      swap4\n      and\n      swap3\n      dup4\n      0x00\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap4\n      dup5\n      0x00\n      keccak256\n      swap2\n      dup4\n      and\n      swap2\n      dup3\n      0x00\n      mstore\n      0x20\n      mstore\n      dup5\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":6433:6450  type(uint256).max */\n      swap3\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      dup5\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_442\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_443:\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_442:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      dup5\n      dup5\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      tag_444\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      pop\n      dup1\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_446\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_448\n      jumpi\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      dup4\n      0x00\n      keccak256\n      swap1\n      0x00\n      mstore\n      0x20\n      mstore\n      sub\n      swap1\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      0x00\n      dup1\n      dup1\n      dup1\n      dup1\n      dup1\n      jump(tag_443)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_448:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n      mload\n      shl(0xe1, 0x4a1406b1)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      dup2\n      mstore\n      0x00\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_446:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n      mload\n      shl(0xe0, 0xe602df05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      dup2\n      mstore\n      0x00\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_444:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup6\n      mload\n      shl(0xe1, 0x7dc7a0d9)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n      0x44\n      dup2\n      add\n      dup6\n      swap1\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_27:\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      dup5\n      and\n      swap3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_451\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      swap3\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_453\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      swap1\n      dup3\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      tag_455\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      pop\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap3\n      0x20\n      swap3\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n      mstore\n      sub\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      swap1\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_455:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x44\n      dup2\n      add\n      dup3\n      swap1\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_453:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_451:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n    tag_28:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x40\n      dup1\n      mload\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap3\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11215:11219  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x44\n      dup4\n      add\n      mstore\n      0x64\n      dup1\n      dup4\n      add\n      dup8\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      dup3\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap5\n      swap2\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n      swap2\n      swap3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n      swap1\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0xa0\n      dup2\n      add\n      swap1\n      sub(shl(0x40, 0x01), 0x01)\n      dup3\n      gt\n      dup2\n      dup4\n      lt\n      or\n      tag_382\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_460\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n      dup7\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11191:11197  _asset */\n      immutable(\"0x57d03f72a618a841c753598d7d2cbcbbd5f43a73c69f9abc886bd29cf4101ea1\")\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_33\n      jump\t// in\n    tag_460:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      swap4\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_461\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      tag_463\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap5\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      tag_21\n      jump\t// in\n    tag_463:\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      swap1\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup7\n      mload\n      dup6\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      log3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      mload\n      swap2\n      dup3\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      add\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11278:11319  Deposit(caller, receiver, assets, shares) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":10496:11326  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_461:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      mload\n      shl(0xe0, 0xec442f05)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      dup2\n      mstore\n      0x00\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_464\n      jumpi\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2475  _status */\n      0x05\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2336:2623  function _nonReentrantBefore() private {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_464:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1f\n      0x24\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n    tag_30:\n      swap2\n      swap1\n      swap3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      swap5\n      dup6\n      dup4\n      and\n      swap6\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11570:11585  caller != owner */\n      swap5\n      dup3\n      dup9\n      dup8\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n      tag_466\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n    tag_467:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      pop\n      pop\n      dup7\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_451\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      0x40\n      swap4\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      swap1\n      dup4\n      dup3\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      tag_470\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      pop\n      dup3\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      0xfbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap6\n      swap5\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      tag_472\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap3\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      mstore\n      sub\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      keccak256\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sload\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      0x02\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x20\n      dup9\n      mload\n      dup8\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      log3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n      mload\n      swap8\n      shl(0xe0, 0xa9059cbb)\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup11\n      add\n      mstore\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      swap7\n      dup8\n      0x24\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      dup4\n      0x44\n      dup3\n      add\n      mstore\n      0x44\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup2\n      mstore\n      tag_473\n      dup2\n      tag_9\n      jump\t// in\n    tag_473:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12210:12216  _asset */\n      immutable(\"0x57d03f72a618a841c753598d7d2cbcbbd5f43a73c69f9abc886bd29cf4101ea1\")\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      tag_33\n      jump\t// in\n    tag_472:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":12251:12300  Withdraw(caller, receiver, owner, assets, shares) */\n      log4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11393:12307  function _withdraw(... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_470:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup6\n      mload\n      shl(0xe2, 0x391434e3)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x44\n      dup2\n      add\n      dup4\n      swap1\n      mstore\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":9552:9602  ERC4626ExceededMaxRedeem(owner, shares, maxShares) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n    tag_466:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11632:11638  shares */\n      tag_475\n      swap2\n      dup7\n      tag_26\n      jump\t// in\n    tag_475:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":11566:11650  if (caller != owner) {... */\n      0x00\n      dup3\n      jump(tag_467)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n    tag_31:\n      swap2\n      swap1\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8188:8213  mulDiv(x, y, denominator) */\n      tag_476\n      dup3\n      dup3\n      dup6\n      tag_32\n      jump\t// in\n    tag_476:\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n      swap3\n      dup3\n      iszero\n      tag_477\n      jumpi\n      mulmod\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n      tag_479\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8223:8324  if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {... */\n    tag_479:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":7338:7356  Math.Rounding.Ceil */\n      0x01\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_316\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8051:8353  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":8257:8282  mulmod(x, y, denominator) */\n    tag_477:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n    tag_32:\n      swap1\n      swap2\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup3\n      dup3\n      mul\n      swap2\n      not(0x00)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n      dup5\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4383:4514  assembly {... */\n      mulmod\n      swap4\n      dup4\n      dup1\n      dup7\n      lt\n      swap6\n      sub\n      swap5\n      dup1\n      dup7\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4595:4605  prod1 == 0 */\n      swap6\n      eq\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n      tag_483\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5065:5085  denominator <= prod1 */\n      dup5\n      dup4\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n      tag_485\n      jumpi\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5435:5735  assembly {... */\n      dup3\n      swap2\n      mulmod\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      0x00\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5954:5985  denominator & (0 - denominator) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5999:6370  assembly {... */\n      dup1\n      swap3\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6813:6814  2 */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6794:6795  3 */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6793:6814  (3 * denominator) ^ 2 */\n      xor\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      dup4\n      mul\n      dup3\n      sub\n      mul\n      dup1\n      dup4\n      mul\n      dup3\n      sub\n      mul\n      dup1\n      dup4\n      mul\n      dup3\n      sub\n      mul\n      dup1\n      dup4\n      mul\n      dup3\n      sub\n      mul\n      dup1\n      dup4\n      mul\n      dup3\n      sub\n      mul\n      dup1\n      swap3\n      mul\n      swap1\n      sub\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5999:6370  assembly {... */\n      swap4\n      0x01\n      dup4\n      dup1\n      0x00\n      sub\n      div\n      add\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5435:5735  assembly {... */\n      swap1\n      dup5\n      dup4\n      gt\n      swap1\n      sub\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5435:5735  assembly {... */\n      swap3\n      sub\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5999:6370  assembly {... */\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":6436:6457  prod0 |= prod1 * twos */\n      or\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mul\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":3803:7919  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5061:5149  if (denominator <= prod1) {... */\n    tag_485:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x227bc153)\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":5112:5134  MathOverflowedMulDiv() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4591:4959  if (prod1 == 0) {... */\n    tag_483:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      pop\n      pop\n      dup1\n      swap3\n      pop\n      iszero\n      tag_477\n      jumpi\n      div\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":4918:4944  return prod0 / denominator */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_33:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      dup2\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n      swap2\n      dup3\n      swap2\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n      add\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      dup3\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      gas\n      call\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      jumpi(tag_489, iszero(returndatasize))\n      returndatasize\n      sub(shl(0x40, 0x01), 0x01)\n      dup2\n      gt\n      tag_382\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_493\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap2\n      mload(0x40)\n      swap2\n      tag_494\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      not(0x1f)\n      0x1f\n      dup5\n      add\n      and\n      add\n      dup5\n      tag_10\n      jump\t// in\n    tag_494:\n      dup3\n      mstore\n      returndatasize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup5\n      add\n      returndatacopy\n    tag_495:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      dup4\n      tag_34\n      jump\t// in\n    tag_493:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      swap1\n      dup2\n      iszero\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      swap2\n      dup3\n      tag_496\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_497:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      pop\n      pop\n      tag_498\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_498:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      0x24\n      swap1\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      swap1\n      shl(0xe0, 0x5274afe7)\n      dup3\n      mstore\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_496:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup2\n      swap3\n      pop\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      swap2\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      sub\n      slt\n      tag_124\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload\n      dup1\n      iszero\n      swap1\n      dup2\n      iszero\n      sub\n      tag_124\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      0x00\n      dup1\n      jump(tag_497)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n    tag_489:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_493\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      0x60\n      swap1\n      jump(tag_495)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_34:\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4797:4805  !success */\n      tag_504\n      jumpi\n      pop\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      tag_506\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6046:6188  assembly {... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_506:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_504:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      tag_508\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_509:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      tag_510\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      pop\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_510:\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x9996b315)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaVault.sol\":530:3428  contract TuliaVault is ERC4626, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_508:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      pop\n      dup1\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      jump(tag_509)\n\n    auxdata: 0xa2646970667358221220494dd450443988db0e80bc15ebb6687a8d8c71b3a695b5e59e9d7e87bb2d0a5564736f6c63430008190033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"abi_decode_string_fromMemory": {
									"entryPoint": 956,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_allocation_size_string": {
									"entryPoint": 929,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 894,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_tryGetAssetDecimals": {
									"entryPoint": 1026,
									"id": 1119,
									"parameterSlots": 1,
									"returnSlots": 2
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60e0806040523461037a57611c83803803809161001c828561037e565b8339810160808282031261037a5781516001600160a01b0392838216820361037a5760208181015190916001600160401b039182811161037a57856100629183016103bc565b94604082015183811161037a5760609161007d9184016103bc565b910151958616860361037a578451828111610291576003918254916001978884811c94168015610370575b8785101461035c578190601f9485811161030e575b5087908583116001146102b0575f926102a5575b50505f1982861b1c191690881b1783555b80519384116102915760049485548881811c91168015610287575b8282101461027457908184879695949311610220575b50809285116001146101bb57505f936101b0575b505082861b925f19911b1c19161790555b61014181610402565b90156101a8575b60a05260805260055560c0526040516117cb90816104b88239608051818181610bae01528181610ff7015281816113510152611536015260a05181610bf1015260c051818181610256015281816107fd015281816108b20152610b6a0152f35b506012610148565b015191505f80610127565b929190889550601f198516875f52845f20945f905b82821061020757505085116101ee575b50505050811b019055610138565b01519060f8845f19921b161c191690555f8080806101e0565b8484015187558b989096019593840193908101906101d0565b909192939450865f52815f208480880160051c82019284891061026b575b918b91899897969594930160051c01915b82811061025d575050610113565b5f81558897508b910161024f565b9250819261023e565b602287634e487b7160e01b5f525260245ffd5b90607f16906100fd565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100d1565b908a9350601f19831691875f52895f20925f5b8b8282106102f857505084116102e1575b505050811b0183556100e2565b01515f1983881b60f8161c191690555f80806102d4565b8385015186558e979095019493840193016102c3565b909150855f52875f208580850160051c8201928a8610610353575b918c91869594930160051c01915b8281106103455750506100bd565b5f81558594508c9101610337565b92508192610329565b634e487b7160e01b5f52602260045260245ffd5b93607f16936100a8565b5f80fd5b601f909101601f19168101906001600160401b0382119082101761029157604052565b6001600160401b03811161029157601f01601f191660200190565b81601f8201121561037a578051906103d3826103a1565b926103e1604051948561037e565b8284526020838301011161037a57815f9260208093018386015e8301015290565b6040805163313ce56760e01b6020820190815260048252909291830191906001600160401b03831184841017610291575f938493604052519160018060a01b03165afa3d156104af573d90610456826103a1565b91610464604051938461037e565b82523d5f602084013e5b806104a3575b610480575b505f905f90565b60208180518101031261037a576020015160ff8111610479579060ff6001921690565b50602081511015610474565b60609061046e56fe60806040526004361015610011575f80fd5b5f3560e01c806301e1d11414610e1a57806306fdde0314610d5d57806307a2d13a14610b50578063095ea7b314610cab5780630a28a47714610c8d57806318160ddd14610c7057806323b872dd14610c38578063313ce56714610bdd57806338d52e0f14610b99578063402d267d1461041b578063464582cb14610b555780634cdad50614610b505780636e553f6514610b2657806370a08231146103a45780637b17edf2146106a857806394bf804d1461067557806395d89b4114610573578063a9059cbb14610542578063b3d7f6b914610524578063b460af941461049e578063ba08765214610420578063c63d75b61461041b578063c6e6f5921461014d578063ce96cb77146103e4578063d905777e146103a4578063dd62ed3e14610357578063e6adb29c146101525763ef8b30f71461014d575f80fd5b610fbe565b346103535761012036600319011261035357366023190160043560c082126103535760806040519261018384610ee1565b12610353576040519161019583610f23565b6001600160a01b03926024358481168103610353578152604435848116810361035357602082015265ffffffffffff60643581811681036103535760408301526084359081168103610353576060820152815260a43583811681036103535760208201908152604082019060c435825260e435916001600160401b038084116103535736602385011215610353578360040135908111610353573660248286010111610353576101049182359588871687036103535761025361140f565b887f00000000000000000000000000000000000000000000000000000000000000001693843b15610353575f966102e4946024610302938a966040519e8f9b8c9a8b996302b67b5760e41b8b523360048c0152868b01905160609060018060a01b0380825116845260208201511660208401528160408201519165ffffffffffff8093166040860152015116910152565b511660a48801525160c487015261010060e487015285019201611075565b03925af19081156103485760209361032c92610339575b5061032383611126565b928391336112f8565b6001600555604051908152f35b61034290610f10565b84610319565b6040513d5f823e3d90fd5b5f80fd5b3461035357604036600319011261035357610370610e7c565b610378610e92565b9060018060a01b038091165f52600160205260405f2091165f52602052602060405f2054604051908152f35b346103535760203660031901126103535760206103dc6103c2610e7c565b6001600160a01b03165f9081526020819052604090205490565b604051908152f35b34610353576020366003190112610353576001600160a01b03610405610e7c565b165f525f60205260206103dc60405f20546110d0565b610ebc565b346103535761042e36610f89565b906104498260018060a01b03165f525f60205260405f205490565b80841161046a5750826103dc916104616020956110d0565b93849133611465565b604051632e52afbb60e21b81526001600160a01b039390931660048401526024830193909352506044810191909152606490fd5b34610353576104ac36610f89565b906104cf6104ca8360018060a01b03165f525f60205260405f205490565b6110d0565b8084116104f057506103dc90836104e76020956110fb565b93849233611465565b604051633fa733bb60e21b81526001600160a01b039390931660048401526024830193909352506044810191909152606490fd5b346103535760203660031901126103535760206103dc6004356110a2565b346103535760403660031901126103535761056861055e610e7c565b602435903361121e565b602060405160018152f35b34610353575f366003190112610353576040515f9060045460018160011c906001831692831561066b575b60209384841081146106575783865290811561063757506001146105dd575b6105d9846105cd81880382610f3e565b60405191829182610e34565b0390f35b60045f9081529294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061062457505050816105d9936105cd92820101936105bd565b8054858501870152928501928101610608565b60ff1916858501525050151560051b82010191506105cd816105d96105bd565b634e487b7160e01b5f52602260045260245ffd5b91607f169161059e565b346103535760403660031901126103535760206004356103dc610696610e92565b916106a0816110a2565b8093336112f8565b34610353576060366003190112610353576001600160401b03600435116103535736602360043501121561035357600435600401356106e681610f5f565b906106f46040519283610f3e565b80825260208201903660248260051b60043501011161035357602460043501915b60248260051b600435010183106109da57836001600160401b036024351161035357366023602435011215610353576001600160401b0360243560040135116103535736602480356004013560051b8135010111610353576044356001600160a01b03811690036103535761078861140f565b5f905f905b80518210156109c0576107a08282611061565b51602435600401358310156109ac5760421960243536030160248460051b813501013512156103535760248360051b813501013560243501906001600160401b0360248301351161035357602482013536036044830113610353577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163b156103535760405191632a2d80d160e01b83523360048401526060602484015260c4830191805192606060648601528351809152602060e486019401905f5b818110610952575050506108ad5f9385936040859460018060a01b036020820151166084870152015160a4850152600319848303016044850152604460248201359101611075565b0381837f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561034857610943575b505f5b6108f48383611061565b515151811015610938576001938490610930906001600160a01b0360206109268661091f8a8a611061565b5151611061565b5101511690611095565b9450016108ea565b50906001019061078d565b61094c90610f10565b836108e7565b909194602060808261099e6001948a9e9b9e5160609060018060a01b0380825116845260208201511660208401528160408201519165ffffffffffff8093166040860152015116910152565b989b98019601929101610865565b634e487b7160e01b5f52603260045260245ffd5b60208361032c6109cf82611126565b8092604435336112f8565b82356001600160401b0381116103535760606004358201360360231901126103535760405190610a0982610ee1565b6024816004350101356001600160401b038111610353578160043501013660438201121561035357602481013590610a4082610f5f565b91610a4e6040519384610f3e565b808352602083013660448360071b850101116103535760448301905b60448360071b8501018210610ab757505050509282606460209493602496869552610a9b6044826004350101610ea8565b8584015260043501013560408201528152019301929050610715565b6080823603126103535760405190610ace82610f23565b610ad783610ea8565b82526020830135906001600160a01b03821682036103535782602092836080950152610b0560408601610f76565b6040820152610b1660608601610f76565b6060820152815201910190610a6a565b346103535760403660031901126103535760206004356103dc610b47610e92565b61032383611126565b610e5e565b34610353575f366003190112610353576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610353575f366003190112610353576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34610353575f3660031901126103535760ff7f00000000000000000000000000000000000000000000000000000000000000001660ff8111610c2457602090604051908152f35b634e487b7160e01b5f52601160045260245ffd5b3461035357606036600319011261035357610568610c54610e7c565b610c5c610e92565b60443591610c6b833383611151565b61121e565b34610353575f366003190112610353576020600254604051908152f35b346103535760203660031901126103535760206103dc6004356110fb565b3461035357604036600319011261035357610cc4610e7c565b602435903315610d45576001600160a01b0316908115610d2d57335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b604051634a1406b160e11b81525f6004820152602490fd5b60405163e602df0560e01b81525f6004820152602490fd5b34610353575f366003190112610353576040515f9060035460018160011c9060018316928315610e10575b6020938484108114610657578386529081156106375750600114610db6576105d9846105cd81880382610f3e565b60035f9081529294507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610dfd57505050816105d9936105cd92820101936105bd565b8054858501870152928501928101610de1565b91607f1691610d88565b34610353575f3660031901126103535760206103dc610fdc565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b346103535760203660031901126103535760206103dc6004356110d0565b600435906001600160a01b038216820361035357565b602435906001600160a01b038216820361035357565b35906001600160a01b038216820361035357565b3461035357602036600319011261035357610ed5610e7c565b5060206040515f198152f35b606081019081106001600160401b03821117610efc57604052565b634e487b7160e01b5f52604160045260245ffd5b6001600160401b038111610efc57604052565b608081019081106001600160401b03821117610efc57604052565b90601f801991011681019081106001600160401b03821117610efc57604052565b6001600160401b038111610efc5760051b60200190565b359065ffffffffffff8216820361035357565b606090600319011261035357600435906001600160a01b03906024358281168103610353579160443590811681036103535790565b346103535760203660031901126103535760206103dc600435611126565b6040516370a0823160e01b81523060048201526020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610348575f91611032575090565b90506020813d602011611059575b8161104d60209383610f3e565b81010312610353575190565b3d9150611040565b80518210156109ac5760209160051b010190565b908060209392818452848401375f828201840152601f01601f1916010190565b91908201809211610c2457565b6110aa610fdc565b60018101809111610c24576002549060018201809211610c24576110cd926115a9565b90565b6110d8610fdc565b60018101809111610c24576002549060018201809211610c24576110cd926115e7565b60025460018101809111610c2457611111610fdc565b9060018201809211610c24576110cd926115a9565b60025460018101809111610c245761113c610fdc565b9060018201809211610c24576110cd926115e7565b919060018060a01b0380931692835f526001602052604093845f2091831691825f52602052845f2054925f19840361118c575b505050505050565b8484106111ee575080156111d75781156111c0575f526001602052835f20905f5260205203905f20555f8080808080611184565b8451634a1406b160e11b81525f6004820152602490fd5b845163e602df0560e01b81525f6004820152602490fd5b8551637dc7a0d960e11b81526001600160a01b039190911660048201526024810184905260448101859052606490fd5b916001600160a01b038084169283156112e057169283156112c857825f525f60205260405f2054908282106112965750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fd5b60405163ec442f0560e01b81525f6004820152602490fd5b604051634b637e8f60e11b81525f6004820152602490fd5b604080516323b872dd60e01b60208201526001600160a01b0392831660248201819052306044830152606480830187905282529491939192919060a08101906001600160401b03821181831017610efc576113759186527f000000000000000000000000000000000000000000000000000000000000000061167a565b169384156113f85790816113ad7fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79493600254611095565b600255855f525f602052825f20818154019055855f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208651858152a382519182526020820152a3565b825163ec442f0560e01b81525f6004820152602490fd5b600260055414611420576002600555565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b91909260018060a01b0394858316958085169482888703611598575b505086156112e057865f525f602052604093845f205490838210611567575082917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db95949361155a928a5f525f60205203855f205582600254036002555f897fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208851878152a384519763a9059cbb60e01b60208a015216968760248201528360448201526044815261153481610f23565b7f000000000000000000000000000000000000000000000000000000000000000061167a565b82519182526020820152a4565b855163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b6115a29186611151565b5f82611481565b91906115b68282856115e7565b9282156115d357096115c55790565b60018101809111610c245790565b634e487b7160e01b5f52601260045260245ffd5b9091828202915f198482099383808610950394808603951461166c578483111561165a57829109815f038216809204600280826003021880830282030280830282030280830282030280830282030280830282030280920290030293600183805f03040190848311900302920304170290565b60405163227bc15360e01b8152600490fd5b5050809250156115d3570490565b81516001600160a01b03909116915f91829160200182855af13d15611726573d6001600160401b038111610efc576116d491604051916116c46020601f19601f8401160184610f3e565b82523d5f602084013e5b83611732565b8051908115159182611702575b50506116ea5750565b60249060405190635274afe760e01b82526004820152fd5b81925090602091810103126103535760200151801590811503610353575f806116e1565b6116d4906060906116ce565b90611759575080511561174757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061178c575b61176a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561176256fea2646970667358221220494dd450443988db0e80bc15ebb6687a8d8c71b3a695b5e59e9d7e87bb2d0a5564736f6c63430008190033",
							"opcodes": "PUSH1 0xE0 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x37A JUMPI PUSH2 0x1C83 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH2 0x1C DUP3 DUP6 PUSH2 0x37E JUMP JUMPDEST DUP4 CODECOPY DUP2 ADD PUSH1 0x80 DUP3 DUP3 SUB SLT PUSH2 0x37A JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 DUP3 AND DUP3 SUB PUSH2 0x37A JUMPI PUSH1 0x20 DUP2 DUP2 ADD MLOAD SWAP1 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP2 DUP3 DUP2 GT PUSH2 0x37A JUMPI DUP6 PUSH2 0x62 SWAP2 DUP4 ADD PUSH2 0x3BC JUMP JUMPDEST SWAP5 PUSH1 0x40 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH2 0x37A JUMPI PUSH1 0x60 SWAP2 PUSH2 0x7D SWAP2 DUP5 ADD PUSH2 0x3BC JUMP JUMPDEST SWAP2 ADD MLOAD SWAP6 DUP7 AND DUP7 SUB PUSH2 0x37A JUMPI DUP5 MLOAD DUP3 DUP2 GT PUSH2 0x291 JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP8 DUP9 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH2 0x370 JUMPI JUMPDEST DUP8 DUP6 LT EQ PUSH2 0x35C JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH2 0x30E JUMPI JUMPDEST POP DUP8 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH2 0x2B0 JUMPI PUSH0 SWAP3 PUSH2 0x2A5 JUMPI JUMPDEST POP POP PUSH0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP9 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH2 0x291 JUMPI PUSH1 0x4 SWAP5 DUP6 SLOAD DUP9 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x287 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH2 0x274 JUMPI SWAP1 DUP2 DUP5 DUP8 SWAP7 SWAP6 SWAP5 SWAP4 GT PUSH2 0x220 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH2 0x1BB JUMPI POP PUSH0 SWAP4 PUSH2 0x1B0 JUMPI JUMPDEST POP POP DUP3 DUP7 SHL SWAP3 PUSH0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH2 0x141 DUP2 PUSH2 0x402 JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x1A8 JUMPI JUMPDEST PUSH1 0xA0 MSTORE PUSH1 0x80 MSTORE PUSH1 0x5 SSTORE PUSH1 0xC0 MSTORE PUSH1 0x40 MLOAD PUSH2 0x17CB SWAP1 DUP2 PUSH2 0x4B8 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0xBAE ADD MSTORE DUP2 DUP2 PUSH2 0xFF7 ADD MSTORE DUP2 DUP2 PUSH2 0x1351 ADD MSTORE PUSH2 0x1536 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 PUSH2 0xBF1 ADD MSTORE PUSH1 0xC0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x256 ADD MSTORE DUP2 DUP2 PUSH2 0x7FD ADD MSTORE DUP2 DUP2 PUSH2 0x8B2 ADD MSTORE PUSH2 0xB6A ADD MSTORE RETURN JUMPDEST POP PUSH1 0x12 PUSH2 0x148 JUMP JUMPDEST ADD MLOAD SWAP2 POP PUSH0 DUP1 PUSH2 0x127 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP9 SWAP6 POP PUSH1 0x1F NOT DUP6 AND DUP8 PUSH0 MSTORE DUP5 PUSH0 KECCAK256 SWAP5 PUSH0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x207 JUMPI POP POP DUP6 GT PUSH2 0x1EE JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x138 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 DUP1 PUSH2 0x1E0 JUMP JUMPDEST DUP5 DUP5 ADD MLOAD DUP8 SSTORE DUP12 SWAP9 SWAP1 SWAP7 ADD SWAP6 SWAP4 DUP5 ADD SWAP4 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D0 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP DUP7 PUSH0 MSTORE DUP2 PUSH0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH2 0x26B JUMPI JUMPDEST SWAP2 DUP12 SWAP2 DUP10 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x25D JUMPI POP POP PUSH2 0x113 JUMP JUMPDEST PUSH0 DUP2 SSTORE DUP9 SWAP8 POP DUP12 SWAP2 ADD PUSH2 0x24F JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x23E JUMP JUMPDEST PUSH1 0x22 DUP8 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0xFD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH2 0xD1 JUMP JUMPDEST SWAP1 DUP11 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH0 MSTORE DUP10 PUSH0 KECCAK256 SWAP3 PUSH0 JUMPDEST DUP12 DUP3 DUP3 LT PUSH2 0x2F8 JUMPI POP POP DUP5 GT PUSH2 0x2E1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH2 0xE2 JUMP JUMPDEST ADD MLOAD PUSH0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH2 0x2D4 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP15 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH2 0x2C3 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH0 MSTORE DUP8 PUSH0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP7 LT PUSH2 0x353 JUMPI JUMPDEST SWAP2 DUP13 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x345 JUMPI POP POP PUSH2 0xBD JUMP JUMPDEST PUSH0 DUP2 SSTORE DUP6 SWAP5 POP DUP13 SWAP2 ADD PUSH2 0x337 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH2 0x329 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH2 0xA8 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x291 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x291 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x37A JUMPI DUP1 MLOAD SWAP1 PUSH2 0x3D3 DUP3 PUSH2 0x3A1 JUMP JUMPDEST SWAP3 PUSH2 0x3E1 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x37E JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x37A JUMPI DUP2 PUSH0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD MCOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x313CE567 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP3 MSTORE SWAP1 SWAP3 SWAP2 DUP4 ADD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x291 JUMPI PUSH0 SWAP4 DUP5 SWAP4 PUSH1 0x40 MSTORE MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL RETURNDATASIZE ISZERO PUSH2 0x4AF JUMPI RETURNDATASIZE SWAP1 PUSH2 0x456 DUP3 PUSH2 0x3A1 JUMP JUMPDEST SWAP2 PUSH2 0x464 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x37E JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP1 PUSH2 0x4A3 JUMPI JUMPDEST PUSH2 0x480 JUMPI JUMPDEST POP PUSH0 SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP1 MLOAD DUP2 ADD SUB SLT PUSH2 0x37A JUMPI PUSH1 0x20 ADD MLOAD PUSH1 0xFF DUP2 GT PUSH2 0x479 JUMPI SWAP1 PUSH1 0xFF PUSH1 0x1 SWAP3 AND SWAP1 JUMP JUMPDEST POP PUSH1 0x20 DUP2 MLOAD LT ISZERO PUSH2 0x474 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH2 0x46E JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1E1D114 EQ PUSH2 0xE1A JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD5D JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0xB50 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCAB JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0xC8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xC70 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC38 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xBDD JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x41B JUMPI DUP1 PUSH4 0x464582CB EQ PUSH2 0xB55 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0xB50 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0xB26 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x7B17EDF2 EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x675 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x49E JUMPI DUP1 PUSH4 0xBA087652 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x41B JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0xE6ADB29C EQ PUSH2 0x152 JUMPI PUSH4 0xEF8B30F7 EQ PUSH2 0x14D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFBE JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 NOT ADD PUSH1 0x4 CALLDATALOAD PUSH1 0xC0 DUP3 SLT PUSH2 0x353 JUMPI PUSH1 0x80 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x183 DUP5 PUSH2 0xEE1 JUMP JUMPDEST SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x195 DUP4 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI DUP2 MSTORE PUSH1 0x44 CALLDATALOAD DUP5 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0xC4 CALLDATALOAD DUP3 MSTORE PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 DUP6 ADD SLT ISZERO PUSH2 0x353 JUMPI DUP4 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 DUP7 ADD ADD GT PUSH2 0x353 JUMPI PUSH2 0x104 SWAP2 DUP3 CALLDATALOAD SWAP6 DUP9 DUP8 AND DUP8 SUB PUSH2 0x353 JUMPI PUSH2 0x253 PUSH2 0x140F JUMP JUMPDEST DUP9 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x353 JUMPI PUSH0 SWAP7 PUSH2 0x2E4 SWAP5 PUSH1 0x24 PUSH2 0x302 SWAP4 DUP11 SWAP7 PUSH1 0x40 MLOAD SWAP15 DUP16 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP12 MSTORE CALLER PUSH1 0x4 DUP13 ADD MSTORE DUP7 DUP12 ADD SWAP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MLOAD SWAP2 PUSH6 0xFFFFFFFFFFFF DUP1 SWAP4 AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST MLOAD AND PUSH1 0xA4 DUP9 ADD MSTORE MLOAD PUSH1 0xC4 DUP8 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP8 ADD MSTORE DUP6 ADD SWAP3 ADD PUSH2 0x1075 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x348 JUMPI PUSH1 0x20 SWAP4 PUSH2 0x32C SWAP3 PUSH2 0x339 JUMPI JUMPDEST POP PUSH2 0x323 DUP4 PUSH2 0x1126 JUMP JUMPDEST SWAP3 DUP4 SWAP2 CALLER PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x342 SWAP1 PUSH2 0xF10 JUMP JUMPDEST DUP5 PUSH2 0x319 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x370 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x378 PUSH2 0xE92 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH2 0x3C2 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x405 PUSH2 0xE7C JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x3DC PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0xEBC JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x42E CALLDATASIZE PUSH2 0xF89 JUMP JUMPDEST SWAP1 PUSH2 0x449 DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x46A JUMPI POP DUP3 PUSH2 0x3DC SWAP2 PUSH2 0x461 PUSH1 0x20 SWAP6 PUSH2 0x10D0 JUMP JUMPDEST SWAP4 DUP5 SWAP2 CALLER PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E52AFBB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x4AC CALLDATASIZE PUSH2 0xF89 JUMP JUMPDEST SWAP1 PUSH2 0x4CF PUSH2 0x4CA DUP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D0 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x4F0 JUMPI POP PUSH2 0x3DC SWAP1 DUP4 PUSH2 0x4E7 PUSH1 0x20 SWAP6 PUSH2 0x10FB JUMP JUMPDEST SWAP4 DUP5 SWAP3 CALLER PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3FA733BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10A2 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x568 PUSH2 0x55E PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x121E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH1 0x4 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x66B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x657 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x637 JUMPI POP PUSH1 0x1 EQ PUSH2 0x5DD JUMPI JUMPDEST PUSH2 0x5D9 DUP5 PUSH2 0x5CD DUP2 DUP9 SUB DUP3 PUSH2 0xF3E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xE34 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x624 JUMPI POP POP POP DUP2 PUSH2 0x5D9 SWAP4 PUSH2 0x5CD SWAP3 DUP3 ADD ADD SWAP4 PUSH2 0x5BD JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x608 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 POP PUSH2 0x5CD DUP2 PUSH2 0x5D9 PUSH2 0x5BD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x59E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x3DC PUSH2 0x696 PUSH2 0xE92 JUMP JUMPDEST SWAP2 PUSH2 0x6A0 DUP2 PUSH2 0x10A2 JUMP JUMPDEST DUP1 SWAP4 CALLER PUSH2 0x12F8 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x4 CALLDATALOAD ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x6E6 DUP2 PUSH2 0xF5F JUMP JUMPDEST SWAP1 PUSH2 0x6F4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0xF3E JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH1 0x4 CALLDATALOAD ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x24 PUSH1 0x4 CALLDATALOAD ADD SWAP2 JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH1 0x4 CALLDATALOAD ADD ADD DUP4 LT PUSH2 0x9DA JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x24 CALLDATALOAD ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x24 DUP1 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x353 JUMPI PUSH2 0x788 PUSH2 0x140F JUMP JUMPDEST PUSH0 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x7A0 DUP3 DUP3 PUSH2 0x1061 JUMP JUMPDEST MLOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 LT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x42 NOT PUSH1 0x24 CALLDATALOAD CALLDATASIZE SUB ADD PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD CALLDATALOAD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x24 CALLDATALOAD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 DUP4 ADD CALLDATALOAD GT PUSH2 0x353 JUMPI PUSH1 0x24 DUP3 ADD CALLDATALOAD CALLDATASIZE SUB PUSH1 0x44 DUP4 ADD SGT PUSH2 0x353 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH4 0x2A2D80D1 PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0xC4 DUP4 ADD SWAP2 DUP1 MLOAD SWAP3 PUSH1 0x60 PUSH1 0x64 DUP7 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0xE4 DUP7 ADD SWAP5 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x952 JUMPI POP POP POP PUSH2 0x8AD PUSH0 SWAP4 DUP6 SWAP4 PUSH1 0x40 DUP6 SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x84 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA4 DUP6 ADD MSTORE PUSH1 0x3 NOT DUP5 DUP4 SUB ADD PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x44 PUSH1 0x24 DUP3 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x1075 JUMP JUMPDEST SUB DUP2 DUP4 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x348 JUMPI PUSH2 0x943 JUMPI JUMPDEST POP PUSH0 JUMPDEST PUSH2 0x8F4 DUP4 DUP4 PUSH2 0x1061 JUMP JUMPDEST MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x938 JUMPI PUSH1 0x1 SWAP4 DUP5 SWAP1 PUSH2 0x930 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 PUSH2 0x926 DUP7 PUSH2 0x91F DUP11 DUP11 PUSH2 0x1061 JUMP JUMPDEST MLOAD MLOAD PUSH2 0x1061 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP1 PUSH2 0x1095 JUMP JUMPDEST SWAP5 POP ADD PUSH2 0x8EA JUMP JUMPDEST POP SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x78D JUMP JUMPDEST PUSH2 0x94C SWAP1 PUSH2 0xF10 JUMP JUMPDEST DUP4 PUSH2 0x8E7 JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH1 0x20 PUSH1 0x80 DUP3 PUSH2 0x99E PUSH1 0x1 SWAP5 DUP11 SWAP15 SWAP12 SWAP15 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MLOAD SWAP2 PUSH6 0xFFFFFFFFFFFF DUP1 SWAP4 AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP9 SWAP12 SWAP9 ADD SWAP7 ADD SWAP3 SWAP2 ADD PUSH2 0x865 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP4 PUSH2 0x32C PUSH2 0x9CF DUP3 PUSH2 0x1126 JUMP JUMPDEST DUP1 SWAP3 PUSH1 0x44 CALLDATALOAD CALLER PUSH2 0x12F8 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x353 JUMPI PUSH1 0x60 PUSH1 0x4 CALLDATALOAD DUP3 ADD CALLDATASIZE SUB PUSH1 0x23 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA09 DUP3 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x24 DUP2 PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x353 JUMPI DUP2 PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATASIZE PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x24 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0xA40 DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP2 PUSH2 0xA4E PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3E JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD CALLDATASIZE PUSH1 0x44 DUP4 PUSH1 0x7 SHL DUP6 ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x44 DUP4 ADD SWAP1 JUMPDEST PUSH1 0x44 DUP4 PUSH1 0x7 SHL DUP6 ADD ADD DUP3 LT PUSH2 0xAB7 JUMPI POP POP POP POP SWAP3 DUP3 PUSH1 0x64 PUSH1 0x20 SWAP5 SWAP4 PUSH1 0x24 SWAP7 DUP7 SWAP6 MSTORE PUSH2 0xA9B PUSH1 0x44 DUP3 PUSH1 0x4 CALLDATALOAD ADD ADD PUSH2 0xEA8 JUMP JUMPDEST DUP6 DUP5 ADD MSTORE PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 SWAP1 POP PUSH2 0x715 JUMP JUMPDEST PUSH1 0x80 DUP3 CALLDATASIZE SUB SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xACE DUP3 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xAD7 DUP4 PUSH2 0xEA8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x80 SWAP6 ADD MSTORE PUSH2 0xB05 PUSH1 0x40 DUP7 ADD PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xB16 PUSH1 0x60 DUP7 ADD PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0xA6A JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x3DC PUSH2 0xB47 PUSH2 0xE92 JUMP JUMPDEST PUSH2 0x323 DUP4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0xE5E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0xFF PUSH32 0x0 AND PUSH1 0xFF DUP2 GT PUSH2 0xC24 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x568 PUSH2 0xC54 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0xC5C PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xC6B DUP4 CALLER DUP4 PUSH2 0x1151 JUMP JUMPDEST PUSH2 0x121E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10FB JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0xCC4 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xD45 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xD2D JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0xE10 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x657 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x637 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDB6 JUMPI PUSH2 0x5D9 DUP5 PUSH2 0x5CD DUP2 DUP9 SUB DUP3 PUSH2 0xF3E JUMP JUMPDEST PUSH1 0x3 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0xDFD JUMPI POP POP POP DUP2 PUSH2 0x5D9 SWAP4 PUSH2 0x5CD SWAP3 DUP3 ADD ADD SWAP4 PUSH2 0x5BD JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0xDE1 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xD88 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 SWAP3 DUP2 DUP4 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0xED5 PUSH2 0xE7C JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 NOT DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x1126 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x348 JUMPI PUSH0 SWAP2 PUSH2 0x1032 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1059 JUMPI JUMPDEST DUP2 PUSH2 0x104D PUSH1 0x20 SWAP4 DUP4 PUSH2 0xF3E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x353 JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1040 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI JUMP JUMPDEST PUSH2 0x10AA PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH1 0x2 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH1 0x2 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH2 0x1111 PUSH2 0xFDC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH2 0x113C PUSH2 0xFDC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15E7 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 PUSH0 KECCAK256 SWAP2 DUP4 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 SLOAD SWAP3 PUSH0 NOT DUP5 SUB PUSH2 0x118C JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP5 LT PUSH2 0x11EE JUMPI POP DUP1 ISZERO PUSH2 0x11D7 JUMPI DUP2 ISZERO PUSH2 0x11C0 JUMPI PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP4 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE SUB SWAP1 PUSH0 KECCAK256 SSTORE PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x1184 JUMP JUMPDEST DUP5 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP5 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x12E0 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x12C8 JUMPI DUP3 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1296 JUMPI POP DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP3 MSTORE SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP2 SWAP1 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT DUP2 DUP4 LT OR PUSH2 0xEFC JUMPI PUSH2 0x1375 SWAP2 DUP7 MSTORE PUSH32 0x0 PUSH2 0x167A JUMP JUMPDEST AND SWAP4 DUP5 ISZERO PUSH2 0x13F8 JUMPI SWAP1 DUP2 PUSH2 0x13AD PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 SWAP5 SWAP4 PUSH1 0x2 SLOAD PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP3 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE DUP6 PUSH0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP7 MLOAD DUP6 DUP2 MSTORE LOG3 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 JUMP JUMPDEST DUP3 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x5 SLOAD EQ PUSH2 0x1420 JUMPI PUSH1 0x2 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP4 AND SWAP6 DUP1 DUP6 AND SWAP5 DUP3 DUP9 DUP8 SUB PUSH2 0x1598 JUMPI JUMPDEST POP POP DUP7 ISZERO PUSH2 0x12E0 JUMPI DUP7 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 PUSH0 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x1567 JUMPI POP DUP3 SWAP2 PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB SWAP6 SWAP5 SWAP4 PUSH2 0x155A SWAP3 DUP11 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE SUB DUP6 PUSH0 KECCAK256 SSTORE DUP3 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH0 DUP10 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP9 MLOAD DUP8 DUP2 MSTORE LOG3 DUP5 MLOAD SWAP8 PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP11 ADD MSTORE AND SWAP7 DUP8 PUSH1 0x24 DUP3 ADD MSTORE DUP4 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x44 DUP2 MSTORE PUSH2 0x1534 DUP2 PUSH2 0xF23 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x167A JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG4 JUMP JUMPDEST DUP6 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15A2 SWAP2 DUP7 PUSH2 0x1151 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1481 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x15B6 DUP3 DUP3 DUP6 PUSH2 0x15E7 JUMP JUMPDEST SWAP3 DUP3 ISZERO PUSH2 0x15D3 JUMPI MULMOD PUSH2 0x15C5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 DUP3 DUP3 MUL SWAP2 PUSH0 NOT DUP5 DUP3 MULMOD SWAP4 DUP4 DUP1 DUP7 LT SWAP6 SUB SWAP5 DUP1 DUP7 SUB SWAP6 EQ PUSH2 0x166C JUMPI DUP5 DUP4 GT ISZERO PUSH2 0x165A JUMPI DUP3 SWAP2 MULMOD DUP2 PUSH0 SUB DUP3 AND DUP1 SWAP3 DIV PUSH1 0x2 DUP1 DUP3 PUSH1 0x3 MUL XOR DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 SWAP3 MUL SWAP1 SUB MUL SWAP4 PUSH1 0x1 DUP4 DUP1 PUSH0 SUB DIV ADD SWAP1 DUP5 DUP4 GT SWAP1 SUB MUL SWAP3 SUB DIV OR MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x227BC153 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP POP DUP1 SWAP3 POP ISZERO PUSH2 0x15D3 JUMPI DIV SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH0 SWAP2 DUP3 SWAP2 PUSH1 0x20 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1726 JUMPI RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH2 0x16D4 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x16C4 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xF3E JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x1732 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x1702 JUMPI JUMPDEST POP POP PUSH2 0x16EA JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x353 JUMPI PUSH1 0x20 ADD MLOAD DUP1 ISZERO SWAP1 DUP2 ISZERO SUB PUSH2 0x353 JUMPI PUSH0 DUP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x16D4 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x16CE JUMP JUMPDEST SWAP1 PUSH2 0x1759 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x1747 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x178C JUMPI JUMPDEST PUSH2 0x176A JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x1762 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0x4D 0xD4 POP PREVRANDAO CODECOPY DUP9 0xDB 0xE DUP1 0xBC ISZERO 0xEB 0xB6 PUSH9 0x7A8D8C71B3A695B5E5 SWAP15 SWAP14 PUSH31 0x87BB2D0A5564736F6C63430008190033000000000000000000000000000000 ",
							"sourceMap": "530:2898:19:-:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1962:13:3;530:2898:19;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;-1:-1:-1;530:2898:19;;;;-1:-1:-1;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;1985:17:3;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;4240:28:5;;;:::i;:::-;4300;;;;;4278:50;;530:2898:19;4338:15:5;1821:22:2;1716:1;1200:28:19;;530:2898;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4278:50:5;530:2898:19;;;;;1200:28;530:2898;;;;;;;;;;;;;;;;;;;;;4300:28:5;;4326:2;4300:28;;530:2898:19;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;-1:-1:-1;530:2898:19;;1985:17:3;530:2898:19;;-1:-1:-1;530:2898:19;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;-1:-1:-1;530:2898:19;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;-1:-1:-1;;530:2898:19;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;530:2898:19;;;;;;-1:-1:-1;;530:2898:19;;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;:::o;4503:533:5:-;530:2898:19;;;-1:-1:-1;;;4680:43:5;;;;;;;;;530:2898:19;;;;;;4680:43:5;-1:-1:-1;;;;;530:2898:19;;;;;;;;4680:43:5;530:2898:19;;;;;4640:93:5;530:2898:19;;;;;;;4640:93:5;;530:2898:19;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;4680:43:5;;530:2898:19;;;;4747:39:5;;;530:2898:19;4743:260:5;;530:2898:19;5012:17:5;4680:43;5012:17;4680:43;4503:533;:::o;4743:260::-;4680:43;530:2898:19;;;4829:38:5;;530:2898:19;;;;4680:43:5;4829:38;530:2898:19;;4885:35:5;;4743:260;4881:112;4940:38;530:2898:19;;;;4940:38:5;:::o;4747:39::-;530:2898:19;4680:43:5;530:2898:19;;4758:28:5;;4747:39;;530:2898:19;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3752,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_address_11717": {
									"entryPoint": 3708,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_address_11721": {
									"entryPoint": 3730,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_uint256t_addresst_address": {
									"entryPoint": 3977,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 3
								},
								"abi_decode_uint48": {
									"entryPoint": 3958,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_address_uint256_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_bytes_calldata": {
									"entryPoint": 4213,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3636,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_struct_PermitDetails": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"array_allocation_size_array_struct_PermitBatch_dyn": {
									"entryPoint": 3935,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 4245,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"external_fun_convertToAssets": {
									"entryPoint": 3678,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_convertToShares": {
									"entryPoint": 4030,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"external_fun_maxDeposit": {
									"entryPoint": 3772,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"finalize_allocation": {
									"entryPoint": 3902,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_11724": {
									"entryPoint": 3809,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_11726": {
									"entryPoint": 3856,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"finalize_allocation_11756": {
									"entryPoint": 3875,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_balanceOf": {
									"entryPoint": null,
									"id": 472,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_callOptionalReturn": {
									"entryPoint": 5754,
									"id": 1951,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_convertToAssets": {
									"entryPoint": 4258,
									"id": 1556,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_convertToAssets_11732": {
									"entryPoint": 4304,
									"id": 1556,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_convertToShares": {
									"entryPoint": 4390,
									"id": 1528,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_convertToShares_11719": {
									"entryPoint": 4347,
									"id": 1528,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"fun_deposit": {
									"entryPoint": 4856,
									"id": 1593,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_mulDiv": {
									"entryPoint": 5545,
									"id": 2715,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_mulDiv_2672": {
									"entryPoint": 5607,
									"id": 2672,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_nonReentrantBefore": {
									"entryPoint": 5135,
									"id": 351,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_spendAllowance": {
									"entryPoint": 4433,
									"id": 885,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_totalAssets": {
									"entryPoint": 4060,
									"id": 1161,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"fun_transfer": {
									"entryPoint": 4638,
									"id": 616,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_verifyCallResultFromTarget": {
									"entryPoint": 5938,
									"id": 2213,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_withdraw": {
									"entryPoint": 5221,
									"id": 1640,
									"parameterSlots": 5,
									"returnSlots": 0
								},
								"memory_array_index_access_struct_PermitBatch_dyn": {
									"entryPoint": 4193,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [],
							"immutableReferences": {
								"987": [
									{
										"length": 32,
										"start": 2990
									},
									{
										"length": 32,
										"start": 4087
									},
									{
										"length": 32,
										"start": 4945
									},
									{
										"length": 32,
										"start": 5430
									}
								],
								"989": [
									{
										"length": 32,
										"start": 3057
									}
								],
								"4284": [
									{
										"length": 32,
										"start": 598
									},
									{
										"length": 32,
										"start": 2045
									},
									{
										"length": 32,
										"start": 2226
									},
									{
										"length": 32,
										"start": 2922
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1E1D114 EQ PUSH2 0xE1A JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD5D JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0xB50 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCAB JUMPI DUP1 PUSH4 0xA28A477 EQ PUSH2 0xC8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xC70 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC38 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xBDD JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0xB99 JUMPI DUP1 PUSH4 0x402D267D EQ PUSH2 0x41B JUMPI DUP1 PUSH4 0x464582CB EQ PUSH2 0xB55 JUMPI DUP1 PUSH4 0x4CDAD506 EQ PUSH2 0xB50 JUMPI DUP1 PUSH4 0x6E553F65 EQ PUSH2 0xB26 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x7B17EDF2 EQ PUSH2 0x6A8 JUMPI DUP1 PUSH4 0x94BF804D EQ PUSH2 0x675 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x573 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x542 JUMPI DUP1 PUSH4 0xB3D7F6B9 EQ PUSH2 0x524 JUMPI DUP1 PUSH4 0xB460AF94 EQ PUSH2 0x49E JUMPI DUP1 PUSH4 0xBA087652 EQ PUSH2 0x420 JUMPI DUP1 PUSH4 0xC63D75B6 EQ PUSH2 0x41B JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x14D JUMPI DUP1 PUSH4 0xCE96CB77 EQ PUSH2 0x3E4 JUMPI DUP1 PUSH4 0xD905777E EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x357 JUMPI DUP1 PUSH4 0xE6ADB29C EQ PUSH2 0x152 JUMPI PUSH4 0xEF8B30F7 EQ PUSH2 0x14D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFBE JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 NOT ADD PUSH1 0x4 CALLDATALOAD PUSH1 0xC0 DUP3 SLT PUSH2 0x353 JUMPI PUSH1 0x80 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x183 DUP5 PUSH2 0xEE1 JUMP JUMPDEST SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0x195 DUP4 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x24 CALLDATALOAD DUP5 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI DUP2 MSTORE PUSH1 0x44 CALLDATALOAD DUP5 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x20 DUP3 ADD MSTORE PUSH6 0xFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD DUP2 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE PUSH1 0xA4 CALLDATALOAD DUP4 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI PUSH1 0x20 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 PUSH1 0xC4 CALLDATALOAD DUP3 MSTORE PUSH1 0xE4 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP5 GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 DUP6 ADD SLT ISZERO PUSH2 0x353 JUMPI DUP4 PUSH1 0x4 ADD CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 DUP7 ADD ADD GT PUSH2 0x353 JUMPI PUSH2 0x104 SWAP2 DUP3 CALLDATALOAD SWAP6 DUP9 DUP8 AND DUP8 SUB PUSH2 0x353 JUMPI PUSH2 0x253 PUSH2 0x140F JUMP JUMPDEST DUP9 PUSH32 0x0 AND SWAP4 DUP5 EXTCODESIZE ISZERO PUSH2 0x353 JUMPI PUSH0 SWAP7 PUSH2 0x2E4 SWAP5 PUSH1 0x24 PUSH2 0x302 SWAP4 DUP11 SWAP7 PUSH1 0x40 MLOAD SWAP15 DUP16 SWAP12 DUP13 SWAP11 DUP12 SWAP10 PUSH4 0x2B67B57 PUSH1 0xE4 SHL DUP12 MSTORE CALLER PUSH1 0x4 DUP13 ADD MSTORE DUP7 DUP12 ADD SWAP1 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MLOAD SWAP2 PUSH6 0xFFFFFFFFFFFF DUP1 SWAP4 AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST MLOAD AND PUSH1 0xA4 DUP9 ADD MSTORE MLOAD PUSH1 0xC4 DUP8 ADD MSTORE PUSH2 0x100 PUSH1 0xE4 DUP8 ADD MSTORE DUP6 ADD SWAP3 ADD PUSH2 0x1075 JUMP JUMPDEST SUB SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x348 JUMPI PUSH1 0x20 SWAP4 PUSH2 0x32C SWAP3 PUSH2 0x339 JUMPI JUMPDEST POP PUSH2 0x323 DUP4 PUSH2 0x1126 JUMP JUMPDEST SWAP3 DUP4 SWAP2 CALLER PUSH2 0x12F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x342 SWAP1 PUSH2 0xF10 JUMP JUMPDEST DUP5 PUSH2 0x319 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x370 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0x378 PUSH2 0xE92 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH2 0x3C2 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x405 PUSH2 0xE7C JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x3DC PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH2 0x10D0 JUMP JUMPDEST PUSH2 0xEBC JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x42E CALLDATASIZE PUSH2 0xF89 JUMP JUMPDEST SWAP1 PUSH2 0x449 DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x46A JUMPI POP DUP3 PUSH2 0x3DC SWAP2 PUSH2 0x461 PUSH1 0x20 SWAP6 PUSH2 0x10D0 JUMP JUMPDEST SWAP4 DUP5 SWAP2 CALLER PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E52AFBB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH2 0x4AC CALLDATASIZE PUSH2 0xF89 JUMP JUMPDEST SWAP1 PUSH2 0x4CF PUSH2 0x4CA DUP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x10D0 JUMP JUMPDEST DUP1 DUP5 GT PUSH2 0x4F0 JUMPI POP PUSH2 0x3DC SWAP1 DUP4 PUSH2 0x4E7 PUSH1 0x20 SWAP6 PUSH2 0x10FB JUMP JUMPDEST SWAP4 DUP5 SWAP3 CALLER PUSH2 0x1465 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3FA733BB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x44 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10A2 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x568 PUSH2 0x55E PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x121E JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH1 0x4 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x66B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x657 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x637 JUMPI POP PUSH1 0x1 EQ PUSH2 0x5DD JUMPI JUMPDEST PUSH2 0x5D9 DUP5 PUSH2 0x5CD DUP2 DUP9 SUB DUP3 PUSH2 0xF3E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xE34 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x4 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 POP PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP3 DUP5 LT PUSH2 0x624 JUMPI POP POP POP DUP2 PUSH2 0x5D9 SWAP4 PUSH2 0x5CD SWAP3 DUP3 ADD ADD SWAP4 PUSH2 0x5BD JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0x608 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP6 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD SWAP2 POP PUSH2 0x5CD DUP2 PUSH2 0x5D9 PUSH2 0x5BD JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x59E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x3DC PUSH2 0x696 PUSH2 0xE92 JUMP JUMPDEST SWAP2 PUSH2 0x6A0 DUP2 PUSH2 0x10A2 JUMP JUMPDEST DUP1 SWAP4 CALLER PUSH2 0x12F8 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x4 CALLDATALOAD ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH2 0x6E6 DUP2 PUSH2 0xF5F JUMP JUMPDEST SWAP1 PUSH2 0x6F4 PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0xF3E JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH1 0x4 CALLDATALOAD ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x24 PUSH1 0x4 CALLDATALOAD ADD SWAP2 JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH1 0x4 CALLDATALOAD ADD ADD DUP4 LT PUSH2 0x9DA JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x24 CALLDATALOAD ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0x353 JUMPI CALLDATASIZE PUSH1 0x24 DUP1 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x353 JUMPI PUSH2 0x788 PUSH2 0x140F JUMP JUMPDEST PUSH0 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x9C0 JUMPI PUSH2 0x7A0 DUP3 DUP3 PUSH2 0x1061 JUMP JUMPDEST MLOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 LT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x42 NOT PUSH1 0x24 CALLDATALOAD CALLDATASIZE SUB ADD PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD CALLDATALOAD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP2 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x24 CALLDATALOAD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 DUP4 ADD CALLDATALOAD GT PUSH2 0x353 JUMPI PUSH1 0x24 DUP3 ADD CALLDATALOAD CALLDATASIZE SUB PUSH1 0x44 DUP4 ADD SGT PUSH2 0x353 JUMPI PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH4 0x2A2D80D1 PUSH1 0xE0 SHL DUP4 MSTORE CALLER PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x60 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0xC4 DUP4 ADD SWAP2 DUP1 MLOAD SWAP3 PUSH1 0x60 PUSH1 0x64 DUP7 ADD MSTORE DUP4 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x20 PUSH1 0xE4 DUP7 ADD SWAP5 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x952 JUMPI POP POP POP PUSH2 0x8AD PUSH0 SWAP4 DUP6 SWAP4 PUSH1 0x40 DUP6 SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x84 DUP8 ADD MSTORE ADD MLOAD PUSH1 0xA4 DUP6 ADD MSTORE PUSH1 0x3 NOT DUP5 DUP4 SUB ADD PUSH1 0x44 DUP6 ADD MSTORE PUSH1 0x44 PUSH1 0x24 DUP3 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x1075 JUMP JUMPDEST SUB DUP2 DUP4 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x348 JUMPI PUSH2 0x943 JUMPI JUMPDEST POP PUSH0 JUMPDEST PUSH2 0x8F4 DUP4 DUP4 PUSH2 0x1061 JUMP JUMPDEST MLOAD MLOAD MLOAD DUP2 LT ISZERO PUSH2 0x938 JUMPI PUSH1 0x1 SWAP4 DUP5 SWAP1 PUSH2 0x930 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x20 PUSH2 0x926 DUP7 PUSH2 0x91F DUP11 DUP11 PUSH2 0x1061 JUMP JUMPDEST MLOAD MLOAD PUSH2 0x1061 JUMP JUMPDEST MLOAD ADD MLOAD AND SWAP1 PUSH2 0x1095 JUMP JUMPDEST SWAP5 POP ADD PUSH2 0x8EA JUMP JUMPDEST POP SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x78D JUMP JUMPDEST PUSH2 0x94C SWAP1 PUSH2 0xF10 JUMP JUMPDEST DUP4 PUSH2 0x8E7 JUMP JUMPDEST SWAP1 SWAP2 SWAP5 PUSH1 0x20 PUSH1 0x80 DUP3 PUSH2 0x99E PUSH1 0x1 SWAP5 DUP11 SWAP15 SWAP12 SWAP15 MLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP3 MLOAD AND DUP5 MSTORE PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP5 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MLOAD SWAP2 PUSH6 0xFFFFFFFFFFFF DUP1 SWAP4 AND PUSH1 0x40 DUP7 ADD MSTORE ADD MLOAD AND SWAP2 ADD MSTORE JUMP JUMPDEST SWAP9 SWAP12 SWAP9 ADD SWAP7 ADD SWAP3 SWAP2 ADD PUSH2 0x865 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x20 DUP4 PUSH2 0x32C PUSH2 0x9CF DUP3 PUSH2 0x1126 JUMP JUMPDEST DUP1 SWAP3 PUSH1 0x44 CALLDATALOAD CALLER PUSH2 0x12F8 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x353 JUMPI PUSH1 0x60 PUSH1 0x4 CALLDATALOAD DUP3 ADD CALLDATASIZE SUB PUSH1 0x23 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xA09 DUP3 PUSH2 0xEE1 JUMP JUMPDEST PUSH1 0x24 DUP2 PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x353 JUMPI DUP2 PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATASIZE PUSH1 0x43 DUP3 ADD SLT ISZERO PUSH2 0x353 JUMPI PUSH1 0x24 DUP2 ADD CALLDATALOAD SWAP1 PUSH2 0xA40 DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP2 PUSH2 0xA4E PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xF3E JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x20 DUP4 ADD CALLDATASIZE PUSH1 0x44 DUP4 PUSH1 0x7 SHL DUP6 ADD ADD GT PUSH2 0x353 JUMPI PUSH1 0x44 DUP4 ADD SWAP1 JUMPDEST PUSH1 0x44 DUP4 PUSH1 0x7 SHL DUP6 ADD ADD DUP3 LT PUSH2 0xAB7 JUMPI POP POP POP POP SWAP3 DUP3 PUSH1 0x64 PUSH1 0x20 SWAP5 SWAP4 PUSH1 0x24 SWAP7 DUP7 SWAP6 MSTORE PUSH2 0xA9B PUSH1 0x44 DUP3 PUSH1 0x4 CALLDATALOAD ADD ADD PUSH2 0xEA8 JUMP JUMPDEST DUP6 DUP5 ADD MSTORE PUSH1 0x4 CALLDATALOAD ADD ADD CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP4 ADD SWAP3 SWAP1 POP PUSH2 0x715 JUMP JUMPDEST PUSH1 0x80 DUP3 CALLDATASIZE SUB SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH2 0xACE DUP3 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0xAD7 DUP4 PUSH2 0xEA8 JUMP JUMPDEST DUP3 MSTORE PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI DUP3 PUSH1 0x20 SWAP3 DUP4 PUSH1 0x80 SWAP6 ADD MSTORE PUSH2 0xB05 PUSH1 0x40 DUP7 ADD PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0xB16 PUSH1 0x60 DUP7 ADD PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x60 DUP3 ADD MSTORE DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0xA6A JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x4 CALLDATALOAD PUSH2 0x3DC PUSH2 0xB47 PUSH2 0xE92 JUMP JUMPDEST PUSH2 0x323 DUP4 PUSH2 0x1126 JUMP JUMPDEST PUSH2 0xE5E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0xFF PUSH32 0x0 AND PUSH1 0xFF DUP2 GT PUSH2 0xC24 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0x568 PUSH2 0xC54 PUSH2 0xE7C JUMP JUMPDEST PUSH2 0xC5C PUSH2 0xE92 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0xC6B DUP4 CALLER DUP4 PUSH2 0x1151 JUMP JUMPDEST PUSH2 0x121E JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10FB JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0xCC4 PUSH2 0xE7C JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xD45 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xD2D JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0xE10 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x657 JUMPI DUP4 DUP7 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x637 JUMPI POP PUSH1 0x1 EQ PUSH2 0xDB6 JUMPI PUSH2 0x5D9 DUP5 PUSH2 0x5CD DUP2 DUP9 SUB DUP3 PUSH2 0xF3E JUMP JUMPDEST PUSH1 0x3 PUSH0 SWAP1 DUP2 MSTORE SWAP3 SWAP5 POP PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP3 DUP5 LT PUSH2 0xDFD JUMPI POP POP POP DUP2 PUSH2 0x5D9 SWAP4 PUSH2 0x5CD SWAP3 DUP3 ADD ADD SWAP4 PUSH2 0x5BD JUMP JUMPDEST DUP1 SLOAD DUP6 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 DUP2 ADD PUSH2 0xDE1 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xD88 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 SWAP3 DUP2 DUP4 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH2 0xED5 PUSH2 0xE7C JUMP JUMPDEST POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 NOT DUP2 MSTORE RETURN JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0xEFC JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH6 0xFFFFFFFFFFFF DUP3 AND DUP3 SUB PUSH2 0x353 JUMPI JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 PUSH1 0x24 CALLDATALOAD DUP3 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 AND DUP2 SUB PUSH2 0x353 JUMPI SWAP1 JUMP JUMPDEST CALLVALUE PUSH2 0x353 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x353 JUMPI PUSH1 0x20 PUSH2 0x3DC PUSH1 0x4 CALLDATALOAD PUSH2 0x1126 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x348 JUMPI PUSH0 SWAP2 PUSH2 0x1032 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1059 JUMPI JUMPDEST DUP2 PUSH2 0x104D PUSH1 0x20 SWAP4 DUP4 PUSH2 0xF3E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x353 JUMPI MLOAD SWAP1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1040 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x9AC JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI JUMP JUMPDEST PUSH2 0x10AA PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH1 0x2 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15A9 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x10D8 PUSH2 0xFDC JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH1 0x2 SLOAD SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH2 0x1111 PUSH2 0xFDC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15A9 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI PUSH2 0x113C PUSH2 0xFDC JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC24 JUMPI PUSH2 0x10CD SWAP3 PUSH2 0x15E7 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 PUSH0 KECCAK256 SWAP2 DUP4 AND SWAP2 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP5 PUSH0 KECCAK256 SLOAD SWAP3 PUSH0 NOT DUP5 SUB PUSH2 0x118C JUMPI JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP5 LT PUSH2 0x11EE JUMPI POP DUP1 ISZERO PUSH2 0x11D7 JUMPI DUP2 ISZERO PUSH2 0x11C0 JUMPI PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP4 PUSH0 KECCAK256 SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE SUB SWAP1 PUSH0 KECCAK256 SSTORE PUSH0 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 0x1184 JUMP JUMPDEST DUP5 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP5 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP6 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x12E0 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x12C8 JUMPI DUP3 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x1296 JUMPI POP DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP3 MSTORE SWAP5 SWAP2 SWAP4 SWAP2 SWAP3 SWAP2 SWAP1 PUSH1 0xA0 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT DUP2 DUP4 LT OR PUSH2 0xEFC JUMPI PUSH2 0x1375 SWAP2 DUP7 MSTORE PUSH32 0x0 PUSH2 0x167A JUMP JUMPDEST AND SWAP4 DUP5 ISZERO PUSH2 0x13F8 JUMPI SWAP1 DUP2 PUSH2 0x13AD PUSH32 0xDCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7 SWAP5 SWAP4 PUSH1 0x2 SLOAD PUSH2 0x1095 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE DUP3 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE DUP6 PUSH0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP7 MLOAD DUP6 DUP2 MSTORE LOG3 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 JUMP JUMPDEST DUP3 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x5 SLOAD EQ PUSH2 0x1420 JUMPI PUSH1 0x2 PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP2 SWAP1 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 DUP4 AND SWAP6 DUP1 DUP6 AND SWAP5 DUP3 DUP9 DUP8 SUB PUSH2 0x1598 JUMPI JUMPDEST POP POP DUP7 ISZERO PUSH2 0x12E0 JUMPI DUP7 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP4 DUP5 PUSH0 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x1567 JUMPI POP DUP3 SWAP2 PUSH32 0xFBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB SWAP6 SWAP5 SWAP4 PUSH2 0x155A SWAP3 DUP11 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE SUB DUP6 PUSH0 KECCAK256 SSTORE DUP3 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH0 DUP10 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP9 MLOAD DUP8 DUP2 MSTORE LOG3 DUP5 MLOAD SWAP8 PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP11 ADD MSTORE AND SWAP7 DUP8 PUSH1 0x24 DUP3 ADD MSTORE DUP4 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x44 DUP2 MSTORE PUSH2 0x1534 DUP2 PUSH2 0xF23 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x167A JUMP JUMPDEST DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG4 JUMP JUMPDEST DUP6 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH2 0x15A2 SWAP2 DUP7 PUSH2 0x1151 JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x1481 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x15B6 DUP3 DUP3 DUP6 PUSH2 0x15E7 JUMP JUMPDEST SWAP3 DUP3 ISZERO PUSH2 0x15D3 JUMPI MULMOD PUSH2 0x15C5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xC24 JUMPI SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 DUP3 DUP3 MUL SWAP2 PUSH0 NOT DUP5 DUP3 MULMOD SWAP4 DUP4 DUP1 DUP7 LT SWAP6 SUB SWAP5 DUP1 DUP7 SUB SWAP6 EQ PUSH2 0x166C JUMPI DUP5 DUP4 GT ISZERO PUSH2 0x165A JUMPI DUP3 SWAP2 MULMOD DUP2 PUSH0 SUB DUP3 AND DUP1 SWAP3 DIV PUSH1 0x2 DUP1 DUP3 PUSH1 0x3 MUL XOR DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 SWAP3 MUL SWAP1 SUB MUL SWAP4 PUSH1 0x1 DUP4 DUP1 PUSH0 SUB DIV ADD SWAP1 DUP5 DUP4 GT SWAP1 SUB MUL SWAP3 SUB DIV OR MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x227BC153 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP POP DUP1 SWAP3 POP ISZERO PUSH2 0x15D3 JUMPI DIV SWAP1 JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH0 SWAP2 DUP3 SWAP2 PUSH1 0x20 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x1726 JUMPI RETURNDATASIZE PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0xEFC JUMPI PUSH2 0x16D4 SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x16C4 PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0xF3E JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP4 PUSH2 0x1732 JUMP JUMPDEST DUP1 MLOAD SWAP1 DUP2 ISZERO ISZERO SWAP2 DUP3 PUSH2 0x1702 JUMPI JUMPDEST POP POP PUSH2 0x16EA JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x353 JUMPI PUSH1 0x20 ADD MLOAD DUP1 ISZERO SWAP1 DUP2 ISZERO SUB PUSH2 0x353 JUMPI PUSH0 DUP1 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x16D4 SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x16CE JUMP JUMPDEST SWAP1 PUSH2 0x1759 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x1747 JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x178C JUMPI JUMPDEST PUSH2 0x176A JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x1762 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0x4D 0xD4 POP PREVRANDAO CODECOPY DUP9 0xDB 0xE DUP1 0xBC ISZERO 0xEB 0xB6 PUSH9 0x7A8D8C71B3A695B5E5 SWAP15 SWAP14 PUSH31 0x87BB2D0A5564736F6C63430008190033000000000000000000000000000000 ",
							"sourceMap": "530:2898:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;530:2898:19;;;;;-1:-1:-1;;530:2898:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2227:103:2;;:::i;:::-;1998:12:19;;530:2898;1998:54;;;;;;530:2898;;;;;;;;;;;;;;;;;;;;;1998:54;;2018:10;530:2898;1998:54;;530:2898;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1998:54;;;;;;;;;530:2898;1998:54;8163:6:5;1998:54:19;;;530:2898;6046:45:5;;;;:::i;:::-;2018:10:19;;;;8163:6:5;:::i;:::-;530:2898:19;2809:22:2;1759:1;530:2898:19;;;;;;1998:54;;;;:::i;:::-;;;;;530:2898;;;;;;;;;1998:54;530:2898;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;3952:11:3;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;;:::i;:::-;-1:-1:-1;;;;;530:2898:19;3390:9:3;530:2898:19;;;;;;;;;;;;3299:116:3;530:2898:19;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;-1:-1:-1;;;;;530:2898:19;;:::i;:::-;;;;;;;;6749:55:5;530:2898:19;;;;6749:55:5;:::i;530:2898:19:-;;:::i;:::-;;;;;;;:::i;:::-;6948:16:5;;;530:2898:19;;;;;;3390:9:3;530:2898:19;3390:9:3;530:2898:19;;;3390:9:3;530:2898:19;;3299:116:3;;6948:16:5;9511:18;;;9507:106;;6248:45;;9720:6;6248:45;;530:2898:19;6248:45:5;;:::i;:::-;735:10:10;;;;9720:6:5;:::i;9507:106::-;530:2898:19;;-1:-1:-1;;;9552:50:5;;-1:-1:-1;;;;;530:2898:19;;;;;9552:50:5;;530:2898:19;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;9552:50:5;530:2898:19;;;;;;;:::i;:::-;6766:16:5;6749:55;6766:16;;530:2898:19;;;;;;3390:9:3;530:2898:19;3390:9:3;530:2898:19;;;3390:9:3;530:2898:19;;3299:116:3;;6766:16:5;6749:55;:::i;:::-;9057:18;;;9053:108;;7514:44;9270:6;7514:44;;;530:2898:19;7514:44:5;;:::i;:::-;735:10:10;;;;9270:6:5;:::i;9053:108::-;530:2898:19;;-1:-1:-1;;;9098:52:5;;-1:-1:-1;;;;;530:2898:19;;;;;9098:52:5;;530:2898:19;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;9552:50:5;530:2898:19;;;;;;-1:-1:-1;;530:2898:19;;;;;7313:44:5;530:2898:19;;7313:44:5;:::i;530:2898:19:-;;;;;;-1:-1:-1;;530:2898:19;;;;3754:5:3;530:2898:19;;:::i;:::-;;;735:10:10;;3754:5:3;:::i;:::-;530:2898:19;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;-1:-1:-1;;530:2898:19;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;8810:6:5;530:2898:19;;:::i;:::-;7313:44:5;;;;:::i;:::-;735:10:10;;;8810:6:5;:::i;530:2898:19:-;;;;;;-1:-1:-1;;530:2898:19;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;2227:103:2;;:::i;:::-;530:2898:19;2856:13;530:2898;2851:428;2894:3;530:2898;;2871:21;;;;;3010:13;;;;:::i;:::-;;530:2898;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;2978:12;-1:-1:-1;;;;;530:2898:19;2978:61;;;;530:2898;;;;;;2978:61;;2998:10;530:2898;2978:61;;530:2898;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2978:61;530:2898;;2978:12;-1:-1:-1;;;;;530:2898:19;2978:61;;;;;;;;530:2898;3136:13;530:2898;3185:3;3155:13;;;;:::i;:::-;;:21;530:2898;3151:32;;;;;530:2898;;;;3208:46;;-1:-1:-1;;;;;530:2898:19;3223:24;:13;;;;;:::i;:::-;;:21;:24;:::i;:::-;;:31;530:2898;;3208:46;;:::i;:::-;3185:3;-1:-1:-1;530:2898:19;3136:13;;3151:32;;;530:2898;;2856:13;;;2978:61;;;;:::i;:::-;;;;530:2898;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2871:21;530:2898;2871:21;8163:6:5;6046:45;;;:::i;:::-;530:2898:19;;;;2998:10;8163:6:5;:::i;530:2898:19:-;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;8163:6:5;530:2898:19;;:::i;:::-;6046:45:5;;;:::i;530:2898:19:-;;:::i;:::-;;;;;;-1:-1:-1;;530:2898:19;;;;;;584:38;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;5716:6:5;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;5546:19:5;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;5249:5:3;530:2898:19;;:::i;:::-;;;:::i;:::-;;;735:10:10;5213:5:3;735:10:10;;5213:5:3;;:::i;:::-;5249;:::i;530:2898:19:-;;;;;;-1:-1:-1;;530:2898:19;;;;;3222:12:3;530:2898:19;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;7514:44:5;530:2898:19;;7514:44:5;:::i;530:2898:19:-;;;;;;-1:-1:-1;;530:2898:19;;;;;;:::i;:::-;;;735:10:10;;10061:19:3;10057:89;;-1:-1:-1;;;;;530:2898:19;;10159:21:3;;10155:90;;735:10:10;530:2898:19;;9105:4:3;530:2898:19;;;;;;;;;;;;;;1759:1:2;530:2898:19;;;;;10333:31:3;530:2898:19;735:10:10;10333:31:3;;530:2898:19;;;9105:4:3;530:2898:19;;;10155:90:3;530:2898:19;;-1:-1:-1;;;10203:31:3;;530:2898:19;;10203:31:3;;530:2898:19;;;10203:31:3;10057:89;530:2898:19;;-1:-1:-1;;;10103:32:3;;530:2898:19;;10103:32:3;;530:2898:19;;;10103:32:3;530:2898:19;;;;;;-1:-1:-1;;530:2898:19;;;;;;;;2151:5:3;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2151:5:3;530:2898:19;;;;;;-1:-1:-1;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;530:2898:19;;;;:::o;:::-;;;;;;-1:-1:-1;;530:2898:19;;;;;6248:45:5;530:2898:19;;6248:45:5;:::i;530:2898:19:-;;;;-1:-1:-1;;;;;530:2898:19;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;530:2898:19;;;;;;:::o;:::-;;;-1:-1:-1;;;;;530:2898:19;;;;;;:::o;:::-;;;;;;-1:-1:-1;;530:2898:19;;;;;;:::i;:::-;;;;;6433:17:5;;530:2898:19;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;:::o;:::-;-1:-1:-1;;;;;530:2898:19;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;;530:2898:19;;;;;6046:45:5;530:2898:19;;6046:45:5;:::i;5780:116::-;530:2898:19;;-1:-1:-1;;;5858:31:5;;5883:4;5858:31;;;530:2898:19;5858:31:5;530:2898:19;;;5858:6:5;-1:-1:-1;;;;;530:2898:19;5858:31:5;;;;;;;-1:-1:-1;5858:31:5;;;5851:38;5780:116;:::o;5858:31::-;;;;;;;;;;;;;;;;;:::i;:::-;;;530:2898:19;;;;;5780:116:5;:::o;5858:31::-;;;-1:-1:-1;5858:31:5;;530:2898:19;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;530:2898:19;;;;;;;;-1:-1:-1;;530:2898:19;;;;:::o;:::-;;;;;;;;;;:::o;10219:213:5:-;10356:13;;:::i;:::-;7338:18;530:2898:19;;;;;;;3222:12:3;530:2898:19;;7338:18:5;530:2898:19;;;;;;;10342:83:5;;;:::i;:::-;10219:213;:::o;:::-;10356:13;;:::i;:::-;10372:1;530:2898:19;;;;;;;3222:12:3;530:2898:19;;10372:1:5;530:2898:19;;;;;;;8188:25:11;;;:::i;9882:213:5:-;3222:12:3;530:2898:19;;;;;;;;;10060:13:5;;:::i;:::-;530:2898:19;;;;;;;;;10005:83:5;;;:::i;9882:213::-;3222:12:3;530:2898:19;;;;;;;;;10060:13:5;;:::i;:::-;530:2898:19;;;;;;;;;8188:25:11;;;:::i;10663:477:3:-;;;530:2898:19;;;;;;;;;;-1:-1:-1;530:2898:19;3952:11:3;530:2898:19;;;;;-1:-1:-1;530:2898:19;;;;;;-1:-1:-1;530:2898:19;;;;-1:-1:-1;530:2898:19;;6433:17:5;;;10828:37:3;;10824:310;;10663:477;;;;;;;:::o;10824:310::-;10885:24;;;10881:130;;10061:19;;;10057:89;;10159:21;;10155:90;;-1:-1:-1;530:2898:19;3952:11:3;530:2898:19;;;-1:-1:-1;530:2898:19;;-1:-1:-1;530:2898:19;;;;;-1:-1:-1;530:2898:19;1759:1:2;10824:310:3;;;;;;;;10155:90;530:2898:19;;-1:-1:-1;;;10203:31:3;;-1:-1:-1;10203:31:3;;;530:2898:19;;;10203:31:3;10057:89;530:2898:19;;-1:-1:-1;;;10103:32:3;;-1:-1:-1;10103:32:3;;;530:2898:19;;;10103:32:3;10881:130;530:2898:19;;-1:-1:-1;;;10936:60:3;;-1:-1:-1;;;;;530:2898:19;;;;10936:60:3;;;530:2898:19;;;;;;;;;;;;;;;9552:50:5;5656:300:3;;-1:-1:-1;;;;;530:2898:19;;;;5739:18:3;;5735:86;;530:2898:19;5834:16:3;;;5830:86;;530:2898:19;6356:540:3;530:2898:19;6356:540:3;530:2898:19;;;6356:540:3;530:2898:19;;6603:19:3;;;;6599:115;;530:2898:19;;7346:25:3;530:2898:19;;;;6356:540:3;530:2898:19;6356:540:3;530:2898:19;;;;6356:540:3;530:2898:19;1759:1:2;530:2898:19;6356:540:3;530:2898:19;;6356:540:3;530:2898:19;;;;;1759:1:2;;530:2898:19;;;;;7346:25:3;5656:300::o;6599:115::-;530:2898:19;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;530:2898:19;;;;6649:50:3;;;530:2898:19;;;;;;;;;;;;;;;;9552:50:5;5830:86:3;530:2898:19;;-1:-1:-1;;;5873:32:3;;5755:1;5873:32;;;530:2898:19;;;5873:32:3;5735:86;530:2898:19;;-1:-1:-1;;;5780:30:3;;5755:1;5780:30;;;530:2898:19;;;5780:30:3;10496:830:5;530:2898:19;;;-1:-1:-1;;;1829:53:8;;;;-1:-1:-1;;;;;530:2898:19;;;1829:53:8;;;530:2898:19;;;11215:4:5;530:2898:19;;;;;;;;;;;1829:53:8;;530:2898:19;;;10496:830:5;;530:2898:19;10496:830:5;530:2898:19;;;;-1:-1:-1;;;;;530:2898:19;;;;;;;;1829:53:8;530:2898:19;;;11191:6:5;1829:53:8;:::i;:::-;530:2898:19;7791:21:3;;;7787:91;;530:2898:19;;6496:21:3;11278:41:5;530:2898:19;;6496:21:3;530:2898:19;6496:21:3;:::i;:::-;;1759:1:2;530:2898:19;6906:425:3;530:2898:19;6906:425:3;1829:53:8;530:2898:19;;6906:425:3;530:2898:19;;;;;1759:1:2;;530:2898:19;6906:425:3;7346:25;1829:53:8;530:2898:19;;;;;7346:25:3;530:2898:19;;;;;1829:53:8;530:2898:19;;;11278:41:5;10496:830::o;7787:91:3:-;530:2898:19;;-1:-1:-1;;;7835:32:3;;-1:-1:-1;7835:32:3;;;530:2898:19;1829:53:8;;7835:32:3;2336:287:2;1759:1;2468:7;530:2898:19;2468:19:2;1759:1;;;2468:7;1759:1;2336:287::o;1759:1::-;530:2898:19;;-1:-1:-1;;;1759:1:2;;;;;;;;;;;530:2898:19;1759:1:2;530:2898:19;;;1759:1:2;;;;11393:914:5;;;;530:2898:19;;;;;;;;;;;;;11570:15:5;;;;;11566:84;;11393:914;8317:21:3;;;;8313:89;;530:2898:19;6356:540:3;530:2898:19;6356:540:3;530:2898:19;;;;;6356:540:3;530:2898:19;;6603:19:3;;;;6599:115;;530:2898:19;;;12251:49:5;530:2898:19;;;1412:43:8;530:2898:19;;6356:540:3;530:2898:19;6356:540:3;530:2898:19;;;;6356:540:3;530:2898:19;1759:1:2;530:2898:19;7073:21:3;530:2898:19;;7073:21:3;1759:1:2;6356:540:3;530:2898:19;7346:25:3;530:2898:19;;;;;;7346:25:3;530:2898:19;;;;;;;1412:43:8;;;530:2898:19;1412:43:8;;;;;530:2898:19;;;;;;;1412:43:8;;;;;:::i;:::-;12210:6:5;1412:43:8;:::i;:::-;530:2898:19;;;;;;;;;12251:49:5;11393:914::o;6599:115:3:-;530:2898:19;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;530:2898:19;;;;6649:50:3;;;530:2898:19;;;;;;;;;;;;;;;;9552:50:5;11566:84;11632:6;;;;:::i;:::-;11566:84;;;;8051:302:11;;;8188:25;;;;;:::i;:::-;8257;;;;;;8223:101;;8051:302;:::o;8223:101::-;7338:18:5;530:2898:19;;;;;;;8051:302:11;:::o;8257:25::-;530:2898:19;;;;;;;;;;;3803:4116:11;;;530:2898:19;;;;-1:-1:-1;;3803:4116:11;;4383:131;;;;;;;;;;;;4595:10;;4591:368;;5065:20;;;;5061:88;;5435:300;;;530:2898:19;-1:-1:-1;530:2898:19;5954:31:11;;5999:371;;;6813:1;530:2898:19;;6794:1:11;530:2898:19;6793:21:11;530:2898:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5999:371:11;;;;-1:-1:-1;5999:371:11;;;5435:300;;;;;;530:2898:19;5435:300:11;;5999:371;6436:21;530:2898:19;3803:4116:11;:::o;5061:88::-;530:2898:19;;-1:-1:-1;;;5112:22:11;;;;;4591:368;530:2898:19;;;;;;;;;4918:26:11;:::o;4059:629:8:-;3462:31:9;;-1:-1:-1;;;;;530:2898:19;;;;2847:1:9;;;;3462:31;;2847:1;530:2898:19;3462:31:9;;530:2898:19;;;;;-1:-1:-1;;;;;530:2898:19;;;;3510:55:9;530:2898:19;;;;;3462:31:9;530:2898:19;;;;;;;;;:::i;:::-;;;;2847:1:9;3462:31;530:2898:19;;;;3510:55:9;;:::i;:::-;530:2898:19;;4551:22:8;;;;:57;;;;530:2898:19;4547:135:8;;;;4059:629;:::o;4547:135::-;530:2898:19;;;;4631:40:8;;;;;;;;;530:2898:19;4631:40:8;4551:57;4578:30;;;;3462:31:9;4578:30:8;;;530:2898:19;;;;3462:31:9;4578:30:8;530:2898:19;;;;;;;;;4551:57:8;;;;530:2898:19;3510:55:9;530:2898:19;;;;;4625:582:9;;4797:8;;-1:-1:-1;530:2898:19;;5874:21:9;:17;;6046:142;;;;;;5870:383;530:2898:19;;-1:-1:-1;;;6225:17:9;;;;;4793:408;530:2898:19;;5045:22:9;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;530:2898:19;;-1:-1:-1;;;5121:24:9;;-1:-1:-1;;;;;530:2898:19;;;5121:24:9;;;530:2898:19;;;5121:24:9;5045:49;5071:18;;;:23;5045:49;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1218200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "3094",
								"approve(address,uint256)": "24361",
								"asset()": "infinite",
								"balanceOf(address)": "2709",
								"convertToAssets(uint256)": "infinite",
								"convertToShares(uint256)": "infinite",
								"decimals()": "infinite",
								"deposit(uint256,address)": "infinite",
								"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)": "infinite",
								"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)": "infinite",
								"maxDeposit(address)": "433",
								"maxMint(address)": "697",
								"maxRedeem(address)": "2951",
								"maxWithdraw(address)": "infinite",
								"mint(uint256,address)": "infinite",
								"name()": "infinite",
								"permitSystem()": "infinite",
								"previewDeposit(uint256)": "infinite",
								"previewMint(uint256)": "infinite",
								"previewRedeem(uint256)": "infinite",
								"previewWithdraw(uint256)": "infinite",
								"redeem(uint256,address,address)": "infinite",
								"symbol()": "infinite",
								"totalAssets()": "infinite",
								"totalSupply()": "2358",
								"transfer(address,uint256)": "51111",
								"transferFrom(address,address,uint256)": "75604",
								"withdraw(uint256,address,address)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "CALLVALUE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSHSIZE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "CODESIZE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "7"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "7"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SLT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "14"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "14"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "17"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "17"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "22"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "23"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "26"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "27"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "28"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "31"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "OR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "35"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "36"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "37"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "39"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "41"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "43"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "44"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "OR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "45"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "46"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 4240,
									"end": 4268,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "tag",
									"source": 5,
									"value": "46"
								},
								{
									"begin": 4240,
									"end": 4268,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "47"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 4338,
									"end": 4353,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 1821,
									"end": 1843,
									"name": "PUSH",
									"source": 2,
									"value": "5"
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1200,
									"end": 1228,
									"name": "PUSH",
									"source": 19,
									"value": "C0"
								},
								{
									"begin": 1200,
									"end": 1228,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "987"
								},
								{
									"begin": 4278,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "A0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "989"
								},
								{
									"begin": 1200,
									"end": 1228,
									"name": "PUSH",
									"source": 19,
									"value": "C0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "4284"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "RETURN",
									"source": 19
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "tag",
									"source": 5,
									"value": "47"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4326,
									"end": 4328,
									"name": "PUSH",
									"source": 5,
									"value": "12"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "49"
								},
								{
									"begin": 4300,
									"end": 4328,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "43"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "44"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "41"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "KECCAK256",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "50"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "51"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "53"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "54"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "45"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "53"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "F8"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "54"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "51"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP12",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "50"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "39"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "KECCAK256",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "5"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP10",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "55"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "56"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP12",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP10",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "5"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "57"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "58"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "58"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP8",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP12",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "57"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "55"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "56"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "37"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "22"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B71"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "35"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "7F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "36"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B71"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "41"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "31"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "28"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP11",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP10",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "KECCAK256",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP12",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "61"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "GT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "63"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "64"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "63"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP9",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "F8"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "NOT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "64"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "61"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP15",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP8",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "26"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP8",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "KECCAK256",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "5"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP11",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "65"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "66"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP13",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "5"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "67"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "68"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "27"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "68"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP13",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "67"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "65"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "66"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B71"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "22"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "22"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "7F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "23"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "OR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1F"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SLT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "76"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "76"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "77"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP6",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "77"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP7",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MCOPY",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "tag",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "313CE567"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "GT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "LT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "OR",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "A0"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SHL",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "GAS",
									"source": 5
								},
								{
									"begin": 4640,
									"end": 4733,
									"name": "STATICCALL",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "RETURNDATASIZE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "82"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "RETURNDATASIZE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "84"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "84"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "85"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP4",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "85"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "RETURNDATASIZE",
									"source": 19
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "RETURNDATACOPY",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "86"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "87"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "88"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "89"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "90"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 5012,
									"end": 5029,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 4503,
									"end": 5036,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4503,
									"end": 5036,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "tag",
									"source": 5,
									"value": "89"
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SLT",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "18"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 4829,
									"end": 4867,
									"name": "ADD",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "FF"
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 4885,
									"end": 4920,
									"name": "GT",
									"source": 5
								},
								{
									"begin": 4743,
									"end": 5003,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "90"
								},
								{
									"begin": 4881,
									"end": 4993,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "FF"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP3",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "AND",
									"source": 19
								},
								{
									"begin": 4940,
									"end": 4978,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 4940,
									"end": 4978,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "tag",
									"source": 5,
									"value": "87"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 4680,
									"end": 4723,
									"name": "PUSH",
									"source": 5,
									"value": "20"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "LT",
									"source": 5
								},
								{
									"begin": 4758,
									"end": 4786,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "88"
								},
								{
									"begin": 4747,
									"end": 4786,
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "tag",
									"source": 19,
									"value": "82"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH",
									"source": 19,
									"value": "60"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "86"
								},
								{
									"begin": 530,
									"end": 3428,
									"name": "JUMP",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220494dd450443988db0e80bc15ebb6687a8d8c71b3a695b5e59e9d7e87bb2d0a5564736f6c63430008190033",
									".code": [
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "35"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "35"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1E1D114"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "37"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "6FDDE03"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "39"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7A2D13A"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "95EA7B3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "43"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A28A477"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "45"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "18160DDD"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "47"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "23B872DD"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "49"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "313CE567"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "51"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "38D52E0F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "53"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "402D267D"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "464582CB"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "57"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4CDAD506"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "6E553F65"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "61"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "70A08231"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "85"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7B17EDF2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "94BF804D"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "67"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "69"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "B3D7F6B9"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "73"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "B460AF94"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "75"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "BA087652"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "77"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C63D75B6"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C6E6F592"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "91"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "CE96CB77"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "83"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "D905777E"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "85"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "DD62ED3E"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "87"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E6ADB29C"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "89"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "EF8B30F7"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "91"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "91"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "89"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "120"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "99"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "99"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "102"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "102"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "104"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "123"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1998,
											"end": 2010,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2010,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "4284"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "126"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "127"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP11",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP15",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP16",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP12",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP13",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP11",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP12",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP10",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "2B67B57"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "DUP12",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2028,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "DUP13",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP12",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "126"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "100"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "127"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "131"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "132"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2018,
											"end": 2028,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2028,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2028,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2018,
											"end": 2028,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 8163,
											"end": 8169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "tag",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 2809,
											"end": 2831,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "tag",
											"source": 19,
											"value": "131"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "134"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 1998,
											"end": 2052,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "tag",
											"source": 19,
											"value": "134"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "132"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "tag",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "tag",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 1998,
											"end": 2052,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "87"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "139"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "139"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "140"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "85"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "146"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "146"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "83"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "151"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "151"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 6749,
											"end": 6804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "79"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "6"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "77"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "155"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "155"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "tag",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 6948,
											"end": 6964,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9511,
											"end": 9529,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "160"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "SWAP6",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 6248,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "tag",
											"source": 5,
											"value": "160"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9720,
											"end": 9726,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 9720,
											"end": 9726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 9507,
											"end": 9613,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2E52AFBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "75"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "164"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "164"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "165"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "tag",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 6766,
											"end": 6782,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 6749,
											"end": 6804,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "tag",
											"source": 5,
											"value": "165"
										},
										{
											"begin": 6749,
											"end": 6804,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 9057,
											"end": 9075,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 9057,
											"end": 9075,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9057,
											"end": 9075,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 9270,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "170"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "SWAP6",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 7514,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "tag",
											"source": 5,
											"value": "170"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 9270,
											"end": 9276,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 9270,
											"end": 9276,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "tag",
											"source": 5,
											"value": "167"
										},
										{
											"begin": 9053,
											"end": 9161,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3FA733BB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "DUP5",
											"source": 5
										},
										{
											"begin": 9098,
											"end": 9150,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "73"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 7313,
											"end": 7357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "182"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "182"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 3754,
											"end": 3759,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "69"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "193"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "197"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "198"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "198"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "197"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "187"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "188"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "67"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 8810,
											"end": 8816,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "205"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "205"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "206"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 7313,
											"end": 7357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "tag",
											"source": 5,
											"value": "206"
										},
										{
											"begin": 7313,
											"end": 7357,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8810,
											"end": 8816,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 8810,
											"end": 8816,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "65"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "215"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "215"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "216"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "216"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "219"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "220"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2227,
											"end": 2330,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "tag",
											"source": 2,
											"value": "232"
										},
										{
											"begin": 2227,
											"end": 2330,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2856,
											"end": 2869,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 2851,
											"end": 3279,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2894,
											"end": 2897,
											"name": "tag",
											"source": 19,
											"value": "233"
										},
										{
											"begin": 2894,
											"end": 2897,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "234"
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "236"
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 3010,
											"end": 3023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "tag",
											"source": 19,
											"value": "236"
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3010,
											"end": 3023,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "237"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "42"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SGT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 2990,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "4284"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "EXTCODESIZE",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "2A2D80D1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 2998,
											"end": 3008,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "247"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "248"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "84"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "250"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 2990,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "4284"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "GAS",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "CALL",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "128"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "254"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3136,
											"end": 3149,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 3185,
											"end": 3188,
											"name": "tag",
											"source": 19,
											"value": "255"
										},
										{
											"begin": 3185,
											"end": 3188,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 3155,
											"end": 3168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "tag",
											"source": 19,
											"value": "256"
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3168,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3155,
											"end": 3176,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "257"
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "259"
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "260"
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "261"
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "DUP11",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "DUP11",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 3223,
											"end": 3236,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "tag",
											"source": 19,
											"value": "261"
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3236,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3244,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 3223,
											"end": 3247,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "tag",
											"source": 19,
											"value": "260"
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3247,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 3223,
											"end": 3254,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 3208,
											"end": 3254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "tag",
											"source": 19,
											"value": "259"
										},
										{
											"begin": 3208,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3185,
											"end": 3188,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 3136,
											"end": 3149,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "255"
										},
										{
											"begin": 3136,
											"end": 3149,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "tag",
											"source": 19,
											"value": "257"
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 3151,
											"end": 3183,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 2856,
											"end": 2869,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2856,
											"end": 2869,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "233"
										},
										{
											"begin": 2856,
											"end": 2869,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "tag",
											"source": 19,
											"value": "253"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "262"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 2978,
											"end": 3039,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "tag",
											"source": 19,
											"value": "262"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "254"
										},
										{
											"begin": 2978,
											"end": 3039,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "248"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "263"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP11",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP15",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP12",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP15",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "263"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP12",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "247"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "237"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "32"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "tag",
											"source": 19,
											"value": "234"
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 2871,
											"end": 2892,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "130"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "265"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "tag",
											"source": 5,
											"value": "265"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 2998,
											"end": 3008,
											"name": "CALLER",
											"source": 19
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 8163,
											"end": 8169,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "220"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "270"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "270"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "43"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "275"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "275"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "276"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "276"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "279"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "280"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "282"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "282"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "219"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "280"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "285"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "285"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "286"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "286"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "289"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "289"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "290"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "279"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "61"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 8163,
											"end": 8169,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "302"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "302"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "59"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "57"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 584,
											"end": 622,
											"name": "PUSHIMMUTABLE",
											"source": 19,
											"value": "4284"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "53"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5716,
											"end": 5722,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "987"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "51"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 5546,
											"end": 5565,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "989"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "49"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "323"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "323"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "324"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "324"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "325"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 5213,
											"end": 5218,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "tag",
											"source": 3,
											"value": "325"
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 5249,
											"end": 5254,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "47"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "45"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 7514,
											"end": 7558,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 7514,
											"end": 7558,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "43"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "339"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "339"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "340"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "342"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "342"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "340"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "39"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "348"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "349"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "189"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "191"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "354"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "354"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "358"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "359"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "195"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "196"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "194"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "359"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "358"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "348"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "7F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "349"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "37"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "15"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MCOPY",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 6248,
											"end": 6293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 6248,
											"end": 6293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "6"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "381"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "381"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURN",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "41"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "FFFFFFFFFFFF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 6046,
											"end": 6091,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 6046,
											"end": 6091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 5883,
											"end": 5887,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 5858,
											"end": 5864,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "987"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "GAS",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "STATICCALL",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "128"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "407"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5851,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "407"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "409"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "410"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "411"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 5858,
											"end": 5889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "411"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5780,
											"end": 5896,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 5780,
											"end": 5896,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "tag",
											"source": 5,
											"value": "409"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "RETURNDATASIZE",
											"source": 5
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "410"
										},
										{
											"begin": 5858,
											"end": 5889,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "237"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "CALLDATACOPY",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "tag",
											"source": 5,
											"value": "22"
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "418"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 10356,
											"end": 10369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "tag",
											"source": 5,
											"value": "418"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "423"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 10342,
											"end": 10425,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "tag",
											"source": 5,
											"value": "423"
										},
										{
											"begin": 10342,
											"end": 10425,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "tag",
											"source": 5,
											"value": "23"
										},
										{
											"begin": 10219,
											"end": 10432,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "424"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 10356,
											"end": 10369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "tag",
											"source": 5,
											"value": "424"
										},
										{
											"begin": 10356,
											"end": 10369,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 10372,
											"end": 10373,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10372,
											"end": 10373,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "423"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "tag",
											"source": 5,
											"value": "24"
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "432"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 10060,
											"end": 10073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "tag",
											"source": 5,
											"value": "432"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "423"
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 10005,
											"end": 10088,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 10005,
											"end": 10088,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "tag",
											"source": 5,
											"value": "25"
										},
										{
											"begin": 9882,
											"end": 10095,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "438"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 10060,
											"end": 10073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "tag",
											"source": 5,
											"value": "438"
										},
										{
											"begin": 10060,
											"end": 10073,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "423"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 6433,
											"end": 6450,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "442"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "443"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 3,
											"value": "442"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "444"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "446"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "448"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "443"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "448"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "446"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "444"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "451"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "453"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "455"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "455"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "453"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "451"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "tag",
											"source": 5,
											"value": "28"
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11215,
											"end": 11219,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 10496,
											"end": 11326,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "OR",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "460"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11191,
											"end": 11197,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "987"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1829,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "tag",
											"source": 8,
											"value": "460"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "461"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "463"
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "PUSH",
											"source": 5,
											"value": "DCBC1C05240F31FF3AD067EF1EE35CE4997762752E3A095284754544F4C709D7"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "463"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 11278,
											"end": 11319,
											"name": "LOG3",
											"source": 5
										},
										{
											"begin": 10496,
											"end": 11326,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 3,
											"value": "461"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "tag",
											"source": 2,
											"value": "29"
										},
										{
											"begin": 2336,
											"end": 2623,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "464"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 2468,
											"end": 2475,
											"name": "PUSH",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 2336,
											"end": 2623,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "464"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "tag",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "SWAP5",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 11570,
											"end": 11585,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "466"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "tag",
											"source": 5,
											"value": "467"
										},
										{
											"begin": 11393,
											"end": 12307,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "451"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP7",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "470"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "PUSH",
											"source": 5,
											"value": "FBDE797D201C681B91056529119E0B02407C7BB96A4A2C75C01FC9667232C8DB"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP4",
											"source": 19
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP11",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "KECCAK256",
											"source": 19
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP10",
											"source": 19
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP9",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP8",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 8,
											"value": "473"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 12210,
											"end": 12216,
											"name": "PUSHIMMUTABLE",
											"source": 5,
											"value": "987"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 8,
											"value": "472"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 12251,
											"end": 12300,
											"name": "LOG4",
											"source": 5
										},
										{
											"begin": 11393,
											"end": 12307,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "470"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "44"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "64"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 9552,
											"end": 9602,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "tag",
											"source": 5,
											"value": "466"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "475"
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "DUP7",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "26"
										},
										{
											"begin": 11632,
											"end": 11638,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "tag",
											"source": 5,
											"value": "475"
										},
										{
											"begin": 11632,
											"end": 11638,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "467"
										},
										{
											"begin": 11566,
											"end": 11650,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "tag",
											"source": 11,
											"value": "31"
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "476"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "DUP6",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 8188,
											"end": 8213,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "tag",
											"source": 11,
											"value": "476"
										},
										{
											"begin": 8188,
											"end": 8213,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "477"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "479"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "tag",
											"source": 11,
											"value": "479"
										},
										{
											"begin": 8223,
											"end": 8324,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 7338,
											"end": 7356,
											"name": "PUSH",
											"source": 5,
											"value": "1"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "316"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 8051,
											"end": 8353,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 8051,
											"end": 8353,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "tag",
											"source": 11,
											"value": "477"
										},
										{
											"begin": 8257,
											"end": 8282,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4E487B71"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SHL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "tag",
											"source": 11,
											"value": "32"
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "SWAP5",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 4383,
											"end": 4514,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 4595,
											"end": 4605,
											"name": "SWAP6",
											"source": 11
										},
										{
											"begin": 4595,
											"end": 4605,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "483"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5065,
											"end": 5085,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "485"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "MULMOD",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 5954,
											"end": 5985,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 5954,
											"end": 5985,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6813,
											"end": 6814,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 6794,
											"end": 6795,
											"name": "PUSH",
											"source": 11,
											"value": "3"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 6793,
											"end": 6814,
											"name": "XOR",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP4",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "SWAP4",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "DUP5",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 5435,
											"end": 5735,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 5999,
											"end": 6370,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 6436,
											"end": 6457,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MUL",
											"source": 19
										},
										{
											"begin": 3803,
											"end": 7919,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3803,
											"end": 7919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "tag",
											"source": 11,
											"value": "485"
										},
										{
											"begin": 5061,
											"end": 5149,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "227BC153"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 5112,
											"end": 5134,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "tag",
											"source": 11,
											"value": "483"
										},
										{
											"begin": 4591,
											"end": 4959,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "477"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DIV",
											"source": 19
										},
										{
											"begin": 4918,
											"end": 4944,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 4918,
											"end": 4944,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP6",
											"source": 19
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "489"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "382"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "493"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "494"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "NOT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "1F"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 530,
											"end": 3428,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "494"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATASIZE",
											"source": 19
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP5",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ADD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "RETURNDATACOPY",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "495"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 9,
											"value": "493"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "496"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "497"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "498"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 8,
											"value": "498"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "5274AFE7"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 8,
											"value": "496"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SLT",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SUB",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "124"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "497"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "tag",
											"source": 19,
											"value": "489"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "493"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "60"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "495"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 9,
											"value": "34"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "504"
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "506"
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 9,
											"value": "506"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "504"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "DUP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "508"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 9,
											"value": "509"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "510"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 5173,
											"end": 5190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 9,
											"value": "510"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MLOAD",
											"source": 19
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9996B315"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP2",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "AND",
											"source": 19
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "PUSH",
											"source": 19,
											"value": "24"
										},
										{
											"begin": 530,
											"end": 3428,
											"name": "SWAP1",
											"source": 19
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 9,
											"value": "508"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 9
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "509"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMP",
											"source": 9
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC4626.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IInterestModel.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/IPoolOrganizer.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaPool.sol",
								"contracts/contracts/protocol/TuliaVault.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"asset()": "38d52e0f",
							"balanceOf(address)": "70a08231",
							"convertToAssets(uint256)": "07a2d13a",
							"convertToShares(uint256)": "c6e6f592",
							"decimals()": "313ce567",
							"deposit(uint256,address)": "6e553f65",
							"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)": "7b17edf2",
							"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)": "e6adb29c",
							"maxDeposit(address)": "402d267d",
							"maxMint(address)": "c63d75b6",
							"maxRedeem(address)": "d905777e",
							"maxWithdraw(address)": "ce96cb77",
							"mint(uint256,address)": "94bf804d",
							"name()": "06fdde03",
							"permitSystem()": "464582cb",
							"previewDeposit(uint256)": "ef8b30f7",
							"previewMint(uint256)": "b3d7f6b9",
							"previewRedeem(uint256)": "4cdad506",
							"previewWithdraw(uint256)": "0a28a477",
							"redeem(uint256,address,address)": "ba087652",
							"symbol()": "95d89b41",
							"totalAssets()": "01e1d114",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"withdraw(uint256,address,address)": "b460af94"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"contract IPermit2\",\"name\":\"_permitSystem\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxRedeem\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"ERC4626ExceededMaxWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch[]\",\"name\":\"permitData\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositWithBatchPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permitSystem\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends ERC4626 to utilize a permit system for streamlined deposit operations.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC4626ExceededMaxDeposit(address,uint256,uint256)\":[{\"details\":\"Attempted to deposit more assets than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxMint(address,uint256,uint256)\":[{\"details\":\"Attempted to mint more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxRedeem(address,uint256,uint256)\":[{\"details\":\"Attempted to redeem more shares than the max amount for `receiver`.\"}],\"ERC4626ExceededMaxWithdraw(address,uint256,uint256)\":[{\"details\":\"Attempted to withdraw more assets than the max amount for `receiver`.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the TuliaVault with necessary details and links to the permit system for handling token operations securely.\",\"params\":{\"_permitSystem\":\"Address of the Permit2 contract used for ERC20 token operations.\",\"asset\":\"The ERC20 token that this vault will accept.\",\"name\":\"The name of the vault token.\",\"symbol\":\"The symbol of the vault token.\"}},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decimals()\":{\"details\":\"Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals. See {IERC20Metadata-decimals}.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)\":{\"params\":{\"permitData\":\"Array of permit data for each deposit.\",\"receiver\":\"Address receiving the vault shares for all deposits.\",\"signatures\":\"Array of signatures corresponding to each permit data.\"},\"returns\":{\"shares\":\"The total number of shares issued to the receiver for all deposits.\"}},\"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)\":{\"params\":{\"amount\":\"The amount of the underlying asset to deposit.\",\"permitData\":\"Data required for the permit including details about the approval.\",\"receiver\":\"Address receiving the vault shares.\",\"signature\":\"Signature from the token holder approving the deposit.\"},\"returns\":{\"shares\":\"The number of shares issued to the receiver.\"}},\"maxDeposit(address)\":{\"details\":\"See {IERC4626-maxDeposit}. \"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"title\":\"TuliaVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)\":{\"notice\":\"Allows batch deposits using multiple permits for efficiency in transactions.\"},\"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)\":{\"notice\":\"Deposits assets into the vault with permit approval, issuing shares of the vault in return.\"}},\"notice\":\"Manages the vault where assets are stored and facilitates tokenized shares representing ownership of the underlying assets.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/protocol/TuliaVault.sol\":\"TuliaVault\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://548667cfa76683767c2c610b577f6c2f0675d0ce28f53c3f37b969c84a56b205\",\"dweb:/ipfs/QmUzA1CKC6bDdULuS44wGd7PWBNLiHb6bh7oHwJBDZSLAx\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40d6031bc0e6f70edceb4e63fd624fe6be09dc48f5201c7a9078c26e6a9ef95f\",\"dweb:/ipfs/QmPTEBH7dmU3NgE6vtjMy7xEK54as9VHSgf9ojupwnvoke\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/IPermit2.sol\":{\"keccak256\":\"0xaa631cc9f53e699301d94233007110a345e6779011def484e8dd97b8fe0af771\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc0502cf19c9c18f320a3001201e89e350393b75837f6b7971de18b2de06f30d\",\"dweb:/ipfs/QmT9SfhdJ7VJNNrf94g4H5usyi7ShqWGx7Cqsz9jZTjX96\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]},\"contracts/contracts/protocol/TuliaVault.sol\":{\"keccak256\":\"0xff60aa83840f8aad1edfc7eb6c7cb20398488061000975d0950ed196ac7a9999\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc2ecf5a4ff60c7e930a61d39cf02bf111d626e82807f112c9ece60a6efbb486\",\"dweb:/ipfs/QmWWqBZMMp5Kx9AcuKm2gkPoQfrLmzWsqLDQqyAv75MsX5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 394,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 400,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 402,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 404,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 406,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 317,
								"contract": "contracts/contracts/protocol/TuliaVault.sol:TuliaVault",
								"label": "_status",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"depositWithBatchPermit(((address,uint160,uint48,uint48)[],address,uint256)[],bytes[],address)": {
								"notice": "Allows batch deposits using multiple permits for efficiency in transactions."
							},
							"depositWithPermit(uint256,((address,uint160,uint48,uint48),address,uint256),bytes,address)": {
								"notice": "Deposits assets into the vault with permit approval, issuing shares of the vault in return."
							}
						},
						"notice": "Manages the vault where assets are stored and facilitates tokenized shares representing ownership of the underlying assets.",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
					"exportedSymbols": {
						"IERC20": [
							964
						],
						"IERC20Metadata": [
							1675
						],
						"IERC4626": [
							169
						]
					},
					"id": 170,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 965,
							"src": "133:49:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 964,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "../token/ERC20/extensions/IERC20Metadata.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 170,
							"sourceUnit": 1676,
							"src": "183:76:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1675,
										"src": "191:14:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"420:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 964,
										"src": "420:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "420:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC20Metadata",
										"nameLocations": [
											"428:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1675,
										"src": "428:14:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "428:14:0"
								}
							],
							"canonicalName": "IERC4626",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "261:136:0",
								"text": " @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n https://eips.ethereum.org/EIPS/eip-4626[ERC-4626]."
							},
							"fullyImplemented": false,
							"id": 169,
							"linearizedBaseContracts": [
								169,
								1675,
								964
							],
							"name": "IERC4626",
							"nameLocation": "408:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "dcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7",
									"id": 20,
									"name": "Deposit",
									"nameLocation": "455:7:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "479:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "463:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "463:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "503:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "487:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "487:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "518:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "510:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "510:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "534:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "526:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 17,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "526:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "462:79:0"
									},
									"src": "449:93:0"
								},
								{
									"anonymous": false,
									"eventSelector": "fbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db",
									"id": 32,
									"name": "Withdraw",
									"nameLocation": "554:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "588:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "572:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "572:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"indexed": true,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "620:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "604:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 23,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "654:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "638:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "638:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": false,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "677:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "669:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 27,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "701:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "693:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "562:151:0"
									},
									"src": "548:166:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "720:207:0",
										"text": " @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n - MUST be an ERC-20 token contract.\n - MUST NOT revert."
									},
									"functionSelector": "38d52e0f",
									"id": 38,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "941:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "946:2:0"
									},
									"returnParameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "assetTokenAddress",
												"nameLocation": "980:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 38,
												"src": "972:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 35,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "972:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "971:27:0"
									},
									"scope": 169,
									"src": "932:67:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 39,
										"nodeType": "StructuredDocumentation",
										"src": "1005:286:0",
										"text": " @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n - SHOULD include any compounding that occurs from yield.\n - MUST be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT revert."
									},
									"functionSelector": "01e1d114",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "1305:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "totalManagedAssets",
												"nameLocation": "1350:18:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "1342:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 41,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1342:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1341:28:0"
									},
									"scope": 169,
									"src": "1296:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "1376:720:0",
										"text": " @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "c6e6f592",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "2110:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2134:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2126:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 46,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2125:16:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2173:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2165:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2165:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2164:16:0"
									},
									"scope": 169,
									"src": "2101:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2187:720:0",
										"text": " @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n scenario where all the conditions are met.\n - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n - MUST NOT show any variations depending on the caller.\n - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n - MUST NOT revert.\n NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n from."
									},
									"functionSelector": "07a2d13a",
									"id": 60,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "2921:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2945:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2937:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2937:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2936:16:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "2984:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 60,
												"src": "2976:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2976:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2975:16:0"
									},
									"scope": 169,
									"src": "2912:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 61,
										"nodeType": "StructuredDocumentation",
										"src": "2998:386:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n through a deposit call.\n - MUST return a limited value if receiver is subject to some deposit limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n - MUST NOT revert."
									},
									"functionSelector": "402d267d",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "3398:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3417:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3409:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3408:18:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "3458:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3450:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 65,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3450:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3449:19:0"
									},
									"scope": 169,
									"src": "3389:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3475:1012:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n current on-chain conditions.\n - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n   in the same transaction.\n - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "ef8b30f7",
									"id": 76,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "4501:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "4524:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4516:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4516:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4515:16:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4563:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "4555:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 73,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4555:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4554:16:0"
									},
									"scope": 169,
									"src": "4492:79:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "4577:651:0",
										"text": " @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   deposit execution, and are accounted for during deposit.\n - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "6e553f65",
									"id": 86,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "5242:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5258:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5250:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5250:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5274:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5266:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5249:34:0"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "5310:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "5302:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 83,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5302:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5301:16:0"
									},
									"scope": 169,
									"src": "5233:85:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "5324:341:0",
										"text": " @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n - MUST return a limited value if receiver is subject to some mint limit.\n - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n - MUST NOT revert."
									},
									"functionSelector": "c63d75b6",
									"id": 94,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "5679:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 89,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5695:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5687:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 88,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5687:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:18:0"
									},
									"returnParameters": {
										"id": 93,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 92,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "5736:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 94,
												"src": "5728:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 91,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5728:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5727:19:0"
									},
									"scope": 169,
									"src": "5670:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 95,
										"nodeType": "StructuredDocumentation",
										"src": "5753:984:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n   same transaction.\n - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n   would be accepted, regardless if the user has enough tokens approved, etc.\n - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by minting."
									},
									"functionSelector": "b3d7f6b9",
									"id": 102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "6751:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6771:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6763:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6763:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6762:16:0"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "6810:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "6802:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 99,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6802:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6801:16:0"
									},
									"scope": 169,
									"src": "6742:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "6824:642:0",
										"text": " @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n - MUST emit the Deposit event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n   execution, and are accounted for during mint.\n - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n   approving enough underlying tokens to the Vault contract, etc).\n NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
									},
									"functionSelector": "94bf804d",
									"id": 112,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "7480:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7493:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7485:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7485:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7509:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7501:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7484:34:0"
									},
									"returnParameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7545:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 112,
												"src": "7537:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 109,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7537:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7536:16:0"
									},
									"scope": 169,
									"src": "7471:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 113,
										"nodeType": "StructuredDocumentation",
										"src": "7559:293:0",
										"text": " @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n Vault, through a withdraw call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "ce96cb77",
									"id": 120,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "7866:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7886:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7878:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 114,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7878:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7877:15:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "maxAssets",
												"nameLocation": "7924:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "7916:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7916:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7915:19:0"
									},
									"scope": 169,
									"src": "7857:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "7941:1034:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n given current on-chain conditions.\n - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n   called\n   in the same transaction.\n - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by depositing."
									},
									"functionSelector": "0a28a477",
									"id": 128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "8989:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9013:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9005:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9005:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9004:16:0"
									},
									"returnParameters": {
										"id": 127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 126,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9052:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 128,
												"src": "9044:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 125,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9044:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9043:16:0"
									},
									"scope": 169,
									"src": "8980:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 129,
										"nodeType": "StructuredDocumentation",
										"src": "9066:670:0",
										"text": " @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   withdraw execution, and are accounted for during withdraw.\n - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "b460af94",
									"id": 140,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "9750:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9767:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9759:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 130,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9759:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9783:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9775:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 132,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9801:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9793:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9793:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9758:49:0"
									},
									"returnParameters": {
										"id": 139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9834:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 140,
												"src": "9826:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9826:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9825:16:0"
									},
									"scope": 169,
									"src": "9741:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 141,
										"nodeType": "StructuredDocumentation",
										"src": "9848:381:0",
										"text": " @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n through a redeem call.\n - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n - MUST NOT revert."
									},
									"functionSelector": "d905777e",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "10243:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10261:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10253:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10253:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10252:15:0"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 146,
												"mutability": "mutable",
												"name": "maxShares",
												"nameLocation": "10299:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "10291:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10291:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10290:19:0"
									},
									"scope": 169,
									"src": "10234:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "10316:1010:0",
										"text": " @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n given current on-chain conditions.\n - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n   same transaction.\n - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n   redemption would be accepted, regardless if the user has enough shares, etc.\n - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n - MUST NOT revert.\n NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n share price or some other type of condition, meaning the depositor will lose assets by redeeming."
									},
									"functionSelector": "4cdad506",
									"id": 156,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "11340:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11362:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11354:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 150,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11354:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11353:16:0"
									},
									"returnParameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11401:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "11393:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 153,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11393:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11392:16:0"
									},
									"scope": 169,
									"src": "11331:78:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "11415:661:0",
										"text": " @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n - MUST emit the Withdraw event.\n - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n   redeem execution, and are accounted for during redeem.\n - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n   not having enough shares, etc).\n NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n Those methods should be performed separately."
									},
									"functionSelector": "ba087652",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "12090:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "12105:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12097:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12097:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "12121:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12113:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12113:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "12139:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12131:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12131:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12096:49:0"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "12172:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "12164:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12164:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12163:16:0"
									},
									"scope": 169,
									"src": "12081:99:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 170,
							"src": "398:11784:0",
							"usedErrors": [],
							"usedEvents": [
								20,
								32,
								898,
								907
							]
						}
					],
					"src": "107:12076:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							306
						],
						"IERC20Errors": [
							211
						],
						"IERC721Errors": [
							259
						]
					},
					"id": 307,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 171,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:1",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 211,
							"linearizedBaseContracts": [
								211
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 173,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 181,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "652:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 174,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "668:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 181,
												"src": "685:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 178,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:1"
									},
									"src": "621:80:1"
								},
								{
									"documentation": {
										"id": 182,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 186,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "889:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 183,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:1"
									},
									"src": "864:41:1"
								},
								{
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 191,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "1102:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:1"
									},
									"src": "1075:45:1"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:1",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 200,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1509:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1526:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "1545:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:1"
									},
									"src": "1476:85:1"
								},
								{
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 205,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 205,
												"src": "1773:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 202,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:1"
									},
									"src": "1746:45:1"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:1",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 210,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 208,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "2023:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 207,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:1"
									},
									"src": "1997:43:1"
								}
							],
							"scope": 307,
							"src": "278:1764:1",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 212,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:1",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 259,
							"linearizedBaseContracts": [
								259
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 213,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:1",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 217,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "2465:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 214,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:1"
									},
									"src": "2440:40:1"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:1",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 222,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "2652:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 219,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:1"
									},
									"src": "2623:46:1"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:1",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 231,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2996:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3012:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 229,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "3029:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 228,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:1"
									},
									"src": "2969:75:1"
								},
								{
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 236,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3233:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:1"
									},
									"src": "3207:42:1"
								},
								{
									"documentation": {
										"id": 237,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 241,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 239,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3447:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:1"
									},
									"src": "3419:46:1"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 248,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3756:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 248,
												"src": "3774:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:1"
									},
									"src": "3723:68:1"
								},
								{
									"documentation": {
										"id": 249,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 253,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 251,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 253,
												"src": "4004:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 250,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:1"
									},
									"src": "3976:46:1"
								},
								{
									"documentation": {
										"id": 254,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 258,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 258,
												"src": "4258:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:1"
									},
									"src": "4230:46:1"
								}
							],
							"scope": 307,
							"src": "2186:2092:1",
							"usedErrors": [
								217,
								222,
								231,
								236,
								241,
								248,
								253,
								258
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 260,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:1",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 306,
							"linearizedBaseContracts": [
								306
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 261,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:1",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 271,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4854:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4870:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4887:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 266,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 271,
												"src": "4903:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 268,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:1"
									},
									"src": "4821:99:1"
								},
								{
									"documentation": {
										"id": 272,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:1",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 276,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 276,
												"src": "5110:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 273,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:1"
									},
									"src": "5083:43:1"
								},
								{
									"documentation": {
										"id": 277,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:1",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 281,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 279,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 281,
												"src": "5325:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 278,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:1"
									},
									"src": "5296:47:1"
								},
								{
									"documentation": {
										"id": 282,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:1",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 288,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5645:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "5663:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:1"
									},
									"src": "5610:68:1"
								},
								{
									"documentation": {
										"id": 289,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:1",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 293,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 293,
												"src": "5892:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 290,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:1"
									},
									"src": "5863:47:1"
								},
								{
									"documentation": {
										"id": 294,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:1",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 298,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 296,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "6147:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:1"
									},
									"src": "6118:47:1"
								},
								{
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:1",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 305,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6488:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 300,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "6507:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:1"
									},
									"src": "6456:73:1"
								}
							],
							"scope": 307,
							"src": "4424:2107:1",
							"usedErrors": [
								271,
								276,
								281,
								288,
								293,
								298,
								305
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							371
						]
					},
					"id": 372,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 308,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 309,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 371,
							"linearizedBaseContracts": [
								371
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 312,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 371,
									"src": "1676:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 310,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 311,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 315,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 371,
									"src": "1723:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 313,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 314,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 317,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 371,
									"src": "1767:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 316,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 324,
										"nodeType": "Block",
										"src": "1811:39:2",
										"statements": [
											{
												"expression": {
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 320,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "1821:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 321,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 312,
														"src": "1831:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 323,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:2"
											}
										]
									},
									"id": 325,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:2"
									},
									"returnParameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:2"
									},
									"scope": 371,
									"src": "1797:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 335,
										"nodeType": "Block",
										"src": "2251:79:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 328,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 351,
														"src": "2261:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:2"
											},
											{
												"id": 331,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 332,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 359,
														"src": "2303:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 334,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:2"
											}
										]
									},
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 336,
									"name": "nonReentrant",
									"nameLocation": "2236:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:2"
									},
									"src": "2227:103:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 350,
										"nodeType": "Block",
										"src": "2375:248:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 340,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 317,
																"src": "2468:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 341,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 315,
																"src": "2479:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 343,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 339,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 345,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:2"
											},
											{
												"expression": {
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 346,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "2598:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 347,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 315,
														"src": "2608:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 349,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:2"
											}
										]
									},
									"id": 351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:2"
									},
									"returnParameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:2"
									},
									"scope": 371,
									"src": "2336:287:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 358,
										"nodeType": "Block",
										"src": "2667:171:2",
										"statements": [
											{
												"expression": {
													"id": 356,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 354,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "2809:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 355,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 312,
														"src": "2819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 357,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:2"
											}
										]
									},
									"id": 359,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:2"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:2"
									},
									"scope": 371,
									"src": "2629:209:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "3081:43:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 365,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "3098:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 366,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 315,
														"src": "3109:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 364,
												"id": 368,
												"nodeType": "Return",
												"src": "3091:26:2"
											}
										]
									},
									"documentation": {
										"id": 360,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:2",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 361,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:2"
									},
									"returnParameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "3075:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 362,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:2"
									},
									"scope": 371,
									"src": "3017:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 372,
							"src": "888:2238:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							2284
						],
						"ERC20": [
							886
						],
						"IERC20": [
							964
						],
						"IERC20Errors": [
							211
						],
						"IERC20Metadata": [
							1675
						]
					},
					"id": 887,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 373,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 375,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 887,
							"sourceUnit": 965,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 374,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 964,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 377,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 887,
							"sourceUnit": 1676,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 376,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1675,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 379,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 887,
							"sourceUnit": 2285,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 378,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2284,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 381,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 887,
							"sourceUnit": 307,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 380,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 211,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 383,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2284,
										"src": "1428:7:3"
									},
									"id": 384,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 385,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 964,
										"src": "1437:6:3"
									},
									"id": 386,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 387,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1675,
										"src": "1445:14:3"
									},
									"id": 388,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 389,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 211,
										"src": "1461:12:3"
									},
									"id": 390,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 382,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 886,
							"linearizedBaseContracts": [
								886,
								211,
								1675,
								964,
								2284
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 394,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 886,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 393,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 391,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 392,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 400,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 886,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 399,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 395,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 398,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 396,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 397,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 402,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 886,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 401,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 404,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 886,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 403,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 406,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 886,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 405,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 422,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 416,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 414,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 404,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 415,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 417,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 418,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 406,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 419,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 411,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 421,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 407,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 423,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 408,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 423,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 410,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 413,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 886,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1662
									],
									"body": {
										"id": 431,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 429,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 404,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 428,
												"id": 430,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 424,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 425,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 426,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 886,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1668
									],
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 438,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 406,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 437,
												"id": 439,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 436,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 435,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 886,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1674
									],
									"body": {
										"id": 449,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 446,
												"id": 448,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 442,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 450,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 450,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 444,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 886,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										913
									],
									"body": {
										"id": 458,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 456,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 402,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 455,
												"id": 457,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 451,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 459,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 455,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 459,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 453,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 886,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										921
									],
									"body": {
										"id": 471,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 467,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 394,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 469,
													"indexExpression": {
														"id": 468,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 462,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 466,
												"id": 470,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 460,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 472,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 461,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 465,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 464,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 886,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										931
									],
									"body": {
										"id": 495,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													483
												],
												"declarations": [
													{
														"constant": false,
														"id": 483,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 495,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 482,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 486,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 484,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2266,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 475,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 490,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 477,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 487,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 481,
												"id": 494,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 496,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 474,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 477,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 479,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 886,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										941
									],
									"body": {
										"id": 512,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 506,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 400,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 508,
														"indexExpression": {
															"id": 507,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 510,
													"indexExpression": {
														"id": 509,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 501,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 505,
												"id": 511,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 497,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 498,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 501,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 500,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 504,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 886,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										951
									],
									"body": {
										"id": 536,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													524
												],
												"declarations": [
													{
														"constant": false,
														"id": 524,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 536,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 523,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 527,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 525,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2266,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 529,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 530,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 531,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 528,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															777,
															837
														],
														"referencedDeclaration": 777,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 532,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 533,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 522,
												"id": 535,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 537,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 537,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 520,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 886,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										963
									],
									"body": {
										"id": 568,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													550
												],
												"declarations": [
													{
														"constant": false,
														"id": 550,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 568,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 549,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 553,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 551,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2266,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 555,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 556,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 550,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 557,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 554,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 885,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 559,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 561,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 540,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 562,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 563,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 544,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 560,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 566,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 548,
												"id": 567,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 538,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 569,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 545,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 540,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 542,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 544,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 543,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 569,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 546,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 886,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 615,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 584,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 579,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 572,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 582,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 581,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 580,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 583,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 593,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 592,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 588,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 587,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 586,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 589,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 585,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 591,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 594,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 574,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 596,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 595,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 598,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 608,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 607,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 603,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 602,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 601,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 600,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 606,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 610,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 572,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 611,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 574,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 612,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 576,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 609,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 570,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 571,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 574,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 616,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 578,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 886,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 692,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 626,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 619,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 627,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 630,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 663,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																638
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 638,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 663,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 637,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 642,
															"initialValue": {
																"baseExpression": {
																	"id": 639,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 641,
																"indexExpression": {
																	"id": 640,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 619,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 645,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 643,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 638,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 644,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 623,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 653,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 652,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 647,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 619,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 648,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 638,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 649,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 623,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 646,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 181,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 650,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 651,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 662,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 660,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 654,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 394,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 656,
																			"indexExpression": {
																				"id": 655,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 619,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 659,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 657,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 638,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 658,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 623,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 661,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 664,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 636,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 634,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 632,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 402,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 633,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 623,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 635,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 665,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 621,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 668,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 667,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 666,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 669,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 684,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 683,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 677,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 394,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 679,
																			"indexExpression": {
																				"id": 678,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 621,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 680,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 623,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 682,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 685,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 676,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 675,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 673,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 671,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 402,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 672,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 623,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 674,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 687,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 619,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 688,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 621,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 689,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 623,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 686,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 898,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 691,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 617,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 693,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 620,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 693,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 622,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 886,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 725,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 701,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 696,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 704,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 702,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 705,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 715,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 714,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 710,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 709,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 708,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 707,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 191,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 712,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 713,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 719,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 717,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 721,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 722,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 716,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 724,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 694,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 726,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 695,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 726,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 697,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 886,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 758,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 734,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 729,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 737,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 736,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 735,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 738,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 748,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 747,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 743,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 742,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 741,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 744,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 740,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 186,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 746,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 750,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 729,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 752,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 751,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 754,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 755,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 731,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 749,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 693,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 756,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 757,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 727,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 759,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 729,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 759,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 728,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 731,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 759,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 730,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 886,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 776,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 770,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 762,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 771,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 772,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 773,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 769,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															777,
															837
														],
														"referencedDeclaration": 837,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 774,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 775,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 760,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 777,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 762,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 761,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 777,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 768,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 886,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 836,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 789,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 780,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 792,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 791,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 790,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 793,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 803,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 802,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 798,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 797,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 796,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 799,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 795,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 800,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 801,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 809,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 804,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 782,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 807,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 806,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 805,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 808,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 818,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 817,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 813,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 811,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 810,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 210,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 816,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 825,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 819,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 822,
															"indexExpression": {
																"id": 820,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 780,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 823,
														"indexExpression": {
															"id": 821,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 782,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 824,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 784,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 826,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 827,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 786,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 835,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 834,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 829,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 780,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 830,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 782,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 831,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 784,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 828,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 907,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 832,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 833,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 778,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 783,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 837,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 785,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 788,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 886,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 884,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													848
												],
												"declarations": [
													{
														"constant": false,
														"id": 848,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 884,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 847,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 853,
												"initialValue": {
													"arguments": [
														{
															"id": 850,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 840,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 851,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 842,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 849,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 852,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 860,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 854,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 848,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 857,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 856,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 855,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 858,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 859,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 883,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 882,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 863,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 861,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 848,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 862,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 844,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 871,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 870,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 865,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 842,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 866,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 848,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 867,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 844,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 864,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 200,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256,uint256) pure"
																				}
																			},
																			"id": 868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 869,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 881,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 873,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 840,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 874,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 842,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 877,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 875,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 848,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 876,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 844,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 878,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 872,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				777,
																				837
																			],
																			"referencedDeclaration": 837,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 879,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 880,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 885,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 840,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 839,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 841,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 844,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 885,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 843,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 886,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 887,
							"src": "1401:9741:3",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210
							],
							"usedEvents": [
								898,
								907
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							964
						]
					},
					"id": 965,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 888,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 889,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 964,
							"linearizedBaseContracts": [
								964
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 898,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 898,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 899,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 907,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 901,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 900,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 903,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 902,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 905,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 907,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 904,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 908,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 913,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 909,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 912,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 911,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 964,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 915,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 964,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 925,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 928,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 964,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 932,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 941,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 937,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 938,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 964,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 951,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 948,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 964,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 952,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 963,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 959,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 962,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 963,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 960,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 964,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 965,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								898,
								907
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
					"exportedSymbols": {
						"ERC20": [
							886
						],
						"ERC4626": [
							1649
						],
						"IERC20": [
							964
						],
						"IERC20Metadata": [
							1675
						],
						"IERC4626": [
							169
						],
						"Math": [
							3338
						],
						"SafeERC20": [
							2001
						]
					},
					"id": 1650,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 966,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 970,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1650,
							"sourceUnit": 887,
							"src": "144:59:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 967,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 964,
										"src": "152:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 968,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1675,
										"src": "160:14:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 969,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 886,
										"src": "176:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "../utils/SafeERC20.sol",
							"id": 972,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1650,
							"sourceUnit": 2002,
							"src": "204:49:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 971,
										"name": "SafeERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2001,
										"src": "212:9:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC4626.sol",
							"file": "../../../interfaces/IERC4626.sol",
							"id": 974,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1650,
							"sourceUnit": 170,
							"src": "254:58:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 973,
										"name": "IERC4626",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 169,
										"src": "262:8:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "../../../utils/math/Math.sol",
							"id": 976,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1650,
							"sourceUnit": 3339,
							"src": "313:50:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 975,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3338,
										"src": "321:4:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 978,
										"name": "ERC20",
										"nameLocations": [
											"3187:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 886,
										"src": "3187:5:5"
									},
									"id": 979,
									"nodeType": "InheritanceSpecifier",
									"src": "3187:5:5"
								},
								{
									"baseName": {
										"id": 980,
										"name": "IERC4626",
										"nameLocations": [
											"3194:8:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 169,
										"src": "3194:8:5"
									},
									"id": 981,
									"nodeType": "InheritanceSpecifier",
									"src": "3194:8:5"
								}
							],
							"canonicalName": "ERC4626",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 977,
								"nodeType": "StructuredDocumentation",
								"src": "365:2792:5",
								"text": " @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n contract and not the \"assets\" token which is an independent contract.\n [CAUTION]\n ====\n In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n verifying the amount received is as expected, using a wrapper that performs these checks such as\n https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n expensive than it is profitable. More details about the underlying math can be found\n xref:erc4626.adoc#inflation-attack[here].\n The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n `_convertToShares` and `_convertToAssets` functions.\n To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n ===="
							},
							"fullyImplemented": true,
							"id": 1649,
							"linearizedBaseContracts": [
								1649,
								169,
								886,
								211,
								1675,
								964,
								2284
							],
							"name": "ERC4626",
							"nameLocation": "3176:7:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 984,
									"libraryName": {
										"id": 982,
										"name": "Math",
										"nameLocations": [
											"3215:4:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3338,
										"src": "3215:4:5"
									},
									"nodeType": "UsingForDirective",
									"src": "3209:23:5",
									"typeName": {
										"id": 983,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3224:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 987,
									"mutability": "immutable",
									"name": "_asset",
									"nameLocation": "3263:6:5",
									"nodeType": "VariableDeclaration",
									"scope": 1649,
									"src": "3238:31:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$964",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 986,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 985,
											"name": "IERC20",
											"nameLocations": [
												"3238:6:5"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 964,
											"src": "3238:6:5"
										},
										"referencedDeclaration": 964,
										"src": "3238:6:5",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$964",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 989,
									"mutability": "immutable",
									"name": "_underlyingDecimals",
									"nameLocation": "3299:19:5",
									"nodeType": "VariableDeclaration",
									"scope": 1649,
									"src": "3275:43:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 988,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "3275:5:5",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 990,
										"nodeType": "StructuredDocumentation",
										"src": "3325:92:5",
										"text": " @dev Attempted to deposit more assets than the max amount for `receiver`."
									},
									"errorSelector": "79012fb2",
									"id": 998,
									"name": "ERC4626ExceededMaxDeposit",
									"nameLocation": "3428:25:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3462:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "3454:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 991,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3454:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3480:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "3472:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 993,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3472:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 996,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3496:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 998,
												"src": "3488:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 995,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3453:47:5"
									},
									"src": "3422:79:5"
								},
								{
									"documentation": {
										"id": 999,
										"nodeType": "StructuredDocumentation",
										"src": "3507:89:5",
										"text": " @dev Attempted to mint more shares than the max amount for `receiver`."
									},
									"errorSelector": "284ff667",
									"id": 1007,
									"name": "ERC4626ExceededMaxMint",
									"nameLocation": "3607:22:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1001,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3638:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "3630:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1000,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3630:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "3656:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "3648:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3648:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3672:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "3664:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1004,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3664:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3629:47:5"
									},
									"src": "3601:76:5"
								},
								{
									"documentation": {
										"id": 1008,
										"nodeType": "StructuredDocumentation",
										"src": "3683:93:5",
										"text": " @dev Attempted to withdraw more assets than the max amount for `receiver`."
									},
									"errorSelector": "fe9cceec",
									"id": 1016,
									"name": "ERC4626ExceededMaxWithdraw",
									"nameLocation": "3787:26:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3822:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3814:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3814:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "3837:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3829:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3829:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "3853:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "3845:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1013,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3845:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3813:44:5"
									},
									"src": "3781:77:5"
								},
								{
									"documentation": {
										"id": 1017,
										"nodeType": "StructuredDocumentation",
										"src": "3864:91:5",
										"text": " @dev Attempted to redeem more shares than the max amount for `receiver`."
									},
									"errorSelector": "b94abeec",
									"id": 1025,
									"name": "ERC4626ExceededMaxRedeem",
									"nameLocation": "3966:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3999:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "3991:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1018,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3991:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "4014:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "4006:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4006:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "max",
												"nameLocation": "4030:3:5",
												"nodeType": "VariableDeclaration",
												"scope": 1025,
												"src": "4022:11:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4022:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3990:44:5"
									},
									"src": "3960:75:5"
								},
								{
									"body": {
										"id": 1051,
										"nodeType": "Block",
										"src": "4192:168:5",
										"statements": [
											{
												"assignments": [
													1033,
													1035
												],
												"declarations": [
													{
														"constant": false,
														"id": 1033,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4208:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1051,
														"src": "4203:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1032,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4203:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1035,
														"mutability": "mutable",
														"name": "assetDecimals",
														"nameLocation": "4223:13:5",
														"nodeType": "VariableDeclaration",
														"scope": 1051,
														"src": "4217:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 1034,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "4217:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1039,
												"initialValue": {
													"arguments": [
														{
															"id": 1037,
															"name": "asset_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1029,
															"src": "4261:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														],
														"id": 1036,
														"name": "_tryGetAssetDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1119,
														"src": "4240:20:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_contract$_IERC20_$964_$returns$_t_bool_$_t_uint8_$",
															"typeString": "function (contract IERC20) view returns (bool,uint8)"
														}
													},
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4240:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
														"typeString": "tuple(bool,uint8)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4202:66:5"
											},
											{
												"expression": {
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1040,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "4278:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"id": 1041,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "4300:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"hexValue": "3138",
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4326:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_18_by_1",
																"typeString": "int_const 18"
															},
															"value": "18"
														},
														"id": 1044,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "4300:28:5",
														"trueExpression": {
															"id": 1042,
															"name": "assetDecimals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "4310:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4278:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1046,
												"nodeType": "ExpressionStatement",
												"src": "4278:50:5"
											},
											{
												"expression": {
													"id": 1049,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1047,
														"name": "_asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "4338:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$964",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1048,
														"name": "asset_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1029,
														"src": "4347:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$964",
															"typeString": "contract IERC20"
														}
													},
													"src": "4338:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"id": 1050,
												"nodeType": "ExpressionStatement",
												"src": "4338:15:5"
											}
										]
									},
									"documentation": {
										"id": 1026,
										"nodeType": "StructuredDocumentation",
										"src": "4041:119:5",
										"text": " @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777)."
									},
									"id": 1052,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4184:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1052,
												"src": "4177:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1028,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1027,
														"name": "IERC20",
														"nameLocations": [
															"4177:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "4177:6:5"
													},
													"referencedDeclaration": 964,
													"src": "4177:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4176:15:5"
									},
									"returnParameters": {
										"id": 1031,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4192:0:5"
									},
									"scope": 1649,
									"src": "4165:195:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1118,
										"nodeType": "Block",
										"src": "4583:453:5",
										"statements": [
											{
												"assignments": [
													1064,
													1066
												],
												"declarations": [
													{
														"constant": false,
														"id": 1064,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4599:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1118,
														"src": "4594:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1063,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4594:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1066,
														"mutability": "mutable",
														"name": "encodedDecimals",
														"nameLocation": "4621:15:5",
														"nodeType": "VariableDeclaration",
														"scope": 1118,
														"src": "4608:28:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1065,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4608:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1079,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1074,
																		"name": "IERC20Metadata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1675,
																		"src": "4695:14:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_IERC20Metadata_$1675_$",
																			"typeString": "type(contract IERC20Metadata)"
																		}
																	},
																	"id": 1075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4710:8:5",
																	"memberName": "decimals",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1674,
																	"src": "4695:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	}
																},
																{
																	"components": [],
																	"id": 1076,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4720:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_declaration_view$__$returns$_t_uint8_$",
																		"typeString": "function IERC20Metadata.decimals() view returns (uint8)"
																	},
																	{
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																],
																"expression": {
																	"id": 1072,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4680:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1073,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4684:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "4680:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1077,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4680:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1069,
																	"name": "asset_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1056,
																	"src": "4648:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1068,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4640:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1067,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4640:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1070,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4640:15:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4656:10:5",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "4640:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1078,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4640:93:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4593:140:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1080,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1064,
														"src": "4747:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1084,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1081,
																"name": "encodedDecimals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1066,
																"src": "4758:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4774:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4758:22:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"hexValue": "3332",
															"id": 1083,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4784:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														},
														"src": "4758:28:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4747:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1113,
												"nodeType": "IfStatement",
												"src": "4743:260:5",
												"trueBody": {
													"id": 1112,
													"nodeType": "Block",
													"src": "4788:215:5",
													"statements": [
														{
															"assignments": [
																1087
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1087,
																	"mutability": "mutable",
																	"name": "returnedDecimals",
																	"nameLocation": "4810:16:5",
																	"nodeType": "VariableDeclaration",
																	"scope": 1112,
																	"src": "4802:24:5",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 1086,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4802:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1095,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1090,
																		"name": "encodedDecimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1066,
																		"src": "4840:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"components": [
																			{
																				"id": 1092,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4858:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 1091,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4858:7:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"id": 1093,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4857:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		}
																	],
																	"expression": {
																		"id": 1088,
																		"name": "abi",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967295,
																		"src": "4829:3:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_abi",
																			"typeString": "abi"
																		}
																	},
																	"id": 1089,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4833:6:5",
																	"memberName": "decode",
																	"nodeType": "MemberAccess",
																	"src": "4829:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 1094,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4829:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4802:65:5"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1102,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1096,
																	"name": "returnedDecimals",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1087,
																	"src": "4885:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<=",
																"rightExpression": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1099,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "4910:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1098,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "4910:5:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 1097,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "4905:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1100,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4905:11:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 1101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "4917:3:5",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "4905:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4885:35:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1111,
															"nodeType": "IfStatement",
															"src": "4881:112:5",
															"trueBody": {
																"id": 1110,
																"nodeType": "Block",
																"src": "4922:71:5",
																"statements": [
																	{
																		"expression": {
																			"components": [
																				{
																					"hexValue": "74727565",
																					"id": 1103,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "bool",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4948:4:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					"value": "true"
																				},
																				{
																					"arguments": [
																						{
																							"id": 1106,
																							"name": "returnedDecimals",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1087,
																							"src": "4960:16:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						],
																						"id": 1105,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4954:5:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint8_$",
																							"typeString": "type(uint8)"
																						},
																						"typeName": {
																							"id": 1104,
																							"name": "uint8",
																							"nodeType": "ElementaryTypeName",
																							"src": "4954:5:5",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1107,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4954:23:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint8",
																						"typeString": "uint8"
																					}
																				}
																			],
																			"id": 1108,
																			"isConstant": false,
																			"isInlineArray": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "TupleExpression",
																			"src": "4947:31:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$_t_bool_$_t_uint8_$",
																				"typeString": "tuple(bool,uint8)"
																			}
																		},
																		"functionReturnParameters": 1062,
																		"id": 1109,
																		"nodeType": "Return",
																		"src": "4940:38:5"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"hexValue": "66616c7365",
															"id": 1114,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5020:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "false"
														},
														{
															"hexValue": "30",
															"id": 1115,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5027:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"id": 1116,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5019:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
														"typeString": "tuple(bool,int_const 0)"
													}
												},
												"functionReturnParameters": 1062,
												"id": 1117,
												"nodeType": "Return",
												"src": "5012:17:5"
											}
										]
									},
									"documentation": {
										"id": 1053,
										"nodeType": "StructuredDocumentation",
										"src": "4366:132:5",
										"text": " @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way."
									},
									"id": 1119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_tryGetAssetDecimals",
									"nameLocation": "4512:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1056,
												"mutability": "mutable",
												"name": "asset_",
												"nameLocation": "4540:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "4533:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1055,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1054,
														"name": "IERC20",
														"nameLocations": [
															"4533:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "4533:6:5"
													},
													"referencedDeclaration": 964,
													"src": "4533:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4532:15:5"
									},
									"returnParameters": {
										"id": 1062,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "4570:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1058,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4570:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1061,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1119,
												"src": "4576:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1060,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4576:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4569:13:5"
									},
									"scope": 1649,
									"src": "4503:533:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"baseFunctions": [
										450,
										1674
									],
									"body": {
										"id": 1133,
										"nodeType": "Block",
										"src": "5529:63:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1128,
														"name": "_underlyingDecimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 989,
														"src": "5546:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1129,
															"name": "_decimalsOffset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1648,
															"src": "5568:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																"typeString": "function () view returns (uint8)"
															}
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5568:17:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5546:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1127,
												"id": 1132,
												"nodeType": "Return",
												"src": "5539:46:5"
											}
										]
									},
									"documentation": {
										"id": 1120,
										"nodeType": "StructuredDocumentation",
										"src": "5042:394:5",
										"text": " @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n See {IERC20Metadata-decimals}."
									},
									"functionSelector": "313ce567",
									"id": 1134,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "5450:8:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1124,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1122,
												"name": "IERC20Metadata",
												"nameLocations": [
													"5490:14:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1675,
												"src": "5490:14:5"
											},
											{
												"id": 1123,
												"name": "ERC20",
												"nameLocations": [
													"5506:5:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 886,
												"src": "5506:5:5"
											}
										],
										"src": "5481:31:5"
									},
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5458:2:5"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1134,
												"src": "5522:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1125,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5522:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5521:7:5"
									},
									"scope": 1649,
									"src": "5441:151:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										38
									],
									"body": {
										"id": 1145,
										"nodeType": "Block",
										"src": "5691:39:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1142,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "5716:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														],
														"id": 1141,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5708:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1140,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5708:7:5",
															"typeDescriptions": {}
														}
													},
													"id": 1143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5708:15:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1139,
												"id": 1144,
												"nodeType": "Return",
												"src": "5701:22:5"
											}
										]
									},
									"documentation": {
										"id": 1135,
										"nodeType": "StructuredDocumentation",
										"src": "5598:33:5",
										"text": "@dev See {IERC4626-asset}. "
									},
									"functionSelector": "38d52e0f",
									"id": 1146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "asset",
									"nameLocation": "5645:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5650:2:5"
									},
									"returnParameters": {
										"id": 1139,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "5682:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5682:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5681:9:5"
									},
									"scope": 1649,
									"src": "5636:94:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										44
									],
									"body": {
										"id": 1160,
										"nodeType": "Block",
										"src": "5841:55:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1156,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5883:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1649",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1649",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5875:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1154,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5875:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1157,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5875:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1152,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "5858:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5865:9:5",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 921,
														"src": "5858:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5858:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1151,
												"id": 1159,
												"nodeType": "Return",
												"src": "5851:38:5"
											}
										]
									},
									"documentation": {
										"id": 1147,
										"nodeType": "StructuredDocumentation",
										"src": "5736:39:5",
										"text": "@dev See {IERC4626-totalAssets}. "
									},
									"functionSelector": "01e1d114",
									"id": 1161,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalAssets",
									"nameLocation": "5789:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5800:2:5"
									},
									"returnParameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "5832:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5832:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5831:9:5"
									},
									"scope": 1649,
									"src": "5780:116:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										52
									],
									"body": {
										"id": 1176,
										"nodeType": "Block",
										"src": "6029:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1170,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1164,
															"src": "6063:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1171,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "6071:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6076:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "6071:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1173,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6085:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2291,
															"src": "6071:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1169,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "6046:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1174,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6046:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1168,
												"id": 1175,
												"nodeType": "Return",
												"src": "6039:52:5"
											}
										]
									},
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "5902:43:5",
										"text": "@dev See {IERC4626-convertToShares}. "
									},
									"functionSelector": "c6e6f592",
									"id": 1177,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToShares",
									"nameLocation": "5959:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "5983:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1177,
												"src": "5975:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5975:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5974:16:5"
									},
									"returnParameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1177,
												"src": "6020:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6019:9:5"
									},
									"scope": 1649,
									"src": "5950:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										60
									],
									"body": {
										"id": 1192,
										"nodeType": "Block",
										"src": "6231:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1186,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1180,
															"src": "6265:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1187,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "6273:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1188,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6278:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "6273:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1189,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6287:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2291,
															"src": "6273:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1185,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "6248:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6248:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1184,
												"id": 1191,
												"nodeType": "Return",
												"src": "6241:52:5"
											}
										]
									},
									"documentation": {
										"id": 1178,
										"nodeType": "StructuredDocumentation",
										"src": "6104:43:5",
										"text": "@dev See {IERC4626-convertToAssets}. "
									},
									"functionSelector": "07a2d13a",
									"id": 1193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "convertToAssets",
									"nameLocation": "6161:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "6185:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6177:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6177:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6176:16:5"
									},
									"returnParameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "6222:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6222:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6221:9:5"
									},
									"scope": 1649,
									"src": "6152:148:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										68
									],
									"body": {
										"id": 1207,
										"nodeType": "Block",
										"src": "6416:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1203,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6438:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1202,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6438:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1201,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6433:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1204,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6433:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6447:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6433:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1200,
												"id": 1206,
												"nodeType": "Return",
												"src": "6426:24:5"
											}
										]
									},
									"documentation": {
										"id": 1194,
										"nodeType": "StructuredDocumentation",
										"src": "6306:38:5",
										"text": "@dev See {IERC4626-maxDeposit}. "
									},
									"functionSelector": "402d267d",
									"id": 1208,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxDeposit",
									"nameLocation": "6358:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "6369:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6369:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6368:9:5"
									},
									"returnParameters": {
										"id": 1200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1208,
												"src": "6407:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6407:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6406:9:5"
									},
									"scope": 1649,
									"src": "6349:108:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										94
									],
									"body": {
										"id": 1222,
										"nodeType": "Block",
										"src": "6567:41:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [
															{
																"id": 1218,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6589:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1217,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6589:7:5",
																	"typeDescriptions": {}
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																}
															],
															"id": 1216,
															"name": "type",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967269,
															"src": "6584:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																"typeString": "function () pure"
															}
														},
														"id": 1219,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6584:13:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_magic_meta_type_t_uint256",
															"typeString": "type(uint256)"
														}
													},
													"id": 1220,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"memberLocation": "6598:3:5",
													"memberName": "max",
													"nodeType": "MemberAccess",
													"src": "6584:17:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1215,
												"id": 1221,
												"nodeType": "Return",
												"src": "6577:24:5"
											}
										]
									},
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "6463:35:5",
										"text": "@dev See {IERC4626-maxMint}. "
									},
									"functionSelector": "c63d75b6",
									"id": 1223,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxMint",
									"nameLocation": "6512:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6520:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6520:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6519:9:5"
									},
									"returnParameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1223,
												"src": "6558:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6558:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6557:9:5"
									},
									"scope": 1649,
									"src": "6503:105:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										120
									],
									"body": {
										"id": 1240,
										"nodeType": "Block",
										"src": "6732:79:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1233,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1226,
																	"src": "6776:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1232,
																"name": "balanceOf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 472,
																"src": "6766:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address) view returns (uint256)"
																}
															},
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6766:16:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1235,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "6784:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6789:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "6784:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6798:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2291,
															"src": "6784:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1231,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "6749:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6749:55:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1230,
												"id": 1239,
												"nodeType": "Return",
												"src": "6742:62:5"
											}
										]
									},
									"documentation": {
										"id": 1224,
										"nodeType": "StructuredDocumentation",
										"src": "6614:39:5",
										"text": "@dev See {IERC4626-maxWithdraw}. "
									},
									"functionSelector": "ce96cb77",
									"id": 1241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxWithdraw",
									"nameLocation": "6667:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1226,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6687:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1241,
												"src": "6679:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6679:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6678:15:5"
									},
									"returnParameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1229,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1241,
												"src": "6723:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1228,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6723:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6722:9:5"
									},
									"scope": 1649,
									"src": "6658:153:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										148
									],
									"body": {
										"id": 1253,
										"nodeType": "Block",
										"src": "6931:40:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1250,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1244,
															"src": "6958:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1249,
														"name": "balanceOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 472,
														"src": "6948:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6948:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1248,
												"id": 1252,
												"nodeType": "Return",
												"src": "6941:23:5"
											}
										]
									},
									"documentation": {
										"id": 1242,
										"nodeType": "StructuredDocumentation",
										"src": "6817:37:5",
										"text": "@dev See {IERC4626-maxRedeem}. "
									},
									"functionSelector": "d905777e",
									"id": 1254,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxRedeem",
									"nameLocation": "6868:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1244,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6886:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "6878:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6878:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6877:15:5"
									},
									"returnParameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1254,
												"src": "6922:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6922:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6921:9:5"
									},
									"scope": 1649,
									"src": "6859:112:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										76
									],
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "7102:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1263,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1257,
															"src": "7136:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1264,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "7144:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7149:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "7144:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7158:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2291,
															"src": "7144:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1262,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "7119:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1261,
												"id": 1268,
												"nodeType": "Return",
												"src": "7112:52:5"
											}
										]
									},
									"documentation": {
										"id": 1255,
										"nodeType": "StructuredDocumentation",
										"src": "6977:42:5",
										"text": "@dev See {IERC4626-previewDeposit}. "
									},
									"functionSelector": "ef8b30f7",
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewDeposit",
									"nameLocation": "7033:14:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1257,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7056:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "7048:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1256,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7048:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7047:16:5"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "7093:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7093:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7092:9:5"
									},
									"scope": 1649,
									"src": "7024:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										102
									],
									"body": {
										"id": 1285,
										"nodeType": "Block",
										"src": "7296:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1279,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "7330:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1280,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "7338:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1281,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7343:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "7338:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1282,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7352:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2292,
															"src": "7338:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1278,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "7313:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7313:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1277,
												"id": 1284,
												"nodeType": "Return",
												"src": "7306:51:5"
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "7177:39:5",
										"text": "@dev See {IERC4626-previewMint}. "
									},
									"functionSelector": "b3d7f6b9",
									"id": 1286,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewMint",
									"nameLocation": "7230:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7250:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "7242:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1272,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7242:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7241:16:5"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1286,
												"src": "7287:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1275,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7287:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7286:9:5"
									},
									"scope": 1649,
									"src": "7221:143:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										128
									],
									"body": {
										"id": 1301,
										"nodeType": "Block",
										"src": "7497:68:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1295,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1289,
															"src": "7531:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1296,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "7539:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1297,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7544:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "7539:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1298,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7553:4:5",
															"memberName": "Ceil",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2292,
															"src": "7539:18:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1294,
														"name": "_convertToShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "7514:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1299,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7514:44:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1293,
												"id": 1300,
												"nodeType": "Return",
												"src": "7507:51:5"
											}
										]
									},
									"documentation": {
										"id": 1287,
										"nodeType": "StructuredDocumentation",
										"src": "7370:43:5",
										"text": "@dev See {IERC4626-previewWithdraw}. "
									},
									"functionSelector": "0a28a477",
									"id": 1302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewWithdraw",
									"nameLocation": "7427:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7451:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "7443:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7443:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7442:16:5"
									},
									"returnParameters": {
										"id": 1293,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1292,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "7488:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1291,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7488:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7487:9:5"
									},
									"scope": 1649,
									"src": "7418:147:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										156
									],
									"body": {
										"id": 1317,
										"nodeType": "Block",
										"src": "7694:69:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1311,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1305,
															"src": "7728:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 1312,
																	"name": "Math",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3338,
																	"src": "7736:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Math_$3338_$",
																		"typeString": "type(library Math)"
																	}
																},
																"id": 1313,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7741:8:5",
																"memberName": "Rounding",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2295,
																"src": "7736:13:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_Rounding_$2295_$",
																	"typeString": "type(enum Math.Rounding)"
																}
															},
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7750:5:5",
															"memberName": "Floor",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2291,
															"src": "7736:19:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"id": 1310,
														"name": "_convertToAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1556,
														"src": "7711:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$",
															"typeString": "function (uint256,enum Math.Rounding) view returns (uint256)"
														}
													},
													"id": 1315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7711:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1309,
												"id": 1316,
												"nodeType": "Return",
												"src": "7704:52:5"
											}
										]
									},
									"documentation": {
										"id": 1303,
										"nodeType": "StructuredDocumentation",
										"src": "7571:41:5",
										"text": "@dev See {IERC4626-previewRedeem}. "
									},
									"functionSelector": "4cdad506",
									"id": 1318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "previewRedeem",
									"nameLocation": "7626:13:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1305,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "7648:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1318,
												"src": "7640:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7640:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7639:16:5"
									},
									"returnParameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1318,
												"src": "7685:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7685:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7684:9:5"
									},
									"scope": 1649,
									"src": "7617:146:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										86
									],
									"body": {
										"id": 1361,
										"nodeType": "Block",
										"src": "7893:308:5",
										"statements": [
											{
												"assignments": [
													1329
												],
												"declarations": [
													{
														"constant": false,
														"id": 1329,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "7911:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1361,
														"src": "7903:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1328,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7903:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1333,
												"initialValue": {
													"arguments": [
														{
															"id": 1331,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1323,
															"src": "7934:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1330,
														"name": "maxDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1208,
														"src": "7923:10:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7923:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7903:40:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1334,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "7957:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1335,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1329,
														"src": "7966:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7957:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1344,
												"nodeType": "IfStatement",
												"src": "7953:110:5",
												"trueBody": {
													"id": 1343,
													"nodeType": "Block",
													"src": "7977:86:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1338,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1323,
																		"src": "8024:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1339,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1321,
																		"src": "8034:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1340,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1329,
																		"src": "8042:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1337,
																	"name": "ERC4626ExceededMaxDeposit",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 998,
																	"src": "7998:25:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7998:54:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1342,
															"nodeType": "RevertStatement",
															"src": "7991:61:5"
														}
													]
												}
											},
											{
												"assignments": [
													1346
												],
												"declarations": [
													{
														"constant": false,
														"id": 1346,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "8081:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1361,
														"src": "8073:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1345,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8073:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1350,
												"initialValue": {
													"arguments": [
														{
															"id": 1348,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1321,
															"src": "8105:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1347,
														"name": "previewDeposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "8090:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8090:22:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8073:39:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1352,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2266,
																"src": "8131:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1353,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8131:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1354,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1323,
															"src": "8145:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1355,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1321,
															"src": "8155:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1356,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "8163:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1351,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "8122:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8122:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1358,
												"nodeType": "ExpressionStatement",
												"src": "8122:48:5"
											},
											{
												"expression": {
													"id": 1359,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1346,
													"src": "8188:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1327,
												"id": 1360,
												"nodeType": "Return",
												"src": "8181:13:5"
											}
										]
									},
									"documentation": {
										"id": 1319,
										"nodeType": "StructuredDocumentation",
										"src": "7769:35:5",
										"text": "@dev See {IERC4626-deposit}. "
									},
									"functionSelector": "6e553f65",
									"id": 1362,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "deposit",
									"nameLocation": "7818:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1321,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "7834:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "7826:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1320,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7826:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "7850:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "7842:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7842:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7825:34:5"
									},
									"returnParameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1362,
												"src": "7884:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7884:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7883:9:5"
									},
									"scope": 1649,
									"src": "7809:392:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										112
									],
									"body": {
										"id": 1405,
										"nodeType": "Block",
										"src": "8549:299:5",
										"statements": [
											{
												"assignments": [
													1373
												],
												"declarations": [
													{
														"constant": false,
														"id": 1373,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "8567:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1405,
														"src": "8559:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1372,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8559:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1377,
												"initialValue": {
													"arguments": [
														{
															"id": 1375,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1367,
															"src": "8587:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1374,
														"name": "maxMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1223,
														"src": "8579:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8579:17:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8559:37:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1378,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1365,
														"src": "8610:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1379,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1373,
														"src": "8619:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8610:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1388,
												"nodeType": "IfStatement",
												"src": "8606:107:5",
												"trueBody": {
													"id": 1387,
													"nodeType": "Block",
													"src": "8630:83:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1382,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1367,
																		"src": "8674:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1383,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1365,
																		"src": "8684:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1384,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1373,
																		"src": "8692:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1381,
																	"name": "ERC4626ExceededMaxMint",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1007,
																	"src": "8651:22:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8651:51:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1386,
															"nodeType": "RevertStatement",
															"src": "8644:58:5"
														}
													]
												}
											},
											{
												"assignments": [
													1390
												],
												"declarations": [
													{
														"constant": false,
														"id": 1390,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "8731:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1405,
														"src": "8723:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1389,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8723:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1394,
												"initialValue": {
													"arguments": [
														{
															"id": 1392,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "8752:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1391,
														"name": "previewMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1286,
														"src": "8740:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8740:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8723:36:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1396,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2266,
																"src": "8778:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1397,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8778:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1398,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1367,
															"src": "8792:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1399,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1390,
															"src": "8802:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1400,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1365,
															"src": "8810:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1395,
														"name": "_deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1593,
														"src": "8769:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8769:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1402,
												"nodeType": "ExpressionStatement",
												"src": "8769:48:5"
											},
											{
												"expression": {
													"id": 1403,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1390,
													"src": "8835:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1371,
												"id": 1404,
												"nodeType": "Return",
												"src": "8828:13:5"
											}
										]
									},
									"documentation": {
										"id": 1363,
										"nodeType": "StructuredDocumentation",
										"src": "8207:256:5",
										"text": "@dev See {IERC4626-mint}.\n As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n In this case, the shares will be minted without requiring any assets to be deposited."
									},
									"functionSelector": "94bf804d",
									"id": 1406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "8477:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1368,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1365,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "8490:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "8482:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8482:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1367,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8506:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "8498:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1366,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8498:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8481:34:5"
									},
									"returnParameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1406,
												"src": "8540:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8540:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8539:9:5"
									},
									"scope": 1649,
									"src": "8468:380:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										140
									],
									"body": {
										"id": 1452,
										"nodeType": "Block",
										"src": "8995:313:5",
										"statements": [
											{
												"assignments": [
													1419
												],
												"declarations": [
													{
														"constant": false,
														"id": 1419,
														"mutability": "mutable",
														"name": "maxAssets",
														"nameLocation": "9013:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "9005:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1418,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9005:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1423,
												"initialValue": {
													"arguments": [
														{
															"id": 1421,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9037:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1420,
														"name": "maxWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1241,
														"src": "9025:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9025:18:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9005:38:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1426,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1424,
														"name": "assets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1409,
														"src": "9057:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1425,
														"name": "maxAssets",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1419,
														"src": "9066:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9057:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1434,
												"nodeType": "IfStatement",
												"src": "9053:108:5",
												"trueBody": {
													"id": 1433,
													"nodeType": "Block",
													"src": "9077:84:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1428,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1413,
																		"src": "9125:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1429,
																		"name": "assets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1409,
																		"src": "9132:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1430,
																		"name": "maxAssets",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1419,
																		"src": "9140:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1427,
																	"name": "ERC4626ExceededMaxWithdraw",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1016,
																	"src": "9098:26:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9098:52:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1432,
															"nodeType": "RevertStatement",
															"src": "9091:59:5"
														}
													]
												}
											},
											{
												"assignments": [
													1436
												],
												"declarations": [
													{
														"constant": false,
														"id": 1436,
														"mutability": "mutable",
														"name": "shares",
														"nameLocation": "9179:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1452,
														"src": "9171:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1435,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1440,
												"initialValue": {
													"arguments": [
														{
															"id": 1438,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "9204:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1437,
														"name": "previewWithdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1302,
														"src": "9188:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9188:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:40:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1442,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2266,
																"src": "9231:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9231:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1444,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1411,
															"src": "9245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1445,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1413,
															"src": "9255:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1446,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1409,
															"src": "9262:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1447,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "9270:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1441,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1640,
														"src": "9221:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9221:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1449,
												"nodeType": "ExpressionStatement",
												"src": "9221:56:5"
											},
											{
												"expression": {
													"id": 1450,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1436,
													"src": "9295:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1417,
												"id": 1451,
												"nodeType": "Return",
												"src": "9288:13:5"
											}
										]
									},
									"documentation": {
										"id": 1407,
										"nodeType": "StructuredDocumentation",
										"src": "8854:36:5",
										"text": "@dev See {IERC4626-withdraw}. "
									},
									"functionSelector": "b460af94",
									"id": 1453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdraw",
									"nameLocation": "8904:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1414,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1409,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "8921:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "8913:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8913:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1411,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "8937:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "8929:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1413,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8955:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "8947:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8947:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8912:49:5"
									},
									"returnParameters": {
										"id": 1417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1416,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "8986:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1415,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8986:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8985:9:5"
									},
									"scope": 1649,
									"src": "8895:413:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										168
									],
									"body": {
										"id": 1499,
										"nodeType": "Block",
										"src": "9451:307:5",
										"statements": [
											{
												"assignments": [
													1466
												],
												"declarations": [
													{
														"constant": false,
														"id": 1466,
														"mutability": "mutable",
														"name": "maxShares",
														"nameLocation": "9469:9:5",
														"nodeType": "VariableDeclaration",
														"scope": 1499,
														"src": "9461:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1465,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9461:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1470,
												"initialValue": {
													"arguments": [
														{
															"id": 1468,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "9491:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1467,
														"name": "maxRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1254,
														"src": "9481:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1469,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9481:16:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9461:36:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1471,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1456,
														"src": "9511:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1472,
														"name": "maxShares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1466,
														"src": "9520:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9511:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1481,
												"nodeType": "IfStatement",
												"src": "9507:106:5",
												"trueBody": {
													"id": 1480,
													"nodeType": "Block",
													"src": "9531:82:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1475,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1460,
																		"src": "9577:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1476,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1456,
																		"src": "9584:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1477,
																		"name": "maxShares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1466,
																		"src": "9592:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1474,
																	"name": "ERC4626ExceededMaxRedeem",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1025,
																	"src": "9552:24:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256,uint256) pure"
																	}
																},
																"id": 1478,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9552:50:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1479,
															"nodeType": "RevertStatement",
															"src": "9545:57:5"
														}
													]
												}
											},
											{
												"assignments": [
													1483
												],
												"declarations": [
													{
														"constant": false,
														"id": 1483,
														"mutability": "mutable",
														"name": "assets",
														"nameLocation": "9631:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1499,
														"src": "9623:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1482,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9623:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1487,
												"initialValue": {
													"arguments": [
														{
															"id": 1485,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1456,
															"src": "9654:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1484,
														"name": "previewRedeem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1318,
														"src": "9640:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9640:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9623:38:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1489,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2266,
																"src": "9681:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9681:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1491,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "9695:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1492,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "9705:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1493,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1483,
															"src": "9712:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1494,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1456,
															"src": "9720:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1488,
														"name": "_withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1640,
														"src": "9671:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9671:56:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1496,
												"nodeType": "ExpressionStatement",
												"src": "9671:56:5"
											},
											{
												"expression": {
													"id": 1497,
													"name": "assets",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1483,
													"src": "9745:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1464,
												"id": 1498,
												"nodeType": "Return",
												"src": "9738:13:5"
											}
										]
									},
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "9314:34:5",
										"text": "@dev See {IERC4626-redeem}. "
									},
									"functionSelector": "ba087652",
									"id": 1500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "redeem",
									"nameLocation": "9362:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "9377:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "9369:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9369:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "9393:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "9385:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9385:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9411:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "9403:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9403:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9368:49:5"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1500,
												"src": "9442:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9442:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9441:9:5"
									},
									"scope": 1649,
									"src": "9353:405:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1527,
										"nodeType": "Block",
										"src": "9988:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1519,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1513,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 459,
																	"src": "10019:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1514,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10019:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10035:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1516,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1648,
																		"src": "10041:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10041:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10035:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10019:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1520,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "10060:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1521,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10060:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1522,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10076:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10060:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1524,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1506,
															"src": "10079:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1511,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1503,
															"src": "10005:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1512,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10012:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2715,
														"src": "10005:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10005:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1510,
												"id": 1526,
												"nodeType": "Return",
												"src": "9998:90:5"
											}
										]
									},
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "9764:113:5",
										"text": " @dev Internal conversion function (from assets to shares) with support for rounding direction."
									},
									"id": 1528,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToShares",
									"nameLocation": "9891:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "9916:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9908:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1502,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9908:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "9938:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9924:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1505,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1504,
														"name": "Math.Rounding",
														"nameLocations": [
															"9924:4:5",
															"9929:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "9924:13:5"
													},
													"referencedDeclaration": 2295,
													"src": "9924:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:40:5"
									},
									"returnParameters": {
										"id": 1510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1528,
												"src": "9979:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9979:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9978:9:5"
									},
									"scope": 1649,
									"src": "9882:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1555,
										"nodeType": "Block",
										"src": "10325:107:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1544,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1541,
																	"name": "totalAssets",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1161,
																	"src": "10356:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1542,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10356:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10372:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10356:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1545,
																	"name": "totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 459,
																	"src": "10375:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																		"typeString": "function () view returns (uint256)"
																	}
																},
																"id": 1546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10375:13:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10391:2:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1548,
																		"name": "_decimalsOffset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1648,
																		"src": "10397:15:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10397:17:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "10391:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10375:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1552,
															"name": "rounding",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1534,
															"src": "10416:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_enum$_Rounding_$2295",
																"typeString": "enum Math.Rounding"
															}
														],
														"expression": {
															"id": 1539,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1531,
															"src": "10342:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1540,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10349:6:5",
														"memberName": "mulDiv",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2715,
														"src": "10342:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_enum$_Rounding_$2295_$returns$_t_uint256_$attached_to$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256,enum Math.Rounding) pure returns (uint256)"
														}
													},
													"id": 1553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10342:83:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1538,
												"id": 1554,
												"nodeType": "Return",
												"src": "10335:90:5"
											}
										]
									},
									"documentation": {
										"id": 1529,
										"nodeType": "StructuredDocumentation",
										"src": "10101:113:5",
										"text": " @dev Internal conversion function (from shares to assets) with support for rounding direction."
									},
									"id": 1556,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_convertToAssets",
									"nameLocation": "10228:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1531,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10253:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "10245:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1530,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10245:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10275:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "10261:22:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 1533,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1532,
														"name": "Math.Rounding",
														"nameLocations": [
															"10261:4:5",
															"10266:8:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "10261:13:5"
													},
													"referencedDeclaration": 2295,
													"src": "10261:13:5",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10244:40:5"
									},
									"returnParameters": {
										"id": 1538,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1556,
												"src": "10316:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1536,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10316:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10315:9:5"
									},
									"scope": 1649,
									"src": "10219:213:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1592,
										"nodeType": "Block",
										"src": "10597:729:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1571,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "11191:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1572,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "11199:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1575,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "11215:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ERC4626_$1649",
																		"typeString": "contract ERC4626"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ERC4626_$1649",
																		"typeString": "contract ERC4626"
																	}
																],
																"id": 1574,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11207:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1573,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11207:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 1576,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11207:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1577,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1563,
															"src": "11222:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1568,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2001,
															"src": "11164:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2001_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "11174:16:5",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1788,
														"src": "11164:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11164:65:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1579,
												"nodeType": "ExpressionStatement",
												"src": "11164:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1581,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1561,
															"src": "11245:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1582,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "11255:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1580,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 726,
														"src": "11239:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11239:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1584,
												"nodeType": "ExpressionStatement",
												"src": "11239:23:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1586,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1559,
															"src": "11286:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1587,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1561,
															"src": "11294:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1588,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1563,
															"src": "11304:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1589,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1565,
															"src": "11312:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1585,
														"name": "Deposit",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "11278:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11278:41:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1591,
												"nodeType": "EmitStatement",
												"src": "11273:46:5"
											}
										]
									},
									"documentation": {
										"id": 1557,
										"nodeType": "StructuredDocumentation",
										"src": "10438:53:5",
										"text": " @dev Deposit/mint common workflow."
									},
									"id": 1593,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_deposit",
									"nameLocation": "10505:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "10522:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10514:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10514:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "10538:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10530:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10530:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1563,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "10556:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10548:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10548:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1565,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "10572:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1593,
												"src": "10564:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10564:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10513:66:5"
									},
									"returnParameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10597:0:5"
									},
									"scope": 1649,
									"src": "10496:830:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1639,
										"nodeType": "Block",
										"src": "11556:751:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1607,
														"name": "caller",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1596,
														"src": "11570:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1608,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1600,
														"src": "11580:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11570:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1617,
												"nodeType": "IfStatement",
												"src": "11566:84:5",
												"trueBody": {
													"id": 1616,
													"nodeType": "Block",
													"src": "11587:63:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1611,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1600,
																		"src": "11617:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1612,
																		"name": "caller",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1596,
																		"src": "11624:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1613,
																		"name": "shares",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1604,
																		"src": "11632:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1610,
																	"name": "_spendAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 885,
																	"src": "11601:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 1614,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11601:38:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1615,
															"nodeType": "ExpressionStatement",
															"src": "11601:38:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1619,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1600,
															"src": "12163:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1620,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1604,
															"src": "12170:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1618,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 759,
														"src": "12157:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1621,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12157:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1622,
												"nodeType": "ExpressionStatement",
												"src": "12157:20:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1626,
															"name": "_asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "12210:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1627,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1598,
															"src": "12218:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1628,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "12228:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1623,
															"name": "SafeERC20",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2001,
															"src": "12187:9:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SafeERC20_$2001_$",
																"typeString": "type(library SafeERC20)"
															}
														},
														"id": 1625,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12197:12:5",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1761,
														"src": "12187:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12187:48:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1630,
												"nodeType": "ExpressionStatement",
												"src": "12187:48:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1632,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1596,
															"src": "12260:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1633,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1598,
															"src": "12268:8:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1634,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1600,
															"src": "12278:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1635,
															"name": "assets",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "12285:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1636,
															"name": "shares",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1604,
															"src": "12293:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1631,
														"name": "Withdraw",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "12251:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1637,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12251:49:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1638,
												"nodeType": "EmitStatement",
												"src": "12246:54:5"
											}
										]
									},
									"documentation": {
										"id": 1594,
										"nodeType": "StructuredDocumentation",
										"src": "11332:56:5",
										"text": " @dev Withdraw/redeem common workflow."
									},
									"id": 1640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_withdraw",
									"nameLocation": "11402:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1596,
												"mutability": "mutable",
												"name": "caller",
												"nameLocation": "11429:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "11421:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1595,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11421:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1598,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "11453:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "11445:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11445:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1600,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11479:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "11471:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1599,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11471:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "assets",
												"nameLocation": "11502:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "11494:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11494:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "11526:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "11518:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1603,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11518:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11411:127:5"
									},
									"returnParameters": {
										"id": 1606,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11556:0:5"
									},
									"scope": 1649,
									"src": "11393:914:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1647,
										"nodeType": "Block",
										"src": "12378:25:5",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1645,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12395:1:5",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1644,
												"id": 1646,
												"nodeType": "Return",
												"src": "12388:8:5"
											}
										]
									},
									"id": 1648,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_decimalsOffset",
									"nameLocation": "12322:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12337:2:5"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1648,
												"src": "12371:5:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1642,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "12371:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12370:7:5"
									},
									"scope": 1649,
									"src": "12313:90:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1650,
							"src": "3158:9247:5",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								998,
								1007,
								1016,
								1025,
								1728,
								2009,
								2014,
								2017,
								2290
							],
							"usedEvents": [
								20,
								32,
								898,
								907
							]
						}
					],
					"src": "118:12288:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							964
						],
						"IERC20Metadata": [
							1675
						]
					},
					"id": 1676,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1651,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1653,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1676,
							"sourceUnit": 965,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1652,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 964,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1655,
										"name": "IERC20",
										"nameLocations": [
											"305:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 964,
										"src": "305:6:6"
									},
									"id": 1656,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1654,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1675,
							"linearizedBaseContracts": [
								1675,
								964
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1657,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:6"
									},
									"returnParameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "416:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1659,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:6"
									},
									"scope": 1675,
									"src": "377:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1668,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:6"
									},
									"returnParameters": {
										"id": 1667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1666,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1668,
												"src": "539:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1665,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:6"
									},
									"scope": 1675,
									"src": "498:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1669,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:6"
									},
									"returnParameters": {
										"id": 1673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1674,
												"src": "673:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1671,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:6"
									},
									"scope": 1675,
									"src": "630:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1676,
							"src": "277:405:6",
							"usedErrors": [],
							"usedEvents": [
								898,
								907
							]
						}
					],
					"src": "125:558:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1711
						]
					},
					"id": 1712,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1677,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1678,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:7",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1711,
							"linearizedBaseContracts": [
								1711
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1679,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:7",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1696,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1681,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3022:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1680,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1683,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3045:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1685,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3070:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3093:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1686,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3119:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1688,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3136:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1690,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1693,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1696,
												"src": "3155:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1692,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:7"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:7"
									},
									"scope": 1711,
									"src": "2997:183:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1697,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:7",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1704,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1699,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "3501:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1698,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:7"
									},
									"returnParameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1704,
												"src": "3539:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1701,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:7"
									},
									"scope": 1711,
									"src": "3485:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1705,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:7",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1710,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:7"
									},
									"returnParameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1708,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "3791:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1707,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:7"
									},
									"scope": 1711,
									"src": "3740:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1712,
							"src": "2113:1689:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							2254
						],
						"IERC20": [
							964
						],
						"IERC20Permit": [
							1711
						],
						"SafeERC20": [
							2001
						]
					},
					"id": 2002,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1713,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1715,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 965,
							"src": "141:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1714,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 964,
										"src": "149:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 1717,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 1712,
							"src": "179:60:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1716,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1711,
										"src": "187:12:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 1719,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2002,
							"sourceUnit": 2255,
							"src": "240:51:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1718,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2254,
										"src": "248:7:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1720,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:8",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 2001,
							"linearizedBaseContracts": [
								2001
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1723,
									"libraryName": {
										"id": 1721,
										"name": "Address",
										"nameLocations": [
											"781:7:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2254,
										"src": "781:7:8"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:8",
									"typeName": {
										"id": 1722,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:8",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 1724,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:8",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 1728,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1726,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1728,
												"src": "907:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1725,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:8"
									},
									"src": "876:46:8"
								},
								{
									"documentation": {
										"id": 1729,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:8",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 1737,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1737,
												"src": "1043:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1730,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1733,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:8",
												"nodeType": "VariableDeclaration",
												"scope": 1737,
												"src": "1060:24:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1732,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1737,
												"src": "1086:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:8"
									},
									"src": "1004:109:8"
								},
								{
									"body": {
										"id": 1760,
										"nodeType": "Block",
										"src": "1375:88:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1749,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1741,
															"src": "1405:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1752,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1741,
																		"src": "1427:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1753,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:8",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 931,
																	"src": "1427:14:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1754,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1743,
																			"src": "1444:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1755,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1745,
																			"src": "1448:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1756,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 1750,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1748,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1951,
														"src": "1385:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1759,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:8"
											}
										]
									},
									"documentation": {
										"id": 1738,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:8",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1741,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1761,
												"src": "1325:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1740,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1739,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "1325:6:8"
													},
													"referencedDeclaration": 964,
													"src": "1325:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1761,
												"src": "1339:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1742,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1745,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1761,
												"src": "1351:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1744,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:8"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:8"
									},
									"scope": 2001,
									"src": "1303:160:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1787,
										"nodeType": "Block",
										"src": "1792:98:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1775,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1765,
															"src": "1822:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1778,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1765,
																		"src": "1844:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1779,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:8",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 963,
																	"src": "1844:18:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1780,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1767,
																			"src": "1865:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1781,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1769,
																			"src": "1871:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1782,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1771,
																			"src": "1875:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1783,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 1776,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1777,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:8",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1774,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1951,
														"src": "1802:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 1785,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1786,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:8"
											}
										]
									},
									"documentation": {
										"id": 1762,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:8",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 1788,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "1728:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1764,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1763,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "1728:6:8"
													},
													"referencedDeclaration": 964,
													"src": "1728:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1767,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "1742:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1766,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1769,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "1756:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1768,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1771,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1788,
												"src": "1768:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1770,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:8"
									},
									"returnParameters": {
										"id": 1773,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:8"
									},
									"scope": 2001,
									"src": "1702:188:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1818,
										"nodeType": "Block",
										"src": "2167:139:8",
										"statements": [
											{
												"assignments": [
													1800
												],
												"declarations": [
													{
														"constant": false,
														"id": 1800,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1818,
														"src": "2177:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1799,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1809,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1805,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$2001",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$2001",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 1804,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1803,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1807,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1794,
															"src": "2231:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1801,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1792,
															"src": "2200:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														"id": 1802,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:8",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 941,
														"src": "2200:15:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 1808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1811,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1792,
															"src": "2262:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 1812,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1794,
															"src": "2269:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1813,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1800,
																"src": "2278:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1814,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1796,
																"src": "2293:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1810,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1909,
														"src": "2249:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1816,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1817,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:8"
											}
										]
									},
									"documentation": {
										"id": 1789,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:8",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 1819,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2112:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1791,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1790,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "2112:6:8"
													},
													"referencedDeclaration": 964,
													"src": "2112:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1794,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2126:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1793,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1796,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "2143:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1795,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:8"
									},
									"returnParameters": {
										"id": 1798,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:8"
									},
									"scope": 2001,
									"src": "2081:225:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1861,
										"nodeType": "Block",
										"src": "2607:370:8",
										"statements": [
											{
												"id": 1860,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:8",
												"statements": [
													{
														"assignments": [
															1831
														],
														"declarations": [
															{
																"constant": false,
																"id": 1831,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:8",
																"nodeType": "VariableDeclaration",
																"scope": 1860,
																"src": "2641:24:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1830,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1840,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1836,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$2001",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$2001",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1835,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1834,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1838,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1825,
																	"src": "2699:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1832,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1823,
																	"src": "2668:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1833,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:8",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 941,
																"src": "2668:15:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1839,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:8"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1841,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1831,
																"src": "2725:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1842,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1827,
																"src": "2744:17:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1851,
														"nodeType": "IfStatement",
														"src": "2721:160:8",
														"trueBody": {
															"id": 1850,
															"nodeType": "Block",
															"src": "2763:118:8",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1845,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1825,
																				"src": "2821:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1846,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1831,
																				"src": "2830:16:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1847,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1827,
																				"src": "2848:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1844,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1737,
																			"src": "2788:32:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 1848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 1849,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:8"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1853,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1823,
																	"src": "2907:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 1854,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1825,
																	"src": "2914:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1857,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1855,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1831,
																		"src": "2923:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1856,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1827,
																		"src": "2942:17:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1852,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1909,
																"src": "2894:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 1858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1859,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:8",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 1862,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1828,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "2540:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1822,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1821,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "2540:6:8"
													},
													"referencedDeclaration": 964,
													"src": "2540:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1825,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "2554:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1824,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1827,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:8",
												"nodeType": "VariableDeclaration",
												"scope": 1862,
												"src": "2571:25:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:8"
									},
									"returnParameters": {
										"id": 1829,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:8"
									},
									"scope": 2001,
									"src": "2509:468:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1908,
										"nodeType": "Block",
										"src": "3373:303:8",
										"statements": [
											{
												"assignments": [
													1874
												],
												"declarations": [
													{
														"constant": false,
														"id": 1874,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1908,
														"src": "3383:25:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1873,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1883,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1877,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1866,
																"src": "3426:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:8",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 951,
															"src": "3426:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 1879,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1868,
																	"src": "3442:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1880,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1870,
																	"src": "3451:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1881,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 1875,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:8",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1876,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:8",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:8"
											},
											{
												"condition": {
													"id": 1888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:8",
													"subExpression": {
														"arguments": [
															{
																"id": 1885,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1866,
																"src": "3498:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1886,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1874,
																"src": "3505:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1884,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2000,
															"src": "3474:23:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 1887,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1907,
												"nodeType": "IfStatement",
												"src": "3469:201:8",
												"trueBody": {
													"id": 1906,
													"nodeType": "Block",
													"src": "3520:150:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1890,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1866,
																		"src": "3554:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1893,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1866,
																					"src": "3576:5:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$964",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1894,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:8",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 951,
																				"src": "3576:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1895,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1868,
																						"src": "3592:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 1896,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 1897,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 1891,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1892,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:8",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1898,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1889,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1951,
																	"src": "3534:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1900,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1902,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1866,
																		"src": "3639:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1903,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1874,
																		"src": "3646:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$964",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1901,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1951,
																	"src": "3619:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1904,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1905,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1863,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:8",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 1909,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1866,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "3318:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1865,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1864,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "3318:6:8"
													},
													"referencedDeclaration": 964,
													"src": "3318:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "3332:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1867,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1909,
												"src": "3349:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1869,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:8"
									},
									"returnParameters": {
										"id": 1872,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:8"
									},
									"scope": 2001,
									"src": "3296:380:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1950,
										"nodeType": "Block",
										"src": "4129:559:8",
										"statements": [
											{
												"assignments": [
													1919
												],
												"declarations": [
													{
														"constant": false,
														"id": 1919,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1950,
														"src": "4478:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1918,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1927,
												"initialValue": {
													"arguments": [
														{
															"id": 1925,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1915,
															"src": "4532:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1922,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1913,
																	"src": "4512:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1921,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1920,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1924,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:8",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2075,
														"src": "4504:27:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 1926,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1931,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 1928,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1919,
																"src": "4551:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 1930,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 1939,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:8",
														"subExpression": {
															"arguments": [
																{
																	"id": 1934,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1919,
																	"src": "4589:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 1936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 1935,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:8",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 1937,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 1932,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1933,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:8",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1949,
												"nodeType": "IfStatement",
												"src": "4547:135:8",
												"trueBody": {
													"id": 1948,
													"nodeType": "Block",
													"src": "4610:72:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1944,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1913,
																				"src": "4664:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$964",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$964",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 1943,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1942,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1941,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1728,
																	"src": "4631:24:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1947,
															"nodeType": "RevertStatement",
															"src": "4624:47:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1910,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 1951,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1913,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "4088:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1912,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1911,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "4088:6:8"
													},
													"referencedDeclaration": 964,
													"src": "4088:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1951,
												"src": "4102:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1914,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:8"
									},
									"returnParameters": {
										"id": 1917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:8"
									},
									"scope": 2001,
									"src": "4059:629:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1999,
										"nodeType": "Block",
										"src": "5278:489:8",
										"statements": [
											{
												"assignments": [
													1963,
													1965
												],
												"declarations": [
													{
														"constant": false,
														"id": 1963,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1999,
														"src": "5574:12:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1962,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1965,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1999,
														"src": "5588:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1964,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1973,
												"initialValue": {
													"arguments": [
														{
															"id": 1971,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1957,
															"src": "5635:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1968,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1955,
																	"src": "5623:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$964",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1967,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1966,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1969,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:8",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:8"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 1988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1974,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1963,
															"src": "5657:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1978,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1975,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1965,
																				"src": "5669:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 1976,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:8",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1977,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 1981,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1965,
																				"src": "5706:10:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1983,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 1982,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:8",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 1984,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 1979,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1980,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:8",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 1985,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 1987,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1996,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1991,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1955,
																			"src": "5738:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$964",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$964",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 1990,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1989,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1992,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1993,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:8",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1995,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1961,
												"id": 1998,
												"nodeType": "Return",
												"src": "5650:110:8"
											}
										]
									},
									"documentation": {
										"id": 1952,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:8",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 2000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "5222:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1954,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1953,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:8"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "5222:6:8"
													},
													"referencedDeclaration": 964,
													"src": "5222:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1957,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "5236:17:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1956,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:8"
									},
									"returnParameters": {
										"id": 1961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2000,
												"src": "5272:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1959,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:8"
									},
									"scope": 2001,
									"src": "5189:578:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2002,
							"src": "751:5018:8",
							"usedErrors": [
								1728,
								1737
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							2254
						]
					},
					"id": 2255,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2003,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2004,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:9",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 2254,
							"linearizedBaseContracts": [
								2254
							],
							"name": "Address",
							"nameLocation": "203:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2005,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:9",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 2009,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2007,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2009,
												"src": "349:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2006,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:9"
									},
									"src": "316:50:9"
								},
								{
									"documentation": {
										"id": 2010,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:9",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 2014,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2012,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2014,
												"src": "475:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2011,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:9"
									},
									"src": "452:39:9"
								},
								{
									"documentation": {
										"id": 2015,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:9",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 2017,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2016,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:9"
									},
									"src": "591:24:9"
								},
								{
									"body": {
										"id": 2057,
										"nodeType": "Block",
										"src": "1602:260:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2027,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2254",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2254",
																		"typeString": "library Address"
																	}
																],
																"id": 2026,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2025,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2028,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2029,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2030,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2022,
														"src": "1640:6:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2040,
												"nodeType": "IfStatement",
												"src": "1612:109:9",
												"trueBody": {
													"id": 2039,
													"nodeType": "Block",
													"src": "1648:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2035,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2254",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2254",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2034,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2033,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2032,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2009,
																	"src": "1669:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2038,
															"nodeType": "RevertStatement",
															"src": "1662:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2042,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2042,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2057,
														"src": "1732:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2041,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2049,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2047,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 2043,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2020,
																"src": "1750:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2046,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2045,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2022,
																"src": "1772:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2048,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:9"
											},
											{
												"condition": {
													"id": 2051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:9",
													"subExpression": {
														"id": 2050,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2042,
														"src": "1798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2056,
												"nodeType": "IfStatement",
												"src": "1793:63:9",
												"trueBody": {
													"id": 2055,
													"nodeType": "Block",
													"src": "1807:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2052,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2017,
																	"src": "1828:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2053,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2054,
															"nodeType": "RevertStatement",
															"src": "1821:24:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2018,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:9",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 2058,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "1550:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 2019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:9",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2022,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2058,
												"src": "1577:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2021,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:9"
									},
									"returnParameters": {
										"id": 2024,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:9"
									},
									"scope": 2254,
									"src": "1531:331:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2074,
										"nodeType": "Block",
										"src": "2794:62:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2069,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2061,
															"src": "2833:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2070,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2063,
															"src": "2841:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 2071,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 2068,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2121,
														"src": "2811:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 2072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2067,
												"id": 2073,
												"nodeType": "Return",
												"src": "2804:45:9"
											}
										]
									},
									"documentation": {
										"id": 2059,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:9",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 2075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2064,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2061,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2727:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2060,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2743:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2062,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:9"
									},
									"returnParameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2075,
												"src": "2780:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2065,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:9"
									},
									"scope": 2254,
									"src": "2705:151:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2120,
										"nodeType": "Block",
										"src": "3293:279:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2089,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$2254",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$2254",
																		"typeString": "library Address"
																	}
																],
																"id": 2088,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2087,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 2090,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2091,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:9",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2092,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2082,
														"src": "3331:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2102,
												"nodeType": "IfStatement",
												"src": "3303:108:9",
												"trueBody": {
													"id": 2101,
													"nodeType": "Block",
													"src": "3338:73:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 2097,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$2254",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$2254",
																					"typeString": "library Address"
																				}
																			],
																			"id": 2096,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2095,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2098,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2094,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2009,
																	"src": "3359:26:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 2099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2100,
															"nodeType": "RevertStatement",
															"src": "3352:48:9"
														}
													]
												}
											},
											{
												"assignments": [
													2104,
													2106
												],
												"declarations": [
													{
														"constant": false,
														"id": 2104,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2120,
														"src": "3421:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2103,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2106,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2120,
														"src": "3435:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2105,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2113,
												"initialValue": {
													"arguments": [
														{
															"id": 2111,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2080,
															"src": "3488:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 2107,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2078,
																"src": "3462:6:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2108,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2109,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2082,
																"src": "3481:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2115,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2078,
															"src": "3537:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2116,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2104,
															"src": "3545:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2117,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2106,
															"src": "3554:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2114,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "3510:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2086,
												"id": 2119,
												"nodeType": "Return",
												"src": "3503:62:9"
											}
										]
									},
									"documentation": {
										"id": 2076,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 2121,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2083,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2121,
												"src": "3211:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2121,
												"src": "3227:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2079,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2082,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 2121,
												"src": "3246:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2081,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:9"
									},
									"returnParameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2121,
												"src": "3279:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2084,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:9"
									},
									"scope": 2254,
									"src": "3180:392:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2146,
										"nodeType": "Block",
										"src": "3811:154:9",
										"statements": [
											{
												"assignments": [
													2132,
													2134
												],
												"declarations": [
													{
														"constant": false,
														"id": 2132,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2146,
														"src": "3822:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2131,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2134,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2146,
														"src": "3836:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2133,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2139,
												"initialValue": {
													"arguments": [
														{
															"id": 2137,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2126,
															"src": "3881:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2135,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2124,
															"src": "3863:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2136,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:9",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 2138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2141,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2124,
															"src": "3930:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2142,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2132,
															"src": "3938:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2143,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2134,
															"src": "3947:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2140,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "3903:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2130,
												"id": 2145,
												"nodeType": "Return",
												"src": "3896:62:9"
											}
										]
									},
									"documentation": {
										"id": 2122,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 2147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2124,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2147,
												"src": "3739:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2126,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2147,
												"src": "3755:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2125,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:9"
									},
									"returnParameters": {
										"id": 2130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2147,
												"src": "3797:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2128,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:9"
									},
									"scope": 2254,
									"src": "3711:254:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2172,
										"nodeType": "Block",
										"src": "4203:156:9",
										"statements": [
											{
												"assignments": [
													2158,
													2160
												],
												"declarations": [
													{
														"constant": false,
														"id": 2158,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2172,
														"src": "4214:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2157,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2160,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 2172,
														"src": "4228:23:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 2159,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2165,
												"initialValue": {
													"arguments": [
														{
															"id": 2163,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2152,
															"src": "4275:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 2161,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2150,
															"src": "4255:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 2162,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:9",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 2164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2167,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2150,
															"src": "4324:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2168,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2158,
															"src": "4332:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 2169,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2160,
															"src": "4341:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2166,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "4297:26:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 2170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 2156,
												"id": 2171,
												"nodeType": "Return",
												"src": "4290:62:9"
											}
										]
									},
									"documentation": {
										"id": 2148,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:9",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 2173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2150,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "4136:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2149,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "4152:17:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2151,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:9"
									},
									"returnParameters": {
										"id": 2156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "4189:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2154,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:9"
									},
									"scope": 2254,
									"src": "4106:253:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2212,
										"nodeType": "Block",
										"src": "4783:424:9",
										"statements": [
											{
												"condition": {
													"id": 2186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:9",
													"subExpression": {
														"id": 2185,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2178,
														"src": "4798:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2210,
													"nodeType": "Block",
													"src": "4857:344:9",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 2201,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2195,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 2192,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2180,
																			"src": "5045:10:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2193,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2194,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2200,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 2196,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2176,
																				"src": "5071:6:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 2197,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:9",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 2198,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:9",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 2199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2207,
															"nodeType": "IfStatement",
															"src": "5041:119:9",
															"trueBody": {
																"id": 2206,
																"nodeType": "Block",
																"src": "5096:64:9",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2203,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2176,
																					"src": "5138:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 2202,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2014,
																				"src": "5121:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 2204,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 2205,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:9"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 2208,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2180,
																"src": "5180:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2184,
															"id": 2209,
															"nodeType": "Return",
															"src": "5173:17:9"
														}
													]
												},
												"id": 2211,
												"nodeType": "IfStatement",
												"src": "4793:408:9",
												"trueBody": {
													"id": 2191,
													"nodeType": "Block",
													"src": "4807:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2188,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "4829:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2187,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2253,
																	"src": "4821:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2189,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2190,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2174,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:9",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 2213,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "4670:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2178,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "4694:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2177,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2180,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "4716:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2179,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:9"
									},
									"returnParameters": {
										"id": 2184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2213,
												"src": "4769:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2182,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:9"
									},
									"scope": 2254,
									"src": "4625:582:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2234,
										"nodeType": "Block",
										"src": "5509:122:9",
										"statements": [
											{
												"condition": {
													"id": 2224,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:9",
													"subExpression": {
														"id": 2223,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2216,
														"src": "5524:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2232,
													"nodeType": "Block",
													"src": "5583:42:9",
													"statements": [
														{
															"expression": {
																"id": 2230,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2218,
																"src": "5604:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 2222,
															"id": 2231,
															"nodeType": "Return",
															"src": "5597:17:9"
														}
													]
												},
												"id": 2233,
												"nodeType": "IfStatement",
												"src": "5519:106:9",
												"trueBody": {
													"id": 2229,
													"nodeType": "Block",
													"src": "5533:44:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2226,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2218,
																		"src": "5555:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 2225,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2253,
																	"src": "5547:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 2227,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2228,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2214,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:9",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 2235,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2216,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 2235,
												"src": "5433:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2215,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2218,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2235,
												"src": "5447:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2217,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:9"
									},
									"returnParameters": {
										"id": 2222,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2221,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2235,
												"src": "5495:12:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2220,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:9"
									},
									"scope": 2254,
									"src": "5407:224:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2252,
										"nodeType": "Block",
										"src": "5798:461:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2241,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2238,
															"src": "5874:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2242,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 2243,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2250,
													"nodeType": "Block",
													"src": "6204:49:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2247,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2017,
																	"src": "6225:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 2248,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2249,
															"nodeType": "RevertStatement",
															"src": "6218:24:9"
														}
													]
												},
												"id": 2251,
												"nodeType": "IfStatement",
												"src": "5870:383:9",
												"trueBody": {
													"id": 2246,
													"nodeType": "Block",
													"src": "5897:301:9",
													"statements": [
														{
															"AST": {
																"nativeSrc": "6055:133:9",
																"nodeType": "YulBlock",
																"src": "6055:133:9",
																"statements": [
																	{
																		"nativeSrc": "6073:40:9",
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:9",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nativeSrc": "6102:10:9",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:9"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "6096:5:9",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:9"
																			},
																			"nativeSrc": "6096:17:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:9"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nativeSrc": "6077:15:9",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:9",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "6141:2:9",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:9",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nativeSrc": "6145:10:9",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:9"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "6137:3:9",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:9"
																					},
																					"nativeSrc": "6137:19:9",
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:9"
																				},
																				{
																					"name": "returndata_size",
																					"nativeSrc": "6158:15:9",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:9"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "6130:6:9",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:9"
																			},
																			"nativeSrc": "6130:44:9",
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:9"
																		},
																		"nativeSrc": "6130:44:9",
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:9"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 2238,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:9",
																	"valueSize": 1
																},
																{
																	"declaration": 2238,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:9",
																	"valueSize": 1
																}
															],
															"id": 2245,
															"nodeType": "InlineAssembly",
															"src": "6046:142:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2236,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:9",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 2253,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2238,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 2253,
												"src": "5760:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2237,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:9"
									},
									"returnParameters": {
										"id": 2240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:9"
									},
									"scope": 2254,
									"src": "5743:516:9",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2255,
							"src": "195:6066:9",
							"usedErrors": [
								2009,
								2014,
								2017
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							2284
						]
					},
					"id": 2285,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2256,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2257,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 2284,
							"linearizedBaseContracts": [
								2284
							],
							"name": "Context",
							"nameLocation": "642:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2265,
										"nodeType": "Block",
										"src": "718:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2262,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2263,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2261,
												"id": 2264,
												"nodeType": "Return",
												"src": "728:17:10"
											}
										]
									},
									"id": 2266,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:10"
									},
									"returnParameters": {
										"id": 2261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2266,
												"src": "709:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2259,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:10"
									},
									"scope": 2284,
									"src": "656:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2274,
										"nodeType": "Block",
										"src": "825:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 2271,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 2272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:10",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 2270,
												"id": 2273,
												"nodeType": "Return",
												"src": "835:15:10"
											}
										]
									},
									"id": 2275,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:10"
									},
									"returnParameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2275,
												"src": "809:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2268,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:10"
									},
									"scope": 2284,
									"src": "758:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2282,
										"nodeType": "Block",
										"src": "935:25:10",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 2280,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 2279,
												"id": 2281,
												"nodeType": "Return",
												"src": "945:8:10"
											}
										]
									},
									"id": 2283,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2276,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:10"
									},
									"returnParameters": {
										"id": 2279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2278,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2283,
												"src": "926:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:10"
									},
									"scope": 2284,
									"src": "863:97:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2285,
							"src": "624:338:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3338
						]
					},
					"id": 3339,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2286,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2287,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:11",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3338,
							"linearizedBaseContracts": [
								3338
							],
							"name": "Math",
							"nameLocation": "211:4:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2288,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:11",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2290,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:11"
									},
									"src": "277:29:11"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2295,
									"members": [
										{
											"id": 2291,
											"name": "Floor",
											"nameLocation": "336:5:11",
											"nodeType": "EnumValue",
											"src": "336:5:11"
										},
										{
											"id": 2292,
											"name": "Ceil",
											"nameLocation": "379:4:11",
											"nodeType": "EnumValue",
											"src": "379:4:11"
										},
										{
											"id": 2293,
											"name": "Trunc",
											"nameLocation": "421:5:11",
											"nodeType": "EnumValue",
											"src": "421:5:11"
										},
										{
											"id": 2294,
											"name": "Expand",
											"nameLocation": "451:6:11",
											"nodeType": "EnumValue",
											"src": "451:6:11"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:11",
									"nodeType": "EnumDefinition",
									"src": "312:169:11"
								},
								{
									"body": {
										"id": 2326,
										"nodeType": "Block",
										"src": "661:140:11",
										"statements": [
											{
												"id": 2325,
												"nodeType": "UncheckedBlock",
												"src": "671:124:11",
												"statements": [
													{
														"assignments": [
															2308
														],
														"declarations": [
															{
																"constant": false,
																"id": 2308,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2325,
																"src": "695:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2307,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2312,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2311,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2309,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2298,
																"src": "707:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2310,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2300,
																"src": "711:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2315,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2313,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2308,
																"src": "730:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2314,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2298,
																"src": "734:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2320,
														"nodeType": "IfStatement",
														"src": "726:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2318,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2306,
															"id": 2319,
															"nodeType": "Return",
															"src": "737:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2321,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2322,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2308,
																	"src": "782:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2323,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2306,
														"id": 2324,
														"nodeType": "Return",
														"src": "768:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2296,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:11",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2298,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2300,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "612:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:11"
									},
									"returnParameters": {
										"id": 2306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2303,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "646:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2302,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2305,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2327,
												"src": "652:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:11"
									},
									"scope": 3338,
									"src": "585:216:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2354,
										"nodeType": "Block",
										"src": "984:113:11",
										"statements": [
											{
												"id": 2353,
												"nodeType": "UncheckedBlock",
												"src": "994:97:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2339,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2332,
																"src": "1022:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2340,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2330,
																"src": "1026:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2346,
														"nodeType": "IfStatement",
														"src": "1018:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2342,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2343,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2344,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2338,
															"id": 2345,
															"nodeType": "Return",
															"src": "1029:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2347,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2348,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2330,
																		"src": "1074:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2349,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2332,
																		"src": "1078:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2351,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2338,
														"id": 2352,
														"nodeType": "Return",
														"src": "1060:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2328,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:11",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2330,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "924:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2332,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "935:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:11"
									},
									"returnParameters": {
										"id": 2338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "969:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2334,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2337,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2355,
												"src": "975:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2336,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:11"
									},
									"scope": 3338,
									"src": "908:189:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2396,
										"nodeType": "Block",
										"src": "1283:417:11",
										"statements": [
											{
												"id": 2395,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2367,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "1551:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2368,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2374,
														"nodeType": "IfStatement",
														"src": "1547:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2370,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2371,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2372,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2366,
															"id": 2373,
															"nodeType": "Return",
															"src": "1559:16:11"
														}
													},
													{
														"assignments": [
															2376
														],
														"declarations": [
															{
																"constant": false,
																"id": 2376,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2395,
																"src": "1589:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2375,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2380,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2379,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2377,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "1601:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2378,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "1605:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2383,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2381,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2376,
																	"src": "1624:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2382,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2358,
																	"src": "1628:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2384,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "1633:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2390,
														"nodeType": "IfStatement",
														"src": "1620:33:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2386,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2387,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2388,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2366,
															"id": 2389,
															"nodeType": "Return",
															"src": "1636:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2391,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2392,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2376,
																	"src": "1681:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2393,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2366,
														"id": 2394,
														"nodeType": "Return",
														"src": "1667:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2356,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:11",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "1223:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "1234:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2359,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:11"
									},
									"returnParameters": {
										"id": 2366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "1268:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2362,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2397,
												"src": "1274:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:11"
									},
									"scope": 3338,
									"src": "1207:493:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2424,
										"nodeType": "Block",
										"src": "1887:114:11",
										"statements": [
											{
												"id": 2423,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2409,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2402,
																"src": "1925:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2410,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2416,
														"nodeType": "IfStatement",
														"src": "1921:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2413,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2414,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2408,
															"id": 2415,
															"nodeType": "Return",
															"src": "1933:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2417,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2418,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2400,
																		"src": "1978:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2419,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2402,
																		"src": "1982:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2421,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2408,
														"id": 2422,
														"nodeType": "Return",
														"src": "1964:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2398,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:11",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2400,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2425,
												"src": "1827:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2402,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2425,
												"src": "1838:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2401,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:11"
									},
									"returnParameters": {
										"id": 2408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2425,
												"src": "1872:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2404,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2407,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2425,
												"src": "1878:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:11"
									},
									"scope": 3338,
									"src": "1811:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2452,
										"nodeType": "Block",
										"src": "2198:114:11",
										"statements": [
											{
												"id": 2451,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2437,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2430,
																"src": "2236:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2438,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2444,
														"nodeType": "IfStatement",
														"src": "2232:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2441,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2442,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2436,
															"id": 2443,
															"nodeType": "Return",
															"src": "2244:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2448,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2446,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2428,
																		"src": "2289:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2447,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2430,
																		"src": "2293:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2449,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2436,
														"id": 2450,
														"nodeType": "Return",
														"src": "2275:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2426,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:11",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2453,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2428,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "2138:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2430,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "2149:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:11"
									},
									"returnParameters": {
										"id": 2436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "2183:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2432,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2453,
												"src": "2189:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:11"
									},
									"scope": 3338,
									"src": "2122:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2470,
										"nodeType": "Block",
										"src": "2449:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2463,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2456,
															"src": "2466:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2464,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2458,
															"src": "2470:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2467,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2458,
														"src": "2478:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:11",
													"trueExpression": {
														"id": 2466,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2456,
														"src": "2474:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2462,
												"id": 2469,
												"nodeType": "Return",
												"src": "2459:20:11"
											}
										]
									},
									"documentation": {
										"id": 2454,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:11",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2471,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2456,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2471,
												"src": "2395:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2458,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2471,
												"src": "2406:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:11"
									},
									"returnParameters": {
										"id": 2462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2471,
												"src": "2440:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:11"
									},
									"scope": 3338,
									"src": "2382:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2488,
										"nodeType": "Block",
										"src": "2624:37:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2483,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2481,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2474,
															"src": "2641:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2482,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2476,
															"src": "2645:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2485,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2476,
														"src": "2653:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:11",
													"trueExpression": {
														"id": 2484,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2474,
														"src": "2649:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2480,
												"id": 2487,
												"nodeType": "Return",
												"src": "2634:20:11"
											}
										]
									},
									"documentation": {
										"id": 2472,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:11",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2474,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "2570:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2473,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2476,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "2581:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:11"
									},
									"returnParameters": {
										"id": 2480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2479,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "2615:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:11"
									},
									"scope": 3338,
									"src": "2557:104:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2511,
										"nodeType": "Block",
										"src": "2845:82:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2501,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2499,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "2900:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2500,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2494,
																	"src": "2904:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2502,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2508,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2503,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2492,
																		"src": "2910:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2504,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2494,
																		"src": "2914:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2506,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2507,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2498,
												"id": 2510,
												"nodeType": "Return",
												"src": "2892:28:11"
											}
										]
									},
									"documentation": {
										"id": 2490,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:11",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2512,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2492,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "2791:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2494,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "2802:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:11"
									},
									"returnParameters": {
										"id": 2498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2497,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2512,
												"src": "2836:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:11"
									},
									"scope": 3338,
									"src": "2774:153:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2545,
										"nodeType": "Block",
										"src": "3219:260:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2522,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2517,
														"src": "3233:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2523,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2530,
												"nodeType": "IfStatement",
												"src": "3229:127:11",
												"trueBody": {
													"id": 2529,
													"nodeType": "Block",
													"src": "3241:115:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2527,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2525,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2515,
																	"src": "3340:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2526,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2517,
																	"src": "3344:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2521,
															"id": 2528,
															"nodeType": "Return",
															"src": "3333:12:11"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2533,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2531,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2515,
															"src": "3444:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2532,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2542,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2540,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2537,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2535,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2515,
																			"src": "3458:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2536,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2538,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2539,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2517,
																"src": "3467:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:11",
													"trueExpression": {
														"hexValue": "30",
														"id": 2534,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2521,
												"id": 2544,
												"nodeType": "Return",
												"src": "3437:35:11"
											}
										]
									},
									"documentation": {
										"id": 2513,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:11",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2518,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2515,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2546,
												"src": "3165:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2514,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2517,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2546,
												"src": "3176:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:11"
									},
									"returnParameters": {
										"id": 2521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2520,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2546,
												"src": "3210:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2519,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:11"
									},
									"scope": 3338,
									"src": "3148:331:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2671,
										"nodeType": "Block",
										"src": "3901:4018:11",
										"statements": [
											{
												"id": 2670,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:11",
												"statements": [
													{
														"assignments": [
															2559
														],
														"declarations": [
															{
																"constant": false,
																"id": 2559,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2670,
																"src": "4232:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2558,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2563,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2562,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2560,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2549,
																"src": "4248:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2561,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2551,
																"src": "4252:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:11"
													},
													{
														"assignments": [
															2565
														],
														"declarations": [
															{
																"constant": false,
																"id": 2565,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2670,
																"src": "4312:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2564,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2566,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:11"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:11",
															"nodeType": "YulBlock",
															"src": "4392:122:11",
															"statements": [
																{
																	"nativeSrc": "4410:30:11",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:11",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:11"
																				},
																				"nativeSrc": "4433:6:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:11"
																		},
																		"nativeSrc": "4420:20:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:11"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:11",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:11",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:11"
																				},
																				"nativeSrc": "4470:14:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:11",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:11"
																				},
																				"nativeSrc": "4486:13:11",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:11"
																		},
																		"nativeSrc": "4466:34:11",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2565,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2549,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2551,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:11",
																"valueSize": 1
															}
														],
														"id": 2567,
														"nodeType": "InlineAssembly",
														"src": "4383:131:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2568,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2565,
																"src": "4595:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2569,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2576,
														"nodeType": "IfStatement",
														"src": "4591:368:11",
														"trueBody": {
															"id": 2575,
															"nodeType": "Block",
															"src": "4607:352:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2571,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2559,
																			"src": "4925:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2572,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2553,
																			"src": "4933:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2557,
																	"id": 2574,
																	"nodeType": "Return",
																	"src": "4918:26:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2577,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2553,
																"src": "5065:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2578,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2565,
																"src": "5080:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2584,
														"nodeType": "IfStatement",
														"src": "5061:88:11",
														"trueBody": {
															"id": 2583,
															"nodeType": "Block",
															"src": "5087:62:11",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2580,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2290,
																			"src": "5112:20:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2581,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2582,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:11"
																}
															]
														}
													},
													{
														"assignments": [
															2586
														],
														"declarations": [
															{
																"constant": false,
																"id": 2586,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:11",
																"nodeType": "VariableDeclaration",
																"scope": 2670,
																"src": "5404:17:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2585,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2587,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:11"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:11",
															"nodeType": "YulBlock",
															"src": "5444:291:11",
															"statements": [
																{
																	"nativeSrc": "5513:38:11",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:11"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:11",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:11"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:11",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:11"
																		},
																		"nativeSrc": "5526:25:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:11"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:11",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:11",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:11",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:11"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:11",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:11"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:11",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:11"
																				},
																				"nativeSrc": "5653:20:11",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:11"
																		},
																		"nativeSrc": "5642:32:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:11",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:11"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:11",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:11"
																		},
																		"nativeSrc": "5700:21:11",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2553,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2565,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2565,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2586,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2586,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2586,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2549,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2551,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:11",
																"valueSize": 1
															}
														],
														"id": 2588,
														"nodeType": "InlineAssembly",
														"src": "5435:300:11"
													},
													{
														"assignments": [
															2590
														],
														"declarations": [
															{
																"constant": false,
																"id": 2590,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:11",
																"nodeType": "VariableDeclaration",
																"scope": 2670,
																"src": "5939:12:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2589,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2597,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2596,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2591,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2553,
																"src": "5954:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2594,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2592,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2593,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2553,
																			"src": "5973:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2595,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:11"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:11",
															"nodeType": "YulBlock",
															"src": "6008:362:11",
															"statements": [
																{
																	"nativeSrc": "6073:37:11",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:11",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:11"
																		},
																		"nativeSrc": "6088:22:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:11"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:11",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:11",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:11",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:11"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:11",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:11"
																		},
																		"nativeSrc": "6186:16:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:11",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:11"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:11",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:11",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:11",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:11",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:11"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:11",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:11"
																						},
																						"nativeSrc": "6333:12:11",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:11"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:11",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:11",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:11"
																				},
																				"nativeSrc": "6329:23:11",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:11",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:11"
																		},
																		"nativeSrc": "6325:31:11",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:11"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:11",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2553,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2553,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2559,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2590,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2590,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2590,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2590,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2590,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:11",
																"valueSize": 1
															}
														],
														"id": 2598,
														"nodeType": "InlineAssembly",
														"src": "5999:371:11"
													},
													{
														"expression": {
															"id": 2603,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2599,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2559,
																"src": "6436:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2600,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2565,
																	"src": "6445:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2601,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2590,
																	"src": "6453:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2604,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:11"
													},
													{
														"assignments": [
															2606
														],
														"declarations": [
															{
																"constant": false,
																"id": 2606,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:11",
																"nodeType": "VariableDeclaration",
																"scope": 2670,
																"src": "6775:15:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2605,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2613,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2609,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2607,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2608,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2553,
																			"src": "6798:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2610,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:11"
													},
													{
														"expression": {
															"id": 2620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2614,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7031:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2619,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2618,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2616,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7046:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2617,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7060:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2621,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:11"
													},
													{
														"expression": {
															"id": 2628,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2622,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7100:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2624,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7115:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2625,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7129:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2629,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:11"
													},
													{
														"expression": {
															"id": 2636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2630,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7170:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2635,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2631,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2634,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2632,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7185:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2633,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7199:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2637,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:11"
													},
													{
														"expression": {
															"id": 2644,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2638,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7240:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2643,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2639,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2642,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2640,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7255:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2641,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7269:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2645,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:11"
													},
													{
														"expression": {
															"id": 2652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2646,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7310:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2651,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2647,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2650,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2648,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7325:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2649,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7339:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2653,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:11"
													},
													{
														"expression": {
															"id": 2660,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2654,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2606,
																"src": "7381:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2659,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2655,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2658,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2656,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2553,
																		"src": "7396:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2657,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2606,
																		"src": "7410:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2661,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:11"
													},
													{
														"expression": {
															"id": 2666,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2662,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2556,
																"src": "7851:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2665,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2663,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2559,
																	"src": "7860:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2664,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2606,
																	"src": "7868:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2667,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:11"
													},
													{
														"expression": {
															"id": 2668,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2556,
															"src": "7896:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2557,
														"id": 2669,
														"nodeType": "Return",
														"src": "7889:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2547,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:11",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2672,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2549,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "3819:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2548,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2551,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "3830:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2550,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2553,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "3841:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:11"
									},
									"returnParameters": {
										"id": 2557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2556,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2672,
												"src": "3885:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:11"
									},
									"scope": 3338,
									"src": "3803:4116:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2714,
										"nodeType": "Block",
										"src": "8161:192:11",
										"statements": [
											{
												"assignments": [
													2688
												],
												"declarations": [
													{
														"constant": false,
														"id": 2688,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2714,
														"src": "8171:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2687,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2694,
												"initialValue": {
													"arguments": [
														{
															"id": 2690,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2675,
															"src": "8195:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2691,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2677,
															"src": "8198:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2692,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2679,
															"src": "8201:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2689,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2672,
															2715
														],
														"referencedDeclaration": 2672,
														"src": "8188:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2696,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2682,
																"src": "8244:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2295",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2295",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2695,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3337,
															"src": "8227:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2295_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2697,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2699,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2675,
																	"src": "8264:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2700,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2677,
																	"src": "8267:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2701,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2679,
																	"src": "8270:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2698,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2702,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2711,
												"nodeType": "IfStatement",
												"src": "8223:101:11",
												"trueBody": {
													"id": 2710,
													"nodeType": "Block",
													"src": "8288:36:11",
													"statements": [
														{
															"expression": {
																"id": 2708,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2706,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2688,
																	"src": "8302:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2709,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2712,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2688,
													"src": "8340:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2686,
												"id": 2713,
												"nodeType": "Return",
												"src": "8333:13:11"
											}
										]
									},
									"documentation": {
										"id": 2673,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:11",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2675,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "8067:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2674,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2677,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "8078:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2676,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2679,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "8089:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2678,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2682,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "8110:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2681,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2680,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "8110:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "8110:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:11"
									},
									"returnParameters": {
										"id": 2686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "8152:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:11"
									},
									"scope": 3338,
									"src": "8051:302:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2826,
										"nodeType": "Block",
										"src": "8644:1585:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2725,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2723,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2718,
														"src": "8658:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2724,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2729,
												"nodeType": "IfStatement",
												"src": "8654:45:11",
												"trueBody": {
													"id": 2728,
													"nodeType": "Block",
													"src": "8666:33:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2726,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2722,
															"id": 2727,
															"nodeType": "Return",
															"src": "8680:8:11"
														}
													]
												}
											},
											{
												"assignments": [
													2731
												],
												"declarations": [
													{
														"constant": false,
														"id": 2731,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2826,
														"src": "9378:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2730,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2740,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2739,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2732,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2737,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2734,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2718,
																			"src": "9406:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2733,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2994,
																			3029
																		],
																		"referencedDeclaration": 2994,
																		"src": "9401:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2735,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2736,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2738,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:11"
											},
											{
												"id": 2825,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:11",
												"statements": [
													{
														"expression": {
															"id": 2750,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2741,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "9839:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2749,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2746,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2742,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "9849:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2745,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2743,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "9858:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2744,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "9862:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2747,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2748,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2751,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:11"
													},
													{
														"expression": {
															"id": 2761,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2752,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "9888:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2760,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2757,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2753,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "9898:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2756,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2754,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "9907:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2755,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "9911:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2758,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2759,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2762,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:11"
													},
													{
														"expression": {
															"id": 2772,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2763,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "9937:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2771,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2768,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2764,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "9947:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2767,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2765,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "9956:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2766,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "9960:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2769,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2770,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2773,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:11"
													},
													{
														"expression": {
															"id": 2783,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2774,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "9986:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2782,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2779,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2775,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "9996:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2778,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2776,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "10005:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2777,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "10009:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2780,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2784,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:11"
													},
													{
														"expression": {
															"id": 2794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2785,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "10035:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2790,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2786,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "10045:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2789,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2787,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "10054:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2788,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "10058:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2791,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2792,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2795,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:11"
													},
													{
														"expression": {
															"id": 2805,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2796,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "10084:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2804,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2801,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2797,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "10094:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2800,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2798,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "10103:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2799,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "10107:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2802,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2806,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:11"
													},
													{
														"expression": {
															"id": 2816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2807,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2731,
																"src": "10133:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2815,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2808,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2731,
																				"src": "10143:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2811,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2809,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2718,
																					"src": "10152:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2810,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2731,
																					"src": "10156:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2813,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2817,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:11"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2819,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2731,
																	"src": "10193:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2822,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2820,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2718,
																		"src": "10201:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2821,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2731,
																		"src": "10205:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2818,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2489,
																"src": "10189:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2722,
														"id": 2824,
														"nodeType": "Return",
														"src": "10182:30:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2716,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:11",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2827,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2827,
												"src": "8601:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:11"
									},
									"returnParameters": {
										"id": 2722,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2721,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2827,
												"src": "8635:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2720,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:11"
									},
									"scope": 3338,
									"src": "8587:1642:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2861,
										"nodeType": "Block",
										"src": "10405:164:11",
										"statements": [
											{
												"id": 2860,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:11",
												"statements": [
													{
														"assignments": [
															2839
														],
														"declarations": [
															{
																"constant": false,
																"id": 2839,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2860,
																"src": "10439:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2838,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2843,
														"initialValue": {
															"arguments": [
																{
																	"id": 2841,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2830,
																	"src": "10461:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2840,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2827,
																	2862
																],
																"referencedDeclaration": 2827,
																"src": "10456:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2844,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2839,
																"src": "10484:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2853,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2846,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2833,
																						"src": "10511:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2845,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3337,
																					"src": "10494:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2295_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2847,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2852,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2850,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2848,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2839,
																						"src": "10524:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2849,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2839,
																						"src": "10533:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2851,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2830,
																					"src": "10542:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2855,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2854,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2857,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2837,
														"id": 2859,
														"nodeType": "Return",
														"src": "10477:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2828,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:11",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2862,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2834,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2830,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "10343:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2833,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "10354:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2832,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2831,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "10354:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "10354:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:11"
									},
									"returnParameters": {
										"id": 2837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2836,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2862,
												"src": "10396:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:11"
									},
									"scope": 3338,
									"src": "10329:240:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2993,
										"nodeType": "Block",
										"src": "10760:922:11",
										"statements": [
											{
												"assignments": [
													2871
												],
												"declarations": [
													{
														"constant": false,
														"id": 2871,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2993,
														"src": "10770:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2870,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2873,
												"initialValue": {
													"hexValue": "30",
													"id": 2872,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:11"
											},
											{
												"id": 2990,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2878,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2876,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2874,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "10826:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2875,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2888,
														"nodeType": "IfStatement",
														"src": "10822:99:11",
														"trueBody": {
															"id": 2887,
															"nodeType": "Block",
															"src": "10844:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2881,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2879,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "10862:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2880,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2882,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:11"
																},
																{
																	"expression": {
																		"id": 2885,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2883,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "10893:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2884,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2886,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2891,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2889,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "10938:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2890,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2892,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2903,
														"nodeType": "IfStatement",
														"src": "10934:96:11",
														"trueBody": {
															"id": 2902,
															"nodeType": "Block",
															"src": "10955:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2896,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2894,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "10973:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2895,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2897,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:11"
																},
																{
																	"expression": {
																		"id": 2900,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2898,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11003:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2899,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2901,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2906,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2904,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11047:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2905,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2918,
														"nodeType": "IfStatement",
														"src": "11043:96:11",
														"trueBody": {
															"id": 2917,
															"nodeType": "Block",
															"src": "11064:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2909,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "11082:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2912,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:11"
																},
																{
																	"expression": {
																		"id": 2915,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2913,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11112:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2914,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2916,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2923,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2921,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2919,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11156:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2920,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2922,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2933,
														"nodeType": "IfStatement",
														"src": "11152:96:11",
														"trueBody": {
															"id": 2932,
															"nodeType": "Block",
															"src": "11173:75:11",
															"statements": [
																{
																	"expression": {
																		"id": 2926,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2924,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "11191:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2925,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2927,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:11"
																},
																{
																	"expression": {
																		"id": 2930,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2928,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11221:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2929,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2931,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2936,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2934,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11265:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2948,
														"nodeType": "IfStatement",
														"src": "11261:93:11",
														"trueBody": {
															"id": 2947,
															"nodeType": "Block",
															"src": "11281:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2939,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "11299:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2940,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2942,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:11"
																},
																{
																	"expression": {
																		"id": 2945,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2943,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11328:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2944,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2946,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2949,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11371:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2950,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2952,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2963,
														"nodeType": "IfStatement",
														"src": "11367:93:11",
														"trueBody": {
															"id": 2962,
															"nodeType": "Block",
															"src": "11387:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2956,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2954,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "11405:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2955,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2957,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:11"
																},
																{
																	"expression": {
																		"id": 2960,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2958,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11434:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2959,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2961,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2966,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2964,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11477:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2965,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2967,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2978,
														"nodeType": "IfStatement",
														"src": "11473:93:11",
														"trueBody": {
															"id": 2977,
															"nodeType": "Block",
															"src": "11493:73:11",
															"statements": [
																{
																	"expression": {
																		"id": 2971,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2969,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2865,
																			"src": "11511:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2970,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2972,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:11"
																},
																{
																	"expression": {
																		"id": 2975,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2973,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11540:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2974,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2976,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2981,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2979,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2865,
																	"src": "11583:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2980,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2982,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2989,
														"nodeType": "IfStatement",
														"src": "11579:64:11",
														"trueBody": {
															"id": 2988,
															"nodeType": "Block",
															"src": "11599:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 2986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2984,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2871,
																			"src": "11617:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2985,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2987,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2991,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2871,
													"src": "11669:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2869,
												"id": 2992,
												"nodeType": "Return",
												"src": "11662:13:11"
											}
										]
									},
									"documentation": {
										"id": 2863,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:11",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2994,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2866,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2865,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2994,
												"src": "10713:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2864,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:11"
									},
									"returnParameters": {
										"id": 2869,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2868,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2994,
												"src": "10751:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2867,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:11"
									},
									"scope": 3338,
									"src": "10699:983:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3028,
										"nodeType": "Block",
										"src": "11915:168:11",
										"statements": [
											{
												"id": 3027,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:11",
												"statements": [
													{
														"assignments": [
															3006
														],
														"declarations": [
															{
																"constant": false,
																"id": 3006,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3027,
																"src": "11949:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3005,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3010,
														"initialValue": {
															"arguments": [
																{
																	"id": 3008,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2997,
																	"src": "11971:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3007,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2994,
																	3029
																],
																"referencedDeclaration": 2994,
																"src": "11966:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3009,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3011,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3006,
																"src": "11998:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3020,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3013,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3000,
																						"src": "12025:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3012,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3337,
																					"src": "12008:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2295_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3014,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3019,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3017,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3015,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3016,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3006,
																						"src": "12043:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3018,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2997,
																					"src": "12052:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3023,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3024,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3004,
														"id": 3026,
														"nodeType": "Return",
														"src": "11991:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2995,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:11",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3029,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3001,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2997,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3029,
												"src": "11849:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3000,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3029,
												"src": "11864:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2999,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2998,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "11864:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "11864:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:11"
									},
									"returnParameters": {
										"id": 3004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3003,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3029,
												"src": "11906:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:11"
									},
									"scope": 3338,
									"src": "11835:248:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3157,
										"nodeType": "Block",
										"src": "12276:854:11",
										"statements": [
											{
												"assignments": [
													3038
												],
												"declarations": [
													{
														"constant": false,
														"id": 3038,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3157,
														"src": "12286:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3037,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3040,
												"initialValue": {
													"hexValue": "30",
													"id": 3039,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:11"
											},
											{
												"id": 3154,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3045,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3041,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12342:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3044,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3042,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3043,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3057,
														"nodeType": "IfStatement",
														"src": "12338:103:11",
														"trueBody": {
															"id": 3056,
															"nodeType": "Block",
															"src": "12361:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3050,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3046,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12379:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3049,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3047,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3048,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3051,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:11"
																},
																{
																	"expression": {
																		"id": 3054,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3052,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12414:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3053,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3055,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3058,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12458:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3061,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3059,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3060,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3074,
														"nodeType": "IfStatement",
														"src": "12454:103:11",
														"trueBody": {
															"id": 3073,
															"nodeType": "Block",
															"src": "12477:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3063,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12495:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3066,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3064,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3065,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3068,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:11"
																},
																{
																	"expression": {
																		"id": 3071,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3069,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12530:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3070,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3072,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3079,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3075,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12574:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3078,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3076,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3077,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3091,
														"nodeType": "IfStatement",
														"src": "12570:103:11",
														"trueBody": {
															"id": 3090,
															"nodeType": "Block",
															"src": "12593:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 3084,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3080,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12611:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3083,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3081,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3082,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3085,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:11"
																},
																{
																	"expression": {
																		"id": 3088,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3086,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12646:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3087,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3089,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3096,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3092,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12690:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3095,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3093,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3094,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3108,
														"nodeType": "IfStatement",
														"src": "12686:100:11",
														"trueBody": {
															"id": 3107,
															"nodeType": "Block",
															"src": "12708:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3101,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3097,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12726:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3100,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3098,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3099,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3102,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:11"
																},
																{
																	"expression": {
																		"id": 3105,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3103,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12760:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3106,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3113,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3109,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12803:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3112,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3110,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3111,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3125,
														"nodeType": "IfStatement",
														"src": "12799:100:11",
														"trueBody": {
															"id": 3124,
															"nodeType": "Block",
															"src": "12821:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3118,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3114,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12839:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3116,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3119,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:11"
																},
																{
																	"expression": {
																		"id": 3122,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3120,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12873:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3121,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3123,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3130,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3126,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "12916:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3142,
														"nodeType": "IfStatement",
														"src": "12912:100:11",
														"trueBody": {
															"id": 3141,
															"nodeType": "Block",
															"src": "12934:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 3135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3131,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3032,
																			"src": "12952:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3132,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3133,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3136,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:11"
																},
																{
																	"expression": {
																		"id": 3139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3137,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "12986:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3140,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3143,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3032,
																"src": "13029:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3145,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3153,
														"nodeType": "IfStatement",
														"src": "13025:66:11",
														"trueBody": {
															"id": 3152,
															"nodeType": "Block",
															"src": "13047:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3148,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3038,
																			"src": "13065:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3151,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3155,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3038,
													"src": "13117:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3036,
												"id": 3156,
												"nodeType": "Return",
												"src": "13110:13:11"
											}
										]
									},
									"documentation": {
										"id": 3030,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:11",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3158,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3032,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3158,
												"src": "12229:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:11"
									},
									"returnParameters": {
										"id": 3036,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3035,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3158,
												"src": "12267:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:11"
									},
									"scope": 3338,
									"src": "12214:916:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3192,
										"nodeType": "Block",
										"src": "13365:170:11",
										"statements": [
											{
												"id": 3191,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:11",
												"statements": [
													{
														"assignments": [
															3170
														],
														"declarations": [
															{
																"constant": false,
																"id": 3170,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3191,
																"src": "13399:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3169,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3174,
														"initialValue": {
															"arguments": [
																{
																	"id": 3172,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3161,
																	"src": "13422:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3171,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3158,
																	3193
																],
																"referencedDeclaration": 3158,
																"src": "13416:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3173,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3175,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3170,
																"src": "13449:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3177,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3164,
																						"src": "13476:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3176,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3337,
																					"src": "13459:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2295_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3178,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3183,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3181,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3179,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3180,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3170,
																						"src": "13495:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3182,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3161,
																					"src": "13504:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3186,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3187,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3188,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3168,
														"id": 3190,
														"nodeType": "Return",
														"src": "13442:76:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3159,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3161,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3193,
												"src": "13299:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3164,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3193,
												"src": "13314:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3163,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3162,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "13314:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "13314:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:11"
									},
									"returnParameters": {
										"id": 3168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3167,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3193,
												"src": "13356:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:11"
									},
									"scope": 3338,
									"src": "13284:251:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3279,
										"nodeType": "Block",
										"src": "13855:600:11",
										"statements": [
											{
												"assignments": [
													3202
												],
												"declarations": [
													{
														"constant": false,
														"id": 3202,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 3279,
														"src": "13865:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3201,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3204,
												"initialValue": {
													"hexValue": "30",
													"id": 3203,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:11"
											},
											{
												"id": 3276,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3209,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3207,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3205,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3196,
																	"src": "13921:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3208,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3219,
														"nodeType": "IfStatement",
														"src": "13917:98:11",
														"trueBody": {
															"id": 3218,
															"nodeType": "Block",
															"src": "13939:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 3212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3210,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3196,
																			"src": "13957:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3211,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3213,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:11"
																},
																{
																	"expression": {
																		"id": 3216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3214,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3202,
																			"src": "13988:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3215,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3217,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3224,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3222,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3220,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3196,
																	"src": "14032:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3221,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3223,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3234,
														"nodeType": "IfStatement",
														"src": "14028:95:11",
														"trueBody": {
															"id": 3233,
															"nodeType": "Block",
															"src": "14049:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3227,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3225,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3196,
																			"src": "14067:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3226,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3228,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:11"
																},
																{
																	"expression": {
																		"id": 3231,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3229,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3202,
																			"src": "14097:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3232,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3237,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3235,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3196,
																	"src": "14140:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3236,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3249,
														"nodeType": "IfStatement",
														"src": "14136:95:11",
														"trueBody": {
															"id": 3248,
															"nodeType": "Block",
															"src": "14157:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3240,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3196,
																			"src": "14175:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3241,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3243,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:11"
																},
																{
																	"expression": {
																		"id": 3246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3244,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3202,
																			"src": "14205:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3245,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3247,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3252,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3250,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3196,
																	"src": "14248:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3264,
														"nodeType": "IfStatement",
														"src": "14244:95:11",
														"trueBody": {
															"id": 3263,
															"nodeType": "Block",
															"src": "14265:74:11",
															"statements": [
																{
																	"expression": {
																		"id": 3257,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3255,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3196,
																			"src": "14283:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3258,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:11"
																},
																{
																	"expression": {
																		"id": 3261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3259,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3202,
																			"src": "14313:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3260,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3262,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3269,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3265,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3196,
																	"src": "14356:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3275,
														"nodeType": "IfStatement",
														"src": "14352:64:11",
														"trueBody": {
															"id": 3274,
															"nodeType": "Block",
															"src": "14372:44:11",
															"statements": [
																{
																	"expression": {
																		"id": 3272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3270,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3202,
																			"src": "14390:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3271,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3273,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3277,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3202,
													"src": "14442:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3200,
												"id": 3278,
												"nodeType": "Return",
												"src": "14435:13:11"
											}
										]
									},
									"documentation": {
										"id": 3194,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:11",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3196,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "13808:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:11"
									},
									"returnParameters": {
										"id": 3200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3280,
												"src": "13846:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:11"
									},
									"scope": 3338,
									"src": "13792:663:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3317,
										"nodeType": "Block",
										"src": "14692:177:11",
										"statements": [
											{
												"id": 3316,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:11",
												"statements": [
													{
														"assignments": [
															3292
														],
														"declarations": [
															{
																"constant": false,
																"id": 3292,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 3316,
																"src": "14726:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3291,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3296,
														"initialValue": {
															"arguments": [
																{
																	"id": 3294,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3283,
																	"src": "14750:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3293,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3280,
																	3318
																],
																"referencedDeclaration": 3280,
																"src": "14743:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3314,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3297,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3292,
																"src": "14777:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3299,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3286,
																						"src": "14804:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2295",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3298,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3337,
																					"src": "14787:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2295_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3300,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3308,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3306,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3301,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3304,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3302,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3292,
																									"src": "14823:6:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3303,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3305,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3307,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3283,
																					"src": "14838:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3311,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3312,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3310,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3313,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3290,
														"id": 3315,
														"nodeType": "Return",
														"src": "14770:82:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3281,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:11",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3318,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3287,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3283,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 3318,
												"src": "14626:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3282,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3286,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3318,
												"src": "14641:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3285,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3284,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "14641:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "14641:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:11"
									},
									"returnParameters": {
										"id": 3290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3289,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3318,
												"src": "14683:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:11"
									},
									"scope": 3338,
									"src": "14610:259:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3336,
										"nodeType": "Block",
										"src": "15067:48:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3332,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3329,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3322,
																	"src": "15090:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2295",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2295",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3328,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3327,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 3330,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3331,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3333,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3326,
												"id": 3335,
												"nodeType": "Return",
												"src": "15077:31:11"
											}
										]
									},
									"documentation": {
										"id": 3319,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:11",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3322,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 3337,
												"src": "15019:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2295",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3321,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3320,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2295,
														"src": "15019:8:11"
													},
													"referencedDeclaration": 2295,
													"src": "15019:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2295",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:11"
									},
									"returnParameters": {
										"id": 3326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3325,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3337,
												"src": "15061:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3324,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:11"
									},
									"scope": 3338,
									"src": "14993:122:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3339,
							"src": "203:14914:11",
							"usedErrors": [
								2290
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:11"
				},
				"id": 11
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IAllowanceTransfer.sol",
					"exportedSymbols": {
						"IAllowanceTransfer": [
							3550
						],
						"IEIP712": [
							3558
						]
					},
					"id": 3551,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3340,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:12"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
							"file": "./IEIP712.sol",
							"id": 3342,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3551,
							"sourceUnit": 3559,
							"src": "57:38:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3341,
										"name": "IEIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3558,
										"src": "65:7:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3344,
										"name": "IEIP712",
										"nameLocations": [
											"362:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3558,
										"src": "362:7:12"
									},
									"id": 3345,
									"nodeType": "InheritanceSpecifier",
									"src": "362:7:12"
								}
							],
							"canonicalName": "IAllowanceTransfer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3343,
								"nodeType": "StructuredDocumentation",
								"src": "97:233:12",
								"text": "@title AllowanceTransfer\n @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n @dev Requires user's token approval on the Permit2 contract"
							},
							"fullyImplemented": false,
							"id": 3550,
							"linearizedBaseContracts": [
								3550,
								3558
							],
							"name": "IAllowanceTransfer",
							"nameLocation": "340:18:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3346,
										"nodeType": "StructuredDocumentation",
										"src": "376:145:12",
										"text": "@notice Thrown when an allowance on a token has expired.\n @param deadline The timestamp at which the allowed amount is no longer valid"
									},
									"errorSelector": "d81b2f2e",
									"id": 3350,
									"name": "AllowanceExpired",
									"nameLocation": "532:16:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3348,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "557:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3350,
												"src": "549:16:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:18:12"
									},
									"src": "526:41:12"
								},
								{
									"documentation": {
										"id": 3351,
										"nodeType": "StructuredDocumentation",
										"src": "573:115:12",
										"text": "@notice Thrown when an allowance on a token has been depleted.\n @param amount The maximum amount allowed"
									},
									"errorSelector": "f96fb071",
									"id": 3355,
									"name": "InsufficientAllowance",
									"nameLocation": "699:21:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3353,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "729:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3355,
												"src": "721:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "721:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "720:16:12"
									},
									"src": "693:44:12"
								},
								{
									"documentation": {
										"id": 3356,
										"nodeType": "StructuredDocumentation",
										"src": "743:56:12",
										"text": "@notice Thrown when too many nonces are invalidated."
									},
									"errorSelector": "24d35a26",
									"id": 3358,
									"name": "ExcessiveInvalidation",
									"nameLocation": "810:21:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3357,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "831:2:12"
									},
									"src": "804:30:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3359,
										"nodeType": "StructuredDocumentation",
										"src": "840:84:12",
										"text": "@notice Emits an event when the owner successfully invalidates an ordered nonce."
									},
									"eventSelector": "55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f3",
									"id": 3371,
									"name": "NonceInvalidation",
									"nameLocation": "935:17:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3361,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "978:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "962:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3360,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3363,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1001:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "985:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3362,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3365,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1024:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "1008:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3364,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3367,
												"indexed": false,
												"mutability": "mutable",
												"name": "newNonce",
												"nameLocation": "1040:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "1033:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3366,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1033:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3369,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldNonce",
												"nameLocation": "1057:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3371,
												"src": "1050:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3368,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1050:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "952:119:12"
									},
									"src": "929:143:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3372,
										"nodeType": "StructuredDocumentation",
										"src": "1078:99:12",
										"text": "@notice Emits an event when the owner successfully sets permissions on a token for the spender."
									},
									"eventSelector": "da9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b",
									"id": 3384,
									"name": "Approval",
									"nameLocation": "1188:8:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3374,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1222:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3384,
												"src": "1206:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3376,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1245:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3384,
												"src": "1229:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1229:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3378,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1268:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3384,
												"src": "1252:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3377,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1252:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3380,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1285:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3384,
												"src": "1277:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3379,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1277:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3382,
												"indexed": false,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "1300:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 3384,
												"src": "1293:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3381,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1293:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1196:120:12"
									},
									"src": "1182:135:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3385,
										"nodeType": "StructuredDocumentation",
										"src": "1323:124:12",
										"text": "@notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
									},
									"eventSelector": "c6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec",
									"id": 3399,
									"name": "Permit",
									"nameLocation": "1458:6:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3387,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1490:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1474:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3386,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3389,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1521:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1505:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1505:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3391,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1552:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1536:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3390,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3393,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1577:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1569:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3392,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1569:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3395,
												"indexed": false,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "1600:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1593:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3394,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3397,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1627:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3399,
												"src": "1620:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3396,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1620:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1464:174:12"
									},
									"src": "1452:187:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3400,
										"nodeType": "StructuredDocumentation",
										"src": "1645:98:12",
										"text": "@notice Emits an event when the owner sets the allowance back to 0 with the lockdown function."
									},
									"eventSelector": "89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4",
									"id": 3408,
									"name": "Lockdown",
									"nameLocation": "1754:8:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3402,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1779:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3408,
												"src": "1763:21:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3401,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1763:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3404,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1794:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3408,
												"src": "1786:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1786:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3406,
												"indexed": false,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1809:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3408,
												"src": "1801:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1801:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1762:55:12"
									},
									"src": "1748:70:12"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitDetails",
									"documentation": {
										"id": 3409,
										"nodeType": "StructuredDocumentation",
										"src": "1824:39:12",
										"text": "@notice The permit data for a token"
									},
									"id": 3418,
									"members": [
										{
											"constant": false,
											"id": 3411,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1938:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 3418,
											"src": "1930:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3410,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1930:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3413,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2008:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 3418,
											"src": "2000:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 3412,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "2000:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3415,
											"mutability": "mutable",
											"name": "expiration",
											"nameLocation": "2105:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 3418,
											"src": "2098:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 3414,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "2098:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3417,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "2220:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 3418,
											"src": "2213:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 3416,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "2213:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitDetails",
									"nameLocation": "1875:13:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "1868:364:12",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitSingle",
									"documentation": {
										"id": 3419,
										"nodeType": "StructuredDocumentation",
										"src": "2238:66:12",
										"text": "@notice The permit message signed for a single token allowance"
									},
									"id": 3427,
									"members": [
										{
											"constant": false,
											"id": 3422,
											"mutability": "mutable",
											"name": "details",
											"nameLocation": "2407:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 3427,
											"src": "2393:21:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_PermitDetails_$3418_storage_ptr",
												"typeString": "struct IAllowanceTransfer.PermitDetails"
											},
											"typeName": {
												"id": 3421,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3420,
													"name": "PermitDetails",
													"nameLocations": [
														"2393:13:12"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3418,
													"src": "2393:13:12"
												},
												"referencedDeclaration": 3418,
												"src": "2393:13:12",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitDetails_$3418_storage_ptr",
													"typeString": "struct IAllowanceTransfer.PermitDetails"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3424,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "2486:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 3427,
											"src": "2478:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3423,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2478:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3426,
											"mutability": "mutable",
											"name": "sigDeadline",
											"nameLocation": "2555:11:12",
											"nodeType": "VariableDeclaration",
											"scope": 3427,
											"src": "2547:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3425,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2547:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitSingle",
									"nameLocation": "2316:12:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "2309:264:12",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitBatch",
									"documentation": {
										"id": 3428,
										"nodeType": "StructuredDocumentation",
										"src": "2579:67:12",
										"text": "@notice The permit message signed for multiple token allowances"
									},
									"id": 3437,
									"members": [
										{
											"constant": false,
											"id": 3432,
											"mutability": "mutable",
											"name": "details",
											"nameLocation": "2753:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 3437,
											"src": "2737:23:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_PermitDetails_$3418_storage_$dyn_storage_ptr",
												"typeString": "struct IAllowanceTransfer.PermitDetails[]"
											},
											"typeName": {
												"baseType": {
													"id": 3430,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3429,
														"name": "PermitDetails",
														"nameLocations": [
															"2737:13:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3418,
														"src": "2737:13:12"
													},
													"referencedDeclaration": 3418,
													"src": "2737:13:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitDetails_$3418_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitDetails"
													}
												},
												"id": 3431,
												"nodeType": "ArrayTypeName",
												"src": "2737:15:12",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PermitDetails_$3418_storage_$dyn_storage_ptr",
													"typeString": "struct IAllowanceTransfer.PermitDetails[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3434,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "2832:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 3437,
											"src": "2824:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3433,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2824:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3436,
											"mutability": "mutable",
											"name": "sigDeadline",
											"nameLocation": "2901:11:12",
											"nodeType": "VariableDeclaration",
											"scope": 3437,
											"src": "2893:19:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3435,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2893:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitBatch",
									"nameLocation": "2658:11:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "2651:268:12",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PackedAllowance",
									"documentation": {
										"id": 3438,
										"nodeType": "StructuredDocumentation",
										"src": "2925:217:12",
										"text": "@notice The saved permissions\n @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n @dev Setting amount to type(uint160).max sets an unlimited approval"
									},
									"id": 3445,
									"members": [
										{
											"constant": false,
											"id": 3440,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "3214:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 3445,
											"src": "3206:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 3439,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "3206:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3442,
											"mutability": "mutable",
											"name": "expiration",
											"nameLocation": "3266:10:12",
											"nodeType": "VariableDeclaration",
											"scope": 3445,
											"src": "3259:17:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 3441,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "3259:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3444,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "3381:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 3445,
											"src": "3374:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 3443,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "3374:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PackedAllowance",
									"nameLocation": "3154:15:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "3147:246:12",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.TokenSpenderPair",
									"documentation": {
										"id": 3446,
										"nodeType": "StructuredDocumentation",
										"src": "3399:33:12",
										"text": "@notice A token spender pair."
									},
									"id": 3451,
									"members": [
										{
											"constant": false,
											"id": 3448,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "3524:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 3451,
											"src": "3516:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3447,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3516:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3450,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "3578:7:12",
											"nodeType": "VariableDeclaration",
											"scope": 3451,
											"src": "3570:15:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3449,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3570:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenSpenderPair",
									"nameLocation": "3444:16:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "3437:155:12",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.AllowanceTransferDetails",
									"documentation": {
										"id": 3452,
										"nodeType": "StructuredDocumentation",
										"src": "3598:41:12",
										"text": "@notice Details for a token transfer."
									},
									"id": 3461,
									"members": [
										{
											"constant": false,
											"id": 3454,
											"mutability": "mutable",
											"name": "from",
											"nameLocation": "3728:4:12",
											"nodeType": "VariableDeclaration",
											"scope": 3461,
											"src": "3720:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3453,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3720:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3456,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "3788:2:12",
											"nodeType": "VariableDeclaration",
											"scope": 3461,
											"src": "3780:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3455,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3780:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3458,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "3843:6:12",
											"nodeType": "VariableDeclaration",
											"scope": 3461,
											"src": "3835:14:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 3457,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "3835:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3460,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "3906:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 3461,
											"src": "3898:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3459,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3898:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AllowanceTransferDetails",
									"nameLocation": "3651:24:12",
									"nodeType": "StructDefinition",
									"scope": 3550,
									"src": "3644:274:12",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 3462,
										"nodeType": "StructuredDocumentation",
										"src": "3924:455:12",
										"text": "@notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
									},
									"functionSelector": "927da105",
									"id": 3477,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4393:9:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3464,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4411:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4403:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4403:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3466,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4425:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4417:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3465,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4417:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3468,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4440:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4432:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3467,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4432:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4402:46:12"
									},
									"returnParameters": {
										"id": 3476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3471,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4504:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4496:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3470,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4496:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3473,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "4519:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4512:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3472,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "4512:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3475,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "4538:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3477,
												"src": "4531:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3474,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "4531:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4495:49:12"
									},
									"scope": 3550,
									"src": "4384:161:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3478,
										"nodeType": "StructuredDocumentation",
										"src": "4551:498:12",
										"text": "@notice Approves the spender to use up to amount of the specified token up until the expiration\n @param token The token to approve\n @param spender The spender address to approve\n @param amount The approved amount of the token\n @param expiration The timestamp at which the approval is no longer valid\n @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n @dev Setting amount to type(uint160).max sets an unlimited approval"
									},
									"functionSelector": "87517c45",
									"id": 3489,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5063:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3480,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5079:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "5071:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5071:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3482,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5094:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "5086:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3481,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5086:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3484,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5111:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "5103:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3483,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5103:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3486,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "5126:10:12",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "5119:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3485,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "5119:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5070:67:12"
									},
									"returnParameters": {
										"id": 3488,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5146:0:12"
									},
									"scope": 3550,
									"src": "5054:93:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3490,
										"nodeType": "StructuredDocumentation",
										"src": "5153:407:12",
										"text": "@notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n @param owner The owner of the tokens being approved\n @param permitSingle Data signed over by the owner specifying the terms of approval\n @param signature The owner's signature over the permit data"
									},
									"functionSelector": "2b67b570",
									"id": 3500,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "5574:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3492,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5589:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3500,
												"src": "5581:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3491,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5581:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3495,
												"mutability": "mutable",
												"name": "permitSingle",
												"nameLocation": "5616:12:12",
												"nodeType": "VariableDeclaration",
												"scope": 3500,
												"src": "5596:32:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitSingle_$3427_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitSingle"
												},
												"typeName": {
													"id": 3494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3493,
														"name": "PermitSingle",
														"nameLocations": [
															"5596:12:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3427,
														"src": "5596:12:12"
													},
													"referencedDeclaration": 3427,
													"src": "5596:12:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitSingle_$3427_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitSingle"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3497,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "5645:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 3500,
												"src": "5630:24:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3496,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5630:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5580:75:12"
									},
									"returnParameters": {
										"id": 3499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5664:0:12"
									},
									"scope": 3550,
									"src": "5565:100:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3501,
										"nodeType": "StructuredDocumentation",
										"src": "5671:411:12",
										"text": "@notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n @param owner The owner of the tokens being approved\n @param permitBatch Data signed over by the owner specifying the terms of approval\n @param signature The owner's signature over the permit data"
									},
									"functionSelector": "2a2d80d1",
									"id": 3511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "6096:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3509,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3503,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6111:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3511,
												"src": "6103:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3502,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6103:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3506,
												"mutability": "mutable",
												"name": "permitBatch",
												"nameLocation": "6137:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 3511,
												"src": "6118:30:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatch_$3437_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitBatch"
												},
												"typeName": {
													"id": 3505,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3504,
														"name": "PermitBatch",
														"nameLocations": [
															"6118:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3437,
														"src": "6118:11:12"
													},
													"referencedDeclaration": 3437,
													"src": "6118:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatch_$3437_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitBatch"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3508,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "6165:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 3511,
												"src": "6150:24:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3507,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6150:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6102:73:12"
									},
									"returnParameters": {
										"id": 3510,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6184:0:12"
									},
									"scope": 3550,
									"src": "6087:98:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3512,
										"nodeType": "StructuredDocumentation",
										"src": "6191:386:12",
										"text": "@notice Transfer approved tokens from one address to another\n @param from The address to transfer from\n @param to The address of the recipient\n @param amount The amount of the token to transfer\n @param token The token address to transfer\n @dev Requires the from address to have approved at least the desired amount\n of tokens to msg.sender."
									},
									"functionSelector": "36c78516",
									"id": 3523,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6591:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3514,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6612:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "6604:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6604:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3516,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6626:2:12",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "6618:10:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6618:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3518,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6638:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "6630:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 3517,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3520,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6654:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3523,
												"src": "6646:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6646:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6603:57:12"
									},
									"returnParameters": {
										"id": 3522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6669:0:12"
									},
									"scope": 3550,
									"src": "6582:88:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3524,
										"nodeType": "StructuredDocumentation",
										"src": "6676:264:12",
										"text": "@notice Transfer approved tokens in a batch\n @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n @dev Requires the from addresses to have approved at least the desired amount\n of tokens to msg.sender."
									},
									"functionSelector": "0d58b1db",
									"id": 3531,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6954:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3528,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "7003:15:12",
												"nodeType": "VariableDeclaration",
												"scope": 3531,
												"src": "6967:51:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_AllowanceTransferDetails_$3461_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 3526,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3525,
															"name": "AllowanceTransferDetails",
															"nameLocations": [
																"6967:24:12"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3461,
															"src": "6967:24:12"
														},
														"referencedDeclaration": 3461,
														"src": "6967:24:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AllowanceTransferDetails_$3461_storage_ptr",
															"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails"
														}
													},
													"id": 3527,
													"nodeType": "ArrayTypeName",
													"src": "6967:26:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_AllowanceTransferDetails_$3461_storage_$dyn_storage_ptr",
														"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6966:53:12"
									},
									"returnParameters": {
										"id": 3530,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7028:0:12"
									},
									"scope": 3550,
									"src": "6945:84:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3532,
										"nodeType": "StructuredDocumentation",
										"src": "7035:167:12",
										"text": "@notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n by batch revoking approvals\n @param approvals Array of approvals to revoke."
									},
									"functionSelector": "cc53287f",
									"id": 3539,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lockdown",
									"nameLocation": "7216:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3536,
												"mutability": "mutable",
												"name": "approvals",
												"nameLocation": "7253:9:12",
												"nodeType": "VariableDeclaration",
												"scope": 3539,
												"src": "7225:37:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenSpenderPair_$3451_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IAllowanceTransfer.TokenSpenderPair[]"
												},
												"typeName": {
													"baseType": {
														"id": 3534,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3533,
															"name": "TokenSpenderPair",
															"nameLocations": [
																"7225:16:12"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3451,
															"src": "7225:16:12"
														},
														"referencedDeclaration": 3451,
														"src": "7225:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenSpenderPair_$3451_storage_ptr",
															"typeString": "struct IAllowanceTransfer.TokenSpenderPair"
														}
													},
													"id": 3535,
													"nodeType": "ArrayTypeName",
													"src": "7225:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TokenSpenderPair_$3451_storage_$dyn_storage_ptr",
														"typeString": "struct IAllowanceTransfer.TokenSpenderPair[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7224:39:12"
									},
									"returnParameters": {
										"id": 3538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7272:0:12"
									},
									"scope": 3550,
									"src": "7207:66:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3540,
										"nodeType": "StructuredDocumentation",
										"src": "7279:332:12",
										"text": "@notice Invalidate nonces for a given (token, spender) pair\n @param token The token to invalidate nonces for\n @param spender The spender to invalidate nonces for\n @param newNonce The new nonce to set. Invalidates all nonces less than it.\n @dev Can't invalidate more than 2**16 nonces per transaction."
									},
									"functionSelector": "65d9723c",
									"id": 3549,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invalidateNonces",
									"nameLocation": "7625:16:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3542,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7650:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 3549,
												"src": "7642:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3541,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7642:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3544,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7665:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 3549,
												"src": "7657:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7657:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3546,
												"mutability": "mutable",
												"name": "newNonce",
												"nameLocation": "7681:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 3549,
												"src": "7674:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 3545,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "7674:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7641:49:12"
									},
									"returnParameters": {
										"id": 3548,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7699:0:12"
									},
									"scope": 3550,
									"src": "7616:84:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3551,
							"src": "330:7372:12",
							"usedErrors": [
								3350,
								3355,
								3358
							],
							"usedEvents": [
								3371,
								3384,
								3399,
								3408
							]
						}
					],
					"src": "32:7671:12"
				},
				"id": 12
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
					"exportedSymbols": {
						"IEIP712": [
							3558
						]
					},
					"id": 3559,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3552,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IEIP712",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3558,
							"linearizedBaseContracts": [
								3558
							],
							"name": "IEIP712",
							"nameLocation": "67:7:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "3644e515",
									"id": 3557,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "90:16:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "106:2:13"
									},
									"returnParameters": {
										"id": 3556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3555,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3557,
												"src": "132:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3554,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "131:9:13"
									},
									"scope": 3558,
									"src": "81:60:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3559,
							"src": "57:86:13",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:112:13"
				},
				"id": 13
			},
			"contracts/contracts/interfaces/IInterestModel.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IInterestModel.sol",
					"exportedSymbols": {
						"IInterestModel": [
							3573
						]
					},
					"id": 3574,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3560,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IInterestModel",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3573,
							"linearizedBaseContracts": [
								3573
							],
							"name": "IInterestModel",
							"nameLocation": "70:14:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3561,
										"nodeType": "StructuredDocumentation",
										"src": "92:347:14",
										"text": " @dev Calculates interest on a given principal over a period.\n @param principal The principal amount.\n @param rate The interest rate, in basis points for simple and compound, or additional adjustment for market-based.\n @param time The time period in seconds.\n @return The amount of interest accrued."
									},
									"functionSelector": "05e1bd8c",
									"id": 3572,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "calculateInterest",
									"nameLocation": "454:17:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3563,
												"mutability": "mutable",
												"name": "principal",
												"nameLocation": "480:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 3572,
												"src": "472:17:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "472:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3565,
												"mutability": "mutable",
												"name": "rate",
												"nameLocation": "499:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 3572,
												"src": "491:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "491:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3567,
												"mutability": "mutable",
												"name": "time",
												"nameLocation": "513:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 3572,
												"src": "505:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "471:47:14"
									},
									"returnParameters": {
										"id": 3571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3572,
												"src": "542:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "542:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "541:9:14"
									},
									"scope": 3573,
									"src": "445:106:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3574,
							"src": "60:494:14",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:523:14"
				},
				"id": 14
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IPermit2.sol",
					"exportedSymbols": {
						"IAllowanceTransfer": [
							3550
						],
						"IPermit2": [
							3585
						],
						"ISignatureTransfer": [
							3815
						]
					},
					"id": 3586,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3575,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:15"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/ISignatureTransfer.sol",
							"file": "./ISignatureTransfer.sol",
							"id": 3577,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3586,
							"sourceUnit": 3816,
							"src": "57:60:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3576,
										"name": "ISignatureTransfer",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3815,
										"src": "65:18:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IAllowanceTransfer.sol",
							"file": "./IAllowanceTransfer.sol",
							"id": 3579,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3586,
							"sourceUnit": 3551,
							"src": "118:60:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3578,
										"name": "IAllowanceTransfer",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3550,
										"src": "126:18:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3581,
										"name": "ISignatureTransfer",
										"nameLocations": [
											"411:18:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3815,
										"src": "411:18:15"
									},
									"id": 3582,
									"nodeType": "InheritanceSpecifier",
									"src": "411:18:15"
								},
								{
									"baseName": {
										"id": 3583,
										"name": "IAllowanceTransfer",
										"nameLocations": [
											"431:18:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3550,
										"src": "431:18:15"
									},
									"id": 3584,
									"nodeType": "InheritanceSpecifier",
									"src": "431:18:15"
								}
							],
							"canonicalName": "IPermit2",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3580,
								"nodeType": "StructuredDocumentation",
								"src": "180:209:15",
								"text": "@notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\n @dev Users must approve Permit2 before calling any of the transfer functions."
							},
							"fullyImplemented": false,
							"id": 3585,
							"linearizedBaseContracts": [
								3585,
								3550,
								3815,
								3558
							],
							"name": "IPermit2",
							"nameLocation": "399:8:15",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 3586,
							"src": "389:158:15",
							"usedErrors": [
								3350,
								3355,
								3358,
								3687,
								3690
							],
							"usedEvents": [
								3371,
								3384,
								3399,
								3408,
								3699
							]
						}
					],
					"src": "32:516:15"
				},
				"id": 15
			},
			"contracts/contracts/interfaces/IPoolOrganizer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IPoolOrganizer.sol",
					"exportedSymbols": {
						"IPoolOrganizer": [
							3675
						]
					},
					"id": 3676,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3587,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IPoolOrganizer",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 3675,
							"linearizedBaseContracts": [
								3675
							],
							"name": "IPoolOrganizer",
							"nameLocation": "70:14:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "IPoolOrganizer.PoolType",
									"id": 3590,
									"members": [
										{
											"id": 3588,
											"name": "STANDARD",
											"nameLocation": "108:8:16",
											"nodeType": "EnumValue",
											"src": "108:8:16"
										},
										{
											"id": 3589,
											"name": "FLASH_LOAN",
											"nameLocation": "118:10:16",
											"nodeType": "EnumValue",
											"src": "118:10:16"
										}
									],
									"name": "PoolType",
									"nameLocation": "97:8:16",
									"nodeType": "EnumDefinition",
									"src": "92:38:16"
								},
								{
									"canonicalName": "IPoolOrganizer.PoolDetails",
									"id": 3612,
									"members": [
										{
											"constant": false,
											"id": 3592,
											"mutability": "mutable",
											"name": "lender",
											"nameLocation": "176:6:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "168:14:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3591,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "168:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3594,
											"mutability": "mutable",
											"name": "borrower",
											"nameLocation": "201:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "193:16:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3593,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "193:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3596,
											"mutability": "mutable",
											"name": "creationTime",
											"nameLocation": "228:12:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "220:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3595,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "220:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3598,
											"mutability": "mutable",
											"name": "vault",
											"nameLocation": "259:5:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "251:13:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3597,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "251:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3600,
											"mutability": "mutable",
											"name": "loanToken",
											"nameLocation": "283:9:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "275:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3599,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "275:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3602,
											"mutability": "mutable",
											"name": "assetToken",
											"nameLocation": "311:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "303:18:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3601,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "303:7:16",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3604,
											"mutability": "mutable",
											"name": "loanAmount",
											"nameLocation": "340:10:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "332:18:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3603,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "332:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3606,
											"mutability": "mutable",
											"name": "interestRate",
											"nameLocation": "369:12:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "361:20:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3605,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "361:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3608,
											"mutability": "mutable",
											"name": "repaymentPeriod",
											"nameLocation": "400:15:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "392:23:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3607,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "392:7:16",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3611,
											"mutability": "mutable",
											"name": "poolType",
											"nameLocation": "435:8:16",
											"nodeType": "VariableDeclaration",
											"scope": 3612,
											"src": "426:17:16",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_enum$_PoolType_$3590",
												"typeString": "enum IPoolOrganizer.PoolType"
											},
											"typeName": {
												"id": 3610,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3609,
													"name": "PoolType",
													"nameLocations": [
														"426:8:16"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3590,
													"src": "426:8:16"
												},
												"referencedDeclaration": 3590,
												"src": "426:8:16",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolType_$3590",
													"typeString": "enum IPoolOrganizer.PoolType"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PoolDetails",
									"nameLocation": "145:11:16",
									"nodeType": "StructDefinition",
									"scope": 3675,
									"src": "138:354:16",
									"visibility": "public"
								},
								{
									"functionSelector": "2437769a",
									"id": 3636,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "registerPool",
									"nameLocation": "509:12:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3614,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "540:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "532:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "532:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3616,
												"mutability": "mutable",
												"name": "lender",
												"nameLocation": "563:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "555:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "555:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3618,
												"mutability": "mutable",
												"name": "borrower",
												"nameLocation": "588:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "580:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3617,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "580:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3620,
												"mutability": "mutable",
												"name": "vault",
												"nameLocation": "615:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "607:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3619,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "607:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3622,
												"mutability": "mutable",
												"name": "loanToken",
												"nameLocation": "639:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "631:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "631:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3624,
												"mutability": "mutable",
												"name": "assetToken",
												"nameLocation": "667:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "659:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3623,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3626,
												"mutability": "mutable",
												"name": "loanAmount",
												"nameLocation": "696:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "688:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "688:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3628,
												"mutability": "mutable",
												"name": "interestRate",
												"nameLocation": "725:12:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "717:20:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3627,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "717:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3630,
												"mutability": "mutable",
												"name": "repaymentPeriod",
												"nameLocation": "756:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "748:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3629,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "748:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3633,
												"mutability": "mutable",
												"name": "poolType",
												"nameLocation": "791:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3636,
												"src": "782:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_PoolType_$3590",
													"typeString": "enum IPoolOrganizer.PoolType"
												},
												"typeName": {
													"id": 3632,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3631,
														"name": "PoolType",
														"nameLocations": [
															"782:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3590,
														"src": "782:8:16"
													},
													"referencedDeclaration": 3590,
													"src": "782:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolType_$3590",
														"typeString": "enum IPoolOrganizer.PoolType"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "521:323:16"
									},
									"returnParameters": {
										"id": 3635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "853:0:16"
									},
									"scope": 3675,
									"src": "500:354:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7e72c7d7",
									"id": 3641,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deregisterPool",
									"nameLocation": "871:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3638,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "894:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3641,
												"src": "886:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3637,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "886:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "885:14:16"
									},
									"returnParameters": {
										"id": 3640,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "908:0:16"
									},
									"scope": 3675,
									"src": "862:47:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d3ffe67a",
									"id": 3646,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getTotalPools",
									"nameLocation": "924:13:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "937:2:16"
									},
									"returnParameters": {
										"id": 3645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3644,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3646,
												"src": "963:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "963:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "962:9:16"
									},
									"scope": 3675,
									"src": "915:57:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "24a44efb",
									"id": 3654,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolsByLender",
									"nameLocation": "987:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3649,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3648,
												"mutability": "mutable",
												"name": "lender",
												"nameLocation": "1012:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 3654,
												"src": "1004:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3647,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1004:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:16:16"
									},
									"returnParameters": {
										"id": 3653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3652,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3654,
												"src": "1043:16:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 3650,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1043:7:16",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 3651,
													"nodeType": "ArrayTypeName",
													"src": "1043:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:18:16"
									},
									"scope": 3675,
									"src": "978:83:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "d3e90fa0",
									"id": 3662,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPoolDetails",
									"nameLocation": "1076:14:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3656,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1099:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3662,
												"src": "1091:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3655,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1091:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1090:14:16"
									},
									"returnParameters": {
										"id": 3661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3662,
												"src": "1128:18:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PoolDetails_$3612_memory_ptr",
													"typeString": "struct IPoolOrganizer.PoolDetails"
												},
												"typeName": {
													"id": 3659,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3658,
														"name": "PoolDetails",
														"nameLocations": [
															"1128:11:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3612,
														"src": "1128:11:16"
													},
													"referencedDeclaration": 3612,
													"src": "1128:11:16",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PoolDetails_$3612_storage_ptr",
														"typeString": "struct IPoolOrganizer.PoolDetails"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1127:20:16"
									},
									"scope": 3675,
									"src": "1067:81:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "7570e389",
									"id": 3669,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getVaultForPool",
									"nameLocation": "1163:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3665,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3664,
												"mutability": "mutable",
												"name": "pool",
												"nameLocation": "1187:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 3669,
												"src": "1179:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3663,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1179:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1178:14:16"
									},
									"returnParameters": {
										"id": 3668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3667,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3669,
												"src": "1216:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1216:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1215:9:16"
									},
									"scope": 3675,
									"src": "1154:71:16",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "5d102df7",
									"id": 3674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "grantFactoryAccess",
									"nameLocation": "1240:18:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3671,
												"mutability": "mutable",
												"name": "factoryAddress",
												"nameLocation": "1267:14:16",
												"nodeType": "VariableDeclaration",
												"scope": 3674,
												"src": "1259:22:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3670,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1259:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1258:24:16"
									},
									"returnParameters": {
										"id": 3673,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:16"
									},
									"scope": 3675,
									"src": "1231:61:16",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3676,
							"src": "60:1235:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:1264:16"
				},
				"id": 16
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/ISignatureTransfer.sol",
					"exportedSymbols": {
						"IEIP712": [
							3558
						],
						"ISignatureTransfer": [
							3815
						]
					},
					"id": 3816,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3677,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:17"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
							"file": "./IEIP712.sol",
							"id": 3679,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3816,
							"sourceUnit": 3559,
							"src": "57:38:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 3678,
										"name": "IEIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3558,
										"src": "65:7:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3681,
										"name": "IEIP712",
										"nameLocations": [
											"296:7:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3558,
										"src": "296:7:17"
									},
									"id": 3682,
									"nodeType": "InheritanceSpecifier",
									"src": "296:7:17"
								}
							],
							"canonicalName": "ISignatureTransfer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 3680,
								"nodeType": "StructuredDocumentation",
								"src": "97:167:17",
								"text": "@title SignatureTransfer\n @notice Handles ERC20 token transfers through signature based actions\n @dev Requires user's token approval on the Permit2 contract"
							},
							"fullyImplemented": false,
							"id": 3815,
							"linearizedBaseContracts": [
								3815,
								3558
							],
							"name": "ISignatureTransfer",
							"nameLocation": "274:18:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3683,
										"nodeType": "StructuredDocumentation",
										"src": "310:176:17",
										"text": "@notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n @param maxAmount The maximum amount a spender can request to transfer"
									},
									"errorSelector": "3728b83d",
									"id": 3687,
									"name": "InvalidAmount",
									"nameLocation": "497:13:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3685,
												"mutability": "mutable",
												"name": "maxAmount",
												"nameLocation": "519:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3687,
												"src": "511:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "510:19:17"
									},
									"src": "491:39:17"
								},
								{
									"documentation": {
										"id": 3688,
										"nodeType": "StructuredDocumentation",
										"src": "536:261:17",
										"text": "@notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
									},
									"errorSelector": "ff633a38",
									"id": 3690,
									"name": "LengthMismatch",
									"nameLocation": "808:14:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 3689,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "822:2:17"
									},
									"src": "802:23:17"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 3691,
										"nodeType": "StructuredDocumentation",
										"src": "831:86:17",
										"text": "@notice Emits an event when the owner successfully invalidates an unordered nonce."
									},
									"eventSelector": "3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d",
									"id": 3699,
									"name": "UnorderedNonceInvalidation",
									"nameLocation": "928:26:17",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3693,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "971:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3699,
												"src": "955:21:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3692,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "955:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3695,
												"indexed": false,
												"mutability": "mutable",
												"name": "word",
												"nameLocation": "986:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3699,
												"src": "978:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3694,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "978:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3697,
												"indexed": false,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "1000:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3699,
												"src": "992:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "992:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "954:51:17"
									},
									"src": "922:84:17"
								},
								{
									"canonicalName": "ISignatureTransfer.TokenPermissions",
									"documentation": {
										"id": 3700,
										"nodeType": "StructuredDocumentation",
										"src": "1012:95:17",
										"text": "@notice The token and amount details for a transfer signed in the permit transfer signature"
									},
									"id": 3705,
									"members": [
										{
											"constant": false,
											"id": 3702,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1185:5:17",
											"nodeType": "VariableDeclaration",
											"scope": 3705,
											"src": "1177:13:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3701,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1177:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3704,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1256:6:17",
											"nodeType": "VariableDeclaration",
											"scope": 3705,
											"src": "1248:14:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3703,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1248:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenPermissions",
									"nameLocation": "1119:16:17",
									"nodeType": "StructDefinition",
									"scope": 3815,
									"src": "1112:157:17",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitTransferFrom",
									"documentation": {
										"id": 3706,
										"nodeType": "StructuredDocumentation",
										"src": "1275:65:17",
										"text": "@notice The signed permit message for a single token transfer"
									},
									"id": 3714,
									"members": [
										{
											"constant": false,
											"id": 3709,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "1398:9:17",
											"nodeType": "VariableDeclaration",
											"scope": 3714,
											"src": "1381:26:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenPermissions_$3705_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions"
											},
											"typeName": {
												"id": 3708,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3707,
													"name": "TokenPermissions",
													"nameLocations": [
														"1381:16:17"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3705,
													"src": "1381:16:17"
												},
												"referencedDeclaration": 3705,
												"src": "1381:16:17",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenPermissions_$3705_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3711,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "1514:5:17",
											"nodeType": "VariableDeclaration",
											"scope": 3714,
											"src": "1506:13:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3710,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1506:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3713,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1581:8:17",
											"nodeType": "VariableDeclaration",
											"scope": 3714,
											"src": "1573:16:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3712,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1573:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitTransferFrom",
									"nameLocation": "1352:18:17",
									"nodeType": "StructDefinition",
									"scope": 3815,
									"src": "1345:251:17",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.SignatureTransferDetails",
									"documentation": {
										"id": 3715,
										"nodeType": "StructuredDocumentation",
										"src": "1602:266:17",
										"text": "@notice Specifies the recipient address and amount for batched transfers.\n @dev Recipients and amounts correspond to the index of the signed token permissions array.\n @dev Reverts if the requested amount is greater than the permitted signed amount."
									},
									"id": 3720,
									"members": [
										{
											"constant": false,
											"id": 3717,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "1952:2:17",
											"nodeType": "VariableDeclaration",
											"scope": 3720,
											"src": "1944:10:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3716,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1944:7:17",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3719,
											"mutability": "mutable",
											"name": "requestedAmount",
											"nameLocation": "2008:15:17",
											"nodeType": "VariableDeclaration",
											"scope": 3720,
											"src": "2000:23:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3718,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2000:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SignatureTransferDetails",
									"nameLocation": "1880:24:17",
									"nodeType": "StructDefinition",
									"scope": 3815,
									"src": "1873:157:17",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitBatchTransferFrom",
									"documentation": {
										"id": 3721,
										"nodeType": "StructuredDocumentation",
										"src": "2036:243:17",
										"text": "@notice Used to reconstruct the signed permit message for multiple token transfers\n @dev Do not need to pass in spender address as it is required that it is msg.sender\n @dev Note that a user still signs over a spender address"
									},
									"id": 3730,
									"members": [
										{
											"constant": false,
											"id": 3725,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "2417:9:17",
											"nodeType": "VariableDeclaration",
											"scope": 3730,
											"src": "2398:28:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$3705_storage_$dyn_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions[]"
											},
											"typeName": {
												"baseType": {
													"id": 3723,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3722,
														"name": "TokenPermissions",
														"nameLocations": [
															"2398:16:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3705,
														"src": "2398:16:17"
													},
													"referencedDeclaration": 3705,
													"src": "2398:16:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenPermissions_$3705_storage_ptr",
														"typeString": "struct ISignatureTransfer.TokenPermissions"
													}
												},
												"id": 3724,
												"nodeType": "ArrayTypeName",
												"src": "2398:18:17",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$3705_storage_$dyn_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3727,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "2533:5:17",
											"nodeType": "VariableDeclaration",
											"scope": 3730,
											"src": "2525:13:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3726,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2525:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3729,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2600:8:17",
											"nodeType": "VariableDeclaration",
											"scope": 3730,
											"src": "2592:16:17",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3728,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2592:7:17",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitBatchTransferFrom",
									"nameLocation": "2291:23:17",
									"nodeType": "StructDefinition",
									"scope": 3815,
									"src": "2284:331:17",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 3731,
										"nodeType": "StructuredDocumentation",
										"src": "2621:483:17",
										"text": "@notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n @dev It returns a uint256 bitmap\n @dev The index, or wordPosition is capped at type(uint248).max"
									},
									"functionSelector": "4fe02b44",
									"id": 3740,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonceBitmap",
									"nameLocation": "3118:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3733,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3740,
												"src": "3130:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3732,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3130:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3735,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3740,
												"src": "3139:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3734,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3139:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:18:17"
									},
									"returnParameters": {
										"id": 3739,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3738,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3740,
												"src": "3171:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3171:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3170:9:17"
									},
									"scope": 3815,
									"src": "3109:71:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3741,
										"nodeType": "StructuredDocumentation",
										"src": "3186:413:17",
										"text": "@notice Transfers a token using a signed permit message\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param signature The signature to verify"
									},
									"functionSelector": "30f28b7a",
									"id": 3754,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "3613:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3744,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "3667:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3754,
												"src": "3641:32:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$3714_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 3743,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3742,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"3641:18:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3714,
														"src": "3641:18:17"
													},
													"referencedDeclaration": 3714,
													"src": "3641:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$3714_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3747,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "3717:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3754,
												"src": "3683:49:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 3746,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3745,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"3683:24:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3720,
														"src": "3683:24:17"
													},
													"referencedDeclaration": 3720,
													"src": "3683:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3749,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3750:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3754,
												"src": "3742:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3742:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3751,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3780:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3754,
												"src": "3765:24:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3750,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3765:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3631:164:17"
									},
									"returnParameters": {
										"id": 3753,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3804:0:17"
									},
									"scope": 3815,
									"src": "3604:201:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3755,
										"nodeType": "StructuredDocumentation",
										"src": "3811:815:17",
										"text": "@notice Transfers a token using a signed permit message\n @notice Includes extra data provided by the caller to verify signature over\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "137c29fe",
									"id": 3772,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "4640:25:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3758,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "4701:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4675:32:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$3714_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 3757,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3756,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"4675:18:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3714,
														"src": "4675:18:17"
													},
													"referencedDeclaration": 3714,
													"src": "4675:18:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$3714_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3761,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "4751:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4717:49:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 3760,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3759,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"4717:24:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3720,
														"src": "4717:24:17"
													},
													"referencedDeclaration": 3720,
													"src": "4717:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3763,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4784:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4776:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3762,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4776:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3765,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "4807:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4799:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3764,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4799:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3767,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "4840:17:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4824:33:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3766,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4824:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3769,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4882:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3772,
												"src": "4867:24:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3768,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4867:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4665:232:17"
									},
									"returnParameters": {
										"id": 3771,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4906:0:17"
									},
									"scope": 3815,
									"src": "4631:276:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3773,
										"nodeType": "StructuredDocumentation",
										"src": "4913:335:17",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param signature The signature to verify"
									},
									"functionSelector": "edd9444b",
									"id": 3787,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "5262:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3776,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "5321:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3787,
												"src": "5290:37:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$3730_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 3775,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3774,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"5290:23:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3730,
														"src": "5290:23:17"
													},
													"referencedDeclaration": 3730,
													"src": "5290:23:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$3730_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3780,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "5373:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3787,
												"src": "5337:51:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$3720_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 3778,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3777,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"5337:24:17"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3720,
															"src": "5337:24:17"
														},
														"referencedDeclaration": 3720,
														"src": "5337:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 3779,
													"nodeType": "ArrayTypeName",
													"src": "5337:26:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$3720_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3782,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5406:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3787,
												"src": "5398:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5398:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3784,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "5436:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3787,
												"src": "5421:24:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3783,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5421:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5280:171:17"
									},
									"returnParameters": {
										"id": 3786,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5460:0:17"
									},
									"scope": 3815,
									"src": "5253:208:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3788,
										"nodeType": "StructuredDocumentation",
										"src": "5467:737:17",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @notice Includes extra data provided by the caller to verify signature over\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "fe8ec1a7",
									"id": 3806,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "6218:25:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3791,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "6284:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6253:37:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$3730_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 3790,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3789,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"6253:23:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3730,
														"src": "6253:23:17"
													},
													"referencedDeclaration": 3730,
													"src": "6253:23:17",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$3730_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3795,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "6336:15:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6300:51:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$3720_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 3793,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 3792,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"6300:24:17"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3720,
															"src": "6300:24:17"
														},
														"referencedDeclaration": 3720,
														"src": "6300:24:17",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$3720_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 3794,
													"nodeType": "ArrayTypeName",
													"src": "6300:26:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$3720_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3797,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6369:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6361:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3796,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6361:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3799,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "6392:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6384:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3798,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6384:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3801,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "6425:17:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6409:33:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3800,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6409:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3803,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "6467:9:17",
												"nodeType": "VariableDeclaration",
												"scope": 3806,
												"src": "6452:24:17",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3802,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6452:5:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6243:239:17"
									},
									"returnParameters": {
										"id": 3805,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6491:0:17"
									},
									"scope": 3815,
									"src": "6209:283:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 3807,
										"nodeType": "StructuredDocumentation",
										"src": "6498:294:17",
										"text": "@notice Invalidates the bits specified in mask for the bitmap at the word position\n @dev The wordPos is maxed at type(uint248).max\n @param wordPos A number to index the nonceBitmap at\n @param mask A bitmap masked against msg.sender's current bitmap at the word position"
									},
									"functionSelector": "3ff9dcb1",
									"id": 3814,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invalidateUnorderedNonces",
									"nameLocation": "6806:25:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3809,
												"mutability": "mutable",
												"name": "wordPos",
												"nameLocation": "6840:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 3814,
												"src": "6832:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3808,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6832:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3811,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "6857:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 3814,
												"src": "6849:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3810,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6849:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6831:31:17"
									},
									"returnParameters": {
										"id": 3813,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6871:0:17"
									},
									"scope": 3815,
									"src": "6797:75:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3816,
							"src": "264:6610:17",
							"usedErrors": [
								3687,
								3690
							],
							"usedEvents": [
								3699
							]
						}
					],
					"src": "32:6843:17"
				},
				"id": 17
			},
			"contracts/contracts/protocol/TuliaPool.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/protocol/TuliaPool.sol",
					"exportedSymbols": {
						"Address": [
							2254
						],
						"ERC20": [
							886
						],
						"ERC4626": [
							1649
						],
						"IAllowanceTransfer": [
							3550
						],
						"IERC20": [
							964
						],
						"IERC20Metadata": [
							1675
						],
						"IERC20Permit": [
							1711
						],
						"IERC4626": [
							169
						],
						"IInterestModel": [
							3573
						],
						"IPermit2": [
							3585
						],
						"IPoolOrganizer": [
							3675
						],
						"ISignatureTransfer": [
							3815
						],
						"Math": [
							3338
						],
						"ReentrancyGuard": [
							371
						],
						"SafeERC20": [
							2001
						],
						"TuliaPool": [
							4270
						],
						"TuliaVault": [
							4430
						]
					},
					"id": 4271,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3817,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 3818,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 965,
							"src": "57:56:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 3819,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 2002,
							"src": "114:65:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 3820,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 372,
							"src": "180:62:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/protocol/TuliaVault.sol",
							"file": "./TuliaVault.sol",
							"id": 3821,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 4431,
							"src": "243:26:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IInterestModel.sol",
							"file": "../interfaces/IInterestModel.sol",
							"id": 3822,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 3574,
							"src": "270:42:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IPermit2.sol",
							"file": "../interfaces/IPermit2.sol",
							"id": 3823,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 3586,
							"src": "313:36:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IPoolOrganizer.sol",
							"file": "../interfaces/IPoolOrganizer.sol",
							"id": 3824,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4271,
							"sourceUnit": 3676,
							"src": "350:42:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3826,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"531:15:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 371,
										"src": "531:15:18"
									},
									"id": 3827,
									"nodeType": "InheritanceSpecifier",
									"src": "531:15:18"
								}
							],
							"canonicalName": "TuliaPool",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3825,
								"nodeType": "StructuredDocumentation",
								"src": "394:115:18",
								"text": "@title TuliaPool\n @dev Manages the lifecycle of loans including creation, funding, repayment, and defaults."
							},
							"fullyImplemented": true,
							"id": 4270,
							"linearizedBaseContracts": [
								4270,
								371
							],
							"name": "TuliaPool",
							"nameLocation": "518:9:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 3831,
									"libraryName": {
										"id": 3828,
										"name": "SafeERC20",
										"nameLocations": [
											"559:9:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2001,
										"src": "559:9:18"
									},
									"nodeType": "UsingForDirective",
									"src": "553:27:18",
									"typeName": {
										"id": 3830,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3829,
											"name": "IERC20",
											"nameLocations": [
												"573:6:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 964,
											"src": "573:6:18"
										},
										"referencedDeclaration": 964,
										"src": "573:6:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$964",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "12261ee7",
									"id": 3834,
									"mutability": "mutable",
									"name": "permit2",
									"nameLocation": "602:7:18",
									"nodeType": "VariableDeclaration",
									"scope": 4270,
									"src": "586:23:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IPermit2_$3585",
										"typeString": "contract IPermit2"
									},
									"typeName": {
										"id": 3833,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3832,
											"name": "IPermit2",
											"nameLocations": [
												"586:8:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3585,
											"src": "586:8:18"
										},
										"referencedDeclaration": 3585,
										"src": "586:8:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPermit2_$3585",
											"typeString": "contract IPermit2"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c51b9507",
									"id": 3837,
									"mutability": "mutable",
									"name": "poolOrganizer",
									"nameLocation": "637:13:18",
									"nodeType": "VariableDeclaration",
									"scope": 4270,
									"src": "615:35:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
										"typeString": "contract IPoolOrganizer"
									},
									"typeName": {
										"id": 3836,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3835,
											"name": "IPoolOrganizer",
											"nameLocations": [
												"615:14:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3675,
											"src": "615:14:18"
										},
										"referencedDeclaration": 3675,
										"src": "615:14:18",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
											"typeString": "contract IPoolOrganizer"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "TuliaPool.LoanDetails",
									"id": 3864,
									"members": [
										{
											"constant": false,
											"id": 3839,
											"mutability": "mutable",
											"name": "lender",
											"nameLocation": "694:6:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "686:14:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3838,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "686:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3842,
											"mutability": "mutable",
											"name": "loanToken",
											"nameLocation": "717:9:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "710:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$964",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 3841,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3840,
													"name": "IERC20",
													"nameLocations": [
														"710:6:18"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 964,
													"src": "710:6:18"
												},
												"referencedDeclaration": 964,
												"src": "710:6:18",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3845,
											"mutability": "mutable",
											"name": "repaymentToken",
											"nameLocation": "743:14:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "736:21:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IERC20_$964",
												"typeString": "contract IERC20"
											},
											"typeName": {
												"id": 3844,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3843,
													"name": "IERC20",
													"nameLocations": [
														"736:6:18"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 964,
													"src": "736:6:18"
												},
												"referencedDeclaration": 964,
												"src": "736:6:18",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3848,
											"mutability": "mutable",
											"name": "collateralVault",
											"nameLocation": "778:15:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "767:26:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_TuliaVault_$4430",
												"typeString": "contract TuliaVault"
											},
											"typeName": {
												"id": 3847,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3846,
													"name": "TuliaVault",
													"nameLocations": [
														"767:10:18"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 4430,
													"src": "767:10:18"
												},
												"referencedDeclaration": 4430,
												"src": "767:10:18",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_TuliaVault_$4430",
													"typeString": "contract TuliaVault"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3850,
											"mutability": "mutable",
											"name": "loanAmount",
											"nameLocation": "811:10:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "803:18:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3849,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "803:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3852,
											"mutability": "mutable",
											"name": "interestRate",
											"nameLocation": "839:12:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "831:20:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3851,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "831:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3854,
											"mutability": "mutable",
											"name": "repaymentPeriod",
											"nameLocation": "870:15:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "862:23:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3853,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "862:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3857,
											"mutability": "mutable",
											"name": "interestModel",
											"nameLocation": "910:13:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "895:28:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_IInterestModel_$3573",
												"typeString": "contract IInterestModel"
											},
											"typeName": {
												"id": 3856,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 3855,
													"name": "IInterestModel",
													"nameLocations": [
														"895:14:18"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 3573,
													"src": "895:14:18"
												},
												"referencedDeclaration": 3573,
												"src": "895:14:18",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IInterestModel_$3573",
													"typeString": "contract IInterestModel"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3859,
											"mutability": "mutable",
											"name": "borrower",
											"nameLocation": "941:8:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "933:16:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3858,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "933:7:18",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3861,
											"mutability": "mutable",
											"name": "startBlock",
											"nameLocation": "967:10:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "959:18:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3860,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "959:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 3863,
											"mutability": "mutable",
											"name": "fundedBlock",
											"nameLocation": "995:11:18",
											"nodeType": "VariableDeclaration",
											"scope": 3864,
											"src": "987:19:18",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 3862,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "987:7:18",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "LoanDetails",
									"nameLocation": "664:11:18",
									"nodeType": "StructDefinition",
									"scope": 4270,
									"src": "657:356:18",
									"visibility": "public"
								},
								{
									"canonicalName": "TuliaPool.LoanState",
									"id": 3870,
									"members": [
										{
											"id": 3865,
											"name": "CREATED",
											"nameLocation": "1036:7:18",
											"nodeType": "EnumValue",
											"src": "1036:7:18"
										},
										{
											"id": 3866,
											"name": "PENDING",
											"nameLocation": "1045:7:18",
											"nodeType": "EnumValue",
											"src": "1045:7:18"
										},
										{
											"id": 3867,
											"name": "ACTIVE",
											"nameLocation": "1054:6:18",
											"nodeType": "EnumValue",
											"src": "1054:6:18"
										},
										{
											"id": 3868,
											"name": "CLOSED",
											"nameLocation": "1062:6:18",
											"nodeType": "EnumValue",
											"src": "1062:6:18"
										},
										{
											"id": 3869,
											"name": "DEFAULTED",
											"nameLocation": "1070:9:18",
											"nodeType": "EnumValue",
											"src": "1070:9:18"
										}
									],
									"name": "LoanState",
									"nameLocation": "1024:9:18",
									"nodeType": "EnumDefinition",
									"src": "1019:62:18"
								},
								{
									"constant": false,
									"functionSelector": "c19d93fb",
									"id": 3873,
									"mutability": "mutable",
									"name": "state",
									"nameLocation": "1103:5:18",
									"nodeType": "VariableDeclaration",
									"scope": 4270,
									"src": "1086:22:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_enum$_LoanState_$3870",
										"typeString": "enum TuliaPool.LoanState"
									},
									"typeName": {
										"id": 3872,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3871,
											"name": "LoanState",
											"nameLocations": [
												"1086:9:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3870,
											"src": "1086:9:18"
										},
										"referencedDeclaration": 3870,
										"src": "1086:9:18",
										"typeDescriptions": {
											"typeIdentifier": "t_enum$_LoanState_$3870",
											"typeString": "enum TuliaPool.LoanState"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "95cb741d",
									"id": 3876,
									"mutability": "mutable",
									"name": "loanDetails",
									"nameLocation": "1134:11:18",
									"nodeType": "VariableDeclaration",
									"scope": 4270,
									"src": "1115:30:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
										"typeString": "struct TuliaPool.LoanDetails"
									},
									"typeName": {
										"id": 3875,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 3874,
											"name": "LoanDetails",
											"nameLocations": [
												"1115:11:18"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3864,
											"src": "1115:11:18"
										},
										"referencedDeclaration": 3864,
										"src": "1115:11:18",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_LoanDetails_$3864_storage_ptr",
											"typeString": "struct TuliaPool.LoanDetails"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "3d48195705780f5c10a0d217f778f0f6d562cb1a6a699da31c0d6d756aacedfc",
									"id": 3886,
									"name": "LoanOfferCreated",
									"nameLocation": "1158:16:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3878,
												"indexed": true,
												"mutability": "mutable",
												"name": "lender",
												"nameLocation": "1191:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 3886,
												"src": "1175:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3877,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1175:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3880,
												"indexed": false,
												"mutability": "mutable",
												"name": "loanAmount",
												"nameLocation": "1207:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3886,
												"src": "1199:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1199:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3882,
												"indexed": false,
												"mutability": "mutable",
												"name": "loanToken",
												"nameLocation": "1227:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 3886,
												"src": "1219:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1219:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3884,
												"indexed": false,
												"mutability": "mutable",
												"name": "repaymentToken",
												"nameLocation": "1246:14:18",
												"nodeType": "VariableDeclaration",
												"scope": 3886,
												"src": "1238:22:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3883,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1238:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1174:87:18"
									},
									"src": "1152:110:18"
								},
								{
									"anonymous": false,
									"eventSelector": "5150ab7694a22fbc01c642bc10316565247df962fa3f0ac3b5d1a18ba45b485b",
									"id": 3892,
									"name": "LoanActivated",
									"nameLocation": "1273:13:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3888,
												"indexed": true,
												"mutability": "mutable",
												"name": "borrower",
												"nameLocation": "1303:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 3892,
												"src": "1287:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3887,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1287:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3890,
												"indexed": false,
												"mutability": "mutable",
												"name": "collateralAmount",
												"nameLocation": "1321:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 3892,
												"src": "1313:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3889,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1313:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1286:52:18"
									},
									"src": "1267:72:18"
								},
								{
									"anonymous": false,
									"eventSelector": "9e71d2fb732e68272b7e74ecfd14638673c1d77e19a5d390a3ffff054d57c44b",
									"id": 3896,
									"name": "LoanFunded",
									"nameLocation": "1350:10:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3894,
												"indexed": false,
												"mutability": "mutable",
												"name": "loanAmount",
												"nameLocation": "1369:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 3896,
												"src": "1361:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1361:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1360:20:18"
									},
									"src": "1344:37:18"
								},
								{
									"anonymous": false,
									"eventSelector": "4002dba848920f438092e08090cfb5fc47144c22704268b402c9553a1b5adfe6",
									"id": 3900,
									"name": "RepaymentMade",
									"nameLocation": "1392:13:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3899,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3898,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountRepaid",
												"nameLocation": "1414:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3900,
												"src": "1406:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3897,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1405:22:18"
									},
									"src": "1386:42:18"
								},
								{
									"anonymous": false,
									"eventSelector": "409fced1b85ae32a29fb1e18894d8361a5f2653dc27adf7102d86175c2901d7c",
									"id": 3902,
									"name": "LoanClosed",
									"nameLocation": "1439:10:18",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 3901,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1449:2:18"
									},
									"src": "1433:19:18"
								},
								{
									"body": {
										"id": 4007,
										"nodeType": "Block",
										"src": "2519:918:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 3955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 3948,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 3941,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 3934,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3929,
																			"name": "lender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3905,
																			"src": "2537:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 3932,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2555:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 3931,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2547:7:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 3930,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2547:7:18",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3933,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2547:10:18",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "2537:20:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 3940,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3935,
																			"name": "loanTokenAddress",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3907,
																			"src": "2561:16:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 3938,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "2589:1:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 3937,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "2581:7:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 3936,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "2581:7:18",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 3939,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2581:10:18",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "2561:30:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "2537:54:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 3947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3942,
																		"name": "collateralVaultAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3911,
																		"src": "2595:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "!=",
																	"rightExpression": {
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 3945,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2629:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 3944,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2621:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 3943,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2621:7:18",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 3946,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2621:10:18",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "2595:36:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "2537:94:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 3954,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3949,
																	"name": "repaymentTokenAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3909,
																	"src": "2635:21:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 3952,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2668:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 3951,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2660:7:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 3950,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2660:7:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3953,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2660:10:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "2635:35:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "2537:133:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420696e70757420616464726573736573",
															"id": 3956,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2672:25:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_621233846158a75c0eac44cdeca617547a6948022423c2beaeb8dea774709c77",
																"typeString": "literal_string \"Invalid input addresses\""
															},
															"value": "Invalid input addresses"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_621233846158a75c0eac44cdeca617547a6948022423c2beaeb8dea774709c77",
																"typeString": "literal_string \"Invalid input addresses\""
															}
														],
														"id": 3928,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2529:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3957,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2529:169:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3958,
												"nodeType": "ExpressionStatement",
												"src": "2529:169:18"
											},
											{
												"expression": {
													"id": 3961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3959,
														"name": "permit2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3834,
														"src": "2708:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$3585",
															"typeString": "contract IPermit2"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 3960,
														"name": "_permit2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3923,
														"src": "2718:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$3585",
															"typeString": "contract IPermit2"
														}
													},
													"src": "2708:18:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$3585",
														"typeString": "contract IPermit2"
													}
												},
												"id": 3962,
												"nodeType": "ExpressionStatement",
												"src": "2708:18:18"
											},
											{
												"expression": {
													"id": 3967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3963,
														"name": "poolOrganizer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3837,
														"src": "2736:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
															"typeString": "contract IPoolOrganizer"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3965,
																"name": "poolOrganizerAddress",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3925,
																"src": "2767:20:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 3964,
															"name": "IPoolOrganizer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3675,
															"src": "2752:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IPoolOrganizer_$3675_$",
																"typeString": "type(contract IPoolOrganizer)"
															}
														},
														"id": 3966,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2752:36:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
															"typeString": "contract IPoolOrganizer"
														}
													},
													"src": "2736:52:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
														"typeString": "contract IPoolOrganizer"
													}
												},
												"id": 3968,
												"nodeType": "ExpressionStatement",
												"src": "2736:52:18"
											},
											{
												"expression": {
													"id": 3993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3969,
														"name": "loanDetails",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3876,
														"src": "2798:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
															"typeString": "struct TuliaPool.LoanDetails storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 3971,
																"name": "lender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3905,
																"src": "2846:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"arguments": [
																	{
																		"id": 3973,
																		"name": "loanTokenAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3907,
																		"src": "2884:16:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3972,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 964,
																	"src": "2877:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$964_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 3974,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2877:24:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																}
															},
															{
																"arguments": [
																	{
																		"id": 3976,
																		"name": "repaymentTokenAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3909,
																		"src": "2938:21:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3975,
																	"name": "IERC20",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 964,
																	"src": "2931:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC20_$964_$",
																		"typeString": "type(contract IERC20)"
																	}
																},
																"id": 3977,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2931:29:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																}
															},
															{
																"arguments": [
																	{
																		"id": 3979,
																		"name": "collateralVaultAddress",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3911,
																		"src": "3002:22:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 3978,
																	"name": "TuliaVault",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4430,
																	"src": "2991:10:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_TuliaVault_$4430_$",
																		"typeString": "type(contract TuliaVault)"
																	}
																},
																"id": 3980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2991:34:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_TuliaVault_$4430",
																	"typeString": "contract TuliaVault"
																}
															},
															{
																"id": 3981,
																"name": "loanAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3913,
																"src": "3051:10:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3982,
																"name": "interestRate",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3915,
																"src": "3089:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3983,
																"name": "repaymentPeriod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3917,
																"src": "3132:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 3984,
																"name": "interestModel",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3920,
																"src": "3176:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IInterestModel_$3573",
																	"typeString": "contract IInterestModel"
																}
															},
															{
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 3987,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3221:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 3986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3213:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 3985,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3213:7:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 3988,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3213:10:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 3989,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3249:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 3990,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3255:9:18",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3249:15:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "30",
																"id": 3991,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3291:1:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_contract$_IERC20_$964",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_contract$_TuliaVault_$4430",
																	"typeString": "contract TuliaVault"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_contract$_IInterestModel_$3573",
																	"typeString": "contract IInterestModel"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 3970,
															"name": "LoanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3864,
															"src": "2812:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_LoanDetails_$3864_storage_ptr_$",
																"typeString": "type(struct TuliaPool.LoanDetails storage pointer)"
															}
														},
														"id": 3992,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"2838:6:18",
															"2866:9:18",
															"2915:14:18",
															"2974:15:18",
															"3039:10:18",
															"3075:12:18",
															"3115:15:18",
															"3161:13:18",
															"3203:8:18",
															"3237:10:18",
															"3278:11:18"
														],
														"names": [
															"lender",
															"loanToken",
															"repaymentToken",
															"collateralVault",
															"loanAmount",
															"interestRate",
															"repaymentPeriod",
															"interestModel",
															"borrower",
															"startBlock",
															"fundedBlock"
														],
														"nodeType": "FunctionCall",
														"src": "2812:491:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_LoanDetails_$3864_memory_ptr",
															"typeString": "struct TuliaPool.LoanDetails memory"
														}
													},
													"src": "2798:505:18",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
														"typeString": "struct TuliaPool.LoanDetails storage ref"
													}
												},
												"id": 3994,
												"nodeType": "ExpressionStatement",
												"src": "2798:505:18"
											},
											{
												"expression": {
													"id": 3998,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 3995,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3873,
														"src": "3313:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 3996,
															"name": "LoanState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3870,
															"src": "3321:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																"typeString": "type(enum TuliaPool.LoanState)"
															}
														},
														"id": 3997,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3331:7:18",
														"memberName": "CREATED",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3865,
														"src": "3321:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"src": "3313:25:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"id": 3999,
												"nodeType": "ExpressionStatement",
												"src": "3313:25:18"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 4001,
															"name": "lender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3905,
															"src": "3370:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4002,
															"name": "loanAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3913,
															"src": "3378:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 4003,
															"name": "loanTokenAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3907,
															"src": "3390:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4004,
															"name": "repaymentTokenAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3909,
															"src": "3408:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 4000,
														"name": "LoanOfferCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3886,
														"src": "3353:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address,address)"
														}
													},
													"id": 4005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3353:77:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4006,
												"nodeType": "EmitStatement",
												"src": "3348:82:18"
											}
										]
									},
									"documentation": {
										"id": 3903,
										"nodeType": "StructuredDocumentation",
										"src": "1458:707:18",
										"text": "@param lender The address of the lender\n @param loanTokenAddress The address of the token to be loaned\n @param repaymentTokenAddress The token address in which repayments are to be made\n @param collateralVaultAddress The address of the vault where collateral will be stored\n @param loanAmount The amount of the loan\n @param interestRate The interest rate\n @param repaymentPeriod The duration over which the loan must be repaid\n @param interestModel The contract that calculates interest\n @param _permit2 The Permit2 contract for ERC20 token operations\n @param poolOrganizerAddress The Pool Organizer contract for managing pool registrations"
									},
									"id": 4008,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3905,
												"mutability": "mutable",
												"name": "lender",
												"nameLocation": "2199:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2191:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2191:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3907,
												"mutability": "mutable",
												"name": "loanTokenAddress",
												"nameLocation": "2223:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2215:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3906,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2215:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3909,
												"mutability": "mutable",
												"name": "repaymentTokenAddress",
												"nameLocation": "2257:21:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2249:29:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2249:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3911,
												"mutability": "mutable",
												"name": "collateralVaultAddress",
												"nameLocation": "2296:22:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2288:30:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2288:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3913,
												"mutability": "mutable",
												"name": "loanAmount",
												"nameLocation": "2336:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2328:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2328:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3915,
												"mutability": "mutable",
												"name": "interestRate",
												"nameLocation": "2364:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2356:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3914,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2356:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3917,
												"mutability": "mutable",
												"name": "repaymentPeriod",
												"nameLocation": "2394:15:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2386:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3916,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2386:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3920,
												"mutability": "mutable",
												"name": "interestModel",
												"nameLocation": "2434:13:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2419:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IInterestModel_$3573",
													"typeString": "contract IInterestModel"
												},
												"typeName": {
													"id": 3919,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3918,
														"name": "IInterestModel",
														"nameLocations": [
															"2419:14:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3573,
														"src": "2419:14:18"
													},
													"referencedDeclaration": 3573,
													"src": "2419:14:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IInterestModel_$3573",
														"typeString": "contract IInterestModel"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3923,
												"mutability": "mutable",
												"name": "_permit2",
												"nameLocation": "2466:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2457:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPermit2_$3585",
													"typeString": "contract IPermit2"
												},
												"typeName": {
													"id": 3922,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3921,
														"name": "IPermit2",
														"nameLocations": [
															"2457:8:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3585,
														"src": "2457:8:18"
													},
													"referencedDeclaration": 3585,
													"src": "2457:8:18",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$3585",
														"typeString": "contract IPermit2"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3925,
												"mutability": "mutable",
												"name": "poolOrganizerAddress",
												"nameLocation": "2492:20:18",
												"nodeType": "VariableDeclaration",
												"scope": 4008,
												"src": "2484:28:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3924,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2484:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2181:337:18"
									},
									"returnParameters": {
										"id": 3927,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2519:0:18"
									},
									"scope": 4270,
									"src": "2170:1267:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4070,
										"nodeType": "Block",
										"src": "3518:510:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_LoanState_$3870",
																"typeString": "enum TuliaPool.LoanState"
															},
															"id": 4019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4016,
																"name": "state",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3873,
																"src": "3536:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 4017,
																	"name": "LoanState",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3870,
																	"src": "3545:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																		"typeString": "type(enum TuliaPool.LoanState)"
																	}
																},
																"id": 4018,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "3555:7:18",
																"memberName": "CREATED",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3865,
																"src": "3545:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"src": "3536:26:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f616e206e6f7420696e20637265617461626c65207374617465",
															"id": 4020,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3564:29:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_66af1cc6ee3ef85bf66c764d331c1754ecb14b3115425f0f594cfba4a008e33e",
																"typeString": "literal_string \"Loan not in creatable state\""
															},
															"value": "Loan not in creatable state"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_66af1cc6ee3ef85bf66c764d331c1754ecb14b3115425f0f594cfba4a008e33e",
																"typeString": "literal_string \"Loan not in creatable state\""
															}
														],
														"id": 4015,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3528:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3528:66:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4022,
												"nodeType": "ExpressionStatement",
												"src": "3528:66:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 4029,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4024,
																"name": "borrower",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4010,
																"src": "3612:8:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 4027,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3632:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 4026,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3624:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 4025,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3624:7:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 4028,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3624:10:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3612:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420626f72726f7765722061646472657373",
															"id": 4030,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3636:26:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5f68d34cddd9f5becf3cbedf18e2e6c6c58d8ad4d638744285d9145ff589021d",
																"typeString": "literal_string \"Invalid borrower address\""
															},
															"value": "Invalid borrower address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5f68d34cddd9f5becf3cbedf18e2e6c6c58d8ad4d638744285d9145ff589021d",
																"typeString": "literal_string \"Invalid borrower address\""
															}
														],
														"id": 4023,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3604:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3604:59:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4032,
												"nodeType": "ExpressionStatement",
												"src": "3604:59:18"
											},
											{
												"assignments": [
													4034
												],
												"declarations": [
													{
														"constant": false,
														"id": 4034,
														"mutability": "mutable",
														"name": "requiredCollateral",
														"nameLocation": "3681:18:18",
														"nodeType": "VariableDeclaration",
														"scope": 4070,
														"src": "3673:26:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4033,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3673:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4037,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4035,
														"name": "calculateRequiredCollateral",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4228,
														"src": "3702:27:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 4036,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3702:29:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3673:58:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4041,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4039,
																"name": "collateralAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4012,
																"src": "3749:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 4040,
																"name": "requiredCollateral",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4034,
																"src": "3769:18:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3749:38:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420636f6c6c61746572616c",
															"id": 4042,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3789:25:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c9a6548b8b08f3e884692ff4b4c5cb58e1633771e97667c355d207e48aa0a8aa",
																"typeString": "literal_string \"Insufficient collateral\""
															},
															"value": "Insufficient collateral"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c9a6548b8b08f3e884692ff4b4c5cb58e1633771e97667c355d207e48aa0a8aa",
																"typeString": "literal_string \"Insufficient collateral\""
															}
														],
														"id": 4038,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3741:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3741:74:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4044,
												"nodeType": "ExpressionStatement",
												"src": "3741:74:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 4050,
															"name": "collateralAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4012,
															"src": "3862:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 4051,
															"name": "borrower",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4010,
															"src": "3880:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"expression": {
																"id": 4045,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "3826:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4048,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3838:15:18",
															"memberName": "collateralVault",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3848,
															"src": "3826:27:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_TuliaVault_$4430",
																"typeString": "contract TuliaVault"
															}
														},
														"id": 4049,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3854:7:18",
														"memberName": "deposit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1362,
														"src": "3826:35:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (uint256,address) external returns (uint256)"
														}
													},
													"id": 4052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3826:63:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4053,
												"nodeType": "ExpressionStatement",
												"src": "3826:63:18"
											},
											{
												"expression": {
													"id": 4058,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4054,
															"name": "loanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "3899:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																"typeString": "struct TuliaPool.LoanDetails storage ref"
															}
														},
														"id": 4056,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3911:8:18",
														"memberName": "borrower",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3859,
														"src": "3899:20:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 4057,
														"name": "borrower",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4010,
														"src": "3922:8:18",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3899:31:18",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 4059,
												"nodeType": "ExpressionStatement",
												"src": "3899:31:18"
											},
											{
												"expression": {
													"id": 4063,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4060,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3873,
														"src": "3940:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4061,
															"name": "LoanState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3870,
															"src": "3948:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																"typeString": "type(enum TuliaPool.LoanState)"
															}
														},
														"id": 4062,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3958:7:18",
														"memberName": "PENDING",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3866,
														"src": "3948:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"src": "3940:25:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"id": 4064,
												"nodeType": "ExpressionStatement",
												"src": "3940:25:18"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 4066,
															"name": "borrower",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4010,
															"src": "3994:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4067,
															"name": "collateralAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4012,
															"src": "4004:16:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 4065,
														"name": "LoanActivated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3892,
														"src": "3980:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 4068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3980:41:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4069,
												"nodeType": "EmitStatement",
												"src": "3975:46:18"
											}
										]
									},
									"functionSelector": "f30f29dd",
									"id": 4071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "activateLoan",
									"nameLocation": "3452:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4010,
												"mutability": "mutable",
												"name": "borrower",
												"nameLocation": "3473:8:18",
												"nodeType": "VariableDeclaration",
												"scope": 4071,
												"src": "3465:16:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4009,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3465:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4012,
												"mutability": "mutable",
												"name": "collateralAmount",
												"nameLocation": "3491:16:18",
												"nodeType": "VariableDeclaration",
												"scope": 4071,
												"src": "3483:24:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4011,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3483:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3464:44:18"
									},
									"returnParameters": {
										"id": 4014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3518:0:18"
									},
									"scope": 4270,
									"src": "3443:585:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 4116,
										"nodeType": "Block",
										"src": "4076:326:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_LoanState_$3870",
																"typeString": "enum TuliaPool.LoanState"
															},
															"id": 4080,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4077,
																"name": "state",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3873,
																"src": "4094:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 4078,
																	"name": "LoanState",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3870,
																	"src": "4103:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																		"typeString": "type(enum TuliaPool.LoanState)"
																	}
																},
																"id": 4079,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4113:7:18",
																"memberName": "PENDING",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3866,
																"src": "4103:17:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"src": "4094:26:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f616e206d75737420626520696e2070656e64696e67207374617465",
															"id": 4081,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4122:31:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb54ee8e3475478dc820a38171f168c5b045c79b13f606f8c8423f320193ca37",
																"typeString": "literal_string \"Loan must be in pending state\""
															},
															"value": "Loan must be in pending state"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb54ee8e3475478dc820a38171f168c5b045c79b13f606f8c8423f320193ca37",
																"typeString": "literal_string \"Loan must be in pending state\""
															}
														],
														"id": 4076,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4086:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4082,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4086:68:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4083,
												"nodeType": "ExpressionStatement",
												"src": "4086:68:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 4089,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4203:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4090,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4215:6:18",
															"memberName": "lender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3839,
															"src": "4203:18:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 4093,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4231:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TuliaPool_$4270",
																		"typeString": "contract TuliaPool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TuliaPool_$4270",
																		"typeString": "contract TuliaPool"
																	}
																],
																"id": 4092,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4223:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 4091,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4223:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 4094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4223:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 4095,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4238:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4096,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4250:10:18",
															"memberName": "loanAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3850,
															"src": "4238:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"expression": {
																"id": 4084,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4164:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4087,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4176:9:18",
															"memberName": "loanToken",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3842,
															"src": "4164:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														"id": 4088,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4186:16:18",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1788,
														"src": "4164:38:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$964_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 4097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4164:97:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4098,
												"nodeType": "ExpressionStatement",
												"src": "4164:97:18"
											},
											{
												"expression": {
													"id": 4104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 4099,
															"name": "loanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "4271:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																"typeString": "struct TuliaPool.LoanDetails storage ref"
															}
														},
														"id": 4101,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4283:11:18",
														"memberName": "fundedBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3863,
														"src": "4271:23:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4102,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "4297:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 4103,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4303:9:18",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "4297:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4271:41:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4105,
												"nodeType": "ExpressionStatement",
												"src": "4271:41:18"
											},
											{
												"expression": {
													"id": 4109,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4106,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3873,
														"src": "4322:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4107,
															"name": "LoanState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3870,
															"src": "4330:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																"typeString": "type(enum TuliaPool.LoanState)"
															}
														},
														"id": 4108,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4340:6:18",
														"memberName": "ACTIVE",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3867,
														"src": "4330:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"src": "4322:24:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"id": 4110,
												"nodeType": "ExpressionStatement",
												"src": "4322:24:18"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 4112,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4372:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4113,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4384:10:18",
															"memberName": "loanAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3850,
															"src": "4372:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 4111,
														"name": "LoanFunded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3896,
														"src": "4361:10:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 4114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4361:34:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4115,
												"nodeType": "EmitStatement",
												"src": "4356:39:18"
											}
										]
									},
									"functionSelector": "8db57994",
									"id": 4117,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4074,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4073,
												"name": "nonReentrant",
												"nameLocations": [
													"4063:12:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 336,
												"src": "4063:12:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "4063:12:18"
										}
									],
									"name": "fundLoan",
									"nameLocation": "4043:8:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4072,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4051:2:18"
									},
									"returnParameters": {
										"id": 4075,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4076:0:18"
									},
									"scope": 4270,
									"src": "4034:368:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 4166,
										"nodeType": "Block",
										"src": "4461:401:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_LoanState_$3870",
																"typeString": "enum TuliaPool.LoanState"
															},
															"id": 4128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4125,
																"name": "state",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3873,
																"src": "4479:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 4126,
																	"name": "LoanState",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3870,
																	"src": "4488:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																		"typeString": "type(enum TuliaPool.LoanState)"
																	}
																},
																"id": 4127,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4498:6:18",
																"memberName": "ACTIVE",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 3867,
																"src": "4488:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_LoanState_$3870",
																	"typeString": "enum TuliaPool.LoanState"
																}
															},
															"src": "4479:25:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c6f616e206d75737420626520616374697665",
															"id": 4129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4506:21:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cb56e7008de9796557c624fe8eaae426a4aa5a1736a5a202afc77a5eda039b69",
																"typeString": "literal_string \"Loan must be active\""
															},
															"value": "Loan must be active"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cb56e7008de9796557c624fe8eaae426a4aa5a1736a5a202afc77a5eda039b69",
																"typeString": "literal_string \"Loan must be active\""
															}
														],
														"id": 4124,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4471:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4471:57:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4131,
												"nodeType": "ExpressionStatement",
												"src": "4471:57:18"
											},
											{
												"assignments": [
													4133
												],
												"declarations": [
													{
														"constant": false,
														"id": 4133,
														"mutability": "mutable",
														"name": "totalRepayment",
														"nameLocation": "4546:14:18",
														"nodeType": "VariableDeclaration",
														"scope": 4166,
														"src": "4538:22:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4132,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4538:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4139,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 4134,
															"name": "loanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "4563:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																"typeString": "struct TuliaPool.LoanDetails storage ref"
															}
														},
														"id": 4135,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4575:10:18",
														"memberName": "loanAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3850,
														"src": "4563:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 4136,
															"name": "calculateInterest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4212,
															"src": "4588:17:18",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																"typeString": "function () view returns (uint256)"
															}
														},
														"id": 4137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4588:19:18",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4563:44:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4538:69:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 4143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 4141,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4119,
																"src": "4625:6:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 4142,
																"name": "totalRepayment",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4133,
																"src": "4635:14:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4625:24:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420616d6f756e7420666f722072657061796d656e74",
															"id": 4144,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4651:35:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e7b63bc33369114a341dae612b29cd6b5c4292972a2a55d35136e4b521200022",
																"typeString": "literal_string \"Insufficient amount for repayment\""
															},
															"value": "Insufficient amount for repayment"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e7b63bc33369114a341dae612b29cd6b5c4292972a2a55d35136e4b521200022",
																"typeString": "literal_string \"Insufficient amount for repayment\""
															}
														],
														"id": 4140,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4617:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 4145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4617:70:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4146,
												"nodeType": "ExpressionStatement",
												"src": "4617:70:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 4152,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4742:3:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 4153,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4746:6:18",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4742:10:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 4154,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4754:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4155,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4766:6:18",
															"memberName": "lender",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3839,
															"src": "4754:18:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4156,
															"name": "totalRepayment",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4133,
															"src": "4774:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"expression": {
																"id": 4147,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "4698:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4150,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4710:14:18",
															"memberName": "repaymentToken",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3845,
															"src": "4698:26:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$964",
																"typeString": "contract IERC20"
															}
														},
														"id": 4151,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4725:16:18",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1788,
														"src": "4698:43:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$964_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$964_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 4157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4698:91:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4158,
												"nodeType": "ExpressionStatement",
												"src": "4698:91:18"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4159,
														"name": "_closeLoan",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4188,
														"src": "4799:10:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4160,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4799:12:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4161,
												"nodeType": "ExpressionStatement",
												"src": "4799:12:18"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 4163,
															"name": "totalRepayment",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4133,
															"src": "4840:14:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 4162,
														"name": "RepaymentMade",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3900,
														"src": "4826:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 4164,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4826:29:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4165,
												"nodeType": "EmitStatement",
												"src": "4821:34:18"
											}
										]
									},
									"functionSelector": "371fd8e6",
									"id": 4167,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4122,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4121,
												"name": "nonReentrant",
												"nameLocations": [
													"4448:12:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 336,
												"src": "4448:12:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "4448:12:18"
										}
									],
									"name": "repay",
									"nameLocation": "4417:5:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4119,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4431:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 4167,
												"src": "4423:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4422:16:18"
									},
									"returnParameters": {
										"id": 4123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4461:0:18"
									},
									"scope": 4270,
									"src": "4408:454:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 4187,
										"nodeType": "Block",
										"src": "4899:121:18",
										"statements": [
											{
												"expression": {
													"id": 4173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4170,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3873,
														"src": "4909:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 4171,
															"name": "LoanState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3870,
															"src": "4917:9:18",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_LoanState_$3870_$",
																"typeString": "type(enum TuliaPool.LoanState)"
															}
														},
														"id": 4172,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "4927:6:18",
														"memberName": "CLOSED",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3868,
														"src": "4917:16:18",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_LoanState_$3870",
															"typeString": "enum TuliaPool.LoanState"
														}
													},
													"src": "4909:24:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"id": 4174,
												"nodeType": "ExpressionStatement",
												"src": "4909:24:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 4180,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4980:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TuliaPool_$4270",
																		"typeString": "contract TuliaPool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TuliaPool_$4270",
																		"typeString": "contract TuliaPool"
																	}
																],
																"id": 4179,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4972:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 4178,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4972:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 4181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4972:13:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 4175,
															"name": "poolOrganizer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3837,
															"src": "4943:13:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPoolOrganizer_$3675",
																"typeString": "contract IPoolOrganizer"
															}
														},
														"id": 4177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4957:14:18",
														"memberName": "deregisterPool",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3641,
														"src": "4943:28:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address) external"
														}
													},
													"id": 4182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:43:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4183,
												"nodeType": "ExpressionStatement",
												"src": "4943:43:18"
											},
											{
												"eventCall": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4184,
														"name": "LoanClosed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3902,
														"src": "5001:10:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 4185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5001:12:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4186,
												"nodeType": "EmitStatement",
												"src": "4996:17:18"
											}
										]
									},
									"id": 4188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_closeLoan",
									"nameLocation": "4877:10:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4887:2:18"
									},
									"returnParameters": {
										"id": 4169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4899:0:18"
									},
									"scope": 4270,
									"src": "4868:152:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 4211,
										"nodeType": "Block",
										"src": "5085:196:18",
										"statements": [
											{
												"assignments": [
													4194
												],
												"declarations": [
													{
														"constant": false,
														"id": 4194,
														"mutability": "mutable",
														"name": "duration",
														"nameLocation": "5103:8:18",
														"nodeType": "VariableDeclaration",
														"scope": 4211,
														"src": "5095:16:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4193,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5095:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4200,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 4195,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "5114:5:18",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 4196,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5120:9:18",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "5114:15:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"expression": {
															"id": 4197,
															"name": "loanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "5132:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																"typeString": "struct TuliaPool.LoanDetails storage ref"
															}
														},
														"id": 4198,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5144:10:18",
														"memberName": "startBlock",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3861,
														"src": "5132:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5114:40:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5095:59:18"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 4204,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "5215:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4205,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5227:10:18",
															"memberName": "loanAmount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3850,
															"src": "5215:22:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 4206,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "5239:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4207,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5251:12:18",
															"memberName": "interestRate",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3852,
															"src": "5239:24:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 4208,
															"name": "duration",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4194,
															"src": "5265:8:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"expression": {
																"id": 4201,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "5171:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4202,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5183:13:18",
															"memberName": "interestModel",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3857,
															"src": "5171:25:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IInterestModel_$3573",
																"typeString": "contract IInterestModel"
															}
														},
														"id": 4203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5197:17:18",
														"memberName": "calculateInterest",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3572,
														"src": "5171:43:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) view external returns (uint256)"
														}
													},
													"id": 4209,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5171:103:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4192,
												"id": 4210,
												"nodeType": "Return",
												"src": "5164:110:18"
											}
										]
									},
									"functionSelector": "eb0c4955",
									"id": 4212,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateInterest",
									"nameLocation": "5035:17:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5052:2:18"
									},
									"returnParameters": {
										"id": 4192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4191,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4212,
												"src": "5076:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5076:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5075:9:18"
									},
									"scope": 4270,
									"src": "5026:255:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4227,
										"nodeType": "Block",
										"src": "5356:127:18",
										"statements": [
											{
												"assignments": [
													4218
												],
												"declarations": [
													{
														"constant": false,
														"id": 4218,
														"mutability": "mutable",
														"name": "interestForFullTerm",
														"nameLocation": "5374:19:18",
														"nodeType": "VariableDeclaration",
														"scope": 4227,
														"src": "5366:27:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4217,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5366:7:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4221,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 4219,
														"name": "calculateInterest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4212,
														"src": "5396:17:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 4220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5396:19:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5366:49:18"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 4222,
															"name": "loanDetails",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3876,
															"src": "5432:11:18",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																"typeString": "struct TuliaPool.LoanDetails storage ref"
															}
														},
														"id": 4223,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5444:10:18",
														"memberName": "loanAmount",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3850,
														"src": "5432:22:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 4224,
														"name": "interestForFullTerm",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4218,
														"src": "5457:19:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5432:44:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4216,
												"id": 4226,
												"nodeType": "Return",
												"src": "5425:51:18"
											}
										]
									},
									"functionSelector": "6b6d1955",
									"id": 4228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateRequiredCollateral",
									"nameLocation": "5296:27:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5323:2:18"
									},
									"returnParameters": {
										"id": 4216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4215,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4228,
												"src": "5347:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4214,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5347:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5346:9:18"
									},
									"scope": 4270,
									"src": "5287:196:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4236,
										"nodeType": "Block",
										"src": "5545:47:18",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 4233,
														"name": "loanDetails",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3876,
														"src": "5562:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
															"typeString": "struct TuliaPool.LoanDetails storage ref"
														}
													},
													"id": 4234,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5574:11:18",
													"memberName": "fundedBlock",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 3863,
													"src": "5562:23:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4232,
												"id": 4235,
												"nodeType": "Return",
												"src": "5555:30:18"
											}
										]
									},
									"functionSelector": "2e1283e3",
									"id": 4237,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getFundedBlock",
									"nameLocation": "5498:14:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5512:2:18"
									},
									"returnParameters": {
										"id": 4232,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4231,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4237,
												"src": "5536:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4230,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5536:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5535:9:18"
									},
									"scope": 4270,
									"src": "5489:103:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4245,
										"nodeType": "Block",
										"src": "5650:21:18",
										"statements": [
											{
												"expression": {
													"id": 4243,
													"name": "state",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3873,
													"src": "5663:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"functionReturnParameters": 4242,
												"id": 4244,
												"nodeType": "Return",
												"src": "5656:12:18"
											}
										]
									},
									"functionSelector": "9e9f669c",
									"id": 4246,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLoanState",
									"nameLocation": "5603:12:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5615:2:18"
									},
									"returnParameters": {
										"id": 4242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4241,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4246,
												"src": "5639:9:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_LoanState_$3870",
													"typeString": "enum TuliaPool.LoanState"
												},
												"typeName": {
													"id": 4240,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4239,
														"name": "LoanState",
														"nameLocations": [
															"5639:9:18"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3870,
														"src": "5639:9:18"
													},
													"referencedDeclaration": 3870,
													"src": "5639:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_LoanState_$3870",
														"typeString": "enum TuliaPool.LoanState"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5638:11:18"
									},
									"scope": 4270,
									"src": "5594:77:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4254,
										"nodeType": "Block",
										"src": "5727:38:18",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 4251,
														"name": "loanDetails",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3876,
														"src": "5740:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
															"typeString": "struct TuliaPool.LoanDetails storage ref"
														}
													},
													"id": 4252,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5752:10:18",
													"memberName": "loanAmount",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 3850,
													"src": "5740:22:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4250,
												"id": 4253,
												"nodeType": "Return",
												"src": "5733:29:18"
											}
										]
									},
									"functionSelector": "f4b01b18",
									"id": 4255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getLoanAmount",
									"nameLocation": "5681:13:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5694:2:18"
									},
									"returnParameters": {
										"id": 4250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4249,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4255,
												"src": "5718:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5718:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5717:9:18"
									},
									"scope": 4270,
									"src": "5672:93:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4268,
										"nodeType": "Block",
										"src": "5840:100:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 4265,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4257,
															"src": "5891:4:18",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"expression": {
																"id": 4262,
																"name": "loanDetails",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3876,
																"src": "5853:11:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_LoanDetails_$3864_storage",
																	"typeString": "struct TuliaPool.LoanDetails storage ref"
																}
															},
															"id": 4263,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5865:15:18",
															"memberName": "collateralVault",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3848,
															"src": "5853:27:18",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_TuliaVault_$4430",
																"typeString": "contract TuliaVault"
															}
														},
														"id": 4264,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5881:9:18",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 472,
														"src": "5853:37:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 4266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5853:43:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4261,
												"id": 4267,
												"nodeType": "Return",
												"src": "5846:50:18"
											}
										]
									},
									"functionSelector": "654c6295",
									"id": 4269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getCollateralAmount",
									"nameLocation": "5776:19:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4258,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4257,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "5804:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 4269,
												"src": "5796:12:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5796:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5795:14:18"
									},
									"returnParameters": {
										"id": 4261,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4260,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 4269,
												"src": "5831:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4259,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5831:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5830:9:18"
									},
									"scope": 4270,
									"src": "5767:173:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 4271,
							"src": "509:5433:18",
							"usedErrors": [
								1728,
								2009,
								2014,
								2017
							],
							"usedEvents": [
								3886,
								3892,
								3896,
								3900,
								3902
							]
						}
					],
					"src": "32:5911:18"
				},
				"id": 18
			},
			"contracts/contracts/protocol/TuliaVault.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/protocol/TuliaVault.sol",
					"exportedSymbols": {
						"ERC20": [
							886
						],
						"ERC4626": [
							1649
						],
						"IAllowanceTransfer": [
							3550
						],
						"IERC20": [
							964
						],
						"IERC20Metadata": [
							1675
						],
						"IERC4626": [
							169
						],
						"IPermit2": [
							3585
						],
						"ISignatureTransfer": [
							3815
						],
						"Math": [
							3338
						],
						"ReentrancyGuard": [
							371
						],
						"SafeERC20": [
							2001
						],
						"TuliaVault": [
							4430
						]
					},
					"id": 4431,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 4272,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 4273,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4431,
							"sourceUnit": 965,
							"src": "57:56:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol",
							"id": 4274,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4431,
							"sourceUnit": 1650,
							"src": "114:68:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 4275,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4431,
							"sourceUnit": 372,
							"src": "183:62:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IPermit2.sol",
							"file": "../interfaces/IPermit2.sol",
							"id": 4276,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 4431,
							"sourceUnit": 3586,
							"src": "246:36:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4278,
										"name": "ERC4626",
										"nameLocations": [
											"553:7:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1649,
										"src": "553:7:19"
									},
									"id": 4279,
									"nodeType": "InheritanceSpecifier",
									"src": "553:7:19"
								},
								{
									"baseName": {
										"id": 4280,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"562:15:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 371,
										"src": "562:15:19"
									},
									"id": 4281,
									"nodeType": "InheritanceSpecifier",
									"src": "562:15:19"
								}
							],
							"canonicalName": "TuliaVault",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4277,
								"nodeType": "StructuredDocumentation",
								"src": "284:246:19",
								"text": "@title TuliaVault\n @notice Manages the vault where assets are stored and facilitates tokenized shares representing ownership of the underlying assets.\n @dev Extends ERC4626 to utilize a permit system for streamlined deposit operations."
							},
							"fullyImplemented": true,
							"id": 4430,
							"linearizedBaseContracts": [
								4430,
								371,
								1649,
								169,
								886,
								211,
								1675,
								964,
								2284
							],
							"name": "TuliaVault",
							"nameLocation": "539:10:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "464582cb",
									"id": 4284,
									"mutability": "immutable",
									"name": "permitSystem",
									"nameLocation": "610:12:19",
									"nodeType": "VariableDeclaration",
									"scope": 4430,
									"src": "584:38:19",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IPermit2_$3585",
										"typeString": "contract IPermit2"
									},
									"typeName": {
										"id": 4283,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 4282,
											"name": "IPermit2",
											"nameLocations": [
												"584:8:19"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 3585,
											"src": "584:8:19"
										},
										"referencedDeclaration": 3585,
										"src": "584:8:19",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPermit2_$3585",
											"typeString": "contract IPermit2"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 4309,
										"nodeType": "Block",
										"src": "1190:45:19",
										"statements": [
											{
												"expression": {
													"id": 4307,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4305,
														"name": "permitSystem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4284,
														"src": "1200:12:19",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$3585",
															"typeString": "contract IPermit2"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 4306,
														"name": "_permitSystem",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4295,
														"src": "1215:13:19",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$3585",
															"typeString": "contract IPermit2"
														}
													},
													"src": "1200:28:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$3585",
														"typeString": "contract IPermit2"
													}
												},
												"id": 4308,
												"nodeType": "ExpressionStatement",
												"src": "1200:28:19"
											}
										]
									},
									"documentation": {
										"id": 4285,
										"nodeType": "StructuredDocumentation",
										"src": "629:391:19",
										"text": "@dev Initializes the TuliaVault with necessary details and links to the permit system for handling token operations securely.\n @param asset The ERC20 token that this vault will accept.\n @param name The name of the vault token.\n @param symbol The symbol of the vault token.\n @param _permitSystem Address of the Permit2 contract used for ERC20 token operations."
									},
									"id": 4310,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 4298,
													"name": "asset",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4288,
													"src": "1163:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												}
											],
											"id": 4299,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 4297,
												"name": "ERC4626",
												"nameLocations": [
													"1155:7:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1649,
												"src": "1155:7:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1155:14:19"
										},
										{
											"arguments": [
												{
													"id": 4301,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4290,
													"src": "1176:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 4302,
													"name": "symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4292,
													"src": "1182:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 4303,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 4300,
												"name": "ERC20",
												"nameLocations": [
													"1170:5:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 886,
												"src": "1170:5:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1170:19:19"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4288,
												"mutability": "mutable",
												"name": "asset",
												"nameLocation": "1053:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 4310,
												"src": "1046:12:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$964",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 4287,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4286,
														"name": "IERC20",
														"nameLocations": [
															"1046:6:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 964,
														"src": "1046:6:19"
													},
													"referencedDeclaration": 964,
													"src": "1046:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$964",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4290,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1082:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 4310,
												"src": "1068:18:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4289,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1068:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4292,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "1110:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 4310,
												"src": "1096:20:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 4291,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1096:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4295,
												"mutability": "mutable",
												"name": "_permitSystem",
												"nameLocation": "1135:13:19",
												"nodeType": "VariableDeclaration",
												"scope": 4310,
												"src": "1126:22:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPermit2_$3585",
													"typeString": "contract IPermit2"
												},
												"typeName": {
													"id": 4294,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4293,
														"name": "IPermit2",
														"nameLocations": [
															"1126:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3585,
														"src": "1126:8:19"
													},
													"referencedDeclaration": 3585,
													"src": "1126:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$3585",
														"typeString": "contract IPermit2"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1036:118:19"
									},
									"returnParameters": {
										"id": 4304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1190:0:19"
									},
									"scope": 4430,
									"src": "1025:210:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4345,
										"nodeType": "Block",
										"src": "1930:268:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 4330,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2018:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 4331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2022:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2018:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 4332,
															"name": "permitData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4316,
															"src": "2030:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_PermitSingle_$3427_memory_ptr",
																"typeString": "struct IAllowanceTransfer.PermitSingle memory"
															}
														},
														{
															"id": 4333,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4318,
															"src": "2042:9:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_struct$_PermitSingle_$3427_memory_ptr",
																"typeString": "struct IAllowanceTransfer.PermitSingle memory"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"id": 4327,
															"name": "permitSystem",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4284,
															"src": "1998:12:19",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IPermit2_$3585",
																"typeString": "contract IPermit2"
															}
														},
														"id": 4329,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2011:6:19",
														"memberName": "permit",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3500,
														"src": "1998:19:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_struct$_PermitSingle_$3427_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,struct IAllowanceTransfer.PermitSingle memory,bytes memory) external"
														}
													},
													"id": 4334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:54:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 4335,
												"nodeType": "ExpressionStatement",
												"src": "1998:54:19"
											},
											{
												"expression": {
													"id": 4341,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4336,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4325,
														"src": "2134:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 4338,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4313,
																"src": "2151:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 4339,
																"name": "receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4320,
																"src": "2159:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 4337,
															"name": "deposit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1362,
															"src": "2143:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (uint256,address) returns (uint256)"
															}
														},
														"id": 4340,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2143:25:19",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2134:34:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4342,
												"nodeType": "ExpressionStatement",
												"src": "2134:34:19"
											},
											{
												"expression": {
													"id": 4343,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4325,
													"src": "2185:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4326,
												"id": 4344,
												"nodeType": "Return",
												"src": "2178:13:19"
											}
										]
									},
									"documentation": {
										"id": 4311,
										"nodeType": "StructuredDocumentation",
										"src": "1241:473:19",
										"text": "@notice Deposits assets into the vault with permit approval, issuing shares of the vault in return.\n @param amount The amount of the underlying asset to deposit.\n @param permitData Data required for the permit including details about the approval.\n @param signature Signature from the token holder approving the deposit.\n @param receiver Address receiving the vault shares.\n @return shares The number of shares issued to the receiver."
									},
									"functionSelector": "e6adb29c",
									"id": 4346,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4323,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4322,
												"name": "nonReentrant",
												"nameLocations": [
													"1892:12:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 336,
												"src": "1892:12:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "1892:12:19"
										}
									],
									"name": "depositWithPermit",
									"nameLocation": "1728:17:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4313,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1763:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 4346,
												"src": "1755:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1755:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4316,
												"mutability": "mutable",
												"name": "permitData",
												"nameLocation": "1808:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 4346,
												"src": "1779:39:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitSingle_$3427_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitSingle"
												},
												"typeName": {
													"id": 4315,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 4314,
														"name": "IPermit2.PermitSingle",
														"nameLocations": [
															"1779:8:19",
															"1788:12:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 3427,
														"src": "1779:21:19"
													},
													"referencedDeclaration": 3427,
													"src": "1779:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitSingle_$3427_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitSingle"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4318,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "1843:9:19",
												"nodeType": "VariableDeclaration",
												"scope": 4346,
												"src": "1828:24:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 4317,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1828:5:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4320,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1870:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 4346,
												"src": "1862:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1862:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1745:139:19"
									},
									"returnParameters": {
										"id": 4326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4325,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "1922:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 4346,
												"src": "1914:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1913:16:19"
									},
									"scope": 4430,
									"src": "1719:479:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 4428,
										"nodeType": "Block",
										"src": "2807:619:19",
										"statements": [
											{
												"assignments": [
													4364
												],
												"declarations": [
													{
														"constant": false,
														"id": 4364,
														"mutability": "mutable",
														"name": "totalAmount",
														"nameLocation": "2825:11:19",
														"nodeType": "VariableDeclaration",
														"scope": 4428,
														"src": "2817:19:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 4363,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2817:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 4366,
												"initialValue": {
													"hexValue": "30",
													"id": 4365,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2839:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2817:23:19"
											},
											{
												"body": {
													"id": 4417,
													"nodeType": "Block",
													"src": "2899:380:19",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 4381,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2998:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 4382,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3002:6:19",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2998:10:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 4383,
																			"name": "permitData",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4351,
																			"src": "3010:10:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_memory_ptr_$dyn_memory_ptr",
																				"typeString": "struct IAllowanceTransfer.PermitBatch memory[] memory"
																			}
																		},
																		"id": 4385,
																		"indexExpression": {
																			"id": 4384,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4368,
																			"src": "3021:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3010:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_PermitBatch_$3437_memory_ptr",
																			"typeString": "struct IAllowanceTransfer.PermitBatch memory"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 4386,
																			"name": "signatures",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4354,
																			"src": "3025:10:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
																				"typeString": "bytes calldata[] calldata"
																			}
																		},
																		"id": 4388,
																		"indexExpression": {
																			"id": 4387,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4368,
																			"src": "3036:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "3025:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_struct$_PermitBatch_$3437_memory_ptr",
																			"typeString": "struct IAllowanceTransfer.PermitBatch memory"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"expression": {
																		"id": 4378,
																		"name": "permitSystem",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4284,
																		"src": "2978:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IPermit2_$3585",
																			"typeString": "contract IPermit2"
																		}
																	},
																	"id": 4380,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2991:6:19",
																	"memberName": "permit",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3511,
																	"src": "2978:19:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_struct$_PermitBatch_$3437_memory_ptr_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (address,struct IAllowanceTransfer.PermitBatch memory,bytes memory) external"
																	}
																},
																"id": 4389,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2978:61:19",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 4390,
															"nodeType": "ExpressionStatement",
															"src": "2978:61:19"
														},
														{
															"body": {
																"id": 4415,
																"nodeType": "Block",
																"src": "3190:79:19",
																"statements": [
																	{
																		"expression": {
																			"id": 4413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 4405,
																				"name": "totalAmount",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4364,
																				"src": "3208:11:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"expression": {
																					"baseExpression": {
																						"expression": {
																							"baseExpression": {
																								"id": 4406,
																								"name": "permitData",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4351,
																								"src": "3223:10:19",
																								"typeDescriptions": {
																									"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_memory_ptr_$dyn_memory_ptr",
																									"typeString": "struct IAllowanceTransfer.PermitBatch memory[] memory"
																								}
																							},
																							"id": 4408,
																							"indexExpression": {
																								"id": 4407,
																								"name": "i",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4368,
																								"src": "3234:1:19",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": false,
																							"nodeType": "IndexAccess",
																							"src": "3223:13:19",
																							"typeDescriptions": {
																								"typeIdentifier": "t_struct$_PermitBatch_$3437_memory_ptr",
																								"typeString": "struct IAllowanceTransfer.PermitBatch memory"
																							}
																						},
																						"id": 4409,
																						"isConstant": false,
																						"isLValue": true,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "3237:7:19",
																						"memberName": "details",
																						"nodeType": "MemberAccess",
																						"referencedDeclaration": 3432,
																						"src": "3223:21:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_array$_t_struct$_PermitDetails_$3418_memory_ptr_$dyn_memory_ptr",
																							"typeString": "struct IAllowanceTransfer.PermitDetails memory[] memory"
																						}
																					},
																					"id": 4411,
																					"indexExpression": {
																						"id": 4410,
																						"name": "j",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 4392,
																						"src": "3245:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"isConstant": false,
																					"isLValue": true,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "IndexAccess",
																					"src": "3223:24:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_PermitDetails_$3418_memory_ptr",
																						"typeString": "struct IAllowanceTransfer.PermitDetails memory"
																					}
																				},
																				"id": 4412,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3248:6:19",
																				"memberName": "amount",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 3413,
																				"src": "3223:31:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint160",
																					"typeString": "uint160"
																				}
																			},
																			"src": "3208:46:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 4414,
																		"nodeType": "ExpressionStatement",
																		"src": "3208:46:19"
																	}
																]
															},
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 4401,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 4395,
																	"name": "j",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4392,
																	"src": "3151:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"expression": {
																		"expression": {
																			"baseExpression": {
																				"id": 4396,
																				"name": "permitData",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4351,
																				"src": "3155:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_memory_ptr_$dyn_memory_ptr",
																					"typeString": "struct IAllowanceTransfer.PermitBatch memory[] memory"
																				}
																			},
																			"id": 4398,
																			"indexExpression": {
																				"id": 4397,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4368,
																				"src": "3166:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3155:13:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_PermitBatch_$3437_memory_ptr",
																				"typeString": "struct IAllowanceTransfer.PermitBatch memory"
																			}
																		},
																		"id": 4399,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "3169:7:19",
																		"memberName": "details",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3432,
																		"src": "3155:21:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_struct$_PermitDetails_$3418_memory_ptr_$dyn_memory_ptr",
																			"typeString": "struct IAllowanceTransfer.PermitDetails memory[] memory"
																		}
																	},
																	"id": 4400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3177:6:19",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "3155:28:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3151:32:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 4416,
															"initializationExpression": {
																"assignments": [
																	4392
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 4392,
																		"mutability": "mutable",
																		"name": "j",
																		"nameLocation": "3144:1:19",
																		"nodeType": "VariableDeclaration",
																		"scope": 4416,
																		"src": "3136:9:19",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"typeName": {
																			"id": 4391,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "3136:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 4394,
																"initialValue": {
																	"hexValue": "30",
																	"id": 4393,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3148:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"nodeType": "VariableDeclarationStatement",
																"src": "3136:13:19"
															},
															"isSimpleCounterLoop": true,
															"loopExpression": {
																"expression": {
																	"id": 4403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "++",
																	"prefix": false,
																	"src": "3185:3:19",
																	"subExpression": {
																		"id": 4402,
																		"name": "j",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4392,
																		"src": "3185:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 4404,
																"nodeType": "ExpressionStatement",
																"src": "3185:3:19"
															},
															"nodeType": "ForStatement",
															"src": "3131:138:19"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 4374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 4371,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4368,
														"src": "2871:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 4372,
															"name": "permitData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4351,
															"src": "2875:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_memory_ptr_$dyn_memory_ptr",
																"typeString": "struct IAllowanceTransfer.PermitBatch memory[] memory"
															}
														},
														"id": 4373,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2886:6:19",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2875:17:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2871:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 4418,
												"initializationExpression": {
													"assignments": [
														4368
													],
													"declarations": [
														{
															"constant": false,
															"id": 4368,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2864:1:19",
															"nodeType": "VariableDeclaration",
															"scope": 4418,
															"src": "2856:9:19",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 4367,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2856:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 4370,
													"initialValue": {
														"hexValue": "30",
														"id": 4369,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2868:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2856:13:19"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 4376,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2894:3:19",
														"subExpression": {
															"id": 4375,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4368,
															"src": "2894:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 4377,
													"nodeType": "ExpressionStatement",
													"src": "2894:3:19"
												},
												"nodeType": "ForStatement",
												"src": "2851:428:19"
											},
											{
												"expression": {
													"id": 4424,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 4419,
														"name": "shares",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4361,
														"src": "3357:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 4421,
																"name": "totalAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4364,
																"src": "3374:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 4422,
																"name": "receiver",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4356,
																"src": "3387:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 4420,
															"name": "deposit",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1362,
															"src": "3366:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (uint256,address) returns (uint256)"
															}
														},
														"id": 4423,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3366:30:19",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3357:39:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 4425,
												"nodeType": "ExpressionStatement",
												"src": "3357:39:19"
											},
											{
												"expression": {
													"id": 4426,
													"name": "shares",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4361,
													"src": "3413:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 4362,
												"id": 4427,
												"nodeType": "Return",
												"src": "3406:13:19"
											}
										]
									},
									"documentation": {
										"id": 4347,
										"nodeType": "StructuredDocumentation",
										"src": "2204:402:19",
										"text": "@notice Allows batch deposits using multiple permits for efficiency in transactions.\n @param permitData Array of permit data for each deposit.\n @param signatures Array of signatures corresponding to each permit data.\n @param receiver Address receiving the vault shares for all deposits.\n @return shares The total number of shares issued to the receiver for all deposits."
									},
									"functionSelector": "7b17edf2",
									"id": 4429,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 4359,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 4358,
												"name": "nonReentrant",
												"nameLocations": [
													"2769:12:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 336,
												"src": "2769:12:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "2769:12:19"
										}
									],
									"name": "depositWithBatchPermit",
									"nameLocation": "2620:22:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4351,
												"mutability": "mutable",
												"name": "permitData",
												"nameLocation": "2682:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 4429,
												"src": "2652:40:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitBatch[]"
												},
												"typeName": {
													"baseType": {
														"id": 4349,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 4348,
															"name": "IPermit2.PermitBatch",
															"nameLocations": [
																"2652:8:19",
																"2661:11:19"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 3437,
															"src": "2652:20:19"
														},
														"referencedDeclaration": 3437,
														"src": "2652:20:19",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_PermitBatch_$3437_storage_ptr",
															"typeString": "struct IAllowanceTransfer.PermitBatch"
														}
													},
													"id": 4350,
													"nodeType": "ArrayTypeName",
													"src": "2652:22:19",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_PermitBatch_$3437_storage_$dyn_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitBatch[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4354,
												"mutability": "mutable",
												"name": "signatures",
												"nameLocation": "2719:10:19",
												"nodeType": "VariableDeclaration",
												"scope": 4429,
												"src": "2702:27:19",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "bytes[]"
												},
												"typeName": {
													"baseType": {
														"id": 4352,
														"name": "bytes",
														"nodeType": "ElementaryTypeName",
														"src": "2702:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_storage_ptr",
															"typeString": "bytes"
														}
													},
													"id": 4353,
													"nodeType": "ArrayTypeName",
													"src": "2702:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
														"typeString": "bytes[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 4356,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "2747:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 4429,
												"src": "2739:16:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2739:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2642:119:19"
									},
									"returnParameters": {
										"id": 4362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4361,
												"mutability": "mutable",
												"name": "shares",
												"nameLocation": "2799:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 4429,
												"src": "2791:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 4360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:16:19"
									},
									"scope": 4430,
									"src": "2611:815:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 4431,
							"src": "530:2898:19",
							"usedErrors": [
								181,
								186,
								191,
								200,
								205,
								210,
								998,
								1007,
								1016,
								1025,
								1728,
								2009,
								2014,
								2017,
								2290
							],
							"usedEvents": [
								20,
								32,
								898,
								907
							]
						}
					],
					"src": "32:3397:19"
				},
				"id": 19
			}
		}
	}
}