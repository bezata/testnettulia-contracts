{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "maxAmount",
						"type": "uint256"
					}
				],
				"name": "InvalidAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidContractSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidNonce",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSigner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LengthMismatch",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "signatureDeadline",
						"type": "uint256"
					}
				],
				"name": "SignatureExpired",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "word",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "mask",
						"type": "uint256"
					}
				],
				"name": "UnorderedNonceInvalidation",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wordPos",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "mask",
						"type": "uint256"
					}
				],
				"name": "invalidateUnorderedNonces",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "nonceBitmap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions",
								"name": "permitted",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
						"name": "transferDetails",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions[]",
								"name": "permitted",
								"type": "tuple[]"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions",
								"name": "permitted",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
						"name": "transferDetails",
						"type": "tuple"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "witness",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "witnessTypeString",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitWitnessTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "amount",
										"type": "uint256"
									}
								],
								"internalType": "struct ISignatureTransfer.TokenPermissions[]",
								"name": "permitted",
								"type": "tuple[]"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
						"name": "permit",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "requestedAmount",
								"type": "uint256"
							}
						],
						"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "witness",
						"type": "bytes32"
					},
					{
						"internalType": "string",
						"name": "witnessTypeString",
						"type": "string"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permitWitnessTransferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidAmount(uint256)": [
					{
						"params": {
							"maxAmount": "The maximum amount a spender can request to transfer"
						}
					}
				],
				"LengthMismatch()": [
					{
						"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
					}
				],
				"SignatureExpired(uint256)": [
					{
						"params": {
							"signatureDeadline": "The timestamp at which a signature is no longer valid"
						}
					}
				]
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Uses cached version if chainid and address are unchanged from construction."
				},
				"invalidateUnorderedNonces(uint256,uint256)": {
					"details": "The wordPos is maxed at type(uint248).max",
					"params": {
						"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
						"wordPos": "A number to index the nonceBitmap at"
					}
				},
				"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
					"details": "Reverts if the requested amount is greater than the permitted signed amount",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "The spender's requested transfer details for the permitted token"
					}
				},
				"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "Specifies the recipient and requested amount for the token transfer"
					}
				},
				"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
					"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "The spender's requested transfer details for the permitted token",
						"witness": "Extra data to include when checking the user signature",
						"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
					}
				},
				"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
					"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
					"params": {
						"owner": "The owner of the tokens to transfer",
						"permit": "The permit data signed over by the owner",
						"signature": "The signature to verify",
						"transferDetails": "Specifies the recipient and requested amount for the token transfer",
						"witness": "Extra data to include when checking the user signature",
						"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
					}
				}
			},
			"stateVariables": {
				"nonceBitmap": {
					"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"InvalidAmount(uint256)": [
					{
						"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
					}
				],
				"InvalidContractSignature()": [
					{
						"notice": "Thrown when the recovered contract signature is incorrect"
					}
				],
				"InvalidNonce()": [
					{
						"notice": "Thrown when validating that the inputted nonce has not been used"
					}
				],
				"InvalidSignature()": [
					{
						"notice": "Thrown when the recovered signer is equal to the zero address"
					}
				],
				"InvalidSignatureLength()": [
					{
						"notice": "Thrown when the passed in signature is not a valid length"
					}
				],
				"InvalidSigner()": [
					{
						"notice": "Thrown when the recovered signer does not equal the claimedSigner"
					}
				],
				"LengthMismatch()": [
					{
						"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
					}
				],
				"SignatureExpired(uint256)": [
					{
						"notice": "Thrown when validating an inputted signature that is stale"
					}
				]
			},
			"events": {
				"UnorderedNonceInvalidation(address,uint256,uint256)": {
					"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
				}
			},
			"kind": "user",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"notice": "Returns the domain separator for the current chain."
				},
				"invalidateUnorderedNonces(uint256,uint256)": {
					"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
				},
				"nonceBitmap(address,uint256)": {
					"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
				},
				"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
					"notice": "Transfers a token using a signed permit message"
				},
				"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
					"notice": "Transfers multiple tokens using a signed permit message"
				},
				"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
					"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
				},
				"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
					"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/permit2/SignatureTransfer.sol": "SignatureTransfer"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
			"keccak256": "0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29",
			"license": "MIT",
			"urls": [
				"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0",
				"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN"
			]
		},
		"contracts/contracts/interfaces/IEIP712.sol": {
			"keccak256": "0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72",
				"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk"
			]
		},
		"contracts/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x0a546b8535127fb4a49d36d5f306fd5a8bbe6125a1852f935b9bb85a04c1acef",
			"license": "MIT",
			"urls": [
				"bzz-raw://4b99651e2df98e283a97c46d8d1ac4eff0d6a3618e25f7f85294472a670b541c",
				"dweb:/ipfs/QmYRy5G8fXE8BfmyvGEbESEYZPPg3zJEFxHzR5GJZEMMTk"
			]
		},
		"contracts/contracts/interfaces/ISignatureTransfer.sol": {
			"keccak256": "0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317",
				"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d"
			]
		},
		"contracts/contracts/lib/PermitHash.sol": {
			"keccak256": "0xbd0fcb52a5a753f77b10f30d653e638bf40705a0aa10cf96978ef82ea926e637",
			"license": "MIT",
			"urls": [
				"bzz-raw://de007b53ff2757733e919d17d53dc0c0b1e1f856132e0004dd9f79272472a093",
				"dweb:/ipfs/QmST5dKQYMZWD6magJPUXsJSWf57Rr5nWi1AgethhAvoCj"
			]
		},
		"contracts/contracts/lib/SignatureVerification.sol": {
			"keccak256": "0xb5cf5e3c9407dc26f95d01170dbc2c82cd5c210ecc39ad3559b314df0c0c90d0",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a5929df7b7ad16e2a429e5e76712f95d914d1e72d8350cd3b445e84058bbb2",
				"dweb:/ipfs/QmXBnuFKWjK3huwN9qoePSyxT9qwpdGXfpTgjApRPiQsrd"
			]
		},
		"contracts/contracts/permit2/EIP712.sol": {
			"keccak256": "0x8bf0e994a040c5de83f9848dca37b71b45bf09d6b8028a925a76d1c917654b6d",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0435626dccaaa530a392320a9099d489e6d28155c8a20cb86579517f5336a2",
				"dweb:/ipfs/QmbVkXYsMxqYoiTH5WLNjhToJWbjMSuqGLGVBj7SU69khP"
			]
		},
		"contracts/contracts/permit2/PermitErrors.sol": {
			"keccak256": "0x42d48b78944c43d75496f49a62e1a9b858c2ecacc09f016a68204f7cac9ab014",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ed8221dc84848fd5aa1234b68d31adf9bded04a56175e545fe0119a5a886674",
				"dweb:/ipfs/QmQQGA8GFVvTDdism9JxAFqFoy37fokryqwnzixeQNenui"
			]
		},
		"contracts/contracts/permit2/SignatureTransfer.sol": {
			"keccak256": "0x0767c6a0bb19bc17f13722a025a884443f42fa81a0ed9ee59e2c20635cb42f65",
			"license": "MIT",
			"urls": [
				"bzz-raw://b47baa98ef94393858a3efb69f730a00fdb74d7358491f1279bc4e4a0793caeb",
				"dweb:/ipfs/QmRC7FW4DonX61oYtu7RFv6uza1ZTxG3vSkEWB5biHZirV"
			]
		},
		"solmate/src/tokens/ERC20.sol": {
			"keccak256": "0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35",
				"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97"
			]
		},
		"solmate/src/utils/SafeTransferLib.sol": {
			"keccak256": "0x6ab948013c2c7ca6351e593600425b0ec6df9035320280c678e735bce16e996b",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://2ab977d0eeb2bf458f9798250215c646d2f3b1f90b5a7e2b506fdf3335c0f060",
				"dweb:/ipfs/QmYPRoPhNtBAmCSq7imN1scMVpKNQvMTpoqab3tXUx5Tnv"
			]
		}
	},
	"version": 1
}