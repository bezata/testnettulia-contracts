{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "vaultManager",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "rewardManager",
						"type": "address"
					}
				],
				"name": "ManagerRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "PoolDeregistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "lender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum IPoolOrganizer.PoolType",
						"name": "poolType",
						"type": "uint8"
					}
				],
				"name": "PoolRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "POOL_MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "deregisterPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getManagers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getPoolDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "lender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "creationTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "loanToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "assetToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "loanAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interestRate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "repaymentPeriod",
								"type": "uint256"
							},
							{
								"internalType": "enum IPoolOrganizer.PoolType",
								"name": "poolType",
								"type": "uint8"
							}
						],
						"internalType": "struct IPoolOrganizer.PoolDetails",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					}
				],
				"name": "getPoolsByLender",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalPools",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getVaultForPool",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "factoryAddress",
						"type": "address"
					}
				],
				"name": "grantFactoryAccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolVaults",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_vaultManager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardManager",
						"type": "address"
					}
				],
				"name": "registerManagers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "loanToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "assetToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "loanAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "repaymentPeriod",
						"type": "uint256"
					},
					{
						"internalType": "enum IPoolOrganizer.PoolType",
						"name": "poolType",
						"type": "uint8"
					}
				],
				"name": "registerPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardManager",
				"outputs": [
					{
						"internalType": "contract IRewardManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vaultManager",
				"outputs": [
					{
						"internalType": "contract IVaultManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements access control and management for pool lifecycle and integration with external managers.",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				]
			},
			"events": {
				"ManagerRegistered(address,address)": {
					"details": "Emitted when managers are registered."
				},
				"PoolDeregistered(address)": {
					"details": "Emitted when a pool is deregistered."
				},
				"PoolRegistered(address,address,address,address,uint8)": {
					"details": "Emitted when a pool is registered."
				},
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				}
			},
			"kind": "dev",
			"methods": {
				"deregisterPool(address)": {
					"params": {
						"pool": "The address of the pool to deregister."
					}
				},
				"getManagers()": {
					"returns": {
						"_0": "A tuple containing the addresses of the VaultManager and RewardManager."
					}
				},
				"getPoolDetails(address)": {
					"params": {
						"pool": "The address of the pool."
					},
					"returns": {
						"_0": "Details of the specified pool."
					}
				},
				"getPoolsByLender(address)": {
					"params": {
						"lender": "The address of the lender."
					},
					"returns": {
						"_0": "An array of pool addresses."
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getTotalPools()": {
					"returns": {
						"_0": "The total number of pools."
					}
				},
				"getVaultForPool(address)": {
					"params": {
						"pool": "The address of the pool."
					},
					"returns": {
						"_0": "The address of the vault linked to the pool."
					}
				},
				"grantFactoryAccess(address)": {
					"params": {
						"factoryAddress": "The address of the factory to be granted access."
					}
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"registerManagers(address,address)": {
					"params": {
						"_rewardManager": "Address of the RewardManager contract.",
						"_vaultManager": "Address of the VaultManager contract."
					}
				},
				"registerPool(address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"params": {
						"assetToken": "The address of the asset token used as collateral.",
						"borrower": "The address of the borrower (if known at this point, otherwise zero).",
						"interestRate": "The interest rate of the loan.",
						"lender": "The address of the lender.",
						"loanAmount": "The amount of the loan.",
						"loanToken": "The address of the loan token.",
						"pool": "The address of the new pool.",
						"poolType": "The type of the pool (standard or flash).",
						"repaymentPeriod": "The period over which the loan is to be repaid.",
						"vault": "The address of the vault associated with the pool."
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				}
			},
			"title": "Pool Organizer for managing pools, vaults, and rewards.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deregisterPool(address)": {
					"notice": "Deregisters a pool from the organizer."
				},
				"getManagers()": {
					"notice": "Returns the addresses of the VaultManager and RewardManager."
				},
				"getPoolDetails(address)": {
					"notice": "Retrieves details for a specific pool."
				},
				"getPoolsByLender(address)": {
					"notice": "Retrieves all pools associated with a specific lender."
				},
				"getTotalPools()": {
					"notice": "Retrieves the total number of registered pools."
				},
				"getVaultForPool(address)": {
					"notice": "Retrieves the vault associated with a specific pool."
				},
				"grantFactoryAccess(address)": {
					"notice": "Grants factory access to manage pools."
				},
				"registerManagers(address,address)": {
					"notice": "Registers the manager contracts for managing vaults and rewards."
				},
				"registerPool(address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"notice": "Registers a new pool within the organizer."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/lib/VaultManager.sol": "PoolOrganizer"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
				"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"contracts/contracts/interfaces/IPoolOrganizer.sol": {
			"keccak256": "0x59ff86f25c1bc3bb33995bab912a576832e70686099fd8425804d1f158750404",
			"license": "MIT",
			"urls": [
				"bzz-raw://3c8a718c3608bc8e0e2a3fa6928886033a1bc389198861e6dd2dbe7b1fa5e0ef",
				"dweb:/ipfs/QmYRb22rqgYnZhaFJpHEMCys9QMGDyZzy66JSiAxFwjHJP"
			]
		},
		"contracts/contracts/interfaces/IRewardManager.sol": {
			"keccak256": "0x4ecc06fd80972965308940cd234dace06af6243b898beff26191dc0075138fdb",
			"license": "MIT",
			"urls": [
				"bzz-raw://b4c646be19b16cac987a798e382ecbaa9c632f2b865b2089ea0a70c84018d929",
				"dweb:/ipfs/Qmccfw8YSKJveTkAkYbJbc8dqUXi6TJRtf2tY8XYsJ37gz"
			]
		},
		"contracts/contracts/interfaces/IVaultManager.sol": {
			"keccak256": "0x5922583fd6d48d81d21d817ce3f36d95621d6775b1a30f0d53e1a5410509439c",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c03d8480ae9a02d7d148d2949f00534c20905bcfe4486bc63af8bdfd993ae32",
				"dweb:/ipfs/QmSJ53D3cWoYSDKYKXt5wkYRT3n1ejJnf5Ls9KymTxH6k1"
			]
		},
		"contracts/contracts/lib/VaultManager.sol": {
			"keccak256": "0x7717d6de647269ba9e240af2da2f18f5afabbd8f929d1e01190f936b405e734e",
			"license": "MIT",
			"urls": [
				"bzz-raw://86965850fa4c543d5a3a537f6f837d2f487b2322c7a7df20df23096df281475e",
				"dweb:/ipfs/QmWxi2EQUNN9E6qrRB6hghdcV63nmcUjfbwNwZtV8WJ9zL"
			]
		}
	},
	"version": 1
}