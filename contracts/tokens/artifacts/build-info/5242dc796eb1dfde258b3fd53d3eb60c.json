{
	"id": "5242dc796eb1dfde258b3fd53d3eb60c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/contracts/tokens/BulkMinter.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"./MockTokenCreator.sol\"; // Assuming MockTokenCreator is in the same directory\r\n\r\n/**\r\n * @title BulkMinter\r\n * @dev This contract allows the minting of multiple ERC20 tokens to the caller in a single transaction.\r\n */\r\ncontract BulkMinter is Ownable {\r\n    /// @notice Array to hold the addresses of the deployed ERC20 contracts.\r\n    MockTokenCreator[] public tokens;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the initial owner.\r\n     * @param initialOwner The address of the initial owner.\r\n     */\r\n    constructor(address initialOwner) Ownable(initialOwner) {\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a new token contract to the list.\r\n     * @param token The address of the token contract.\r\n     */\r\n    function addToken(address token) external onlyOwner {\r\n        tokens.push(MockTokenCreator(token));\r\n    }\r\n\r\n    /**\r\n     * @notice Mints tokens from all the listed contracts to the caller.\r\n     * @dev The `amounts` array must match the length of the `tokens` array.\r\n     * @param amounts An array of amounts to mint from each token contract.\r\n     * The array index corresponds to the token contract index.\r\n     */\r\n    function mintAll(uint256[] calldata amounts) external {\r\n        require(amounts.length == tokens.length, \"Amounts array length must match tokens array length.\");\r\n\r\n        for (uint256 i = 0; i < tokens.length; i++) {\r\n            tokens[i].mint(msg.sender, amounts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the number of token contracts added.\r\n     * @return The number of token contracts.\r\n     */\r\n    function getTokenCount() external view returns (uint256) {\r\n        return tokens.length;\r\n    }\r\n}\r\n"
			},
			"contracts/contracts/tokens/MockTokenCreator.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\n\r\n/**\r\n * @title MockTokenCreator\r\n * @dev Extension of OpenZeppelin's ERC20 and ERC20Permit contract.\r\n * Allows for minting and burning of tokens, and includes permit functionality.\r\n */\r\ncontract MockTokenCreator is ERC20, ERC20Permit {\r\n    /**\r\n     * @dev Initializes the contract with the token name and symbol, and sets up permit functionality.\r\n     * @param name The name of the token.\r\n     * @param symbol The symbol of the token.\r\n     */\r\n    constructor(string memory name, string memory symbol)\r\n        ERC20(name, symbol)\r\n        ERC20Permit(name)\r\n    {}\r\n\r\n    /**\r\n     * @notice Mints `amount` tokens to address `to`.\r\n     * @dev Caller must have a role that allows them to mint (not implemented in this simple example).\r\n     * @param to The address of the recipient.\r\n     * @param amount The number of tokens to mint.\r\n     */\r\n    function mint(address to, uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Burns `amount` tokens from the callerâ€™s account.\r\n     * @dev Caller must have at least `amount` tokens.\r\n     * @param amount The number of tokens to burn.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n Ã· 2 + 1, and for v in (302): v âˆˆ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // â†’ `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // â†’ `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`â€™s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`â€™s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2183,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2185,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1162,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1162,
								"contract": "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220d5e23e43517bb38cebc721835c95125c112be79f826e8aac6ecf9307152abf8364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d5e23e43517bb38cebc721835c95125c112be79f826e8aac6ecf9307152abf8364736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 0xE2 RETURNDATACOPY NUMBER MLOAD PUSH28 0xB38CEBC721835C95125C112BE79F826E8AAC6ECF9307152ABF836473 PUSH16 0x6C634300081A00330000000000000000 ",
							"sourceMap": "1255:3053:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1255:3053:10;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d5e23e43517bb38cebc721835c95125c112be79f826e8aac6ecf9307152abf8364736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD5 0xE2 RETURNDATACOPY NUMBER MLOAD PUSH28 0xB38CEBC721835C95125C112BE79F826E8AAC6ECF9307152ABF836473 PUSH16 0x6C634300081A00330000000000000000 ",
							"sourceMap": "1255:3053:10:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "B"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "BYTE",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ADDRESS",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 10,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE8",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "RETURN",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d5e23e43517bb38cebc721835c95125c112be79f826e8aac6ecf9307152abf8364736f6c634300081a0033",
									".code": [
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSHDEPLOYADDRESS",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "REVERT",
											"source": 10
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122009971487be252fe8fb3f93e06bd7d41310db95f162c4852fda7c70255c9c50c864736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122009971487be252fe8fb3f93e06bd7d41310db95f162c4852fda7c70255c9c50c864736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SWAP8 EQ DUP8 0xBE 0x25 0x2F 0xE8 0xFB EXTCODEHASH SWAP4 0xE0 PUSH12 0xD7D41310DB95F162C4852FDA PUSH29 0x70255C9C50C864736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1245:2685:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122009971487be252fe8fb3f93e06bd7d41310db95f162c4852fda7c70255c9c50c864736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MULMOD SWAP8 EQ DUP8 0xBE 0x25 0x2F 0xE8 0xFB EXTCODEHASH SWAP4 0xE0 PUSH12 0xD7D41310DB95F162C4852FDA PUSH29 0x70255C9C50C864736F6C634300081A0033000000000000000000000000 ",
							"sourceMap": "1245:2685:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122009971487be252fe8fb3f93e06bd7d41310db95f162c4852fda7c70255c9c50c864736f6c634300081a0033",
									".code": [
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0xDB PUSH28 0xE255564B18B33C0F84A547E54BCA47EB358F2C24348440DB5A4E9FE0 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOBHASH 0xDB PUSH28 0xE255564B18B33C0F84A547E54BCA47EB358F2C24348440DB5A4E9FE0 0xE2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122049db7be255564b18b33c0f84a547e54bca47eb358f2c24348440db5a4e9fe0e264736f6c634300081a0033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220b4a16a2228777207092fb0b617ccc8b5f9833a7c74dfe68e73d968fecc2b9db564736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b4a16a2228777207092fb0b617ccc8b5f9833a7c74dfe68e73d968fecc2b9db564736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 LOG1 PUSH11 0x2228777207092FB0B617CC 0xC8 0xB5 0xF9 DUP4 GASPRICE PUSH29 0x74DFE68E73D968FECC2B9DB564736F6C634300081A0033000000000000 ",
							"sourceMap": "344:7386:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7386:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b4a16a2228777207092fb0b617ccc8b5f9833a7c74dfe68e73d968fecc2b9db564736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 LOG1 PUSH11 0x2228777207092FB0B617CC 0xC8 0xB5 0xF9 DUP4 GASPRICE PUSH29 0x74DFE68E73D968FECC2B9DB564736F6C634300081A0033000000000000 ",
							"sourceMap": "344:7386:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b4a16a2228777207092fb0b617ccc8b5f9833a7c74dfe68e73d968fecc2b9db564736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2183,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2185,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220402eeed84ef395c5a665c3b91718c73a4d016a98fcebed0dee4a9174fde85e1264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220402eeed84ef395c5a665c3b91718c73a4d016a98fcebed0dee4a9174fde85e1264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH 0x2E 0xEE 0xD8 0x4E RETURN SWAP6 0xC5 0xA6 PUSH6 0xC3B91718C73A 0x4D ADD PUSH11 0x98FCEBED0DEE4A9174FDE8 MCOPY SLT PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "521:3235:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:15;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220402eeed84ef395c5a665c3b91718c73a4d016a98fcebed0dee4a9174fde85e1264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH 0x2E 0xEE 0xD8 0x4E RETURN SWAP6 0xC5 0xA6 PUSH6 0xC3B91718C73A 0x4D ADD PUSH11 0x98FCEBED0DEE4A9174FDE8 MCOPY SLT PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "521:3235:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220402eeed84ef395c5a665c3b91718c73a4d016a98fcebed0dee4a9174fde85e1264736f6c634300081a0033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY REVERT 0xD4 PUSH21 0x49EEA188394CF3FAFE88E8CEF6E2C9FE1BFFAA2FF6 PUSH11 0x356BEFAF47BD64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODECOPY REVERT 0xD4 PUSH21 0x49EEA188394CF3FAFE88E8CEF6E2C9FE1BFFAA2FF6 PUSH11 0x356BEFAF47BD64736F6C63 NUMBER STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203cfdd47449eea188394cf3fafe88e8cef6e2c9fe1bffaa2ff66a356befaf47bd64736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH22 0x3A7D5298A939BCC1FF6F209522E4BA5BA2334894BA3F SWAP5 0xDF LOG1 0xC5 0x2C DIV 0x27 0xCC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:17;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP6 PUSH22 0x3A7D5298A939BCC1FF6F209522E4BA5BA2334894BA3F SWAP5 0xDF LOG1 0xC5 0x2C DIV 0x27 0xCC PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122095753a7d5298a939bcc1ff6f209522e4ba5ba2334894ba3f94dfa1c52c0427cc64736f6c634300081a0033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/tokens/BulkMinter.sol": {
				"BulkMinter": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "addToken",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getTokenCount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"name": "mintAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "tokens",
							"outputs": [
								{
									"internalType": "contract MockTokenCreator",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This contract allows the minting of multiple ERC20 tokens to the caller in a single transaction.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"addToken(address)": {
								"details": "Adds a new token contract to the list.",
								"params": {
									"token": "The address of the token contract."
								}
							},
							"constructor": {
								"details": "Initializes the contract setting the initial owner.",
								"params": {
									"initialOwner": "The address of the initial owner."
								}
							},
							"getTokenCount()": {
								"returns": {
									"_0": "The number of token contracts."
								}
							},
							"mintAll(uint256[])": {
								"details": "The `amounts` array must match the length of the `tokens` array.",
								"params": {
									"amounts": "An array of amounts to mint from each token contract. The array index corresponds to the token contract index."
								}
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"title": "BulkMinter",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/tokens/BulkMinter.sol\":343:1792  contract BulkMinter is Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/contracts/tokens/BulkMinter.sol\":645:711  constructor(address initialOwner) Ownable(initialOwner) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"contracts/contracts/tokens/BulkMinter.sol\":687:699  initialOwner */\n  dup1\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_7\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":455:506   */\n  mstore\n    /* \"#utility.yul\":428:446   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_7:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_11\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_10:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1225:1412  constructor(address initialOwner) {... */\n  pop\n    /* \"contracts/contracts/tokens/BulkMinter.sol\":645:711  constructor(address initialOwner) Ownable(initialOwner) {... */\n  pop\n    /* \"contracts/contracts/tokens/BulkMinter.sol\":343:1792  contract BulkMinter is Ownable {... */\n  jump(tag_15)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_17\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_17:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_18\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_18:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":309:512   */\ntag_15:\n    /* \"contracts/contracts/tokens/BulkMinter.sol\":343:1792  contract BulkMinter is Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":343:1792  contract BulkMinter is Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x85e5d7ee\n      gt\n      tag_10\n      jumpi\n      dup1\n      0x85e5d7ee\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xd48bfca7\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup1\n      0x4f64b2be\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x78a89567\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":459:491  MockTokenCreator[] public tokens */\n    tag_3:\n      tag_11\n      tag_12\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":388:420   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":370:421   */\n      dup2\n      mstore\n        /* \"#utility.yul\":358:360   */\n      0x20\n        /* \"#utility.yul\":343:361   */\n      add\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":459:491  MockTokenCreator[] public tokens */\n    tag_15:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_4:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      stop\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1693:1789  function getTokenCount() external view returns (uint256) {... */\n    tag_5:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1768:1774  tokens */\n      0x01\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1768:1781  tokens.length */\n      sload\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1693:1789  function getTokenCount() external view returns (uint256) {... */\n      mload(0x40)\n        /* \"#utility.yul\":578:603   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":566:568   */\n      0x20\n        /* \"#utility.yul\":551:569   */\n      add\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1693:1789  function getTokenCount() external view returns (uint256) {... */\n      tag_15\n        /* \"#utility.yul\":432:609   */\n      jump\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1272:1562  function mintAll(uint256[] calldata amounts) external {... */\n    tag_6:\n      tag_17\n      tag_24\n      calldatasize\n      0x04\n      tag_25\n      jump\t// in\n    tag_24:\n      tag_26\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_7:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      jump(tag_11)\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":845:952  function addToken(address token) external onlyOwner {... */\n    tag_8:\n      tag_17\n      tag_32\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_32:\n      tag_34\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_9:\n      tag_17\n      tag_36\n      calldatasize\n      0x04\n      tag_33\n      jump\t// in\n    tag_36:\n      tag_37\n      jump\t// in\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":459:491  MockTokenCreator[] public tokens */\n    tag_14:\n      0x01\n      dup2\n      dup2\n      sload\n      dup2\n      lt\n      tag_38\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_38:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n      pop\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_18:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_41\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_41:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_44\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_45\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_44:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1272:1562  function mintAll(uint256[] calldata amounts) external {... */\n    tag_26:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1363:1369  tokens */\n      0x01\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1363:1376  tokens.length */\n      sload\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1345:1376  amounts.length == tokens.length */\n      dup2\n      eq\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1337:1433  require(amounts.length == tokens.length, \"Amounts array length must match tokens array length.\") */\n      tag_48\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1930:1932   */\n      0x20\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1337:1433  require(amounts.length == tokens.length, \"Amounts array length must match tokens array length.\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1912:1933   */\n      mstore\n        /* \"#utility.yul\":1969:1971   */\n      0x34\n        /* \"#utility.yul\":1949:1967   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1942:1972   */\n      mstore\n        /* \"#utility.yul\":2008:2042   */\n      0x416d6f756e7473206172726179206c656e677468206d757374206d6174636820\n        /* \"#utility.yul\":1988:2006   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1981:2043   */\n      mstore\n      shl(0x61, 0x3a37b5b2b7399030b93930bc903632b733ba3417)\n        /* \"#utility.yul\":2059:2077   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2052:2102   */\n      mstore\n        /* \"#utility.yul\":2119:2138   */\n      0x84\n      add\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1337:1433  require(amounts.length == tokens.length, \"Amounts array length must match tokens array length.\") */\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_48:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1451:1460  uint256 i */\n      0x00\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1446:1555  for (uint256 i = 0; i < tokens.length; i++) {... */\n    tag_51:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1470:1476  tokens */\n      0x01\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1470:1483  tokens.length */\n      sload\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1466:1483  i < tokens.length */\n      dup2\n      lt\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1446:1555  for (uint256 i = 0; i < tokens.length; i++) {... */\n      iszero\n      tag_52\n      jumpi\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1511  tokens */\n      0x01\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1512:1513  i */\n      dup2\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1514  tokens[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_55\n      jumpi\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      0x00\n      swap2\n      dup3\n      mstore\n      0x20\n      swap1\n      swap2\n      keccak256\n      add\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1519  tokens[i].mint */\n      0x40c10f19\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1520:1530  msg.sender */\n      caller\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1532:1539  amounts */\n      dup6\n      dup6\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1540:1541  i */\n      dup6\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1532:1542  amounts[i] */\n      dup2\n      dup2\n      lt\n      tag_59\n      jumpi\n      tag_59\n      tag_56\n      jump\t// in\n    tag_59:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1543  tokens[i].mint(msg.sender, amounts[i]) */\n      mload(0x40)\n      not(sub(shl(0xe0, 0x01), 0x01))\n      0xe0\n      dup8\n      swap1\n      shl\n      and\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2473:2505   */\n      swap1\n      swap5\n      and\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1543  tokens[i].mint(msg.sender, amounts[i]) */\n      0x04\n      dup6\n      add\n        /* \"#utility.yul\":2455:2506   */\n      mstore\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1532:1542  amounts[i] */\n      0x20\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      calldataload\n        /* \"#utility.yul\":2522:2540   */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":2515:2549   */\n      mstore\n      pop\n        /* \"#utility.yul\":2428:2446   */\n      0x44\n      add\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1505:1543  tokens[i].mint(msg.sender, amounts[i]) */\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_62\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_62:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_64\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_64:\n      pop\n      pop\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1485:1488  i++ */\n      0x01\n      swap1\n      swap3\n      add\n      swap2\n      pop\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1446:1555  for (uint256 i = 0; i < tokens.length; i++) {... */\n      tag_51\n      swap1\n      pop\n      jump\n    tag_52:\n      pop\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":1272:1562  function mintAll(uint256[] calldata amounts) external {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":845:952  function addToken(address token) external onlyOwner {... */\n    tag_34:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_67\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_67:\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":908:914  tokens */\n      0x01\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":908:944  tokens.push(MockTokenCreator(token)) */\n      dup1\n      sload\n      dup1\n      dup3\n      add\n      dup3\n      sstore\n      0x00\n      swap2\n      swap1\n      swap2\n      mstore\n      0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6\n      add\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/contracts/tokens/BulkMinter.sol\":845:952  function addToken(address token) external onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_37:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_71\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_42\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_71:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_73\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":370:421   */\n      mstore\n        /* \"#utility.yul\":343:361   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      tag_49\n        /* \"#utility.yul\":199:427   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_75\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_45\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_75:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_42:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_44\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":370:421   */\n      mstore\n        /* \"#utility.yul\":343:361   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_49\n        /* \"#utility.yul\":199:427   */\n      jump\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:194   */\n    tag_13:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_87\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_87:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":614:1224   */\n    tag_25:\n        /* \"#utility.yul\":700:706   */\n      0x00\n        /* \"#utility.yul\":708:714   */\n      dup1\n        /* \"#utility.yul\":761:763   */\n      0x20\n        /* \"#utility.yul\":749:758   */\n      dup4\n        /* \"#utility.yul\":740:747   */\n      dup6\n        /* \"#utility.yul\":736:759   */\n      sub\n        /* \"#utility.yul\":732:764   */\n      slt\n        /* \"#utility.yul\":729:781   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":777:778   */\n      0x00\n        /* \"#utility.yul\":774:775   */\n      dup1\n        /* \"#utility.yul\":767:779   */\n      revert\n        /* \"#utility.yul\":729:781   */\n    tag_91:\n        /* \"#utility.yul\":817:826   */\n      dup3\n        /* \"#utility.yul\":804:827   */\n      calldataload\n        /* \"#utility.yul\":850:868   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":842:848   */\n      dup2\n        /* \"#utility.yul\":839:869   */\n      gt\n        /* \"#utility.yul\":836:886   */\n      iszero\n      tag_92\n      jumpi\n        /* \"#utility.yul\":882:883   */\n      0x00\n        /* \"#utility.yul\":879:880   */\n      dup1\n        /* \"#utility.yul\":872:884   */\n      revert\n        /* \"#utility.yul\":836:886   */\n    tag_92:\n        /* \"#utility.yul\":905:927   */\n      dup4\n      add\n        /* \"#utility.yul\":958:962   */\n      0x1f\n        /* \"#utility.yul\":950:963   */\n      dup2\n      add\n        /* \"#utility.yul\":946:973   */\n      dup6\n      sgt\n        /* \"#utility.yul\":936:991   */\n      tag_93\n      jumpi\n        /* \"#utility.yul\":987:988   */\n      0x00\n        /* \"#utility.yul\":984:985   */\n      dup1\n        /* \"#utility.yul\":977:989   */\n      revert\n        /* \"#utility.yul\":936:991   */\n    tag_93:\n        /* \"#utility.yul\":1027:1029   */\n      dup1\n        /* \"#utility.yul\":1014:1030   */\n      calldataload\n        /* \"#utility.yul\":1053:1071   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1045:1051   */\n      dup2\n        /* \"#utility.yul\":1042:1072   */\n      gt\n        /* \"#utility.yul\":1039:1089   */\n      iszero\n      tag_94\n      jumpi\n        /* \"#utility.yul\":1085:1086   */\n      0x00\n        /* \"#utility.yul\":1082:1083   */\n      dup1\n        /* \"#utility.yul\":1075:1087   */\n      revert\n        /* \"#utility.yul\":1039:1089   */\n    tag_94:\n        /* \"#utility.yul\":1138:1145   */\n      dup6\n        /* \"#utility.yul\":1133:1135   */\n      0x20\n        /* \"#utility.yul\":1123:1129   */\n      dup3\n        /* \"#utility.yul\":1120:1121   */\n      0x05\n        /* \"#utility.yul\":1116:1130   */\n      shl\n        /* \"#utility.yul\":1112:1114   */\n      dup5\n        /* \"#utility.yul\":1108:1131   */\n      add\n        /* \"#utility.yul\":1104:1136   */\n      add\n        /* \"#utility.yul\":1101:1146   */\n      gt\n        /* \"#utility.yul\":1098:1163   */\n      iszero\n      tag_95\n      jumpi\n        /* \"#utility.yul\":1159:1160   */\n      0x00\n        /* \"#utility.yul\":1156:1157   */\n      dup1\n        /* \"#utility.yul\":1149:1161   */\n      revert\n        /* \"#utility.yul\":1098:1163   */\n    tag_95:\n        /* \"#utility.yul\":1190:1192   */\n      0x20\n        /* \"#utility.yul\":1182:1193   */\n      swap2\n      swap1\n      swap2\n      add\n      swap6\n        /* \"#utility.yul\":1212:1218   */\n      swap1\n      swap5\n      pop\n        /* \"#utility.yul\":614:1224   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1437:1723   */\n    tag_33:\n        /* \"#utility.yul\":1496:1502   */\n      0x00\n        /* \"#utility.yul\":1549:1551   */\n      0x20\n        /* \"#utility.yul\":1537:1546   */\n      dup3\n        /* \"#utility.yul\":1528:1535   */\n      dup5\n        /* \"#utility.yul\":1524:1547   */\n      sub\n        /* \"#utility.yul\":1520:1552   */\n      slt\n        /* \"#utility.yul\":1517:1569   */\n      iszero\n      tag_98\n      jumpi\n        /* \"#utility.yul\":1565:1566   */\n      0x00\n        /* \"#utility.yul\":1562:1563   */\n      dup1\n        /* \"#utility.yul\":1555:1567   */\n      revert\n        /* \"#utility.yul\":1517:1569   */\n    tag_98:\n        /* \"#utility.yul\":1591:1614   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1643:1674   */\n      dup2\n      and\n        /* \"#utility.yul\":1633:1675   */\n      dup2\n      eq\n        /* \"#utility.yul\":1623:1693   */\n      tag_99\n      jumpi\n        /* \"#utility.yul\":1689:1690   */\n      0x00\n        /* \"#utility.yul\":1686:1687   */\n      dup1\n        /* \"#utility.yul\":1679:1691   */\n      revert\n        /* \"#utility.yul\":1623:1693   */\n    tag_99:\n        /* \"#utility.yul\":1712:1717   */\n      swap4\n        /* \"#utility.yul\":1437:1723   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2149:2276   */\n    tag_56:\n        /* \"#utility.yul\":2210:2220   */\n      0x4e487b71\n        /* \"#utility.yul\":2205:2208   */\n      0xe0\n        /* \"#utility.yul\":2201:2221   */\n      shl\n        /* \"#utility.yul\":2198:2199   */\n      0x00\n        /* \"#utility.yul\":2191:2222   */\n      mstore\n        /* \"#utility.yul\":2241:2245   */\n      0x32\n        /* \"#utility.yul\":2238:2239   */\n      0x04\n        /* \"#utility.yul\":2231:2246   */\n      mstore\n        /* \"#utility.yul\":2265:2269   */\n      0x24\n        /* \"#utility.yul\":2262:2263   */\n      0x00\n        /* \"#utility.yul\":2255:2270   */\n      revert\n\n    auxdata: 0xa264697066735822122069781b261d7088b821877419d24c7b3c2b8c8f35219fbf4065157f910e99d7fb64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_3628": {
									"entryPoint": null,
									"id": 3628,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 108,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 187,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:514:20",
										"nodeType": "YulBlock",
										"src": "0:514:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "95:209:20",
													"nodeType": "YulBlock",
													"src": "95:209:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "141:16:20",
																"nodeType": "YulBlock",
																"src": "141:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "150:1:20",
																					"nodeType": "YulLiteral",
																					"src": "150:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "153:1:20",
																					"nodeType": "YulLiteral",
																					"src": "153:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "143:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:20"
																			},
																			"nativeSrc": "143:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:20"
																		},
																		"nativeSrc": "143:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "116:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "125:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "112:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:20"
																		},
																		"nativeSrc": "112:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "137:2:20",
																		"nodeType": "YulLiteral",
																		"src": "137:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "108:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:20"
																},
																"nativeSrc": "108:32:20",
																"nodeType": "YulFunctionCall",
																"src": "108:32:20"
															},
															"nativeSrc": "105:52:20",
															"nodeType": "YulIf",
															"src": "105:52:20"
														},
														{
															"nativeSrc": "166:29:20",
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "185:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "179:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:20"
																},
																"nativeSrc": "179:16:20",
																"nodeType": "YulFunctionCall",
																"src": "179:16:20"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "170:5:20",
																	"nodeType": "YulTypedName",
																	"src": "170:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "258:16:20",
																"nodeType": "YulBlock",
																"src": "258:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "267:1:20",
																					"nodeType": "YulLiteral",
																					"src": "267:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "270:1:20",
																					"nodeType": "YulLiteral",
																					"src": "270:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "260:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:20"
																			},
																			"nativeSrc": "260:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:20"
																		},
																		"nativeSrc": "260:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "217:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "228:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "243:3:20",
																										"nodeType": "YulLiteral",
																										"src": "243:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "248:1:20",
																										"nodeType": "YulLiteral",
																										"src": "248:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "239:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:20"
																								},
																								"nativeSrc": "239:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "252:1:20",
																								"nodeType": "YulLiteral",
																								"src": "252:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "235:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:20"
																						},
																						"nativeSrc": "235:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "224:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:20"
																				},
																				"nativeSrc": "224:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "214:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:20"
																		},
																		"nativeSrc": "214:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "207:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:20"
																},
																"nativeSrc": "207:50:20",
																"nodeType": "YulFunctionCall",
																"src": "207:50:20"
															},
															"nativeSrc": "204:70:20",
															"nodeType": "YulIf",
															"src": "204:70:20"
														},
														{
															"nativeSrc": "283:15:20",
															"nodeType": "YulAssignment",
															"src": "283:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "293:5:20",
																"nodeType": "YulIdentifier",
																"src": "293:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "283:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "14:290:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "61:9:20",
														"nodeType": "YulTypedName",
														"src": "61:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "72:7:20",
														"nodeType": "YulTypedName",
														"src": "72:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "84:6:20",
														"nodeType": "YulTypedName",
														"src": "84:6:20",
														"type": ""
													}
												],
												"src": "14:290:20"
											},
											{
												"body": {
													"nativeSrc": "410:102:20",
													"nodeType": "YulBlock",
													"src": "410:102:20",
													"statements": [
														{
															"nativeSrc": "420:26:20",
															"nodeType": "YulAssignment",
															"src": "420:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "432:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "432:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "443:2:20",
																		"nodeType": "YulLiteral",
																		"src": "443:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "428:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "428:3:20"
																},
																"nativeSrc": "428:18:20",
																"nodeType": "YulFunctionCall",
																"src": "428:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "420:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "420:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "462:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "462:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "477:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "477:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "493:3:20",
																								"nodeType": "YulLiteral",
																								"src": "493:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "498:1:20",
																								"nodeType": "YulLiteral",
																								"src": "498:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "489:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "489:3:20"
																						},
																						"nativeSrc": "489:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "489:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "502:1:20",
																						"nodeType": "YulLiteral",
																						"src": "502:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "485:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "485:3:20"
																				},
																				"nativeSrc": "485:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "485:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "473:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "473:3:20"
																		},
																		"nativeSrc": "473:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "473:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "455:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "455:6:20"
																},
																"nativeSrc": "455:51:20",
																"nodeType": "YulFunctionCall",
																"src": "455:51:20"
															},
															"nativeSrc": "455:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "455:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "309:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "379:9:20",
														"nodeType": "YulTypedName",
														"src": "379:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "390:6:20",
														"nodeType": "YulTypedName",
														"src": "390:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "401:4:20",
														"nodeType": "YulTypedName",
														"src": "401:4:20",
														"type": ""
													}
												],
												"src": "309:203:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060405161058238038061058283398101604081905261002e916100bb565b806001600160a01b03811661005c57604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b6100658161006c565b50506100e8565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100cb575f80fd5b81516001600160a01b03811681146100e1575f80fd5b9392505050565b61048d806100f55f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c806385e5d7ee1161005857806385e5d7ee146100c95780638da5cb5b146100dc578063d48bfca7146100ec578063f2fde38b146100ff575f80fd5b80634f64b2be1461007e578063715018a6146100ae57806378a89567146100b8575b5f80fd5b61009161008c36600461038e565b610112565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b661013a565b005b6001546040519081526020016100a5565b6100b66100d73660046103a5565b61014d565b5f546001600160a01b0316610091565b6100b66100fa366004610416565b61027e565b6100b661010d366004610416565b6102d6565b60018181548110610121575f80fd5b5f918252602090912001546001600160a01b0316905081565b610142610313565b61014b5f61033f565b565b60015481146101c05760405162461bcd60e51b815260206004820152603460248201527f416d6f756e7473206172726179206c656e677468206d757374206d61746368206044820152733a37b5b2b7399030b93930bc903632b733ba341760611b60648201526084015b60405180910390fd5b5f5b60015481101561027957600181815481106101df576101df610443565b5f918252602090912001546001600160a01b03166340c10f193385858581811061020b5761020b610443565b6040516001600160e01b031960e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044015f604051808303815f87803b158015610257575f80fd5b505af1158015610269573d5f803e3d5ffd5b5050600190920191506101c29050565b505050565b610286610313565b6001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6102de610313565b6001600160a01b03811661030757604051631e4fbdf760e01b81525f60048201526024016101b7565b6103108161033f565b50565b5f546001600160a01b0316331461014b5760405163118cdaa760e01b81523360048201526024016101b7565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020828403121561039e575f80fd5b5035919050565b5f80602083850312156103b6575f80fd5b823567ffffffffffffffff8111156103cc575f80fd5b8301601f810185136103dc575f80fd5b803567ffffffffffffffff8111156103f2575f80fd5b8560208260051b8401011115610406575f80fd5b6020919091019590945092505050565b5f60208284031215610426575f80fd5b81356001600160a01b038116811461043c575f80fd5b9392505050565b634e487b7160e01b5f52603260045260245ffdfea264697066735822122069781b261d7088b821877419d24c7b3c2b8c8f35219fbf4065157f910e99d7fb64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x582 CODESIZE SUB DUP1 PUSH2 0x582 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2E SWAP2 PUSH2 0xBB JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5C JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x65 DUP2 PUSH2 0x6C JUMP JUMPDEST POP POP PUSH2 0xE8 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE1 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x48D DUP1 PUSH2 0xF5 PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7A JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85E5D7EE GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x85E5D7EE EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDC JUMPI DUP1 PUSH4 0xD48BFCA7 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F64B2BE EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x78A89567 EQ PUSH2 0xB8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x91 PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x38E JUMP JUMPDEST PUSH2 0x112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB6 PUSH2 0x13A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA5 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5 JUMP JUMPDEST PUSH2 0x14D JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x91 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x121 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x142 PUSH2 0x313 JUMP JUMPDEST PUSH2 0x14B PUSH0 PUSH2 0x33F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x1C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7473206172726179206C656E677468206D757374206D6174636820 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A37B5B2B7399030B93930BC903632B733BA3417 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1DF JUMPI PUSH2 0x1DF PUSH2 0x443 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 CALLER DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x20B JUMPI PUSH2 0x20B PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x257 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x269 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 POP PUSH2 0x1C2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x286 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 ADD DUP3 SSTORE PUSH0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2DE PUSH2 0x313 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x307 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH2 0x310 DUP2 PUSH2 0x33F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14B JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x3DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x406 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x426 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x43C JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x781B261D7088B8218774 NOT 0xD2 0x4C PUSH28 0x3C2B8C8F35219FBF4065157F910E99D7FB64736F6C634300081A0033 ",
							"sourceMap": "343:1449:18:-:0;;;645:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;687:12;-1:-1:-1;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;455:51:20;428:18;;1322:31:0;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;1225:187;645:66:18;343:1449;;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:290:20:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:20;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:20:o;309:203::-;343:1449:18;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_checkOwner_84": {
									"entryPoint": 787,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_msgSender_1130": {
									"entryPoint": null,
									"id": 1130,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_146": {
									"entryPoint": 831,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@addToken_3645": {
									"entryPoint": 638,
									"id": 3645,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getTokenCount_3696": {
									"entryPoint": null,
									"id": 3696,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@mintAll_3686": {
									"entryPoint": 333,
									"id": 3686,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 314,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@tokens_3618": {
									"entryPoint": 274,
									"id": 3618,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_126": {
									"entryPoint": 726,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1046,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr": {
									"entryPoint": 933,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 910,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_MockTokenCreator_$3750__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_9acabb8a53cb35573da7f47df5e549a72d3aa5c35ce2efbc9c9bf6150d194e72__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x32": {
									"entryPoint": 1091,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:2557:20",
										"nodeType": "YulBlock",
										"src": "0:2557:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "84:110:20",
													"nodeType": "YulBlock",
													"src": "84:110:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "130:16:20",
																"nodeType": "YulBlock",
																"src": "130:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "139:1:20",
																					"nodeType": "YulLiteral",
																					"src": "139:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "142:1:20",
																					"nodeType": "YulLiteral",
																					"src": "142:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "132:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:20"
																			},
																			"nativeSrc": "132:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:20"
																		},
																		"nativeSrc": "132:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "105:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "114:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "101:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:20"
																		},
																		"nativeSrc": "101:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "126:2:20",
																		"nodeType": "YulLiteral",
																		"src": "126:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "97:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:20"
																},
																"nativeSrc": "97:32:20",
																"nodeType": "YulFunctionCall",
																"src": "97:32:20"
															},
															"nativeSrc": "94:52:20",
															"nodeType": "YulIf",
															"src": "94:52:20"
														},
														{
															"nativeSrc": "155:33:20",
															"nodeType": "YulAssignment",
															"src": "155:33:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "178:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "165:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:20"
																},
																"nativeSrc": "165:23:20",
																"nodeType": "YulFunctionCall",
																"src": "165:23:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "155:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "14:180:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "50:9:20",
														"nodeType": "YulTypedName",
														"src": "50:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "61:7:20",
														"nodeType": "YulTypedName",
														"src": "61:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "73:6:20",
														"nodeType": "YulTypedName",
														"src": "73:6:20",
														"type": ""
													}
												],
												"src": "14:180:20"
											},
											{
												"body": {
													"nativeSrc": "325:102:20",
													"nodeType": "YulBlock",
													"src": "325:102:20",
													"statements": [
														{
															"nativeSrc": "335:26:20",
															"nodeType": "YulAssignment",
															"src": "335:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "347:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "347:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "358:2:20",
																		"nodeType": "YulLiteral",
																		"src": "358:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "343:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "343:3:20"
																},
																"nativeSrc": "343:18:20",
																"nodeType": "YulFunctionCall",
																"src": "343:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "335:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "335:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "377:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "377:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "392:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "392:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "408:3:20",
																								"nodeType": "YulLiteral",
																								"src": "408:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "413:1:20",
																								"nodeType": "YulLiteral",
																								"src": "413:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "404:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "404:3:20"
																						},
																						"nativeSrc": "404:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "404:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "417:1:20",
																						"nodeType": "YulLiteral",
																						"src": "417:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "400:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "400:3:20"
																				},
																				"nativeSrc": "400:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "400:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "388:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "388:3:20"
																		},
																		"nativeSrc": "388:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "388:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "370:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "370:6:20"
																},
																"nativeSrc": "370:51:20",
																"nodeType": "YulFunctionCall",
																"src": "370:51:20"
															},
															"nativeSrc": "370:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "370:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_MockTokenCreator_$3750__to_t_address__fromStack_reversed",
												"nativeSrc": "199:228:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "294:9:20",
														"nodeType": "YulTypedName",
														"src": "294:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "305:6:20",
														"nodeType": "YulTypedName",
														"src": "305:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "316:4:20",
														"nodeType": "YulTypedName",
														"src": "316:4:20",
														"type": ""
													}
												],
												"src": "199:228:20"
											},
											{
												"body": {
													"nativeSrc": "533:76:20",
													"nodeType": "YulBlock",
													"src": "533:76:20",
													"statements": [
														{
															"nativeSrc": "543:26:20",
															"nodeType": "YulAssignment",
															"src": "543:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "555:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "555:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "566:2:20",
																		"nodeType": "YulLiteral",
																		"src": "566:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "551:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:20"
																},
																"nativeSrc": "551:18:20",
																"nodeType": "YulFunctionCall",
																"src": "551:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "543:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "585:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "585:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "596:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "596:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "578:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "578:6:20"
																},
																"nativeSrc": "578:25:20",
																"nodeType": "YulFunctionCall",
																"src": "578:25:20"
															},
															"nativeSrc": "578:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "578:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "432:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "502:9:20",
														"nodeType": "YulTypedName",
														"src": "502:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "513:6:20",
														"nodeType": "YulTypedName",
														"src": "513:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "524:4:20",
														"nodeType": "YulTypedName",
														"src": "524:4:20",
														"type": ""
													}
												],
												"src": "432:177:20"
											},
											{
												"body": {
													"nativeSrc": "719:505:20",
													"nodeType": "YulBlock",
													"src": "719:505:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "765:16:20",
																"nodeType": "YulBlock",
																"src": "765:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "774:1:20",
																					"nodeType": "YulLiteral",
																					"src": "774:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "777:1:20",
																					"nodeType": "YulLiteral",
																					"src": "777:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "767:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "767:6:20"
																			},
																			"nativeSrc": "767:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "767:12:20"
																		},
																		"nativeSrc": "767:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "767:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "740:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "740:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "749:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "749:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "736:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "736:3:20"
																		},
																		"nativeSrc": "736:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "736:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "761:2:20",
																		"nodeType": "YulLiteral",
																		"src": "761:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "732:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "732:3:20"
																},
																"nativeSrc": "732:32:20",
																"nodeType": "YulFunctionCall",
																"src": "732:32:20"
															},
															"nativeSrc": "729:52:20",
															"nodeType": "YulIf",
															"src": "729:52:20"
														},
														{
															"nativeSrc": "790:37:20",
															"nodeType": "YulVariableDeclaration",
															"src": "790:37:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "817:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "817:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "804:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "804:12:20"
																},
																"nativeSrc": "804:23:20",
																"nodeType": "YulFunctionCall",
																"src": "804:23:20"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "794:6:20",
																	"nodeType": "YulTypedName",
																	"src": "794:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "870:16:20",
																"nodeType": "YulBlock",
																"src": "870:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "879:1:20",
																					"nodeType": "YulLiteral",
																					"src": "879:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "882:1:20",
																					"nodeType": "YulLiteral",
																					"src": "882:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "872:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "872:6:20"
																			},
																			"nativeSrc": "872:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "872:12:20"
																		},
																		"nativeSrc": "872:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "872:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "842:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "842:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "850:18:20",
																		"nodeType": "YulLiteral",
																		"src": "850:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "839:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "839:2:20"
																},
																"nativeSrc": "839:30:20",
																"nodeType": "YulFunctionCall",
																"src": "839:30:20"
															},
															"nativeSrc": "836:50:20",
															"nodeType": "YulIf",
															"src": "836:50:20"
														},
														{
															"nativeSrc": "895:32:20",
															"nodeType": "YulVariableDeclaration",
															"src": "895:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "909:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "909:9:20"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "920:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "920:6:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "905:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "905:3:20"
																},
																"nativeSrc": "905:22:20",
																"nodeType": "YulFunctionCall",
																"src": "905:22:20"
															},
															"variables": [
																{
																	"name": "_1",
																	"nativeSrc": "899:2:20",
																	"nodeType": "YulTypedName",
																	"src": "899:2:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "975:16:20",
																"nodeType": "YulBlock",
																"src": "975:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "984:1:20",
																					"nodeType": "YulLiteral",
																					"src": "984:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "987:1:20",
																					"nodeType": "YulLiteral",
																					"src": "987:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "977:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "977:6:20"
																			},
																			"nativeSrc": "977:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "977:12:20"
																		},
																		"nativeSrc": "977:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "977:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "954:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "954:2:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "958:4:20",
																						"nodeType": "YulLiteral",
																						"src": "958:4:20",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "950:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "950:3:20"
																				},
																				"nativeSrc": "950:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "950:13:20"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "965:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "965:7:20"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "946:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "946:3:20"
																		},
																		"nativeSrc": "946:27:20",
																		"nodeType": "YulFunctionCall",
																		"src": "946:27:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "939:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "939:6:20"
																},
																"nativeSrc": "939:35:20",
																"nodeType": "YulFunctionCall",
																"src": "939:35:20"
															},
															"nativeSrc": "936:55:20",
															"nodeType": "YulIf",
															"src": "936:55:20"
														},
														{
															"nativeSrc": "1000:30:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1000:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "1027:2:20",
																		"nodeType": "YulIdentifier",
																		"src": "1027:2:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1014:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "1014:12:20"
																},
																"nativeSrc": "1014:16:20",
																"nodeType": "YulFunctionCall",
																"src": "1014:16:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "1004:6:20",
																	"nodeType": "YulTypedName",
																	"src": "1004:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1073:16:20",
																"nodeType": "YulBlock",
																"src": "1073:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1082:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1082:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1085:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1085:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1075:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1075:6:20"
																			},
																			"nativeSrc": "1075:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1075:12:20"
																		},
																		"nativeSrc": "1075:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1075:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "1045:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1045:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1053:18:20",
																		"nodeType": "YulLiteral",
																		"src": "1053:18:20",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1042:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1042:2:20"
																},
																"nativeSrc": "1042:30:20",
																"nodeType": "YulFunctionCall",
																"src": "1042:30:20"
															},
															"nativeSrc": "1039:50:20",
															"nodeType": "YulIf",
															"src": "1039:50:20"
														},
														{
															"body": {
																"nativeSrc": "1147:16:20",
																"nodeType": "YulBlock",
																"src": "1147:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1156:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1156:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1159:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1159:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1149:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1149:6:20"
																			},
																			"nativeSrc": "1149:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1149:12:20"
																		},
																		"nativeSrc": "1149:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1149:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_1",
																						"nativeSrc": "1112:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "1112:2:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1120:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1120:1:20",
																								"type": "",
																								"value": "5"
																							},
																							{
																								"name": "length",
																								"nativeSrc": "1123:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "1123:6:20"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1116:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1116:3:20"
																						},
																						"nativeSrc": "1116:14:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1116:14:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1108:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1108:3:20"
																				},
																				"nativeSrc": "1108:23:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1108:23:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1133:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1133:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1104:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1104:3:20"
																		},
																		"nativeSrc": "1104:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1104:32:20"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1138:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "1138:7:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1101:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1101:2:20"
																},
																"nativeSrc": "1101:45:20",
																"nodeType": "YulFunctionCall",
																"src": "1101:45:20"
															},
															"nativeSrc": "1098:65:20",
															"nodeType": "YulIf",
															"src": "1098:65:20"
														},
														{
															"nativeSrc": "1172:21:20",
															"nodeType": "YulAssignment",
															"src": "1172:21:20",
															"value": {
																"arguments": [
																	{
																		"name": "_1",
																		"nativeSrc": "1186:2:20",
																		"nodeType": "YulIdentifier",
																		"src": "1186:2:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1190:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1190:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1182:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1182:3:20"
																},
																"nativeSrc": "1182:11:20",
																"nodeType": "YulFunctionCall",
																"src": "1182:11:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1172:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1172:6:20"
																}
															]
														},
														{
															"nativeSrc": "1202:16:20",
															"nodeType": "YulAssignment",
															"src": "1202:16:20",
															"value": {
																"name": "length",
																"nativeSrc": "1212:6:20",
																"nodeType": "YulIdentifier",
																"src": "1212:6:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1202:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1202:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr",
												"nativeSrc": "614:610:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "677:9:20",
														"nodeType": "YulTypedName",
														"src": "677:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "688:7:20",
														"nodeType": "YulTypedName",
														"src": "688:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "700:6:20",
														"nodeType": "YulTypedName",
														"src": "700:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "708:6:20",
														"nodeType": "YulTypedName",
														"src": "708:6:20",
														"type": ""
													}
												],
												"src": "614:610:20"
											},
											{
												"body": {
													"nativeSrc": "1330:102:20",
													"nodeType": "YulBlock",
													"src": "1330:102:20",
													"statements": [
														{
															"nativeSrc": "1340:26:20",
															"nodeType": "YulAssignment",
															"src": "1340:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1352:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1352:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1363:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1363:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1348:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1348:3:20"
																},
																"nativeSrc": "1348:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1348:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1340:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1340:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1382:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1382:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1397:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1397:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "1413:3:20",
																								"nodeType": "YulLiteral",
																								"src": "1413:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1418:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1418:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "1409:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1409:3:20"
																						},
																						"nativeSrc": "1409:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1409:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1422:1:20",
																						"nodeType": "YulLiteral",
																						"src": "1422:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "1405:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1405:3:20"
																				},
																				"nativeSrc": "1405:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1405:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1393:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1393:3:20"
																		},
																		"nativeSrc": "1393:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1393:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1375:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1375:6:20"
																},
																"nativeSrc": "1375:51:20",
																"nodeType": "YulFunctionCall",
																"src": "1375:51:20"
															},
															"nativeSrc": "1375:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "1375:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "1229:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1299:9:20",
														"nodeType": "YulTypedName",
														"src": "1299:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1310:6:20",
														"nodeType": "YulTypedName",
														"src": "1310:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1321:4:20",
														"nodeType": "YulTypedName",
														"src": "1321:4:20",
														"type": ""
													}
												],
												"src": "1229:203:20"
											},
											{
												"body": {
													"nativeSrc": "1507:216:20",
													"nodeType": "YulBlock",
													"src": "1507:216:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1553:16:20",
																"nodeType": "YulBlock",
																"src": "1553:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1562:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1562:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1565:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1565:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1555:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1555:6:20"
																			},
																			"nativeSrc": "1555:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1555:12:20"
																		},
																		"nativeSrc": "1555:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1555:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1528:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "1528:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1537:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1537:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1524:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1524:3:20"
																		},
																		"nativeSrc": "1524:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1524:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1549:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1549:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1520:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1520:3:20"
																},
																"nativeSrc": "1520:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1520:32:20"
															},
															"nativeSrc": "1517:52:20",
															"nodeType": "YulIf",
															"src": "1517:52:20"
														},
														{
															"nativeSrc": "1578:36:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1578:36:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1604:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1604:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1591:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "1591:12:20"
																},
																"nativeSrc": "1591:23:20",
																"nodeType": "YulFunctionCall",
																"src": "1591:23:20"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1582:5:20",
																	"nodeType": "YulTypedName",
																	"src": "1582:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1677:16:20",
																"nodeType": "YulBlock",
																"src": "1677:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1686:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1686:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1689:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1689:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1679:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1679:6:20"
																			},
																			"nativeSrc": "1679:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1679:12:20"
																		},
																		"nativeSrc": "1679:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1679:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1636:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "1636:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1647:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "1647:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1662:3:20",
																										"nodeType": "YulLiteral",
																										"src": "1662:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "1667:1:20",
																										"nodeType": "YulLiteral",
																										"src": "1667:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1658:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1658:3:20"
																								},
																								"nativeSrc": "1658:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1658:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1671:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1671:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "1654:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1654:3:20"
																						},
																						"nativeSrc": "1654:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1654:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "1643:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1643:3:20"
																				},
																				"nativeSrc": "1643:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1643:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1633:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "1633:2:20"
																		},
																		"nativeSrc": "1633:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1633:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1626:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1626:6:20"
																},
																"nativeSrc": "1626:50:20",
																"nodeType": "YulFunctionCall",
																"src": "1626:50:20"
															},
															"nativeSrc": "1623:70:20",
															"nodeType": "YulIf",
															"src": "1623:70:20"
														},
														{
															"nativeSrc": "1702:15:20",
															"nodeType": "YulAssignment",
															"src": "1702:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1712:5:20",
																"nodeType": "YulIdentifier",
																"src": "1712:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1702:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1702:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "1437:286:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1473:9:20",
														"nodeType": "YulTypedName",
														"src": "1473:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1484:7:20",
														"nodeType": "YulTypedName",
														"src": "1484:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1496:6:20",
														"nodeType": "YulTypedName",
														"src": "1496:6:20",
														"type": ""
													}
												],
												"src": "1437:286:20"
											},
											{
												"body": {
													"nativeSrc": "1902:242:20",
													"nodeType": "YulBlock",
													"src": "1902:242:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1919:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1919:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1930:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1930:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1912:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1912:6:20"
																},
																"nativeSrc": "1912:21:20",
																"nodeType": "YulFunctionCall",
																"src": "1912:21:20"
															},
															"nativeSrc": "1912:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "1912:21:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1953:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1953:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1964:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1964:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1949:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1949:3:20"
																		},
																		"nativeSrc": "1949:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1949:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1969:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1969:2:20",
																		"type": "",
																		"value": "52"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1942:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1942:6:20"
																},
																"nativeSrc": "1942:30:20",
																"nodeType": "YulFunctionCall",
																"src": "1942:30:20"
															},
															"nativeSrc": "1942:30:20",
															"nodeType": "YulExpressionStatement",
															"src": "1942:30:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1992:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1992:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2003:2:20",
																				"nodeType": "YulLiteral",
																				"src": "2003:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1988:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1988:3:20"
																		},
																		"nativeSrc": "1988:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1988:18:20"
																	},
																	{
																		"hexValue": "416d6f756e7473206172726179206c656e677468206d757374206d6174636820",
																		"kind": "string",
																		"nativeSrc": "2008:34:20",
																		"nodeType": "YulLiteral",
																		"src": "2008:34:20",
																		"type": "",
																		"value": "Amounts array length must match "
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1981:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1981:6:20"
																},
																"nativeSrc": "1981:62:20",
																"nodeType": "YulFunctionCall",
																"src": "1981:62:20"
															},
															"nativeSrc": "1981:62:20",
															"nodeType": "YulExpressionStatement",
															"src": "1981:62:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2063:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2063:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2074:2:20",
																				"nodeType": "YulLiteral",
																				"src": "2074:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2059:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2059:3:20"
																		},
																		"nativeSrc": "2059:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2059:18:20"
																	},
																	{
																		"hexValue": "746f6b656e73206172726179206c656e6774682e",
																		"kind": "string",
																		"nativeSrc": "2079:22:20",
																		"nodeType": "YulLiteral",
																		"src": "2079:22:20",
																		"type": "",
																		"value": "tokens array length."
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2052:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2052:6:20"
																},
																"nativeSrc": "2052:50:20",
																"nodeType": "YulFunctionCall",
																"src": "2052:50:20"
															},
															"nativeSrc": "2052:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "2052:50:20"
														},
														{
															"nativeSrc": "2111:27:20",
															"nodeType": "YulAssignment",
															"src": "2111:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2123:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2123:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2134:3:20",
																		"nodeType": "YulLiteral",
																		"src": "2134:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2119:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2119:3:20"
																},
																"nativeSrc": "2119:19:20",
																"nodeType": "YulFunctionCall",
																"src": "2119:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2111:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2111:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9acabb8a53cb35573da7f47df5e549a72d3aa5c35ce2efbc9c9bf6150d194e72__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "1728:416:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1879:9:20",
														"nodeType": "YulTypedName",
														"src": "1879:9:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1893:4:20",
														"nodeType": "YulTypedName",
														"src": "1893:4:20",
														"type": ""
													}
												],
												"src": "1728:416:20"
											},
											{
												"body": {
													"nativeSrc": "2181:95:20",
													"nodeType": "YulBlock",
													"src": "2181:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2198:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2198:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2205:3:20",
																				"nodeType": "YulLiteral",
																				"src": "2205:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2210:10:20",
																				"nodeType": "YulLiteral",
																				"src": "2210:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2201:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2201:3:20"
																		},
																		"nativeSrc": "2201:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2201:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2191:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2191:6:20"
																},
																"nativeSrc": "2191:31:20",
																"nodeType": "YulFunctionCall",
																"src": "2191:31:20"
															},
															"nativeSrc": "2191:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "2191:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2238:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2238:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2241:4:20",
																		"nodeType": "YulLiteral",
																		"src": "2241:4:20",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2231:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2231:6:20"
																},
																"nativeSrc": "2231:15:20",
																"nodeType": "YulFunctionCall",
																"src": "2231:15:20"
															},
															"nativeSrc": "2231:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "2231:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2262:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2262:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2265:4:20",
																		"nodeType": "YulLiteral",
																		"src": "2265:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "2255:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2255:6:20"
																},
																"nativeSrc": "2255:15:20",
																"nodeType": "YulFunctionCall",
																"src": "2255:15:20"
															},
															"nativeSrc": "2255:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "2255:15:20"
														}
													]
												},
												"name": "panic_error_0x32",
												"nativeSrc": "2149:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "2149:127:20"
											},
											{
												"body": {
													"nativeSrc": "2410:145:20",
													"nodeType": "YulBlock",
													"src": "2410:145:20",
													"statements": [
														{
															"nativeSrc": "2420:26:20",
															"nodeType": "YulAssignment",
															"src": "2420:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2432:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2432:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2443:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2443:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2428:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2428:3:20"
																},
																"nativeSrc": "2428:18:20",
																"nodeType": "YulFunctionCall",
																"src": "2428:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2420:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2420:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2462:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2462:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2477:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2477:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "2493:3:20",
																								"nodeType": "YulLiteral",
																								"src": "2493:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2498:1:20",
																								"nodeType": "YulLiteral",
																								"src": "2498:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "2489:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2489:3:20"
																						},
																						"nativeSrc": "2489:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "2489:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2502:1:20",
																						"nodeType": "YulLiteral",
																						"src": "2502:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "2485:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2485:3:20"
																				},
																				"nativeSrc": "2485:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2485:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2473:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2473:3:20"
																		},
																		"nativeSrc": "2473:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2473:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2455:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2455:6:20"
																},
																"nativeSrc": "2455:51:20",
																"nodeType": "YulFunctionCall",
																"src": "2455:51:20"
															},
															"nativeSrc": "2455:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "2455:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2526:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2526:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2537:2:20",
																				"nodeType": "YulLiteral",
																				"src": "2537:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2522:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2522:3:20"
																		},
																		"nativeSrc": "2522:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2522:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "2542:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2542:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2515:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2515:6:20"
																},
																"nativeSrc": "2515:34:20",
																"nodeType": "YulFunctionCall",
																"src": "2515:34:20"
															},
															"nativeSrc": "2515:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "2515:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nativeSrc": "2281:274:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2371:9:20",
														"nodeType": "YulTypedName",
														"src": "2371:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2382:6:20",
														"nodeType": "YulTypedName",
														"src": "2382:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2390:6:20",
														"nodeType": "YulTypedName",
														"src": "2390:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2401:4:20",
														"nodeType": "YulTypedName",
														"src": "2401:4:20",
														"type": ""
													}
												],
												"src": "2281:274:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_contract$_MockTokenCreator_$3750__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value0 := add(_1, 32)\n        value1 := length\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_9acabb8a53cb35573da7f47df5e549a72d3aa5c35ce2efbc9c9bf6150d194e72__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"Amounts array length must match \")\n        mstore(add(headStart, 96), \"tokens array length.\")\n        tail := add(headStart, 128)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061007a575f3560e01c806385e5d7ee1161005857806385e5d7ee146100c95780638da5cb5b146100dc578063d48bfca7146100ec578063f2fde38b146100ff575f80fd5b80634f64b2be1461007e578063715018a6146100ae57806378a89567146100b8575b5f80fd5b61009161008c36600461038e565b610112565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b661013a565b005b6001546040519081526020016100a5565b6100b66100d73660046103a5565b61014d565b5f546001600160a01b0316610091565b6100b66100fa366004610416565b61027e565b6100b661010d366004610416565b6102d6565b60018181548110610121575f80fd5b5f918252602090912001546001600160a01b0316905081565b610142610313565b61014b5f61033f565b565b60015481146101c05760405162461bcd60e51b815260206004820152603460248201527f416d6f756e7473206172726179206c656e677468206d757374206d61746368206044820152733a37b5b2b7399030b93930bc903632b733ba341760611b60648201526084015b60405180910390fd5b5f5b60015481101561027957600181815481106101df576101df610443565b5f918252602090912001546001600160a01b03166340c10f193385858581811061020b5761020b610443565b6040516001600160e01b031960e087901b1681526001600160a01b03909416600485015260200291909101356024830152506044015f604051808303815f87803b158015610257575f80fd5b505af1158015610269573d5f803e3d5ffd5b5050600190920191506101c29050565b505050565b610286610313565b6001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0392909216919091179055565b6102de610313565b6001600160a01b03811661030757604051631e4fbdf760e01b81525f60048201526024016101b7565b6103108161033f565b50565b5f546001600160a01b0316331461014b5760405163118cdaa760e01b81523360048201526024016101b7565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020828403121561039e575f80fd5b5035919050565b5f80602083850312156103b6575f80fd5b823567ffffffffffffffff8111156103cc575f80fd5b8301601f810185136103dc575f80fd5b803567ffffffffffffffff8111156103f2575f80fd5b8560208260051b8401011115610406575f80fd5b6020919091019590945092505050565b5f60208284031215610426575f80fd5b81356001600160a01b038116811461043c575f80fd5b9392505050565b634e487b7160e01b5f52603260045260245ffdfea264697066735822122069781b261d7088b821877419d24c7b3c2b8c8f35219fbf4065157f910e99d7fb64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7A JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x85E5D7EE GT PUSH2 0x58 JUMPI DUP1 PUSH4 0x85E5D7EE EQ PUSH2 0xC9 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDC JUMPI DUP1 PUSH4 0xD48BFCA7 EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xFF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4F64B2BE EQ PUSH2 0x7E JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x78A89567 EQ PUSH2 0xB8 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x91 PUSH2 0x8C CALLDATASIZE PUSH1 0x4 PUSH2 0x38E JUMP JUMPDEST PUSH2 0x112 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB6 PUSH2 0x13A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xA5 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0xD7 CALLDATASIZE PUSH1 0x4 PUSH2 0x3A5 JUMP JUMPDEST PUSH2 0x14D JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x91 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x27E JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x10D CALLDATASIZE PUSH1 0x4 PUSH2 0x416 JUMP JUMPDEST PUSH2 0x2D6 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x121 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH2 0x142 PUSH2 0x313 JUMP JUMPDEST PUSH2 0x14B PUSH0 PUSH2 0x33F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 SLOAD DUP2 EQ PUSH2 0x1C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416D6F756E7473206172726179206C656E677468206D757374206D6174636820 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3A37B5B2B7399030B93930BC903632B733BA3417 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0x279 JUMPI PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x1DF JUMPI PUSH2 0x1DF PUSH2 0x443 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x40C10F19 CALLER DUP6 DUP6 DUP6 DUP2 DUP2 LT PUSH2 0x20B JUMPI PUSH2 0x20B PUSH2 0x443 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x257 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x269 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 POP PUSH2 0x1C2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x286 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 ADD DUP3 SSTORE PUSH0 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x2DE PUSH2 0x313 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x307 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH2 0x310 DUP2 PUSH2 0x33F JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x14B JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1B7 JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x39E JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3CC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x3DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3F2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x406 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 SWAP2 SWAP1 SWAP2 ADD SWAP6 SWAP1 SWAP5 POP SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x426 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x43C JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH10 0x781B261D7088B8218774 NOT 0xD2 0x4C PUSH28 0x3C2B8C8F35219FBF4065157F910E99D7FB64736F6C634300081A0033 ",
							"sourceMap": "343:1449:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;459:32;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;388:32:20;;;370:51;;358:2;343:18;459:32:18;;;;;;;;2293:101:0;;;:::i;:::-;;1693:96:18;1768:6;:13;1693:96;;578:25:20;;;566:2;551:18;1693:96:18;432:177:20;1272:290:18;;;;;;:::i;:::-;;:::i;1638:85:0:-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;1638:85;;845:107:18;;;;;;:::i;:::-;;:::i;2543:215:0:-;;;;;;:::i;:::-;;:::i;459:32:18:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;459:32:18;;-1:-1:-1;459:32:18;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1272:290:18:-;1363:6;:13;1345:31;;1337:96;;;;-1:-1:-1;;;1337:96:18;;1930:2:20;1337:96:18;;;1912:21:20;1969:2;1949:18;;;1942:30;2008:34;1988:18;;;1981:62;-1:-1:-1;;;2059:18:20;;;2052:50;2119:19;;1337:96:18;;;;;;;;;1451:9;1446:109;1470:6;:13;1466:17;;1446:109;;;1505:6;1512:1;1505:9;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;1505:9:18;:14;1520:10;1532:7;;1540:1;1532:10;;;;;;;:::i;:::-;1505:38;;-1:-1:-1;;;;;;1505:38:18;;;;;;;-1:-1:-1;;;;;2473:32:20;;;1505:38:18;;;2455:51:20;1532:10:18;;;;;;;2522:18:20;;;2515:34;-1:-1:-1;2428:18:20;;1505:38:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1485:3:18;;;;;-1:-1:-1;1446:109:18;;-1:-1:-1;1446:109:18;;;1272:290;;:::o;845:107::-;1531:13:0;:11;:13::i;:::-;908:6:18::1;:36:::0;;;;::::1;::::0;;-1:-1:-1;908:36:18;;;;;::::1;::::0;;-1:-1:-1;;;;;;908:36:18::1;-1:-1:-1::0;;;;;908:36:18;;;::::1;::::0;;;::::1;::::0;;845:107::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;370:51:20::0;343:18;;2672:31:0::1;199:228:20::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;1796:162::-;1684:7;1710:6;-1:-1:-1;;;;;1710:6:0;735:10:8;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:8;1901:40:0;;;370:51:20;343:18;;1901:40:0;199:228:20;2912:187:0;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;14:180:20:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:20;;14:180;-1:-1:-1;14:180:20:o;614:610::-;700:6;708;761:2;749:9;740:7;736:23;732:32;729:52;;;777:1;774;767:12;729:52;817:9;804:23;850:18;842:6;839:30;836:50;;;882:1;879;872:12;836:50;905:22;;958:4;950:13;;946:27;-1:-1:-1;936:55:20;;987:1;984;977:12;936:55;1027:2;1014:16;1053:18;1045:6;1042:30;1039:50;;;1085:1;1082;1075:12;1039:50;1138:7;1133:2;1123:6;1120:1;1116:14;1112:2;1108:23;1104:32;1101:45;1098:65;;;1159:1;1156;1149:12;1098:65;1190:2;1182:11;;;;;1212:6;;-1:-1:-1;614:610:20;-1:-1:-1;;;614:610:20:o;1437:286::-;1496:6;1549:2;1537:9;1528:7;1524:23;1520:32;1517:52;;;1565:1;1562;1555:12;1517:52;1591:23;;-1:-1:-1;;;;;1643:31:20;;1633:42;;1623:70;;1689:1;1686;1679:12;1623:70;1712:5;1437:286;-1:-1:-1;;;1437:286:20:o;2149:127::-;2210:10;2205:3;2201:20;2198:1;2191:31;2241:4;2238:1;2231:15;2265:4;2262:1;2255:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "233000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"addToken(address)": "50976",
								"getTokenCount()": "2324",
								"mintAll(uint256[])": "infinite",
								"owner()": "2340",
								"renounceOwnership()": "infinite",
								"tokens(uint256)": "4601",
								"transferOwnership(address)": "28360"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH",
									"source": 18,
									"value": "80"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "CALLVALUE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "ISZERO",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSHSIZE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "CODESIZE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "SUB",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSHSIZE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP4",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "ADD",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH",
									"source": 18,
									"value": "40"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "SWAP1",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "2"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "SWAP2",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "3"
								},
								{
									"begin": 645,
									"end": 711,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 645,
									"end": 711,
									"name": "tag",
									"source": 18,
									"value": "2"
								},
								{
									"begin": 645,
									"end": 711,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 687,
									"end": 699,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 455,
									"end": 506,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 428,
									"end": 446,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 428,
									"end": 446,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1225,
									"end": 1412,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 645,
									"end": 711,
									"name": "POP",
									"source": 18
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "15"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "JUMP",
									"source": 18
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 20,
									"value": "17"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 20,
									"value": "18"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 309,
									"end": 512,
									"name": "tag",
									"source": 20,
									"value": "15"
								},
								{
									"begin": 309,
									"end": 512,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 343,
									"end": 1792,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122069781b261d7088b821877419d24c7b3c2b8c8f35219fbf4065157f910e99d7fb64736f6c634300081a0033",
									".code": [
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "CALLVALUE",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "tag",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "SHR",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "85E5D7EE"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "GT",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "85E5D7EE"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "8DA5CB5B"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "7"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "D48BFCA7"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "F2FDE38B"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "9"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "tag",
											"source": 18,
											"value": "10"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "4F64B2BE"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "715018A6"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "78A89567"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "tag",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 343,
											"end": 1792,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "13"
										},
										{
											"begin": 459,
											"end": 491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "14"
										},
										{
											"begin": 459,
											"end": 491,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 388,
											"end": 420,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 388,
											"end": 420,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 388,
											"end": 420,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 370,
											"end": 421,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 370,
											"end": 421,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 358,
											"end": 360,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 343,
											"end": 361,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "15"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "RETURN",
											"source": 18
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1693,
											"end": 1789,
											"name": "tag",
											"source": 18,
											"value": "5"
										},
										{
											"begin": 1693,
											"end": 1789,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1768,
											"end": 1774,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1768,
											"end": 1781,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 1693,
											"end": 1789,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1693,
											"end": 1789,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 578,
											"end": 603,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 578,
											"end": 603,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 578,
											"end": 603,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 566,
											"end": 568,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 551,
											"end": 569,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1693,
											"end": 1789,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "15"
										},
										{
											"begin": 432,
											"end": 609,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "tag",
											"source": 18,
											"value": "6"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "25"
										},
										{
											"begin": 1272,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "tag",
											"source": 18,
											"value": "24"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 1272,
											"end": 1562,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 845,
											"end": 952,
											"name": "tag",
											"source": 18,
											"value": "8"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "17"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "CALLDATASIZE",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "33"
										},
										{
											"begin": 845,
											"end": 952,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"name": "tag",
											"source": 18,
											"value": "32"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "34"
										},
										{
											"begin": 845,
											"end": 952,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "14"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "38"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "tag",
											"source": 18,
											"value": "38"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "KECCAK256",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 491,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 491,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 459,
											"end": 491,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "tag",
											"source": 18,
											"value": "26"
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1363,
											"end": 1369,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1363,
											"end": 1376,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 1345,
											"end": 1376,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1345,
											"end": 1376,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1930,
											"end": 1932,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1912,
											"end": 1933,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1969,
											"end": 1971,
											"name": "PUSH",
											"source": 20,
											"value": "34"
										},
										{
											"begin": 1949,
											"end": 1967,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1949,
											"end": 1967,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1949,
											"end": 1967,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1942,
											"end": 1972,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2008,
											"end": 2042,
											"name": "PUSH",
											"source": 20,
											"value": "416D6F756E7473206172726179206C656E677468206D757374206D6174636820"
										},
										{
											"begin": 1988,
											"end": 2006,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 1988,
											"end": 2006,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1988,
											"end": 2006,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1981,
											"end": 2043,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3A37B5B2B7399030B93930BC903632B733BA3417"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "61"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2059,
											"end": 2077,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2052,
											"end": 2102,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2119,
											"end": 2138,
											"name": "PUSH",
											"source": 20,
											"value": "84"
										},
										{
											"begin": 2119,
											"end": 2138,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "tag",
											"source": 18,
											"value": "49"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "tag",
											"source": 18,
											"value": "48"
										},
										{
											"begin": 1337,
											"end": 1433,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1451,
											"end": 1460,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "tag",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1470,
											"end": 1476,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1470,
											"end": 1483,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 1466,
											"end": 1483,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1466,
											"end": 1483,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "52"
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1511,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1512,
											"end": 1513,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "56"
										},
										{
											"begin": 1505,
											"end": 1514,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "tag",
											"source": 18,
											"value": "55"
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "KECCAK256",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1505,
											"end": 1514,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1519,
											"name": "PUSH",
											"source": 18,
											"value": "40C10F19"
										},
										{
											"begin": 1520,
											"end": 1530,
											"name": "CALLER",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1539,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1539,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1540,
											"end": 1541,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "LT",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "56"
										},
										{
											"begin": 1532,
											"end": 1542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "tag",
											"source": 18,
											"value": "59"
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "E0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "SHL",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2473,
											"end": 2505,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 2473,
											"end": 2505,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 2473,
											"end": 2505,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "4"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP6",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 2455,
											"end": 2506,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "PUSH",
											"source": 18,
											"value": "20"
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "MUL",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1532,
											"end": 1542,
											"name": "CALLDATALOAD",
											"source": 18
										},
										{
											"begin": 2522,
											"end": 2540,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 2522,
											"end": 2540,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2540,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2515,
											"end": 2549,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2428,
											"end": 2446,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 2428,
											"end": 2446,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "SUB",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP8",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "EXTCODESIZE",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "tag",
											"source": 18,
											"value": "62"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "GAS",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "CALL",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "ISZERO",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "JUMPI",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "RETURNDATACOPY",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "RETURNDATASIZE",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "REVERT",
											"source": 18
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "tag",
											"source": 18,
											"value": "64"
										},
										{
											"begin": 1505,
											"end": 1543,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1485,
											"end": 1488,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 1485,
											"end": 1488,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 1485,
											"end": 1488,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 1485,
											"end": 1488,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 1485,
											"end": 1488,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "PUSH [tag]",
											"source": 18,
											"value": "51"
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "tag",
											"source": 18,
											"value": "52"
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1446,
											"end": 1555,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 1272,
											"end": 1562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"name": "tag",
											"source": 18,
											"value": "34"
										},
										{
											"begin": 845,
											"end": 952,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "67"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 908,
											"end": 914,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 18,
											"value": "1"
										},
										{
											"begin": 908,
											"end": 944,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "PUSH",
											"source": 18,
											"value": "B10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6"
										},
										{
											"begin": 908,
											"end": 944,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SLOAD",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 908,
											"end": 944,
											"modifierDepth": 1,
											"name": "AND",
											"source": 18
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"modifierDepth": 1,
											"name": "AND",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"modifierDepth": 1,
											"name": "OR",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SWAP1",
											"source": 18
										},
										{
											"begin": 908,
											"end": 944,
											"name": "SSTORE",
											"source": 18
										},
										{
											"begin": 845,
											"end": 952,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "71"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 370,
											"end": 421,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 343,
											"end": 361,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 343,
											"end": 361,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 199,
											"end": 427,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "42"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 370,
											"end": 421,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 343,
											"end": 361,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 343,
											"end": 361,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 199,
											"end": 427,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 20,
											"value": "13"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "87"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 20,
											"value": "87"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 614,
											"end": 1224,
											"name": "tag",
											"source": 20,
											"value": "25"
										},
										{
											"begin": 614,
											"end": 1224,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 700,
											"end": 706,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 708,
											"end": 714,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 761,
											"end": 763,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 749,
											"end": 758,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 740,
											"end": 747,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 736,
											"end": 759,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 732,
											"end": 764,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 729,
											"end": 781,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 729,
											"end": 781,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 729,
											"end": 781,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 777,
											"end": 778,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 774,
											"end": 775,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 767,
											"end": 779,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 729,
											"end": 781,
											"name": "tag",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 729,
											"end": 781,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 817,
											"end": 826,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 804,
											"end": 827,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 850,
											"end": 868,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 842,
											"end": 848,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 839,
											"end": 869,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 836,
											"end": 886,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 836,
											"end": 886,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 836,
											"end": 886,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 882,
											"end": 883,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 879,
											"end": 880,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 872,
											"end": 884,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 836,
											"end": 886,
											"name": "tag",
											"source": 20,
											"value": "92"
										},
										{
											"begin": 836,
											"end": 886,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 905,
											"end": 927,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 905,
											"end": 927,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 958,
											"end": 962,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 950,
											"end": 963,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 950,
											"end": 963,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 946,
											"end": 973,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SGT",
											"source": -1
										},
										{
											"begin": 936,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "93"
										},
										{
											"begin": 936,
											"end": 991,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 987,
											"end": 988,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 984,
											"end": 985,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 977,
											"end": 989,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 936,
											"end": 991,
											"name": "tag",
											"source": 20,
											"value": "93"
										},
										{
											"begin": 936,
											"end": 991,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1027,
											"end": 1029,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1014,
											"end": 1030,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1053,
											"end": 1071,
											"name": "PUSH",
											"source": 20,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1045,
											"end": 1051,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1042,
											"end": 1072,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 1039,
											"end": 1089,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1039,
											"end": 1089,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 1039,
											"end": 1089,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1085,
											"end": 1086,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1082,
											"end": 1083,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1075,
											"end": 1087,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1039,
											"end": 1089,
											"name": "tag",
											"source": 20,
											"value": "94"
										},
										{
											"begin": 1039,
											"end": 1089,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1138,
											"end": 1145,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1133,
											"end": 1135,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1123,
											"end": 1129,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1120,
											"end": 1121,
											"name": "PUSH",
											"source": 20,
											"value": "5"
										},
										{
											"begin": 1116,
											"end": 1130,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 1112,
											"end": 1114,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1108,
											"end": 1131,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1104,
											"end": 1136,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1101,
											"end": 1146,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "95"
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1159,
											"end": 1160,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1156,
											"end": 1157,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1149,
											"end": 1161,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "tag",
											"source": 20,
											"value": "95"
										},
										{
											"begin": 1098,
											"end": 1163,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1190,
											"end": 1192,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1182,
											"end": 1193,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1182,
											"end": 1193,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1182,
											"end": 1193,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1182,
											"end": 1193,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1182,
											"end": 1193,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1218,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1212,
											"end": 1218,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 614,
											"end": 1224,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 614,
											"end": 1224,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1437,
											"end": 1723,
											"name": "tag",
											"source": 20,
											"value": "33"
										},
										{
											"begin": 1437,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1496,
											"end": 1502,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1551,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1537,
											"end": 1546,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1528,
											"end": 1535,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1524,
											"end": 1547,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1520,
											"end": 1552,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1569,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1569,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "98"
										},
										{
											"begin": 1517,
											"end": 1569,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1566,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1562,
											"end": 1563,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1555,
											"end": 1567,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1517,
											"end": 1569,
											"name": "tag",
											"source": 20,
											"value": "98"
										},
										{
											"begin": 1517,
											"end": 1569,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1591,
											"end": 1614,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1591,
											"end": 1614,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1643,
											"end": 1674,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1643,
											"end": 1674,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 1633,
											"end": 1675,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1633,
											"end": 1675,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1693,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "99"
										},
										{
											"begin": 1623,
											"end": 1693,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1689,
											"end": 1690,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1686,
											"end": 1687,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1679,
											"end": 1691,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1693,
											"name": "tag",
											"source": 20,
											"value": "99"
										},
										{
											"begin": 1623,
											"end": 1693,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1712,
											"end": 1717,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 1437,
											"end": 1723,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1437,
											"end": 1723,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2149,
											"end": 2276,
											"name": "tag",
											"source": 20,
											"value": "56"
										},
										{
											"begin": 2149,
											"end": 2276,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2210,
											"end": 2220,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 2205,
											"end": 2208,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 2201,
											"end": 2221,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2191,
											"end": 2222,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2241,
											"end": 2245,
											"name": "PUSH",
											"source": 20,
											"value": "32"
										},
										{
											"begin": 2238,
											"end": 2239,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 2231,
											"end": 2246,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2265,
											"end": 2269,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 2262,
											"end": 2263,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2255,
											"end": 2270,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"addToken(address)": "d48bfca7",
							"getTokenCount()": "78a89567",
							"mintAll(uint256[])": "85e5d7ee",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"tokens(uint256)": "4f64b2be",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"mintAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"contract MockTokenCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows the minting of multiple ERC20 tokens to the caller in a single transaction.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"details\":\"Adds a new token contract to the list.\",\"params\":{\"token\":\"The address of the token contract.\"}},\"constructor\":{\"details\":\"Initializes the contract setting the initial owner.\",\"params\":{\"initialOwner\":\"The address of the initial owner.\"}},\"getTokenCount()\":{\"returns\":{\"_0\":\"The number of token contracts.\"}},\"mintAll(uint256[])\":{\"details\":\"The `amounts` array must match the length of the `tokens` array.\",\"params\":{\"amounts\":\"An array of amounts to mint from each token contract. The array index corresponds to the token contract index.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BulkMinter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenCount()\":{\"notice\":\"Gets the number of token contracts added.\"},\"mintAll(uint256[])\":{\"notice\":\"Mints tokens from all the listed contracts to the caller.\"},\"tokens(uint256)\":{\"notice\":\"Array to hold the addresses of the deployed ERC20 contracts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/tokens/BulkMinter.sol\":\"BulkMinter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/contracts/tokens/BulkMinter.sol\":{\"keccak256\":\"0xbf5699ca4b667a107608e41afb50133a64a663ef83f7ce254e199f147c9ddd10\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6dbde5f8c046b3ecd833ad4c08c9c05826a310733fe4ffed083143340b474289\",\"dweb:/ipfs/QmUYDZTgzrXirfCHTW6T3ugB3qmEEuAi5Pg9QaZkyj42af\"]},\"contracts/contracts/tokens/MockTokenCreator.sol\":{\"keccak256\":\"0xb3e56d84fc2d59ef068140e7aaf462d73248976c640bbd31586726f8654cca62\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c72deca63803eb83e9361c1b35b0263d35b3f56eb3106b6837980ec64afffa62\",\"dweb:/ipfs/QmWYSPiELgrTbCjcykLSTSfv81T4bMu271eNB84vVnNgML\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "contracts/contracts/tokens/BulkMinter.sol:BulkMinter",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 3618,
								"contract": "contracts/contracts/tokens/BulkMinter.sol:BulkMinter",
								"label": "tokens",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_contract(MockTokenCreator)3750)dyn_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_contract(MockTokenCreator)3750)dyn_storage": {
								"base": "t_contract(MockTokenCreator)3750",
								"encoding": "dynamic_array",
								"label": "contract MockTokenCreator[]",
								"numberOfBytes": "32"
							},
							"t_contract(MockTokenCreator)3750": {
								"encoding": "inplace",
								"label": "contract MockTokenCreator",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getTokenCount()": {
								"notice": "Gets the number of token contracts added."
							},
							"mintAll(uint256[])": {
								"notice": "Mints tokens from all the listed contracts to the caller."
							},
							"tokens(uint256)": {
								"notice": "Array to hold the addresses of the deployed ERC20 contracts."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/contracts/tokens/MockTokenCreator.sol": {
				"MockTokenCreator": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of OpenZeppelin's ERC20 and ERC20Permit contract. Allows for minting and burning of tokens, and includes permit functionality.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Caller must have at least `amount` tokens.",
								"params": {
									"amount": "The number of tokens to burn."
								}
							},
							"constructor": {
								"details": "Initializes the contract with the token name and symbol, and sets up permit functionality.",
								"params": {
									"name": "The name of the token.",
									"symbol": "The symbol of the token."
								}
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"mint(address,uint256)": {
								"details": "Caller must have a role that allows them to mint (not implemented in this simple example).",
								"params": {
									"amount": "The number of tokens to mint.",
									"to": "The address of the recipient."
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"title": "MockTokenCreator",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":381:1422  contract MockTokenCreator is ERC20, ERC20Permit {... */\n  mstore(0x40, 0x0160)\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":648:765  constructor(string memory name, string memory symbol)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  swap1\n  swap2\n  mstore\n  0x01\n  dup2\n  mstore\n  shl(0xf8, 0x31)\n  0x20\n  dup3\n  add\n  mstore\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":752:756  name */\n  dup3\n  swap1\n  dup2\n  swap1\n  dup2\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":723:729  symbol */\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  tag_9\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":752:756  name */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  tag_10\n  jump\t// in\ntag_9:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_11\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_10\n  jump\t// in\ntag_11:\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_13\n  swap2\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3405  name */\n  dup4\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x05\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3431  name.toShortStringWithFallback */\n  tag_14\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  jump\t// in\ntag_13:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_15\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3474  version */\n  dup2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3501:3517  _versionFallback */\n  0x06\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3500  version.toShortStringWithFallback */\n  tag_14\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  jump\t// in\ntag_15:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  dup2\n  mload\n  swap1\n  dup3\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  tag_16\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n  mload(0xe0)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n  mload(0x0100)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x20\n  dup3\n  add\n    /* \"#utility.yul\":4204:4229   */\n  mstore\n    /* \"#utility.yul\":4245:4263   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":4238:4272   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":4288:4306   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":4281:4315   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n  chainid\n    /* \"#utility.yul\":4331:4349   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":4324:4358   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"#utility.yul\":4374:4393   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":4367:4428   */\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":4176:4195   */\n  0xc0\n  add\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\ntag_16:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3747:3751  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xc0\n  mstore\n  pop\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":381:1422  contract MockTokenCreator is ERC20, ERC20Permit {... */\n  tag_45\n  swap2\n  pop\n  pop\n  jump\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_14:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3010:3021  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3043:3048  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3056  bytes(value).length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\n  iszero\n  tag_22\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  tag_23\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3098:3103  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3097  toShortString */\n  tag_24\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  jump\t// in\ntag_23:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_25)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_22:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3161:3166  store */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_28\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3181  value */\n  dup5\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3161:3166  store */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_10\n  jump\t// in\ntag_28:\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_25:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_24:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1773:1784  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1813  bytes memory bstr */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1822:1825  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1826  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1844  bstr */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1851  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  iszero\n  tag_33\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1893:1896  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  mload(0x40)\n  shl(0xe0, 0x305a27a9)\n  dup2\n  mstore\n  0x04\n  add\n  tag_34\n  swap2\n  swap1\n  tag_35\n  jump\t// in\ntag_34:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_33:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1985  bstr.length */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_36\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1978  bstr */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_37\n  jump\t// in\ntag_36:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n  swap4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_39:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:869   */\ntag_40:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_48\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_48:\n    /* \"#utility.yul\":298:311   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":323:353   */\n  dup2\n  gt\n    /* \"#utility.yul\":320:376   */\n  iszero\n  tag_50\n  jumpi\n    /* \"#utility.yul\":356:374   */\n  tag_50\n  tag_39\n  jump\t// in\ntag_50:\n    /* \"#utility.yul\":405:407   */\n  0x40\n    /* \"#utility.yul\":399:408   */\n  mload\n    /* \"#utility.yul\":497:499   */\n  0x1f\n    /* \"#utility.yul\":459:476   */\n  dup3\n  add\n  not(0x1f)\n    /* \"#utility.yul\":455:486   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":488:490   */\n  0x3f\n    /* \"#utility.yul\":451:491   */\n  add\n    /* \"#utility.yul\":447:501   */\n  and\n    /* \"#utility.yul\":435:502   */\n  dup2\n  add\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":517:551   */\n  dup2\n  gt\n    /* \"#utility.yul\":553:575   */\n  dup3\n  dup3\n  lt\n    /* \"#utility.yul\":514:576   */\n  or\n    /* \"#utility.yul\":511:599   */\n  iszero\n  tag_52\n  jumpi\n    /* \"#utility.yul\":579:597   */\n  tag_52\n  tag_39\n  jump\t// in\ntag_52:\n    /* \"#utility.yul\":615:617   */\n  0x40\n    /* \"#utility.yul\":608:630   */\n  mstore\n    /* \"#utility.yul\":639:661   */\n  dup2\n  dup2\n  mstore\n    /* \"#utility.yul\":680:699   */\n  dup4\n  dup3\n  add\n    /* \"#utility.yul\":701:705   */\n  0x20\n    /* \"#utility.yul\":676:706   */\n  add\n    /* \"#utility.yul\":673:712   */\n  dup6\n  lt\n    /* \"#utility.yul\":670:729   */\n  iszero\n  tag_53\n  jumpi\n    /* \"#utility.yul\":725:726   */\n  0x00\n    /* \"#utility.yul\":722:723   */\n  dup1\n    /* \"#utility.yul\":715:727   */\n  revert\n    /* \"#utility.yul\":670:729   */\ntag_53:\n    /* \"#utility.yul\":782:788   */\n  dup2\n    /* \"#utility.yul\":775:779   */\n  0x20\n    /* \"#utility.yul\":767:773   */\n  dup6\n    /* \"#utility.yul\":763:780   */\n  add\n    /* \"#utility.yul\":756:760   */\n  0x20\n    /* \"#utility.yul\":748:754   */\n  dup4\n    /* \"#utility.yul\":744:761   */\n  add\n    /* \"#utility.yul\":738:789   */\n  mcopy\n    /* \"#utility.yul\":837:838   */\n  0x00\n    /* \"#utility.yul\":809:828   */\n  swap2\n  dup2\n  add\n    /* \"#utility.yul\":830:834   */\n  0x20\n    /* \"#utility.yul\":805:835   */\n  add\n    /* \"#utility.yul\":798:839   */\n  swap2\n  swap1\n  swap2\n  mstore\n    /* \"#utility.yul\":813:819   */\n  swap4\n    /* \"#utility.yul\":146:869   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":874:1431   */\ntag_3:\n    /* \"#utility.yul\":973:979   */\n  0x00\n    /* \"#utility.yul\":981:987   */\n  dup1\n    /* \"#utility.yul\":1034:1036   */\n  0x40\n    /* \"#utility.yul\":1022:1031   */\n  dup4\n    /* \"#utility.yul\":1013:1020   */\n  dup6\n    /* \"#utility.yul\":1009:1032   */\n  sub\n    /* \"#utility.yul\":1005:1037   */\n  slt\n    /* \"#utility.yul\":1002:1054   */\n  iszero\n  tag_55\n  jumpi\n    /* \"#utility.yul\":1050:1051   */\n  0x00\n    /* \"#utility.yul\":1047:1048   */\n  dup1\n    /* \"#utility.yul\":1040:1052   */\n  revert\n    /* \"#utility.yul\":1002:1054   */\ntag_55:\n    /* \"#utility.yul\":1077:1093   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1105:1135   */\n  dup2\n  gt\n    /* \"#utility.yul\":1102:1152   */\n  iszero\n  tag_56\n  jumpi\n    /* \"#utility.yul\":1148:1149   */\n  0x00\n    /* \"#utility.yul\":1145:1146   */\n  dup1\n    /* \"#utility.yul\":1138:1150   */\n  revert\n    /* \"#utility.yul\":1102:1152   */\ntag_56:\n    /* \"#utility.yul\":1171:1232   */\n  tag_57\n    /* \"#utility.yul\":1224:1231   */\n  dup6\n    /* \"#utility.yul\":1215:1221   */\n  dup3\n    /* \"#utility.yul\":1204:1213   */\n  dup7\n    /* \"#utility.yul\":1200:1222   */\n  add\n    /* \"#utility.yul\":1171:1232   */\n  tag_40\n  jump\t// in\ntag_57:\n    /* \"#utility.yul\":1278:1280   */\n  0x20\n    /* \"#utility.yul\":1263:1281   */\n  dup6\n  add\n    /* \"#utility.yul\":1257:1282   */\n  mload\n    /* \"#utility.yul\":1161:1232   */\n  swap1\n  swap4\n  pop\n    /* \"#utility.yul\":1257:1282   */\n  swap1\n  pop\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1294:1326   */\n  dup2\n  gt\n    /* \"#utility.yul\":1291:1343   */\n  iszero\n  tag_58\n  jumpi\n    /* \"#utility.yul\":1339:1340   */\n  0x00\n    /* \"#utility.yul\":1336:1337   */\n  dup1\n    /* \"#utility.yul\":1329:1341   */\n  revert\n    /* \"#utility.yul\":1291:1343   */\ntag_58:\n    /* \"#utility.yul\":1362:1425   */\n  tag_59\n    /* \"#utility.yul\":1417:1424   */\n  dup6\n    /* \"#utility.yul\":1406:1414   */\n  dup3\n    /* \"#utility.yul\":1395:1404   */\n  dup7\n    /* \"#utility.yul\":1391:1415   */\n  add\n    /* \"#utility.yul\":1362:1425   */\n  tag_40\n  jump\t// in\ntag_59:\n    /* \"#utility.yul\":1352:1425   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":874:1431   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1436:1816   */\ntag_41:\n    /* \"#utility.yul\":1515:1516   */\n  0x01\n    /* \"#utility.yul\":1511:1523   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1558:1570   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1579:1640   */\n  tag_61\n  jumpi\n    /* \"#utility.yul\":1633:1637   */\n  0x7f\n    /* \"#utility.yul\":1625:1631   */\n  dup3\n    /* \"#utility.yul\":1621:1638   */\n  and\n    /* \"#utility.yul\":1611:1638   */\n  swap2\n  pop\n    /* \"#utility.yul\":1579:1640   */\ntag_61:\n    /* \"#utility.yul\":1686:1688   */\n  0x20\n    /* \"#utility.yul\":1678:1684   */\n  dup3\n    /* \"#utility.yul\":1675:1689   */\n  lt\n    /* \"#utility.yul\":1655:1673   */\n  dup2\n    /* \"#utility.yul\":1652:1690   */\n  sub\n    /* \"#utility.yul\":1649:1810   */\n  tag_62\n  jumpi\n    /* \"#utility.yul\":1732:1742   */\n  0x4e487b71\n    /* \"#utility.yul\":1727:1730   */\n  0xe0\n    /* \"#utility.yul\":1723:1743   */\n  shl\n    /* \"#utility.yul\":1720:1721   */\n  0x00\n    /* \"#utility.yul\":1713:1744   */\n  mstore\n    /* \"#utility.yul\":1767:1771   */\n  0x22\n    /* \"#utility.yul\":1764:1765   */\n  0x04\n    /* \"#utility.yul\":1757:1772   */\n  mstore\n    /* \"#utility.yul\":1795:1799   */\n  0x24\n    /* \"#utility.yul\":1792:1793   */\n  0x00\n    /* \"#utility.yul\":1785:1800   */\n  revert\n    /* \"#utility.yul\":1649:1810   */\ntag_62:\n  pop\n    /* \"#utility.yul\":1436:1816   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1947:2465   */\ntag_43:\n    /* \"#utility.yul\":2049:2051   */\n  0x1f\n    /* \"#utility.yul\":2044:2047   */\n  dup3\n    /* \"#utility.yul\":2041:2052   */\n  gt\n    /* \"#utility.yul\":2038:2459   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":2085:2090   */\n  dup1\n    /* \"#utility.yul\":2082:2083   */\n  0x00\n    /* \"#utility.yul\":2075:2091   */\n  mstore\n    /* \"#utility.yul\":2129:2133   */\n  0x20\n    /* \"#utility.yul\":2126:2127   */\n  0x00\n    /* \"#utility.yul\":2116:2134   */\n  keccak256\n    /* \"#utility.yul\":2199:2201   */\n  0x1f\n    /* \"#utility.yul\":2187:2197   */\n  dup5\n    /* \"#utility.yul\":2183:2202   */\n  add\n    /* \"#utility.yul\":2180:2181   */\n  0x05\n    /* \"#utility.yul\":2176:2203   */\n  shr\n    /* \"#utility.yul\":2170:2174   */\n  dup2\n    /* \"#utility.yul\":2166:2204   */\n  add\n    /* \"#utility.yul\":2235:2239   */\n  0x20\n    /* \"#utility.yul\":2223:2233   */\n  dup6\n    /* \"#utility.yul\":2220:2240   */\n  lt\n    /* \"#utility.yul\":2217:2264   */\n  iszero\n  tag_66\n  jumpi\n  pop\n    /* \"#utility.yul\":2258:2262   */\n  dup1\n    /* \"#utility.yul\":2217:2264   */\ntag_66:\n    /* \"#utility.yul\":2313:2315   */\n  0x1f\n    /* \"#utility.yul\":2308:2311   */\n  dup5\n    /* \"#utility.yul\":2304:2316   */\n  add\n    /* \"#utility.yul\":2301:2302   */\n  0x05\n    /* \"#utility.yul\":2297:2317   */\n  shr\n    /* \"#utility.yul\":2291:2295   */\n  dup3\n    /* \"#utility.yul\":2287:2318   */\n  add\n    /* \"#utility.yul\":2277:2318   */\n  swap2\n  pop\n    /* \"#utility.yul\":2368:2449   */\ntag_67:\n    /* \"#utility.yul\":2386:2388   */\n  dup2\n    /* \"#utility.yul\":2379:2384   */\n  dup2\n    /* \"#utility.yul\":2376:2389   */\n  lt\n    /* \"#utility.yul\":2368:2449   */\n  iszero\n  tag_69\n  jumpi\n    /* \"#utility.yul\":2445:2446   */\n  0x00\n    /* \"#utility.yul\":2431:2447   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2412:2413   */\n  0x01\n    /* \"#utility.yul\":2401:2414   */\n  add\n    /* \"#utility.yul\":2368:2449   */\n  jump(tag_67)\ntag_69:\n    /* \"#utility.yul\":2372:2375   */\n  pop\n  pop\n    /* \"#utility.yul\":2038:2459   */\ntag_65:\n    /* \"#utility.yul\":1947:2465   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2641:3940   */\ntag_10:\n    /* \"#utility.yul\":2761:2771   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":2783:2813   */\n  dup2\n  gt\n    /* \"#utility.yul\":2780:2836   */\n  iszero\n  tag_73\n  jumpi\n    /* \"#utility.yul\":2816:2834   */\n  tag_73\n  tag_39\n  jump\t// in\ntag_73:\n    /* \"#utility.yul\":2845:2942   */\n  tag_74\n    /* \"#utility.yul\":2935:2941   */\n  dup2\n    /* \"#utility.yul\":2895:2933   */\n  tag_75\n    /* \"#utility.yul\":2927:2931   */\n  dup5\n    /* \"#utility.yul\":2921:2932   */\n  sload\n    /* \"#utility.yul\":2895:2933   */\n  tag_41\n  jump\t// in\ntag_75:\n    /* \"#utility.yul\":2889:2893   */\n  dup5\n    /* \"#utility.yul\":2845:2942   */\n  tag_43\n  jump\t// in\ntag_74:\n    /* \"#utility.yul\":2991:2995   */\n  0x20\n    /* \"#utility.yul\":3022:3024   */\n  0x1f\n    /* \"#utility.yul\":3011:3025   */\n  dup3\n  gt\n    /* \"#utility.yul\":3039:3040   */\n  0x01\n    /* \"#utility.yul\":3034:3683   */\n  dup2\n  eq\n  tag_77\n  jumpi\n    /* \"#utility.yul\":3727:3728   */\n  0x00\n    /* \"#utility.yul\":3744:3750   */\n  dup4\n    /* \"#utility.yul\":3741:3830   */\n  iszero\n  tag_78\n  jumpi\n  pop\n    /* \"#utility.yul\":3796:3815   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":3790:3816   */\n  mload\n    /* \"#utility.yul\":3741:3830   */\ntag_78:\n  not(0x00)\n    /* \"#utility.yul\":2598:2599   */\n  0x03\n    /* \"#utility.yul\":2594:2605   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":2590:2614   */\n  shr\n    /* \"#utility.yul\":2586:2615   */\n  not\n    /* \"#utility.yul\":2576:2616   */\n  and\n    /* \"#utility.yul\":2622:2623   */\n  0x01\n    /* \"#utility.yul\":2618:2629   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":2573:2630   */\n  or\n    /* \"#utility.yul\":3843:3924   */\n  dup5\n  sstore\n    /* \"#utility.yul\":3004:3934   */\n  jump(tag_69)\n    /* \"#utility.yul\":3034:3683   */\ntag_77:\n    /* \"#utility.yul\":1894:1895   */\n  0x00\n    /* \"#utility.yul\":1887:1901   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":1931:1935   */\n  0x20\n    /* \"#utility.yul\":1918:1936   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":3070:3090   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":3188:3410   */\ntag_81:\n    /* \"#utility.yul\":3202:3209   */\n  dup3\n    /* \"#utility.yul\":3199:3200   */\n  dup2\n    /* \"#utility.yul\":3196:3210   */\n  lt\n    /* \"#utility.yul\":3188:3410   */\n  iszero\n  tag_83\n  jumpi\n    /* \"#utility.yul\":3284:3303   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":3278:3304   */\n  mload\n    /* \"#utility.yul\":3263:3305   */\n  dup3\n  sstore\n    /* \"#utility.yul\":3391:3395   */\n  0x20\n    /* \"#utility.yul\":3376:3396   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":3344:3345   */\n  0x01\n    /* \"#utility.yul\":3332:3346   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":3218:3230   */\n  add\n    /* \"#utility.yul\":3188:3410   */\n  jump(tag_81)\ntag_83:\n    /* \"#utility.yul\":3192:3195   */\n  pop\n    /* \"#utility.yul\":3438:3444   */\n  dup5\n    /* \"#utility.yul\":3429:3436   */\n  dup3\n    /* \"#utility.yul\":3426:3445   */\n  lt\n    /* \"#utility.yul\":3423:3624   */\n  iszero\n  tag_84\n  jumpi\n    /* \"#utility.yul\":3499:3518   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":3493:3519   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":3582:3583   */\n  0x03\n    /* \"#utility.yul\":3578:3592   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":3594:3597   */\n  0xf8\n    /* \"#utility.yul\":3574:3598   */\n  and\n    /* \"#utility.yul\":3570:3607   */\n  shr\n    /* \"#utility.yul\":3566:3608   */\n  not\n    /* \"#utility.yul\":3551:3609   */\n  and\n    /* \"#utility.yul\":3536:3610   */\n  dup2\n  sstore\n    /* \"#utility.yul\":3423:3624   */\ntag_84:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3670:3671   */\n  0x01\n    /* \"#utility.yul\":3654:3668   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":3650:3672   */\n  add\n    /* \"#utility.yul\":3637:3673   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":2641:3940   */\n  jump\t// out\n    /* \"#utility.yul\":4439:4857   */\ntag_35:\n    /* \"#utility.yul\":4588:4590   */\n  0x20\n    /* \"#utility.yul\":4577:4586   */\n  dup2\n    /* \"#utility.yul\":4570:4591   */\n  mstore\n    /* \"#utility.yul\":4551:4555   */\n  0x00\n    /* \"#utility.yul\":4620:4626   */\n  dup3\n    /* \"#utility.yul\":4614:4627   */\n  mload\n    /* \"#utility.yul\":4663:4669   */\n  dup1\n    /* \"#utility.yul\":4658:4660   */\n  0x20\n    /* \"#utility.yul\":4647:4656   */\n  dup5\n    /* \"#utility.yul\":4643:4661   */\n  add\n    /* \"#utility.yul\":4636:4670   */\n  mstore\n    /* \"#utility.yul\":4722:4728   */\n  dup1\n    /* \"#utility.yul\":4717:4719   */\n  0x20\n    /* \"#utility.yul\":4709:4715   */\n  dup6\n    /* \"#utility.yul\":4705:4720   */\n  add\n    /* \"#utility.yul\":4700:4702   */\n  0x40\n    /* \"#utility.yul\":4689:4698   */\n  dup6\n    /* \"#utility.yul\":4685:4703   */\n  add\n    /* \"#utility.yul\":4679:4729   */\n  mcopy\n    /* \"#utility.yul\":4778:4779   */\n  0x00\n    /* \"#utility.yul\":4773:4775   */\n  0x40\n    /* \"#utility.yul\":4764:4770   */\n  dup3\n    /* \"#utility.yul\":4753:4762   */\n  dup6\n    /* \"#utility.yul\":4749:4771   */\n  add\n    /* \"#utility.yul\":4745:4776   */\n  add\n    /* \"#utility.yul\":4738:4780   */\n  mstore\n    /* \"#utility.yul\":4848:4850   */\n  0x40\n    /* \"#utility.yul\":4841:4843   */\n  0x1f\n    /* \"#utility.yul\":4837:4844   */\n  not\n    /* \"#utility.yul\":4832:4834   */\n  0x1f\n    /* \"#utility.yul\":4824:4830   */\n  dup4\n    /* \"#utility.yul\":4820:4835   */\n  add\n    /* \"#utility.yul\":4816:4845   */\n  and\n    /* \"#utility.yul\":4805:4814   */\n  dup5\n    /* \"#utility.yul\":4801:4846   */\n  add\n    /* \"#utility.yul\":4797:4851   */\n  add\n    /* \"#utility.yul\":4789:4851   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":4439:4857   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4862:5159   */\ntag_37:\n    /* \"#utility.yul\":4980:4992   */\n  dup1\n  mload\n    /* \"#utility.yul\":5027:5031   */\n  0x20\n    /* \"#utility.yul\":5016:5032   */\n  dup1\n  dup4\n  add\n    /* \"#utility.yul\":5010:5033   */\n  mload\n  swap2\n    /* \"#utility.yul\":4980:4992   */\n  swap1\n    /* \"#utility.yul\":5045:5061   */\n  dup2\n  lt\n    /* \"#utility.yul\":5042:5153   */\n  iszero\n  tag_62\n  jumpi\n  not(0x00)\n    /* \"#utility.yul\":5119:5123   */\n  0x20\n    /* \"#utility.yul\":5115:5132   */\n  swap2\n  swap1\n  swap2\n  sub\n    /* \"#utility.yul\":5112:5113   */\n  0x03\n    /* \"#utility.yul\":5108:5133   */\n  shl\n    /* \"#utility.yul\":5104:5142   */\n  shl\n    /* \"#utility.yul\":5093:5143   */\n  and\n  swap2\n    /* \"#utility.yul\":4862:5159   */\n  swap1\n  pop\n  jump\t// out\ntag_45:\n    /* \"contracts/contracts/tokens/MockTokenCreator.sol\":381:1422  contract MockTokenCreator is ERC20, ERC20Permit {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x8e9b7bbc33b685619ed5689e557e91302ac2ee6645fe42592ecee8f114bb3e14\")\n  0x00\n  assignImmutable(\"0xbb918c587be468bd0c7a09b1610bfa1db8d5840ec578636482aa025af3056430\")\n  0x00\n  assignImmutable(\"0xcbf74af01cbe1015e9ac85ea14fe824611550c769e9107467f16a4ac714457df\")\n  0x00\n  assignImmutable(\"0xcab6b469e411f2f1a1a63b7a352484b6446ac4f04b2cdfa437beb9293c27ba98\")\n  0x00\n  assignImmutable(\"0x0cac94dd8fa8b46dcb473f6a9efd44c79437a341d155face60953ba7292fa128\")\n  0x00\n  assignImmutable(\"0x1ed118b890fb17bfde2171d286512a9ec35519f5671f36b3347d34c44d7a13d4\")\n  0x00\n  assignImmutable(\"0xff86023f246b2cd604439ec36dd08070fda9a84bfebf677a354fd041e3509e75\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":381:1422  contract MockTokenCreator is ERC20, ERC20Permit {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x42966c68\n      gt\n      tag_18\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      dup1\n      0x42966c68\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      0x23b872dd\n      gt\n      tag_20\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_21\n      tag_22\n      jump\t// in\n    tag_21:\n      mload(0x40)\n      tag_23\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_25\n      tag_26\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_26:\n      tag_28\n      jump\t// in\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1181:1195   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1174:1196   */\n      iszero\n        /* \"#utility.yul\":1156:1197   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1144:1146   */\n      0x20\n        /* \"#utility.yul\":1129:1147   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_23\n        /* \"#utility.yul\":1016:1203   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_31:\n      mload(0x40)\n        /* \"#utility.yul\":1354:1379   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      tag_23\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_25\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3075:3077  18 */\n      0x12\n        /* \"#utility.yul\":1911:1947   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1899:1901   */\n      0x20\n        /* \"#utility.yul\":1884:1902   */\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n      tag_23\n        /* \"#utility.yul\":1769:1953   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_31\n      tag_45\n      jump\t// in\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1050:1135  function mint(address to, uint256 amount) public {... */\n    tag_9:\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_49:\n      tag_50\n      jump\t// in\n    tag_48:\n      stop\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1336:1419  function burn(uint256 amount) public {... */\n    tag_10:\n      tag_48\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_11:\n      tag_31\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_12:\n      tag_31\n      tag_61\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_61:\n      tag_62\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_13:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      tag_23\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_67\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_14:\n      tag_21\n      tag_69\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_15:\n      tag_25\n      tag_72\n      calldatasize\n      0x04\n      tag_27\n      jump\t// in\n    tag_72:\n      tag_73\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_16:\n      tag_48\n      tag_76\n      calldatasize\n      0x04\n      tag_77\n      jump\t// in\n    tag_76:\n      tag_78\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_17:\n      tag_31\n      tag_80\n      calldatasize\n      0x04\n      tag_81\n      jump\t// in\n    tag_80:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_87\n      swap1\n      tag_86\n      jump\t// in\n    tag_87:\n      dup1\n      iszero\n      tag_88\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_89\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_88)\n    tag_89:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_90:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_90\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_88:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_28:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_94\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_95\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_94:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_91:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_38:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_99\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_100\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_101\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_102\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_101:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2715:2722  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      tag_105\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2759  _domainSeparatorV4 */\n      tag_106\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      jump\t// in\n    tag_105:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2734:2761  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1050:1135  function mint(address to, uint256 amount) public {... */\n    tag_50:\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1110:1127  _mint(to, amount) */\n      tag_108\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1116:1118  to */\n      dup3\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1120:1126  amount */\n      dup3\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1110:1115  _mint */\n      tag_109\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1110:1127  _mint(to, amount) */\n      jump\t// in\n    tag_108:\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1050:1135  function mint(address to, uint256 amount) public {... */\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1336:1419  function burn(uint256 amount) public {... */\n    tag_54:\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1384:1411  _burn(_msgSender(), amount) */\n      tag_111\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1404:1410  amount */\n      dup3\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1384:1389  _burn */\n      tag_113\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1384:1411  _burn(_msgSender(), amount) */\n      jump\t// in\n    tag_111:\n        /* \"contracts/contracts/tokens/MockTokenCreator.sol\":1336:1419  function burn(uint256 amount) public {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_62:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2497:2504  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2523:2542  super.nonces(owner) */\n      tag_91\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_65:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5242:5255  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5269:5287  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5301:5322  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5336:5351  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5365:5390  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5404:5416  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5430:5457  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      tag_119\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5544  _EIP712Name */\n      tag_120\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      tag_121\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5574  _EIP712Version */\n      tag_122\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      jump\t// in\n    tag_121:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      shl(0xf8, 0x0f)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap12\n      swap4\n      swap11\n      pop\n      swap2\n      swap9\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      chainid\n      swap8\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n      swap7\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      swap5\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_69:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_94\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_102\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1901:1909  deadline */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1898  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1909  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n      iszero\n      tag_137\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      shl(0xe1, 0x313c8981)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n    tag_138:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n    tag_137:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2004  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1022:1117  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2045:2050  owner */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2052:2059  spender */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2061:2066  value */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n      tag_139\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2078:2083  owner */\n      dup13\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      and\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":819:826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1137  _nonces[owner]++ */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n    tag_139:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":5782:5807   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":5843:5875   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":5823:5841   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":5816:5876   */\n      mstore\n        /* \"#utility.yul\":5912:5944   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5892:5910   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":5885:5945   */\n      mstore\n        /* \"#utility.yul\":5961:5979   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":5954:5988   */\n      mstore\n        /* \"#utility.yul\":6004:6023   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":5997:6032   */\n      mstore\n        /* \"#utility.yul\":6048:6067   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":6041:6076   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":5754:5773   */\n      0xe0\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2007:2096  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2096  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2119  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      tag_143\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2149  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2138  _hashTypedDataV4 */\n      tag_144\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_143:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2150  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2175  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      tag_145\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2192:2196  hash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2198:2199  v */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2201:2202  r */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2204:2205  s */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2191  ECDSA.recover */\n      tag_146\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_145:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2206  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2230:2235  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2226  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n      tag_147\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      shl(0xe1, 0x25c00723)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6279:6311   */\n      dup1\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":6261:6312   */\n      mstore\n        /* \"#utility.yul\":6348:6380   */\n      dup12\n      and\n        /* \"#utility.yul\":6328:6346   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6321:6381   */\n      mstore\n        /* \"#utility.yul\":6234:6252   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      tag_138\n        /* \"#utility.yul\":6087:6387   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      tag_150\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2323:2328  owner */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2330:2337  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2339:2344  value */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2322  _approve */\n      tag_95\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      jump\t// in\n    tag_150:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1869:2352  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_95:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_154\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_155\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_154:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_100:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_162\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_159\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6612:6644   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6594:6645   */\n      mstore\n        /* \"#utility.yul\":6661:6679   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6654:6688   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6704:6722   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6697:6731   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6567:6585   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_138\n        /* \"#utility.yul\":6392:6737   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_159:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_162\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_155\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_162:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_102:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_164\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_164:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_167:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_154\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_106:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3898:3905  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0x0cac94dd8fa8b46dcb473f6a9efd44c79437a341d155face60953ba7292fa128\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_172\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      immutable(\"0x1ed118b890fb17bfde2171d286512a9ec35519f5671f36b3347d34c44d7a13d4\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_172:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_173\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0xff86023f246b2cd604439ec36dd08070fda9a84bfebf677a354fd041e3509e75\")\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_173:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      tag_105\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":7436:7461   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0xcab6b469e411f2f1a1a63b7a352484b6446ac4f04b2cdfa437beb9293c27ba98\")\n        /* \"#utility.yul\":7477:7495   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":7470:7504   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0xcbf74af01cbe1015e9ac85ea14fe824611550c769e9107467f16a4ac714457df\")\n        /* \"#utility.yul\":7520:7538   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":7513:7547   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"#utility.yul\":7563:7581   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":7556:7590   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n      address\n        /* \"#utility.yul\":7606:7625   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":7599:7660   */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":7408:7427   */\n      0xc0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_178\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_178:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_108\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_113:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_182\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_182:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_108\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_170\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n    tag_120:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6067:6080  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_105\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0xbb918c587be468bd0c7a09b1610bfa1db8d5840ec578636482aa025af3056430\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6126:6139  _nameFallback */\n      0x05\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6125  _name.toStringWithFallback */\n      tag_188\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n    tag_122:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6522:6535  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_105\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0x8e9b7bbc33b685619ed5689e557e91302ac2ee6645fe42592ecee8f114bb3e14\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x06\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6583  _version.toStringWithFallback */\n      tag_188\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_144:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4994:5001  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_91\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_194\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5071  _domainSeparatorV4 */\n      tag_106\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      jump\t// in\n    tag_194:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5075:5085  structHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3555:3559  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3549:3560  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3573:3596  mstore(ptr, hex\"19_01\") */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3625:3629  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3616:3630  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3609:3648  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3677:3681  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3668:3682  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3661:3695  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3733:3737  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3718:3738  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_146:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6888:6895  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6908:6925  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6927:6945  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:6963  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      tag_197\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6978:6982  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6984:6985  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6987:6988  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6990:6991  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6977  tryRecover */\n      tag_198\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_197:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6907:6992  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      tag_199\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7014:7019  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7021:7029  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7013  _throwError */\n      tag_200\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      jump\t// in\n    tag_199:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7047:7056  recovered */\n      swap1\n      swap7\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_155:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_202\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_202:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_204\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6888:6939   */\n      mstore\n        /* \"#utility.yul\":6861:6879   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      tag_138\n        /* \"#utility.yul\":6742:6945   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_204:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_162\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_207\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n    tag_207:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_170:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_209\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_210\n      swap2\n      swap1\n      tag_211\n      jump\t// in\n    tag_210:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_212\n      swap1\n      pop\n      jump\n    tag_209:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_213\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6612:6644   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6594:6645   */\n      mstore\n        /* \"#utility.yul\":6661:6679   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6654:6688   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6704:6722   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6697:6731   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6567:6585   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_138\n        /* \"#utility.yul\":6392:6737   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_213:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_212:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_215\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_216)\n    tag_215:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_216:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_217\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n    tag_217:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_188:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3479:3492  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup4\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_222\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_223\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3586:3591  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3585  toString */\n      tag_224\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      jump\t// in\n    tag_223:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3570:3592  return toString(value) */\n      swap1\n      pop\n      jump(tag_91)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3630:3635  store */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3623:3635  return store */\n      dup1\n      sload\n      tag_226\n      swap1\n      tag_86\n      jump\t// in\n    tag_226:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_227\n      swap1\n      tag_86\n      jump\t// in\n    tag_227:\n      dup1\n      iszero\n      tag_228\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_229\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_228)\n    tag_229:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_230:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_230\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_228:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      jump(tag_91)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_198:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5266:5273  address */\n      0x00\n      dup1\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_233\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6333:6334  s */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      jump(tag_232)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_233:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6454  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":7898:7923   */\n      dup11\n      swap1\n      mstore\n        /* \"#utility.yul\":7971:7975   */\n      0xff\n        /* \"#utility.yul\":7959:7976   */\n      dup10\n      and\n        /* \"#utility.yul\":7939:7957   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":7932:7977   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":7993:8011   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":7986:8020   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":8036:8054   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":8029:8063   */\n      dup7\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":7870:7889   */\n      0xa0\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_237\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_237:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_238\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      0x00\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6551:6580  RecoverError.InvalidSignature */\n      0x01\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      dup3\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      jump(tag_232)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_238:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6622:6628  signer */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6630:6650  RecoverError.NoError */\n      0x00\n      swap2\n      pop\n      dup2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_232:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_200:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7291:7311  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7287  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_244\n      jumpi\n      tag_244\n      tag_242\n      jump\t// in\n    tag_244:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      tag_245\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n    tag_245:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7387:7416  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7383  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_250\n      jumpi\n      tag_250\n      tag_242\n      jump\t// in\n    tag_250:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n      tag_251\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7439:7462  ECDSAInvalidSignature() */\n      mload(0x40)\n      shl(0xe0, 0xf645eedf)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n    tag_251:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7492:7527  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7488  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_256\n      jumpi\n      tag_256\n      tag_242\n      jump\t// in\n    tag_256:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_257\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      shl(0xe0, 0xfce698f7)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      tag_138\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_257:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7626:7656  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7622  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_263\n      jumpi\n      tag_263\n      tag_242\n      jump\t// in\n    tag_263:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_108\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      shl(0xe2, 0x35e2f383)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      tag_138\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_224:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2137:2150  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2173  uint256 len */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      tag_267\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2187:2191  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2186  byteLength */\n      tag_268\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      jump\t// in\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2192  uint256 len = byteLength(sstr) */\n      swap2\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2280:2297  string memory str */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2435:2439  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2426:2440  add(str, 0x20) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2419:2447  mstore(add(str, 0x20), sstr) */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2555:2800  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_268:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2616:2623  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      dup2\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      iszero\n      tag_91\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:303   */\n    tag_274:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":177:183   */\n      dup1\n        /* \"#utility.yul\":170:174   */\n      0x20\n        /* \"#utility.yul\":163:168   */\n      dup5\n        /* \"#utility.yul\":159:175   */\n      add\n        /* \"#utility.yul\":152:156   */\n      0x20\n        /* \"#utility.yul\":147:150   */\n      dup7\n        /* \"#utility.yul\":143:157   */\n      add\n        /* \"#utility.yul\":137:184   */\n      mcopy\n        /* \"#utility.yul\":229:230   */\n      0x00\n        /* \"#utility.yul\":222:226   */\n      0x20\n        /* \"#utility.yul\":213:219   */\n      dup3\n        /* \"#utility.yul\":208:211   */\n      dup7\n        /* \"#utility.yul\":204:220   */\n      add\n        /* \"#utility.yul\":200:227   */\n      add\n        /* \"#utility.yul\":193:231   */\n      mstore\n        /* \"#utility.yul\":292:296   */\n      0x20\n        /* \"#utility.yul\":285:287   */\n      0x1f\n        /* \"#utility.yul\":281:288   */\n      not\n        /* \"#utility.yul\":276:278   */\n      0x1f\n        /* \"#utility.yul\":268:274   */\n      dup4\n        /* \"#utility.yul\":264:279   */\n      add\n        /* \"#utility.yul\":260:289   */\n      and\n        /* \"#utility.yul\":255:258   */\n      dup6\n        /* \"#utility.yul\":251:290   */\n      add\n        /* \"#utility.yul\":247:297   */\n      add\n        /* \"#utility.yul\":240:297   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:303   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":308:528   */\n    tag_24:\n        /* \"#utility.yul\":457:459   */\n      0x20\n        /* \"#utility.yul\":446:455   */\n      dup2\n        /* \"#utility.yul\":439:460   */\n      mstore\n        /* \"#utility.yul\":420:424   */\n      0x00\n        /* \"#utility.yul\":477:522   */\n      tag_279\n        /* \"#utility.yul\":518:520   */\n      0x20\n        /* \"#utility.yul\":507:516   */\n      dup4\n        /* \"#utility.yul\":503:521   */\n      add\n        /* \"#utility.yul\":495:501   */\n      dup5\n        /* \"#utility.yul\":477:522   */\n      tag_274\n      jump\t// in\n    tag_279:\n        /* \"#utility.yul\":469:522   */\n      swap4\n        /* \"#utility.yul\":308:528   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":533:706   */\n    tag_275:\n        /* \"#utility.yul\":601:621   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":650:681   */\n      dup2\n      and\n        /* \"#utility.yul\":640:682   */\n      dup2\n      eq\n        /* \"#utility.yul\":630:700   */\n      tag_281\n      jumpi\n        /* \"#utility.yul\":696:697   */\n      0x00\n        /* \"#utility.yul\":693:694   */\n      dup1\n        /* \"#utility.yul\":686:698   */\n      revert\n        /* \"#utility.yul\":630:700   */\n    tag_281:\n        /* \"#utility.yul\":533:706   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":711:1011   */\n    tag_27:\n        /* \"#utility.yul\":779:785   */\n      0x00\n        /* \"#utility.yul\":787:793   */\n      dup1\n        /* \"#utility.yul\":840:842   */\n      0x40\n        /* \"#utility.yul\":828:837   */\n      dup4\n        /* \"#utility.yul\":819:826   */\n      dup6\n        /* \"#utility.yul\":815:838   */\n      sub\n        /* \"#utility.yul\":811:843   */\n      slt\n        /* \"#utility.yul\":808:860   */\n      iszero\n      tag_283\n      jumpi\n        /* \"#utility.yul\":856:857   */\n      0x00\n        /* \"#utility.yul\":853:854   */\n      dup1\n        /* \"#utility.yul\":846:858   */\n      revert\n        /* \"#utility.yul\":808:860   */\n    tag_283:\n        /* \"#utility.yul\":879:908   */\n      tag_284\n        /* \"#utility.yul\":898:907   */\n      dup4\n        /* \"#utility.yul\":879:908   */\n      tag_275\n      jump\t// in\n    tag_284:\n        /* \"#utility.yul\":869:908   */\n      swap5\n        /* \"#utility.yul\":977:979   */\n      0x20\n        /* \"#utility.yul\":962:980   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":949:981   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":711:1011   */\n      jump\t// out\n        /* \"#utility.yul\":1390:1764   */\n    tag_37:\n        /* \"#utility.yul\":1467:1473   */\n      0x00\n        /* \"#utility.yul\":1475:1481   */\n      dup1\n        /* \"#utility.yul\":1483:1489   */\n      0x00\n        /* \"#utility.yul\":1536:1538   */\n      0x60\n        /* \"#utility.yul\":1524:1533   */\n      dup5\n        /* \"#utility.yul\":1515:1522   */\n      dup7\n        /* \"#utility.yul\":1511:1534   */\n      sub\n        /* \"#utility.yul\":1507:1539   */\n      slt\n        /* \"#utility.yul\":1504:1556   */\n      iszero\n      tag_288\n      jumpi\n        /* \"#utility.yul\":1552:1553   */\n      0x00\n        /* \"#utility.yul\":1549:1550   */\n      dup1\n        /* \"#utility.yul\":1542:1554   */\n      revert\n        /* \"#utility.yul\":1504:1556   */\n    tag_288:\n        /* \"#utility.yul\":1575:1604   */\n      tag_289\n        /* \"#utility.yul\":1594:1603   */\n      dup5\n        /* \"#utility.yul\":1575:1604   */\n      tag_275\n      jump\t// in\n    tag_289:\n        /* \"#utility.yul\":1565:1604   */\n      swap3\n      pop\n        /* \"#utility.yul\":1623:1661   */\n      tag_290\n        /* \"#utility.yul\":1657:1659   */\n      0x20\n        /* \"#utility.yul\":1646:1655   */\n      dup6\n        /* \"#utility.yul\":1642:1660   */\n      add\n        /* \"#utility.yul\":1623:1661   */\n      tag_275\n      jump\t// in\n    tag_290:\n        /* \"#utility.yul\":1390:1764   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1613:1661   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1730:1732   */\n      0x40\n        /* \"#utility.yul\":1715:1733   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1702:1734   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1390:1764   */\n      jump\t// out\n        /* \"#utility.yul\":2140:2366   */\n    tag_53:\n        /* \"#utility.yul\":2199:2205   */\n      0x00\n        /* \"#utility.yul\":2252:2254   */\n      0x20\n        /* \"#utility.yul\":2240:2249   */\n      dup3\n        /* \"#utility.yul\":2231:2238   */\n      dup5\n        /* \"#utility.yul\":2227:2250   */\n      sub\n        /* \"#utility.yul\":2223:2255   */\n      slt\n        /* \"#utility.yul\":2220:2272   */\n      iszero\n      tag_294\n      jumpi\n        /* \"#utility.yul\":2268:2269   */\n      0x00\n        /* \"#utility.yul\":2265:2266   */\n      dup1\n        /* \"#utility.yul\":2258:2270   */\n      revert\n        /* \"#utility.yul\":2220:2272   */\n    tag_294:\n      pop\n        /* \"#utility.yul\":2313:2336   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2140:2366   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2371:2557   */\n    tag_57:\n        /* \"#utility.yul\":2430:2436   */\n      0x00\n        /* \"#utility.yul\":2483:2485   */\n      0x20\n        /* \"#utility.yul\":2471:2480   */\n      dup3\n        /* \"#utility.yul\":2462:2469   */\n      dup5\n        /* \"#utility.yul\":2458:2481   */\n      sub\n        /* \"#utility.yul\":2454:2486   */\n      slt\n        /* \"#utility.yul\":2451:2503   */\n      iszero\n      tag_296\n      jumpi\n        /* \"#utility.yul\":2499:2500   */\n      0x00\n        /* \"#utility.yul\":2496:2497   */\n      dup1\n        /* \"#utility.yul\":2489:2501   */\n      revert\n        /* \"#utility.yul\":2451:2503   */\n    tag_296:\n        /* \"#utility.yul\":2522:2551   */\n      tag_279\n        /* \"#utility.yul\":2541:2550   */\n      dup3\n        /* \"#utility.yul\":2522:2551   */\n      tag_275\n      jump\t// in\n        /* \"#utility.yul\":2562:3800   */\n    tag_67:\n        /* \"#utility.yul\":2968:2971   */\n      0xff\n        /* \"#utility.yul\":2963:2966   */\n      0xf8\n        /* \"#utility.yul\":2959:2972   */\n      shl\n        /* \"#utility.yul\":2951:2957   */\n      dup9\n        /* \"#utility.yul\":2947:2973   */\n      and\n        /* \"#utility.yul\":2936:2945   */\n      dup2\n        /* \"#utility.yul\":2929:2974   */\n      mstore\n        /* \"#utility.yul\":3010:3013   */\n      0xe0\n        /* \"#utility.yul\":3005:3007   */\n      0x20\n        /* \"#utility.yul\":2994:3003   */\n      dup3\n        /* \"#utility.yul\":2990:3008   */\n      add\n        /* \"#utility.yul\":2983:3014   */\n      mstore\n        /* \"#utility.yul\":2910:2914   */\n      0x00\n        /* \"#utility.yul\":3037:3083   */\n      tag_299\n        /* \"#utility.yul\":3078:3081   */\n      0xe0\n        /* \"#utility.yul\":3067:3076   */\n      dup4\n        /* \"#utility.yul\":3063:3082   */\n      add\n        /* \"#utility.yul\":3055:3061   */\n      dup10\n        /* \"#utility.yul\":3037:3083   */\n      tag_274\n      jump\t// in\n    tag_299:\n        /* \"#utility.yul\":3131:3140   */\n      dup3\n        /* \"#utility.yul\":3123:3129   */\n      dup2\n        /* \"#utility.yul\":3119:3141   */\n      sub\n        /* \"#utility.yul\":3114:3116   */\n      0x40\n        /* \"#utility.yul\":3103:3112   */\n      dup5\n        /* \"#utility.yul\":3099:3117   */\n      add\n        /* \"#utility.yul\":3092:3142   */\n      mstore\n        /* \"#utility.yul\":3165:3198   */\n      tag_300\n        /* \"#utility.yul\":3191:3197   */\n      dup2\n        /* \"#utility.yul\":3183:3189   */\n      dup10\n        /* \"#utility.yul\":3165:3198   */\n      tag_274\n      jump\t// in\n    tag_300:\n        /* \"#utility.yul\":3229:3231   */\n      0x60\n        /* \"#utility.yul\":3214:3232   */\n      dup5\n      add\n        /* \"#utility.yul\":3207:3241   */\n      dup9\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3278:3310   */\n      dup8\n      and\n        /* \"#utility.yul\":3272:3275   */\n      0x80\n        /* \"#utility.yul\":3257:3276   */\n      dup6\n      add\n        /* \"#utility.yul\":3250:3311   */\n      mstore\n        /* \"#utility.yul\":3298:3301   */\n      0xa0\n        /* \"#utility.yul\":3327:3346   */\n      dup5\n      add\n        /* \"#utility.yul\":3320:3355   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":3392:3414   */\n      dup4\n      dup2\n      sub\n        /* \"#utility.yul\":3386:3389   */\n      0xc0\n        /* \"#utility.yul\":3371:3390   */\n      dup6\n      add\n        /* \"#utility.yul\":3364:3415   */\n      mstore\n        /* \"#utility.yul\":3464:3477   */\n      dup5\n      mload\n        /* \"#utility.yul\":3486:3508   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3536:3538   */\n      0x20\n        /* \"#utility.yul\":3562:3577   */\n      dup1\n      dup8\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":3524:3539   */\n      swap1\n      swap2\n      add\n      swap1\n      0x00\n        /* \"#utility.yul\":3605:3774   */\n    tag_301:\n        /* \"#utility.yul\":3619:3625   */\n      dup2\n        /* \"#utility.yul\":3616:3617   */\n      dup2\n        /* \"#utility.yul\":3613:3626   */\n      lt\n        /* \"#utility.yul\":3605:3774   */\n      iszero\n      tag_303\n      jumpi\n        /* \"#utility.yul\":3680:3693   */\n      dup4\n      mload\n        /* \"#utility.yul\":3668:3694   */\n      dup4\n      mstore\n        /* \"#utility.yul\":3723:3725   */\n      0x20\n        /* \"#utility.yul\":3749:3764   */\n      swap4\n      dup5\n      add\n      swap4\n        /* \"#utility.yul\":3714:3726   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":3641:3642   */\n      0x01\n        /* \"#utility.yul\":3634:3643   */\n      add\n        /* \"#utility.yul\":3605:3774   */\n      jump(tag_301)\n    tag_303:\n      pop\n        /* \"#utility.yul\":3791:3794   */\n      swap1\n      swap12\n        /* \"#utility.yul\":2562:3800   */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3805:4708   */\n    tag_77:\n        /* \"#utility.yul\":3916:3922   */\n      0x00\n        /* \"#utility.yul\":3924:3930   */\n      dup1\n        /* \"#utility.yul\":3932:3938   */\n      0x00\n        /* \"#utility.yul\":3940:3946   */\n      dup1\n        /* \"#utility.yul\":3948:3954   */\n      0x00\n        /* \"#utility.yul\":3956:3962   */\n      dup1\n        /* \"#utility.yul\":3964:3970   */\n      0x00\n        /* \"#utility.yul\":4017:4020   */\n      0xe0\n        /* \"#utility.yul\":4005:4014   */\n      dup9\n        /* \"#utility.yul\":3996:4003   */\n      dup11\n        /* \"#utility.yul\":3992:4015   */\n      sub\n        /* \"#utility.yul\":3988:4021   */\n      slt\n        /* \"#utility.yul\":3985:4038   */\n      iszero\n      tag_305\n      jumpi\n        /* \"#utility.yul\":4034:4035   */\n      0x00\n        /* \"#utility.yul\":4031:4032   */\n      dup1\n        /* \"#utility.yul\":4024:4036   */\n      revert\n        /* \"#utility.yul\":3985:4038   */\n    tag_305:\n        /* \"#utility.yul\":4057:4086   */\n      tag_306\n        /* \"#utility.yul\":4076:4085   */\n      dup9\n        /* \"#utility.yul\":4057:4086   */\n      tag_275\n      jump\t// in\n    tag_306:\n        /* \"#utility.yul\":4047:4086   */\n      swap7\n      pop\n        /* \"#utility.yul\":4105:4143   */\n      tag_307\n        /* \"#utility.yul\":4139:4141   */\n      0x20\n        /* \"#utility.yul\":4128:4137   */\n      dup10\n        /* \"#utility.yul\":4124:4142   */\n      add\n        /* \"#utility.yul\":4105:4143   */\n      tag_275\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":4095:4143   */\n      swap6\n      pop\n        /* \"#utility.yul\":4212:4214   */\n      0x40\n        /* \"#utility.yul\":4197:4215   */\n      dup9\n      add\n        /* \"#utility.yul\":4184:4216   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4313:4315   */\n      0x60\n        /* \"#utility.yul\":4298:4316   */\n      dup9\n      add\n        /* \"#utility.yul\":4285:4317   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":4395:4398   */\n      0x80\n        /* \"#utility.yul\":4380:4399   */\n      dup9\n      add\n        /* \"#utility.yul\":4367:4400   */\n      calldataload\n        /* \"#utility.yul\":4444:4448   */\n      0xff\n        /* \"#utility.yul\":4431:4449   */\n      dup2\n      and\n        /* \"#utility.yul\":4419:4450   */\n      dup2\n      eq\n        /* \"#utility.yul\":4409:4468   */\n      tag_308\n      jumpi\n        /* \"#utility.yul\":4464:4465   */\n      0x00\n        /* \"#utility.yul\":4461:4462   */\n      dup1\n        /* \"#utility.yul\":4454:4466   */\n      revert\n        /* \"#utility.yul\":4409:4468   */\n    tag_308:\n        /* \"#utility.yul\":3805:4708   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":4487:4494   */\n      swap5\n        /* \"#utility.yul\":4567:4570   */\n      0xa0\n        /* \"#utility.yul\":4552:4571   */\n      dup5\n      add\n        /* \"#utility.yul\":4539:4572   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4671:4674   */\n      0xc0\n        /* \"#utility.yul\":4656:4675   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":4643:4676   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":3805:4708   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4713:4973   */\n    tag_81:\n        /* \"#utility.yul\":4781:4787   */\n      0x00\n        /* \"#utility.yul\":4789:4795   */\n      dup1\n        /* \"#utility.yul\":4842:4844   */\n      0x40\n        /* \"#utility.yul\":4830:4839   */\n      dup4\n        /* \"#utility.yul\":4821:4828   */\n      dup6\n        /* \"#utility.yul\":4817:4840   */\n      sub\n        /* \"#utility.yul\":4813:4845   */\n      slt\n        /* \"#utility.yul\":4810:4862   */\n      iszero\n      tag_310\n      jumpi\n        /* \"#utility.yul\":4858:4859   */\n      0x00\n        /* \"#utility.yul\":4855:4856   */\n      dup1\n        /* \"#utility.yul\":4848:4860   */\n      revert\n        /* \"#utility.yul\":4810:4862   */\n    tag_310:\n        /* \"#utility.yul\":4881:4910   */\n      tag_311\n        /* \"#utility.yul\":4900:4909   */\n      dup4\n        /* \"#utility.yul\":4881:4910   */\n      tag_275\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":4871:4910   */\n      swap2\n      pop\n        /* \"#utility.yul\":4929:4967   */\n      tag_312\n        /* \"#utility.yul\":4963:4965   */\n      0x20\n        /* \"#utility.yul\":4952:4961   */\n      dup5\n        /* \"#utility.yul\":4948:4966   */\n      add\n        /* \"#utility.yul\":4929:4967   */\n      tag_275\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":4919:4967   */\n      swap1\n      pop\n        /* \"#utility.yul\":4713:4973   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4978:5358   */\n    tag_86:\n        /* \"#utility.yul\":5057:5058   */\n      0x01\n        /* \"#utility.yul\":5053:5065   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5100:5112   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5121:5182   */\n      tag_314\n      jumpi\n        /* \"#utility.yul\":5175:5179   */\n      0x7f\n        /* \"#utility.yul\":5167:5173   */\n      dup3\n        /* \"#utility.yul\":5163:5180   */\n      and\n        /* \"#utility.yul\":5153:5180   */\n      swap2\n      pop\n        /* \"#utility.yul\":5121:5182   */\n    tag_314:\n        /* \"#utility.yul\":5228:5230   */\n      0x20\n        /* \"#utility.yul\":5220:5226   */\n      dup3\n        /* \"#utility.yul\":5217:5231   */\n      lt\n        /* \"#utility.yul\":5197:5215   */\n      dup2\n        /* \"#utility.yul\":5194:5232   */\n      sub\n        /* \"#utility.yul\":5191:5352   */\n      tag_315\n      jumpi\n        /* \"#utility.yul\":5274:5284   */\n      0x4e487b71\n        /* \"#utility.yul\":5269:5272   */\n      0xe0\n        /* \"#utility.yul\":5265:5285   */\n      shl\n        /* \"#utility.yul\":5262:5263   */\n      0x00\n        /* \"#utility.yul\":5255:5286   */\n      mstore\n        /* \"#utility.yul\":5309:5313   */\n      0x22\n        /* \"#utility.yul\":5306:5307   */\n      0x04\n        /* \"#utility.yul\":5299:5314   */\n      mstore\n        /* \"#utility.yul\":5337:5341   */\n      0x24\n        /* \"#utility.yul\":5334:5335   */\n      0x00\n        /* \"#utility.yul\":5327:5342   */\n      revert\n        /* \"#utility.yul\":5191:5352   */\n    tag_315:\n      pop\n        /* \"#utility.yul\":4978:5358   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6950:7172   */\n    tag_211:\n        /* \"#utility.yul\":7015:7024   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7036:7046   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":7033:7166   */\n      iszero\n      tag_91\n      jumpi\n        /* \"#utility.yul\":7088:7098   */\n      0x4e487b71\n        /* \"#utility.yul\":7083:7086   */\n      0xe0\n        /* \"#utility.yul\":7079:7099   */\n      shl\n        /* \"#utility.yul\":7076:7077   */\n      0x00\n        /* \"#utility.yul\":7069:7100   */\n      mstore\n        /* \"#utility.yul\":7123:7127   */\n      0x11\n        /* \"#utility.yul\":7120:7121   */\n      0x04\n        /* \"#utility.yul\":7113:7128   */\n      mstore\n        /* \"#utility.yul\":7151:7155   */\n      0x24\n        /* \"#utility.yul\":7148:7149   */\n      0x00\n        /* \"#utility.yul\":7141:7156   */\n      revert\n        /* \"#utility.yul\":8074:8201   */\n    tag_242:\n        /* \"#utility.yul\":8135:8145   */\n      0x4e487b71\n        /* \"#utility.yul\":8130:8133   */\n      0xe0\n        /* \"#utility.yul\":8126:8146   */\n      shl\n        /* \"#utility.yul\":8123:8124   */\n      0x00\n        /* \"#utility.yul\":8116:8147   */\n      mstore\n        /* \"#utility.yul\":8166:8170   */\n      0x21\n        /* \"#utility.yul\":8163:8164   */\n      0x04\n        /* \"#utility.yul\":8156:8171   */\n      mstore\n        /* \"#utility.yul\":8190:8194   */\n      0x24\n        /* \"#utility.yul\":8187:8188   */\n      0x00\n        /* \"#utility.yul\":8180:8195   */\n      revert\n\n    auxdata: 0xa2646970667358221220af2c63efd3785c13b7337bdf1b9b3ae13750f3b4e38814f2701ad3c42bc6cd2064736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2243": {
									"entryPoint": null,
									"id": 2243,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_361": {
									"entryPoint": null,
									"id": 361,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3722": {
									"entryPoint": null,
									"id": 3722,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_951": {
									"entryPoint": null,
									"id": 951,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2290": {
									"entryPoint": null,
									"id": 2290,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getStringSlot_1520": {
									"entryPoint": null,
									"id": 1520,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1374": {
									"entryPoint": 291,
									"id": 1374,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1276": {
									"entryPoint": 341,
									"id": 1276,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 431,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
									"entryPoint": 568,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 987,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 725,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 1040,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 801,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 669,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 411,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:5161:20",
										"nodeType": "YulBlock",
										"src": "0:5161:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "46:95:20",
													"nodeType": "YulBlock",
													"src": "46:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "63:1:20",
																		"nodeType": "YulLiteral",
																		"src": "63:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "70:3:20",
																				"nodeType": "YulLiteral",
																				"src": "70:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "75:10:20",
																				"nodeType": "YulLiteral",
																				"src": "75:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "66:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:20"
																		},
																		"nativeSrc": "66:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "56:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:20"
																},
																"nativeSrc": "56:31:20",
																"nodeType": "YulFunctionCall",
																"src": "56:31:20"
															},
															"nativeSrc": "56:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "56:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "103:1:20",
																		"nodeType": "YulLiteral",
																		"src": "103:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "106:4:20",
																		"nodeType": "YulLiteral",
																		"src": "106:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "96:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:20"
																},
																"nativeSrc": "96:15:20",
																"nodeType": "YulFunctionCall",
																"src": "96:15:20"
															},
															"nativeSrc": "96:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "96:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "127:1:20",
																		"nodeType": "YulLiteral",
																		"src": "127:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "130:4:20",
																		"nodeType": "YulLiteral",
																		"src": "130:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "120:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:20"
																},
																"nativeSrc": "120:15:20",
																"nodeType": "YulFunctionCall",
																"src": "120:15:20"
															},
															"nativeSrc": "120:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "120:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "14:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:20"
											},
											{
												"body": {
													"nativeSrc": "210:659:20",
													"nodeType": "YulBlock",
													"src": "210:659:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "259:16:20",
																"nodeType": "YulBlock",
																"src": "259:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "268:1:20",
																					"nodeType": "YulLiteral",
																					"src": "268:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "271:1:20",
																					"nodeType": "YulLiteral",
																					"src": "271:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "261:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:20"
																			},
																			"nativeSrc": "261:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:20"
																		},
																		"nativeSrc": "261:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "238:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "246:4:20",
																						"nodeType": "YulLiteral",
																						"src": "246:4:20",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "234:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:20"
																				},
																				"nativeSrc": "234:17:20",
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:20"
																			},
																			{
																				"name": "end",
																				"nativeSrc": "253:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:20"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nativeSrc": "230:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:20"
																		},
																		"nativeSrc": "230:27:20",
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "223:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:20"
																},
																"nativeSrc": "223:35:20",
																"nodeType": "YulFunctionCall",
																"src": "223:35:20"
															},
															"nativeSrc": "220:55:20",
															"nodeType": "YulIf",
															"src": "220:55:20"
														},
														{
															"nativeSrc": "284:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "284:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "304:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "304:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "298:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "298:5:20"
																},
																"nativeSrc": "298:13:20",
																"nodeType": "YulFunctionCall",
																"src": "298:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "288:6:20",
																	"nodeType": "YulTypedName",
																	"src": "288:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "354:22:20",
																"nodeType": "YulBlock",
																"src": "354:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "356:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "356:16:20"
																			},
																			"nativeSrc": "356:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "356:18:20"
																		},
																		"nativeSrc": "356:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "356:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "326:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "326:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "342:2:20",
																						"nodeType": "YulLiteral",
																						"src": "342:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "346:1:20",
																						"nodeType": "YulLiteral",
																						"src": "346:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "338:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "338:3:20"
																				},
																				"nativeSrc": "338:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "338:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "350:1:20",
																				"nodeType": "YulLiteral",
																				"src": "350:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "334:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "334:3:20"
																		},
																		"nativeSrc": "334:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "334:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "323:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "323:2:20"
																},
																"nativeSrc": "323:30:20",
																"nodeType": "YulFunctionCall",
																"src": "323:30:20"
															},
															"nativeSrc": "320:56:20",
															"nodeType": "YulIf",
															"src": "320:56:20"
														},
														{
															"nativeSrc": "385:23:20",
															"nodeType": "YulVariableDeclaration",
															"src": "385:23:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "405:2:20",
																		"nodeType": "YulLiteral",
																		"src": "405:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "399:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "399:5:20"
																},
																"nativeSrc": "399:9:20",
																"nodeType": "YulFunctionCall",
																"src": "399:9:20"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nativeSrc": "389:6:20",
																	"nodeType": "YulTypedName",
																	"src": "389:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "417:85:20",
															"nodeType": "YulVariableDeclaration",
															"src": "417:85:20",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "439:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "439:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "length",
																										"nativeSrc": "463:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "463:6:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "471:4:20",
																										"nodeType": "YulLiteral",
																										"src": "471:4:20",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "459:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "459:3:20"
																								},
																								"nativeSrc": "459:17:20",
																								"nodeType": "YulFunctionCall",
																								"src": "459:17:20"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "482:2:20",
																										"nodeType": "YulLiteral",
																										"src": "482:2:20",
																										"type": "",
																										"value": "31"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "478:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "478:3:20"
																								},
																								"nativeSrc": "478:7:20",
																								"nodeType": "YulFunctionCall",
																								"src": "478:7:20"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nativeSrc": "455:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "455:3:20"
																						},
																						"nativeSrc": "455:31:20",
																						"nodeType": "YulFunctionCall",
																						"src": "455:31:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "488:2:20",
																						"nodeType": "YulLiteral",
																						"src": "488:2:20",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "451:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "451:3:20"
																				},
																				"nativeSrc": "451:40:20",
																				"nodeType": "YulFunctionCall",
																				"src": "451:40:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "497:2:20",
																						"nodeType": "YulLiteral",
																						"src": "497:2:20",
																						"type": "",
																						"value": "31"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "493:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "493:3:20"
																				},
																				"nativeSrc": "493:7:20",
																				"nodeType": "YulFunctionCall",
																				"src": "493:7:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "447:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "447:3:20"
																		},
																		"nativeSrc": "447:54:20",
																		"nodeType": "YulFunctionCall",
																		"src": "447:54:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "435:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "435:3:20"
																},
																"nativeSrc": "435:67:20",
																"nodeType": "YulFunctionCall",
																"src": "435:67:20"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nativeSrc": "421:10:20",
																	"nodeType": "YulTypedName",
																	"src": "421:10:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "577:22:20",
																"nodeType": "YulBlock",
																"src": "577:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "579:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "579:16:20"
																			},
																			"nativeSrc": "579:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "579:18:20"
																		},
																		"nativeSrc": "579:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "579:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "520:10:20",
																				"nodeType": "YulIdentifier",
																				"src": "520:10:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "540:2:20",
																								"nodeType": "YulLiteral",
																								"src": "540:2:20",
																								"type": "",
																								"value": "64"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "544:1:20",
																								"nodeType": "YulLiteral",
																								"src": "544:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "536:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "536:3:20"
																						},
																						"nativeSrc": "536:10:20",
																						"nodeType": "YulFunctionCall",
																						"src": "536:10:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "548:1:20",
																						"nodeType": "YulLiteral",
																						"src": "548:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "532:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "532:3:20"
																				},
																				"nativeSrc": "532:18:20",
																				"nodeType": "YulFunctionCall",
																				"src": "532:18:20"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nativeSrc": "517:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "517:2:20"
																		},
																		"nativeSrc": "517:34:20",
																		"nodeType": "YulFunctionCall",
																		"src": "517:34:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nativeSrc": "556:10:20",
																				"nodeType": "YulIdentifier",
																				"src": "556:10:20"
																			},
																			{
																				"name": "memPtr",
																				"nativeSrc": "568:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "568:6:20"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "553:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "553:2:20"
																		},
																		"nativeSrc": "553:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "553:22:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "514:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "514:2:20"
																},
																"nativeSrc": "514:62:20",
																"nodeType": "YulFunctionCall",
																"src": "514:62:20"
															},
															"nativeSrc": "511:88:20",
															"nodeType": "YulIf",
															"src": "511:88:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "615:2:20",
																		"nodeType": "YulLiteral",
																		"src": "615:2:20",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nativeSrc": "619:10:20",
																		"nodeType": "YulIdentifier",
																		"src": "619:10:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "608:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "608:6:20"
																},
																"nativeSrc": "608:22:20",
																"nodeType": "YulFunctionCall",
																"src": "608:22:20"
															},
															"nativeSrc": "608:22:20",
															"nodeType": "YulExpressionStatement",
															"src": "608:22:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nativeSrc": "646:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "646:6:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "654:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "654:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "639:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "639:6:20"
																},
																"nativeSrc": "639:22:20",
																"nodeType": "YulFunctionCall",
																"src": "639:22:20"
															},
															"nativeSrc": "639:22:20",
															"nodeType": "YulExpressionStatement",
															"src": "639:22:20"
														},
														{
															"body": {
																"nativeSrc": "713:16:20",
																"nodeType": "YulBlock",
																"src": "713:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "722:1:20",
																					"nodeType": "YulLiteral",
																					"src": "722:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "725:1:20",
																					"nodeType": "YulLiteral",
																					"src": "725:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "715:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "715:6:20"
																			},
																			"nativeSrc": "715:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "715:12:20"
																		},
																		"nativeSrc": "715:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "715:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nativeSrc": "684:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "684:6:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "692:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "692:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "680:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "680:3:20"
																				},
																				"nativeSrc": "680:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "680:19:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "701:4:20",
																				"nodeType": "YulLiteral",
																				"src": "701:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "676:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "676:3:20"
																		},
																		"nativeSrc": "676:30:20",
																		"nodeType": "YulFunctionCall",
																		"src": "676:30:20"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "708:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "708:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "673:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "673:2:20"
																},
																"nativeSrc": "673:39:20",
																"nodeType": "YulFunctionCall",
																"src": "673:39:20"
															},
															"nativeSrc": "670:59:20",
															"nodeType": "YulIf",
															"src": "670:59:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nativeSrc": "748:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "748:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "756:4:20",
																				"nodeType": "YulLiteral",
																				"src": "756:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "744:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "744:3:20"
																		},
																		"nativeSrc": "744:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "744:17:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "offset",
																				"nativeSrc": "767:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "767:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "775:4:20",
																				"nodeType": "YulLiteral",
																				"src": "775:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "763:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "763:3:20"
																		},
																		"nativeSrc": "763:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "763:17:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "782:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "782:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "738:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "738:5:20"
																},
																"nativeSrc": "738:51:20",
																"nodeType": "YulFunctionCall",
																"src": "738:51:20"
															},
															"nativeSrc": "738:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "738:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nativeSrc": "813:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "813:6:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "821:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "821:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "809:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "809:3:20"
																				},
																				"nativeSrc": "809:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "809:19:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "830:4:20",
																				"nodeType": "YulLiteral",
																				"src": "830:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "805:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "805:3:20"
																		},
																		"nativeSrc": "805:30:20",
																		"nodeType": "YulFunctionCall",
																		"src": "805:30:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "837:1:20",
																		"nodeType": "YulLiteral",
																		"src": "837:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "798:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "798:6:20"
																},
																"nativeSrc": "798:41:20",
																"nodeType": "YulFunctionCall",
																"src": "798:41:20"
															},
															"nativeSrc": "798:41:20",
															"nodeType": "YulExpressionStatement",
															"src": "798:41:20"
														},
														{
															"nativeSrc": "848:15:20",
															"nodeType": "YulAssignment",
															"src": "848:15:20",
															"value": {
																"name": "memPtr",
																"nativeSrc": "857:6:20",
																"nodeType": "YulIdentifier",
																"src": "857:6:20"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nativeSrc": "848:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "848:5:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nativeSrc": "146:723:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "184:6:20",
														"nodeType": "YulTypedName",
														"src": "184:6:20",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "192:3:20",
														"nodeType": "YulTypedName",
														"src": "192:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nativeSrc": "200:5:20",
														"nodeType": "YulTypedName",
														"src": "200:5:20",
														"type": ""
													}
												],
												"src": "146:723:20"
											},
											{
												"body": {
													"nativeSrc": "992:439:20",
													"nodeType": "YulBlock",
													"src": "992:439:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1038:16:20",
																"nodeType": "YulBlock",
																"src": "1038:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1047:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1047:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1050:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1050:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1040:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1040:6:20"
																			},
																			"nativeSrc": "1040:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1040:12:20"
																		},
																		"nativeSrc": "1040:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1040:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1013:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "1013:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1022:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1022:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1009:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1009:3:20"
																		},
																		"nativeSrc": "1009:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1009:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1034:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1034:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1005:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1005:3:20"
																},
																"nativeSrc": "1005:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1005:32:20"
															},
															"nativeSrc": "1002:52:20",
															"nodeType": "YulIf",
															"src": "1002:52:20"
														},
														{
															"nativeSrc": "1063:30:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1063:30:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1083:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1083:9:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1077:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1077:5:20"
																},
																"nativeSrc": "1077:16:20",
																"nodeType": "YulFunctionCall",
																"src": "1077:16:20"
															},
															"variables": [
																{
																	"name": "offset",
																	"nativeSrc": "1067:6:20",
																	"nodeType": "YulTypedName",
																	"src": "1067:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1136:16:20",
																"nodeType": "YulBlock",
																"src": "1136:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1145:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1145:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1148:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1148:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1138:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1138:6:20"
																			},
																			"nativeSrc": "1138:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1138:12:20"
																		},
																		"nativeSrc": "1138:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1138:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "1108:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1108:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1124:2:20",
																						"nodeType": "YulLiteral",
																						"src": "1124:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1128:1:20",
																						"nodeType": "YulLiteral",
																						"src": "1128:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1120:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1120:3:20"
																				},
																				"nativeSrc": "1120:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1120:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1132:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1132:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1116:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1116:3:20"
																		},
																		"nativeSrc": "1116:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1116:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1105:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1105:2:20"
																},
																"nativeSrc": "1105:30:20",
																"nodeType": "YulFunctionCall",
																"src": "1105:30:20"
															},
															"nativeSrc": "1102:50:20",
															"nodeType": "YulIf",
															"src": "1102:50:20"
														},
														{
															"nativeSrc": "1161:71:20",
															"nodeType": "YulAssignment",
															"src": "1161:71:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1204:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1204:9:20"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "1215:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1215:6:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1200:3:20"
																		},
																		"nativeSrc": "1200:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1200:22:20"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1224:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "1224:7:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nativeSrc": "1171:28:20",
																	"nodeType": "YulIdentifier",
																	"src": "1171:28:20"
																},
																"nativeSrc": "1171:61:20",
																"nodeType": "YulFunctionCall",
																"src": "1171:61:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1161:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1161:6:20"
																}
															]
														},
														{
															"nativeSrc": "1241:41:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1241:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1267:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1267:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1278:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1278:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1263:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1263:3:20"
																		},
																		"nativeSrc": "1263:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1263:18:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1257:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1257:5:20"
																},
																"nativeSrc": "1257:25:20",
																"nodeType": "YulFunctionCall",
																"src": "1257:25:20"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nativeSrc": "1245:8:20",
																	"nodeType": "YulTypedName",
																	"src": "1245:8:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1327:16:20",
																"nodeType": "YulBlock",
																"src": "1327:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1336:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1336:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1339:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1339:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1329:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1329:6:20"
																			},
																			"nativeSrc": "1329:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1329:12:20"
																		},
																		"nativeSrc": "1329:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1329:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nativeSrc": "1297:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "1297:8:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1315:2:20",
																						"nodeType": "YulLiteral",
																						"src": "1315:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1319:1:20",
																						"nodeType": "YulLiteral",
																						"src": "1319:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1311:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1311:3:20"
																				},
																				"nativeSrc": "1311:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1311:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1323:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1323:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1307:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1307:3:20"
																		},
																		"nativeSrc": "1307:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1307:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1294:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1294:2:20"
																},
																"nativeSrc": "1294:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1294:32:20"
															},
															"nativeSrc": "1291:52:20",
															"nodeType": "YulIf",
															"src": "1291:52:20"
														},
														{
															"nativeSrc": "1352:73:20",
															"nodeType": "YulAssignment",
															"src": "1352:73:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1395:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1395:9:20"
																			},
																			{
																				"name": "offset_1",
																				"nativeSrc": "1406:8:20",
																				"nodeType": "YulIdentifier",
																				"src": "1406:8:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1391:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1391:3:20"
																		},
																		"nativeSrc": "1391:24:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1391:24:20"
																	},
																	{
																		"name": "dataEnd",
																		"nativeSrc": "1417:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "1417:7:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nativeSrc": "1362:28:20",
																	"nodeType": "YulIdentifier",
																	"src": "1362:28:20"
																},
																"nativeSrc": "1362:63:20",
																"nodeType": "YulFunctionCall",
																"src": "1362:63:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1352:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1352:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nativeSrc": "874:557:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "950:9:20",
														"nodeType": "YulTypedName",
														"src": "950:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "961:7:20",
														"nodeType": "YulTypedName",
														"src": "961:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "973:6:20",
														"nodeType": "YulTypedName",
														"src": "973:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "981:6:20",
														"nodeType": "YulTypedName",
														"src": "981:6:20",
														"type": ""
													}
												],
												"src": "874:557:20"
											},
											{
												"body": {
													"nativeSrc": "1491:325:20",
													"nodeType": "YulBlock",
													"src": "1491:325:20",
													"statements": [
														{
															"nativeSrc": "1501:22:20",
															"nodeType": "YulAssignment",
															"src": "1501:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1515:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1515:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "1518:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "1518:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "1511:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1511:3:20"
																},
																"nativeSrc": "1511:12:20",
																"nodeType": "YulFunctionCall",
																"src": "1511:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1501:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1501:6:20"
																}
															]
														},
														{
															"nativeSrc": "1532:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1532:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1562:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "1562:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1568:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1568:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1558:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1558:3:20"
																},
																"nativeSrc": "1558:12:20",
																"nodeType": "YulFunctionCall",
																"src": "1558:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "1536:18:20",
																	"nodeType": "YulTypedName",
																	"src": "1536:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1609:31:20",
																"nodeType": "YulBlock",
																"src": "1609:31:20",
																"statements": [
																	{
																		"nativeSrc": "1611:27:20",
																		"nodeType": "YulAssignment",
																		"src": "1611:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "1625:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "1625:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1633:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1633:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "1621:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1621:3:20"
																			},
																			"nativeSrc": "1621:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1621:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "1611:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1611:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1589:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "1589:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1582:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1582:6:20"
																},
																"nativeSrc": "1582:26:20",
																"nodeType": "YulFunctionCall",
																"src": "1582:26:20"
															},
															"nativeSrc": "1579:61:20",
															"nodeType": "YulIf",
															"src": "1579:61:20"
														},
														{
															"body": {
																"nativeSrc": "1699:111:20",
																"nodeType": "YulBlock",
																"src": "1699:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1720:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1720:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1727:3:20",
																							"nodeType": "YulLiteral",
																							"src": "1727:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "1732:10:20",
																							"nodeType": "YulLiteral",
																							"src": "1732:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "1723:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "1723:3:20"
																					},
																					"nativeSrc": "1723:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1723:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "1713:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1713:6:20"
																			},
																			"nativeSrc": "1713:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1713:31:20"
																		},
																		"nativeSrc": "1713:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1713:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1764:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1764:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1767:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1767:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "1757:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1757:6:20"
																			},
																			"nativeSrc": "1757:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1757:15:20"
																		},
																		"nativeSrc": "1757:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1757:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1792:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1792:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1795:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1795:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1785:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1785:6:20"
																			},
																			"nativeSrc": "1785:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1785:15:20"
																		},
																		"nativeSrc": "1785:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1785:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1655:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "1655:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1678:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1678:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1686:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1686:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1675:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "1675:2:20"
																		},
																		"nativeSrc": "1675:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1675:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "1652:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1652:2:20"
																},
																"nativeSrc": "1652:38:20",
																"nodeType": "YulFunctionCall",
																"src": "1652:38:20"
															},
															"nativeSrc": "1649:161:20",
															"nodeType": "YulIf",
															"src": "1649:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "1436:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1471:4:20",
														"nodeType": "YulTypedName",
														"src": "1471:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1480:6:20",
														"nodeType": "YulTypedName",
														"src": "1480:6:20",
														"type": ""
													}
												],
												"src": "1436:380:20"
											},
											{
												"body": {
													"nativeSrc": "1877:65:20",
													"nodeType": "YulBlock",
													"src": "1877:65:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1894:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1894:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "1897:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1897:3:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1887:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1887:6:20"
																},
																"nativeSrc": "1887:14:20",
																"nodeType": "YulFunctionCall",
																"src": "1887:14:20"
															},
															"nativeSrc": "1887:14:20",
															"nodeType": "YulExpressionStatement",
															"src": "1887:14:20"
														},
														{
															"nativeSrc": "1910:26:20",
															"nodeType": "YulAssignment",
															"src": "1910:26:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1928:1:20",
																		"nodeType": "YulLiteral",
																		"src": "1928:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1931:4:20",
																		"nodeType": "YulLiteral",
																		"src": "1931:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1918:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1918:9:20"
																},
																"nativeSrc": "1918:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1918:18:20"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "1910:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1910:4:20"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "1821:121:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "1860:3:20",
														"nodeType": "YulTypedName",
														"src": "1860:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "1868:4:20",
														"nodeType": "YulTypedName",
														"src": "1868:4:20",
														"type": ""
													}
												],
												"src": "1821:121:20"
											},
											{
												"body": {
													"nativeSrc": "2028:437:20",
													"nodeType": "YulBlock",
													"src": "2028:437:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2061:398:20",
																"nodeType": "YulBlock",
																"src": "2061:398:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2082:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2082:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "2085:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "2085:5:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "2075:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2075:6:20"
																			},
																			"nativeSrc": "2075:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2075:16:20"
																		},
																		"nativeSrc": "2075:16:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2075:16:20"
																	},
																	{
																		"nativeSrc": "2104:30:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2104:30:20",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2126:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2126:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2129:4:20",
																					"nodeType": "YulLiteral",
																					"src": "2129:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "2116:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2116:9:20"
																			},
																			"nativeSrc": "2116:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2116:18:20"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "2108:4:20",
																				"nodeType": "YulTypedName",
																				"src": "2108:4:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "2147:57:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2147:57:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "2170:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "2170:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2180:1:20",
																							"nodeType": "YulLiteral",
																							"src": "2180:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "2187:10:20",
																									"nodeType": "YulIdentifier",
																									"src": "2187:10:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2199:2:20",
																									"nodeType": "YulLiteral",
																									"src": "2199:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2183:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2183:3:20"
																							},
																							"nativeSrc": "2183:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2183:19:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "2176:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2176:3:20"
																					},
																					"nativeSrc": "2176:27:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2176:27:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2166:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "2166:3:20"
																			},
																			"nativeSrc": "2166:38:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2166:38:20"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "2151:11:20",
																				"nodeType": "YulTypedName",
																				"src": "2151:11:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "2241:23:20",
																			"nodeType": "YulBlock",
																			"src": "2241:23:20",
																			"statements": [
																				{
																					"nativeSrc": "2243:19:20",
																					"nodeType": "YulAssignment",
																					"src": "2243:19:20",
																					"value": {
																						"name": "data",
																						"nativeSrc": "2258:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "2258:4:20"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "2243:11:20",
																							"nodeType": "YulIdentifier",
																							"src": "2243:11:20"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "2223:10:20",
																					"nodeType": "YulIdentifier",
																					"src": "2223:10:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2235:4:20",
																					"nodeType": "YulLiteral",
																					"src": "2235:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "2220:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "2220:2:20"
																			},
																			"nativeSrc": "2220:20:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2220:20:20"
																		},
																		"nativeSrc": "2217:47:20",
																		"nodeType": "YulIf",
																		"src": "2217:47:20"
																	},
																	{
																		"nativeSrc": "2277:41:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2277:41:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "2291:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "2291:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "2301:1:20",
																							"nodeType": "YulLiteral",
																							"src": "2301:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "2308:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2308:3:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2313:2:20",
																									"nodeType": "YulLiteral",
																									"src": "2313:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2304:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2304:3:20"
																							},
																							"nativeSrc": "2304:12:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2304:12:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "2297:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2297:3:20"
																					},
																					"nativeSrc": "2297:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2297:20:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "2287:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "2287:3:20"
																			},
																			"nativeSrc": "2287:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2287:31:20"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "2281:2:20",
																				"nodeType": "YulTypedName",
																				"src": "2281:2:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "2331:24:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "2331:24:20",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "2344:11:20",
																			"nodeType": "YulIdentifier",
																			"src": "2344:11:20"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "2335:5:20",
																				"nodeType": "YulTypedName",
																				"src": "2335:5:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "2429:20:20",
																			"nodeType": "YulBlock",
																			"src": "2429:20:20",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "2438:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "2438:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2445:1:20",
																								"nodeType": "YulLiteral",
																								"src": "2445:1:20",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "2431:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "2431:6:20"
																						},
																						"nativeSrc": "2431:16:20",
																						"nodeType": "YulFunctionCall",
																						"src": "2431:16:20"
																					},
																					"nativeSrc": "2431:16:20",
																					"nodeType": "YulExpressionStatement",
																					"src": "2431:16:20"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "2379:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "2379:5:20"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "2386:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "2386:2:20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "2376:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "2376:2:20"
																			},
																			"nativeSrc": "2376:13:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2376:13:20"
																		},
																		"nativeSrc": "2368:81:20",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "2390:26:20",
																			"nodeType": "YulBlock",
																			"src": "2390:26:20",
																			"statements": [
																				{
																					"nativeSrc": "2392:22:20",
																					"nodeType": "YulAssignment",
																					"src": "2392:22:20",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "2405:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "2405:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "2412:1:20",
																								"nodeType": "YulLiteral",
																								"src": "2412:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "2401:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2401:3:20"
																						},
																						"nativeSrc": "2401:13:20",
																						"nodeType": "YulFunctionCall",
																						"src": "2401:13:20"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "2392:5:20",
																							"nodeType": "YulIdentifier",
																							"src": "2392:5:20"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "2372:3:20",
																			"nodeType": "YulBlock",
																			"src": "2372:3:20",
																			"statements": []
																		},
																		"src": "2368:81:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "2044:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "2044:3:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2049:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2049:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2041:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "2041:2:20"
																},
																"nativeSrc": "2041:11:20",
																"nodeType": "YulFunctionCall",
																"src": "2041:11:20"
															},
															"nativeSrc": "2038:421:20",
															"nodeType": "YulIf",
															"src": "2038:421:20"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "1947:518:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "2000:5:20",
														"nodeType": "YulTypedName",
														"src": "2000:5:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "2007:3:20",
														"nodeType": "YulTypedName",
														"src": "2007:3:20",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "2012:10:20",
														"nodeType": "YulTypedName",
														"src": "2012:10:20",
														"type": ""
													}
												],
												"src": "1947:518:20"
											},
											{
												"body": {
													"nativeSrc": "2555:81:20",
													"nodeType": "YulBlock",
													"src": "2555:81:20",
													"statements": [
														{
															"nativeSrc": "2565:65:20",
															"nodeType": "YulAssignment",
															"src": "2565:65:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "2580:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "2580:4:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "2598:1:20",
																										"nodeType": "YulLiteral",
																										"src": "2598:1:20",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "2601:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "2601:3:20"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "2594:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2594:3:20"
																								},
																								"nativeSrc": "2594:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2594:11:20"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "2611:1:20",
																										"nodeType": "YulLiteral",
																										"src": "2611:1:20",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "2607:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2607:3:20"
																								},
																								"nativeSrc": "2607:6:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2607:6:20"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "2590:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "2590:3:20"
																						},
																						"nativeSrc": "2590:24:20",
																						"nodeType": "YulFunctionCall",
																						"src": "2590:24:20"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "2586:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2586:3:20"
																				},
																				"nativeSrc": "2586:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2586:29:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2576:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2576:3:20"
																		},
																		"nativeSrc": "2576:40:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2576:40:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "2622:1:20",
																				"nodeType": "YulLiteral",
																				"src": "2622:1:20",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "2625:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "2625:3:20"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "2618:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2618:3:20"
																		},
																		"nativeSrc": "2618:11:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2618:11:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "2573:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "2573:2:20"
																},
																"nativeSrc": "2573:57:20",
																"nodeType": "YulFunctionCall",
																"src": "2573:57:20"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "2565:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2565:4:20"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "2470:166:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "2532:4:20",
														"nodeType": "YulTypedName",
														"src": "2532:4:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "2538:3:20",
														"nodeType": "YulTypedName",
														"src": "2538:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "2546:4:20",
														"nodeType": "YulTypedName",
														"src": "2546:4:20",
														"type": ""
													}
												],
												"src": "2470:166:20"
											},
											{
												"body": {
													"nativeSrc": "2737:1203:20",
													"nodeType": "YulBlock",
													"src": "2737:1203:20",
													"statements": [
														{
															"nativeSrc": "2747:24:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2747:24:20",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "2767:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "2767:3:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "2761:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "2761:5:20"
																},
																"nativeSrc": "2761:10:20",
																"nodeType": "YulFunctionCall",
																"src": "2761:10:20"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "2751:6:20",
																	"nodeType": "YulTypedName",
																	"src": "2751:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "2814:22:20",
																"nodeType": "YulBlock",
																"src": "2814:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "2816:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "2816:16:20"
																			},
																			"nativeSrc": "2816:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2816:18:20"
																		},
																		"nativeSrc": "2816:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2816:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "2786:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2786:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2802:2:20",
																						"nodeType": "YulLiteral",
																						"src": "2802:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2806:1:20",
																						"nodeType": "YulLiteral",
																						"src": "2806:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2798:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2798:3:20"
																				},
																				"nativeSrc": "2798:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2798:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2810:1:20",
																				"nodeType": "YulLiteral",
																				"src": "2810:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2794:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2794:3:20"
																		},
																		"nativeSrc": "2794:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2794:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2783:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "2783:2:20"
																},
																"nativeSrc": "2783:30:20",
																"nodeType": "YulFunctionCall",
																"src": "2783:30:20"
															},
															"nativeSrc": "2780:56:20",
															"nodeType": "YulIf",
															"src": "2780:56:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "2889:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "2889:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "2927:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "2927:4:20"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "2921:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "2921:5:20"
																				},
																				"nativeSrc": "2921:11:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2921:11:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "2895:25:20",
																			"nodeType": "YulIdentifier",
																			"src": "2895:25:20"
																		},
																		"nativeSrc": "2895:38:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2895:38:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "2935:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2935:6:20"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "2845:43:20",
																	"nodeType": "YulIdentifier",
																	"src": "2845:43:20"
																},
																"nativeSrc": "2845:97:20",
																"nodeType": "YulFunctionCall",
																"src": "2845:97:20"
															},
															"nativeSrc": "2845:97:20",
															"nodeType": "YulExpressionStatement",
															"src": "2845:97:20"
														},
														{
															"nativeSrc": "2951:18:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2951:18:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2968:1:20",
																"nodeType": "YulLiteral",
																"src": "2968:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "2955:9:20",
																	"nodeType": "YulTypedName",
																	"src": "2955:9:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2978:17:20",
															"nodeType": "YulAssignment",
															"src": "2978:17:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2991:4:20",
																"nodeType": "YulLiteral",
																"src": "2991:4:20",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "2978:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "2978:9:20"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3041:642:20",
																		"nodeType": "YulBlock",
																		"src": "3041:642:20",
																		"statements": [
																			{
																				"nativeSrc": "3055:35:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3055:35:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "3074:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "3074:6:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "3086:2:20",
																									"nodeType": "YulLiteral",
																									"src": "3086:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "3082:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "3082:3:20"
																							},
																							"nativeSrc": "3082:7:20",
																							"nodeType": "YulFunctionCall",
																							"src": "3082:7:20"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "3070:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "3070:3:20"
																					},
																					"nativeSrc": "3070:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3070:20:20"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "3059:7:20",
																						"nodeType": "YulTypedName",
																						"src": "3059:7:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "3103:49:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3103:49:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "3147:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "3147:4:20"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "3117:29:20",
																						"nodeType": "YulIdentifier",
																						"src": "3117:29:20"
																					},
																					"nativeSrc": "3117:35:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3117:35:20"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "3107:6:20",
																						"nodeType": "YulTypedName",
																						"src": "3107:6:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "3165:10:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3165:10:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3174:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3174:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "3169:1:20",
																						"nodeType": "YulTypedName",
																						"src": "3169:1:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "3245:165:20",
																					"nodeType": "YulBlock",
																					"src": "3245:165:20",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "3270:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "3270:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "3288:3:20",
																														"nodeType": "YulIdentifier",
																														"src": "3288:3:20"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "3293:9:20",
																														"nodeType": "YulIdentifier",
																														"src": "3293:9:20"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "3284:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "3284:3:20"
																												},
																												"nativeSrc": "3284:19:20",
																												"nodeType": "YulFunctionCall",
																												"src": "3284:19:20"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "3278:5:20",
																											"nodeType": "YulIdentifier",
																											"src": "3278:5:20"
																										},
																										"nativeSrc": "3278:26:20",
																										"nodeType": "YulFunctionCall",
																										"src": "3278:26:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "3263:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "3263:6:20"
																								},
																								"nativeSrc": "3263:42:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3263:42:20"
																							},
																							"nativeSrc": "3263:42:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "3263:42:20"
																						},
																						{
																							"nativeSrc": "3322:24:20",
																							"nodeType": "YulAssignment",
																							"src": "3322:24:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "3336:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "3336:6:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "3344:1:20",
																										"nodeType": "YulLiteral",
																										"src": "3344:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "3332:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "3332:3:20"
																								},
																								"nativeSrc": "3332:14:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3332:14:20"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "3322:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "3322:6:20"
																								}
																							]
																						},
																						{
																							"nativeSrc": "3363:33:20",
																							"nodeType": "YulAssignment",
																							"src": "3363:33:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "3380:9:20",
																										"nodeType": "YulIdentifier",
																										"src": "3380:9:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "3391:4:20",
																										"nodeType": "YulLiteral",
																										"src": "3391:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "3376:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "3376:3:20"
																								},
																								"nativeSrc": "3376:20:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3376:20:20"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "3363:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "3363:9:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "3199:1:20",
																							"nodeType": "YulIdentifier",
																							"src": "3199:1:20"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "3202:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "3202:7:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "3196:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "3196:2:20"
																					},
																					"nativeSrc": "3196:14:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3196:14:20"
																				},
																				"nativeSrc": "3188:222:20",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "3211:21:20",
																					"nodeType": "YulBlock",
																					"src": "3211:21:20",
																					"statements": [
																						{
																							"nativeSrc": "3213:17:20",
																							"nodeType": "YulAssignment",
																							"src": "3213:17:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "3222:1:20",
																										"nodeType": "YulIdentifier",
																										"src": "3222:1:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "3225:4:20",
																										"nodeType": "YulLiteral",
																										"src": "3225:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "3218:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "3218:3:20"
																								},
																								"nativeSrc": "3218:12:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3218:12:20"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "3213:1:20",
																									"nodeType": "YulIdentifier",
																									"src": "3213:1:20"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "3192:3:20",
																					"nodeType": "YulBlock",
																					"src": "3192:3:20",
																					"statements": []
																				},
																				"src": "3188:222:20"
																			},
																			{
																				"body": {
																					"nativeSrc": "3458:166:20",
																					"nodeType": "YulBlock",
																					"src": "3458:166:20",
																					"statements": [
																						{
																							"nativeSrc": "3476:43:20",
																							"nodeType": "YulVariableDeclaration",
																							"src": "3476:43:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "3503:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "3503:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "3508:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "3508:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "3499:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "3499:3:20"
																										},
																										"nativeSrc": "3499:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "3499:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "3493:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "3493:5:20"
																								},
																								"nativeSrc": "3493:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3493:26:20"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "3480:9:20",
																									"nodeType": "YulTypedName",
																									"src": "3480:9:20",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "3543:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "3543:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "3555:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "3555:9:20"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "3582:1:20",
																																				"nodeType": "YulLiteral",
																																				"src": "3582:1:20",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "3585:6:20",
																																				"nodeType": "YulIdentifier",
																																				"src": "3585:6:20"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "3578:3:20",
																																			"nodeType": "YulIdentifier",
																																			"src": "3578:3:20"
																																		},
																																		"nativeSrc": "3578:14:20",
																																		"nodeType": "YulFunctionCall",
																																		"src": "3578:14:20"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "3594:3:20",
																																		"nodeType": "YulLiteral",
																																		"src": "3594:3:20",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "3574:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "3574:3:20"
																																},
																																"nativeSrc": "3574:24:20",
																																"nodeType": "YulFunctionCall",
																																"src": "3574:24:20"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "3604:1:20",
																																		"nodeType": "YulLiteral",
																																		"src": "3604:1:20",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "3600:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "3600:3:20"
																																},
																																"nativeSrc": "3600:6:20",
																																"nodeType": "YulFunctionCall",
																																"src": "3600:6:20"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "3570:3:20",
																															"nodeType": "YulIdentifier",
																															"src": "3570:3:20"
																														},
																														"nativeSrc": "3570:37:20",
																														"nodeType": "YulFunctionCall",
																														"src": "3570:37:20"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "3566:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "3566:3:20"
																												},
																												"nativeSrc": "3566:42:20",
																												"nodeType": "YulFunctionCall",
																												"src": "3566:42:20"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "3551:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "3551:3:20"
																										},
																										"nativeSrc": "3551:58:20",
																										"nodeType": "YulFunctionCall",
																										"src": "3551:58:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "3536:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "3536:6:20"
																								},
																								"nativeSrc": "3536:74:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3536:74:20"
																							},
																							"nativeSrc": "3536:74:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "3536:74:20"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "3429:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "3429:7:20"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "3438:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "3438:6:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "3426:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "3426:2:20"
																					},
																					"nativeSrc": "3426:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3426:19:20"
																				},
																				"nativeSrc": "3423:201:20",
																				"nodeType": "YulIf",
																				"src": "3423:201:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "3644:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "3644:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "3658:1:20",
																											"nodeType": "YulLiteral",
																											"src": "3658:1:20",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "3661:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "3661:6:20"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "3654:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "3654:3:20"
																									},
																									"nativeSrc": "3654:14:20",
																									"nodeType": "YulFunctionCall",
																									"src": "3654:14:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "3670:1:20",
																									"nodeType": "YulLiteral",
																									"src": "3670:1:20",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "3650:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "3650:3:20"
																							},
																							"nativeSrc": "3650:22:20",
																							"nodeType": "YulFunctionCall",
																							"src": "3650:22:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "3637:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "3637:6:20"
																					},
																					"nativeSrc": "3637:36:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3637:36:20"
																				},
																				"nativeSrc": "3637:36:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "3637:36:20"
																			}
																		]
																	},
																	"nativeSrc": "3034:649:20",
																	"nodeType": "YulCase",
																	"src": "3034:649:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3039:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3039:1:20",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "3700:234:20",
																		"nodeType": "YulBlock",
																		"src": "3700:234:20",
																		"statements": [
																			{
																				"nativeSrc": "3714:14:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "3714:14:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3727:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3727:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "3718:5:20",
																						"nodeType": "YulTypedName",
																						"src": "3718:5:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "3763:67:20",
																					"nodeType": "YulBlock",
																					"src": "3763:67:20",
																					"statements": [
																						{
																							"nativeSrc": "3781:35:20",
																							"nodeType": "YulAssignment",
																							"src": "3781:35:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "3800:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "3800:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "3805:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "3805:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "3796:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "3796:3:20"
																										},
																										"nativeSrc": "3796:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "3796:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "3790:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "3790:5:20"
																								},
																								"nativeSrc": "3790:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "3790:26:20"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "3781:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "3781:5:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "3744:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "3744:6:20"
																				},
																				"nativeSrc": "3741:89:20",
																				"nodeType": "YulIf",
																				"src": "3741:89:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "3850:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "3850:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "3909:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "3909:5:20"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "3916:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "3916:6:20"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "3856:52:20",
																								"nodeType": "YulIdentifier",
																								"src": "3856:52:20"
																							},
																							"nativeSrc": "3856:67:20",
																							"nodeType": "YulFunctionCall",
																							"src": "3856:67:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "3843:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "3843:6:20"
																					},
																					"nativeSrc": "3843:81:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3843:81:20"
																				},
																				"nativeSrc": "3843:81:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "3843:81:20"
																			}
																		]
																	},
																	"nativeSrc": "3692:242:20",
																	"nodeType": "YulCase",
																	"src": "3692:242:20",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "3014:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3014:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3022:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3022:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3011:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3011:2:20"
																},
																"nativeSrc": "3011:14:20",
																"nodeType": "YulFunctionCall",
																"src": "3011:14:20"
															},
															"nativeSrc": "3004:930:20",
															"nodeType": "YulSwitch",
															"src": "3004:930:20"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "2641:1299:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "2722:4:20",
														"nodeType": "YulTypedName",
														"src": "2722:4:20",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "2728:3:20",
														"nodeType": "YulTypedName",
														"src": "2728:3:20",
														"type": ""
													}
												],
												"src": "2641:1299:20"
											},
											{
												"body": {
													"nativeSrc": "4158:276:20",
													"nodeType": "YulBlock",
													"src": "4158:276:20",
													"statements": [
														{
															"nativeSrc": "4168:27:20",
															"nodeType": "YulAssignment",
															"src": "4168:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4180:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4180:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4191:3:20",
																		"nodeType": "YulLiteral",
																		"src": "4191:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4176:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4176:3:20"
																},
																"nativeSrc": "4176:19:20",
																"nodeType": "YulFunctionCall",
																"src": "4176:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4168:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "4168:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4211:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4211:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "4222:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4222:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4204:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4204:6:20"
																},
																"nativeSrc": "4204:25:20",
																"nodeType": "YulFunctionCall",
																"src": "4204:25:20"
															},
															"nativeSrc": "4204:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "4204:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4249:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4249:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4260:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4260:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4245:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4245:3:20"
																		},
																		"nativeSrc": "4245:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4245:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "4265:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4265:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4238:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4238:6:20"
																},
																"nativeSrc": "4238:34:20",
																"nodeType": "YulFunctionCall",
																"src": "4238:34:20"
															},
															"nativeSrc": "4238:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "4238:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4292:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4292:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4303:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4303:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4288:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4288:3:20"
																		},
																		"nativeSrc": "4288:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4288:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "4308:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4308:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4281:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4281:6:20"
																},
																"nativeSrc": "4281:34:20",
																"nodeType": "YulFunctionCall",
																"src": "4281:34:20"
															},
															"nativeSrc": "4281:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "4281:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4335:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4335:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4346:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4346:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4331:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4331:3:20"
																		},
																		"nativeSrc": "4331:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4331:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "4351:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4351:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4324:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4324:6:20"
																},
																"nativeSrc": "4324:34:20",
																"nodeType": "YulFunctionCall",
																"src": "4324:34:20"
															},
															"nativeSrc": "4324:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "4324:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4378:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4378:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4389:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4389:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4374:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4374:3:20"
																		},
																		"nativeSrc": "4374:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4374:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "4399:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4399:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4415:3:20",
																								"nodeType": "YulLiteral",
																								"src": "4415:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4420:1:20",
																								"nodeType": "YulLiteral",
																								"src": "4420:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "4411:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "4411:3:20"
																						},
																						"nativeSrc": "4411:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "4411:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4424:1:20",
																						"nodeType": "YulLiteral",
																						"src": "4424:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4407:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4407:3:20"
																				},
																				"nativeSrc": "4407:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4407:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4395:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4395:3:20"
																		},
																		"nativeSrc": "4395:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4395:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4367:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4367:6:20"
																},
																"nativeSrc": "4367:61:20",
																"nodeType": "YulFunctionCall",
																"src": "4367:61:20"
															},
															"nativeSrc": "4367:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "4367:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "3945:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4095:9:20",
														"nodeType": "YulTypedName",
														"src": "4095:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4106:6:20",
														"nodeType": "YulTypedName",
														"src": "4106:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4114:6:20",
														"nodeType": "YulTypedName",
														"src": "4114:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4122:6:20",
														"nodeType": "YulTypedName",
														"src": "4122:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4130:6:20",
														"nodeType": "YulTypedName",
														"src": "4130:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4138:6:20",
														"nodeType": "YulTypedName",
														"src": "4138:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4149:4:20",
														"nodeType": "YulTypedName",
														"src": "4149:4:20",
														"type": ""
													}
												],
												"src": "3945:489:20"
											},
											{
												"body": {
													"nativeSrc": "4560:297:20",
													"nodeType": "YulBlock",
													"src": "4560:297:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4577:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4577:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4588:2:20",
																		"nodeType": "YulLiteral",
																		"src": "4588:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4570:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4570:6:20"
																},
																"nativeSrc": "4570:21:20",
																"nodeType": "YulFunctionCall",
																"src": "4570:21:20"
															},
															"nativeSrc": "4570:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "4570:21:20"
														},
														{
															"nativeSrc": "4600:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4600:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4620:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4620:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4614:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4614:5:20"
																},
																"nativeSrc": "4614:13:20",
																"nodeType": "YulFunctionCall",
																"src": "4614:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "4604:6:20",
																	"nodeType": "YulTypedName",
																	"src": "4604:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4647:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4647:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4658:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4658:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4643:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4643:3:20"
																		},
																		"nativeSrc": "4643:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4643:18:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "4663:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4663:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4636:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4636:6:20"
																},
																"nativeSrc": "4636:34:20",
																"nodeType": "YulFunctionCall",
																"src": "4636:34:20"
															},
															"nativeSrc": "4636:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "4636:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4689:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4689:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4700:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4700:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4685:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4685:3:20"
																		},
																		"nativeSrc": "4685:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4685:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "4709:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4709:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4717:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4717:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4705:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4705:3:20"
																		},
																		"nativeSrc": "4705:15:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4705:15:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "4722:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4722:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "4679:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4679:5:20"
																},
																"nativeSrc": "4679:50:20",
																"nodeType": "YulFunctionCall",
																"src": "4679:50:20"
															},
															"nativeSrc": "4679:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "4679:50:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4753:9:20",
																						"nodeType": "YulIdentifier",
																						"src": "4753:9:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "4764:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "4764:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4749:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4749:3:20"
																				},
																				"nativeSrc": "4749:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4749:22:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4773:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4773:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4745:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4745:3:20"
																		},
																		"nativeSrc": "4745:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4745:31:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4778:1:20",
																		"nodeType": "YulLiteral",
																		"src": "4778:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4738:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4738:6:20"
																},
																"nativeSrc": "4738:42:20",
																"nodeType": "YulFunctionCall",
																"src": "4738:42:20"
															},
															"nativeSrc": "4738:42:20",
															"nodeType": "YulExpressionStatement",
															"src": "4738:42:20"
														},
														{
															"nativeSrc": "4789:62:20",
															"nodeType": "YulAssignment",
															"src": "4789:62:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4805:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4805:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "4824:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "4824:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "4832:2:20",
																								"nodeType": "YulLiteral",
																								"src": "4832:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "4820:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "4820:3:20"
																						},
																						"nativeSrc": "4820:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "4820:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "4841:2:20",
																								"nodeType": "YulLiteral",
																								"src": "4841:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "4837:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "4837:3:20"
																						},
																						"nativeSrc": "4837:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "4837:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4816:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4816:3:20"
																				},
																				"nativeSrc": "4816:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4816:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4801:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4801:3:20"
																		},
																		"nativeSrc": "4801:45:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4801:45:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4848:2:20",
																		"nodeType": "YulLiteral",
																		"src": "4848:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4797:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4797:3:20"
																},
																"nativeSrc": "4797:54:20",
																"nodeType": "YulFunctionCall",
																"src": "4797:54:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4789:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "4789:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "4439:418:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4529:9:20",
														"nodeType": "YulTypedName",
														"src": "4529:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4540:6:20",
														"nodeType": "YulTypedName",
														"src": "4540:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4551:4:20",
														"nodeType": "YulTypedName",
														"src": "4551:4:20",
														"type": ""
													}
												],
												"src": "4439:418:20"
											},
											{
												"body": {
													"nativeSrc": "4956:203:20",
													"nodeType": "YulBlock",
													"src": "4956:203:20",
													"statements": [
														{
															"nativeSrc": "4966:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4966:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "4986:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "4986:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "4980:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4980:5:20"
																},
																"nativeSrc": "4980:12:20",
																"nodeType": "YulFunctionCall",
																"src": "4980:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "4970:6:20",
																	"nodeType": "YulTypedName",
																	"src": "4970:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5001:32:20",
															"nodeType": "YulAssignment",
															"src": "5001:32:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nativeSrc": "5020:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5020:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5027:4:20",
																				"nodeType": "YulLiteral",
																				"src": "5027:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5016:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5016:3:20"
																		},
																		"nativeSrc": "5016:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5016:16:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5010:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5010:5:20"
																},
																"nativeSrc": "5010:23:20",
																"nodeType": "YulFunctionCall",
																"src": "5010:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5001:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5001:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5070:83:20",
																"nodeType": "YulBlock",
																"src": "5070:83:20",
																"statements": [
																	{
																		"nativeSrc": "5084:59:20",
																		"nodeType": "YulAssignment",
																		"src": "5084:59:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "5097:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "5097:5:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5112:1:20",
																									"nodeType": "YulLiteral",
																									"src": "5112:1:20",
																									"type": "",
																									"value": "3"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "5119:4:20",
																											"nodeType": "YulLiteral",
																											"src": "5119:4:20",
																											"type": "",
																											"value": "0x20"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "5125:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "5125:6:20"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "5115:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "5115:3:20"
																									},
																									"nativeSrc": "5115:17:20",
																									"nodeType": "YulFunctionCall",
																									"src": "5115:17:20"
																								}
																							],
																							"functionName": {
																								"name": "shl",
																								"nativeSrc": "5108:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "5108:3:20"
																							},
																							"nativeSrc": "5108:25:20",
																							"nodeType": "YulFunctionCall",
																							"src": "5108:25:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5139:1:20",
																									"nodeType": "YulLiteral",
																									"src": "5139:1:20",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5135:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "5135:3:20"
																							},
																							"nativeSrc": "5135:6:20",
																							"nodeType": "YulFunctionCall",
																							"src": "5135:6:20"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5104:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "5104:3:20"
																					},
																					"nativeSrc": "5104:38:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5104:38:20"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5093:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5093:3:20"
																			},
																			"nativeSrc": "5093:50:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5093:50:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "5084:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5084:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "5048:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5048:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5056:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5056:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5045:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5045:2:20"
																},
																"nativeSrc": "5045:16:20",
																"nodeType": "YulFunctionCall",
																"src": "5045:16:20"
															},
															"nativeSrc": "5042:111:20",
															"nodeType": "YulIf",
															"src": "5042:111:20"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "4862:297:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "4936:5:20",
														"nodeType": "YulTypedName",
														"src": "4936:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "4946:5:20",
														"nodeType": "YulTypedName",
														"src": "4946:5:20",
														"type": ""
													}
												],
												"src": "4862:297:20"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let length := mload(offset)\n        if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 0x1f), not(31)), 63), not(31)))\n        if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, length)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n        mcopy(add(memPtr, 0x20), add(offset, 0x20), length)\n        mstore(add(add(memPtr, length), 0x20), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        if gt(offset, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, sub(shl(64, 1), 1)) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x13FF CODESIZE SUB DUP1 PUSH2 0x13FF DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x238 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x31 PUSH1 0xF8 SHL PUSH1 0x20 DUP3 ADD MSTORE DUP3 SWAP1 DUP2 SWAP1 DUP2 DUP5 PUSH1 0x3 PUSH2 0x59 DUP4 DUP3 PUSH2 0x321 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x66 DUP3 DUP3 PUSH2 0x321 JUMP JUMPDEST POP PUSH2 0x76 SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x123 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0x85 DUP2 PUSH1 0x6 PUSH2 0x123 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x111 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH2 0x433 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x13E JUMPI PUSH2 0x137 DUP4 PUSH2 0x155 JUMP JUMPDEST SWAP1 POP PUSH2 0x14F JUMP JUMPDEST DUP2 PUSH2 0x149 DUP5 DUP3 PUSH2 0x321 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x188 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F SWAP2 SWAP1 PUSH2 0x3DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 0x193 DUP3 PUSH2 0x410 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1BE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x1D7 JUMPI PUSH2 0x1D7 PUSH2 0x19B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0x205 JUMPI PUSH2 0x205 PUSH2 0x19B JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP4 DUP3 ADD PUSH1 0x20 ADD DUP6 LT ISZERO PUSH2 0x21C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 PUSH1 0x20 DUP6 ADD PUSH1 0x20 DUP4 ADD MCOPY PUSH0 SWAP2 DUP2 ADD PUSH1 0x20 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x249 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x25E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x26A DUP6 DUP3 DUP7 ADD PUSH2 0x1AF JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x287 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x293 DUP6 DUP3 DUP7 ADD PUSH2 0x1AF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2B1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2CF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x31C JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2FA JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x319 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x306 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x33A JUMPI PUSH2 0x33A PUSH2 0x19B JUMP JUMPDEST PUSH2 0x34E DUP2 PUSH2 0x348 DUP5 SLOAD PUSH2 0x29D JUMP JUMPDEST DUP5 PUSH2 0x2D5 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x380 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x369 JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x319 JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3AF JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x38F JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x3CC JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x2CF JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0xF7B PUSH2 0x484 PUSH0 CODECOPY PUSH0 PUSH2 0x7AF ADD MSTORE PUSH0 PUSH2 0x782 ADD MSTORE PUSH0 PUSH2 0x6C3 ADD MSTORE PUSH0 PUSH2 0x69B ADD MSTORE PUSH0 PUSH2 0x5F6 ADD MSTORE PUSH0 PUSH2 0x620 ADD MSTORE PUSH0 PUSH2 0x64A ADD MSTORE PUSH2 0xF7B PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF0 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42966C68 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x21D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42966C68 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x171 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x135 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP2 SWAP1 PUSH2 0xCE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x321 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xD76 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1CF CALLDATASIZE PUSH1 0x4 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3C JUMP JUMPDEST PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x500 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x30B DUP6 DUP3 DUP6 PUSH2 0x512 JUMP JUMPDEST PUSH2 0x316 DUP6 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x32A PUSH2 0x5EA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x339 DUP3 DUP3 PUSH2 0x713 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x347 CALLER DUP3 PUSH2 0x747 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2F8 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x378 PUSH2 0x77B JUMP JUMPDEST PUSH2 0x380 PUSH2 0x7A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xEDA JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x439 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x493 DUP3 PUSH2 0x7D5 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x4A2 DUP3 DUP8 DUP8 DUP8 PUSH2 0x801 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x4F4 DUP11 DUP11 DUP11 PUSH2 0x500 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x82D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x587 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x579 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x587 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x82D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x50D DUP4 DUP4 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x642 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x66C JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x32A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x73C JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x339 PUSH0 DUP4 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x770 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x339 DUP3 PUSH0 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x5 PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x6 PUSH2 0xA25 JUMP JUMPDEST PUSH0 PUSH2 0x2F8 PUSH2 0x7E1 PUSH2 0x5EA JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x811 DUP9 DUP9 DUP9 DUP9 PUSH2 0xACE JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x821 DUP3 DUP3 PUSH2 0xB96 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x587 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x8F1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x929 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x91E SWAP2 SWAP1 PUSH2 0xF12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x999 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x97B JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9B5 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xA18 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xA3F JUMPI PUSH2 0xA38 DUP4 PUSH2 0xC4E JUMP JUMPDEST SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xA4B SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA77 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA99 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xB07 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB58 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB83 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xB8C JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBA9 JUMPI PUSH2 0xBA9 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xBB2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBC6 JUMPI PUSH2 0xBC6 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xBE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBF8 JUMPI PUSH2 0xBF8 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xC19 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC2D JUMPI PUSH2 0xC2D PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xC5A DUP4 PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xCF2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD0F JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD25 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD2E DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD4E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD57 DUP5 PUSH2 0xCF9 JUMP JUMPDEST SWAP3 POP PUSH2 0xD65 PUSH1 0x20 DUP6 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD86 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD9D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCF2 DUP3 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xDC4 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xCB2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xDD6 DUP2 DUP10 PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE2B JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xE0D JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE52 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE5B DUP9 PUSH2 0xCF9 JUMP JUMPDEST SWAP7 POP PUSH2 0xE69 PUSH1 0x20 DUP10 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE8C JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEBA JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xED1 PUSH1 0x20 DUP5 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xEEE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF0C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2C PUSH4 0xEFD3785C SGT 0xB7 CALLER PUSH28 0xDF1B9B3AE13750F3B4E38814F2701AD3C42BC6CD2064736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "381:1041:19:-:0;;;648:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3328:431:14;;;;;;;;;;;;-1:-1:-1;;;3328:431:14;;;;752:4:19;;;;;723:6;1962:5:3;:13;752:4:19;1962:5:3;:13;:::i;:::-;-1:-1:-1;1985:7:3;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;3401:45:14;;-1:-1:-1;3401:4:14;;-1:-1:-1;3432:13:14;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;:25:20;4245:18;;;4238:34;;;;4288:18;;;4281:34;4255:13:14;4331:18:20;;;4324:34;4278:4:14;4374:19:20;;;4367:61;4168:7:14;;4176:19:20;;4204:80:14;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:14;3725:27;;-1:-1:-1;381:1041:19;;-1:-1:-1;;381:1041:19;2914:340:10;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:10;;-1:-1:-1;3033:215:10;2914:340;;;;:::o;1708:286::-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:10;;;;;;;;:::i;:::-;;;;;;;;1836:72;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:10:o;14:127:20:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:723;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;298:13;;-1:-1:-1;;;;;323:30:20;;320:56;;;356:18;;:::i;:::-;405:2;399:9;497:2;459:17;;-1:-1:-1;;455:31:20;;;488:2;451:40;447:54;435:67;;-1:-1:-1;;;;;517:34:20;;553:22;;;514:62;511:88;;;579:18;;:::i;:::-;615:2;608:22;639;;;680:19;;;701:4;676:30;673:39;-1:-1:-1;670:59:20;;;725:1;722;715:12;670:59;782:6;775:4;767:6;763:17;756:4;748:6;744:17;738:51;837:1;809:19;;;830:4;805:30;798:41;;;;813:6;146:723;-1:-1:-1;;;146:723:20:o;874:557::-;973:6;981;1034:2;1022:9;1013:7;1009:23;1005:32;1002:52;;;1050:1;1047;1040:12;1002:52;1077:16;;-1:-1:-1;;;;;1105:30:20;;1102:50;;;1148:1;1145;1138:12;1102:50;1171:61;1224:7;1215:6;1204:9;1200:22;1171:61;:::i;:::-;1278:2;1263:18;;1257:25;1161:71;;-1:-1:-1;1257:25:20;-1:-1:-1;;;;;;1294:32:20;;1291:52;;;1339:1;1336;1329:12;1291:52;1362:63;1417:7;1406:8;1395:9;1391:24;1362:63;:::i;:::-;1352:73;;;874:557;;;;;:::o;1436:380::-;1515:1;1511:12;;;;1558;;;1579:61;;1633:4;1625:6;1621:17;1611:27;;1579:61;1686:2;1678:6;1675:14;1655:18;1652:38;1649:161;;1732:10;1727:3;1723:20;1720:1;1713:31;1767:4;1764:1;1757:15;1795:4;1792:1;1785:15;1649:161;;1436:380;;;:::o;1947:518::-;2049:2;2044:3;2041:11;2038:421;;;2085:5;2082:1;2075:16;2129:4;2126:1;2116:18;2199:2;2187:10;2183:19;2180:1;2176:27;2170:4;2166:38;2235:4;2223:10;2220:20;2217:47;;;-1:-1:-1;2258:4:20;2217:47;2313:2;2308:3;2304:12;2301:1;2297:20;2291:4;2287:31;2277:41;;2368:81;2386:2;2379:5;2376:13;2368:81;;;2445:1;2431:16;;2412:1;2401:13;2368:81;;;2372:3;;2038:421;1947:518;;;:::o;2641:1299::-;2761:10;;-1:-1:-1;;;;;2783:30:20;;2780:56;;;2816:18;;:::i;:::-;2845:97;2935:6;2895:38;2927:4;2921:11;2895:38;:::i;:::-;2889:4;2845:97;:::i;:::-;2991:4;3022:2;3011:14;;3039:1;3034:649;;;;3727:1;3744:6;3741:89;;;-1:-1:-1;3796:19:20;;;3790:26;3741:89;-1:-1:-1;;2598:1:20;2594:11;;;2590:24;2586:29;2576:40;2622:1;2618:11;;;2573:57;3843:81;;3004:930;;3034:649;1894:1;1887:14;;;1931:4;1918:18;;-1:-1:-1;;3070:20:20;;;3188:222;3202:7;3199:1;3196:14;3188:222;;;3284:19;;;3278:26;3263:42;;3391:4;3376:20;;;;3344:1;3332:14;;;;3218:12;3188:222;;;3192:3;3438:6;3429:7;3426:19;3423:201;;;3499:19;;;3493:26;-1:-1:-1;;3582:1:20;3578:14;;;3594:3;3574:24;3570:37;3566:42;3551:58;3536:74;;3423:201;-1:-1:-1;;;;3670:1:20;3654:14;;;3650:22;3637:36;;-1:-1:-1;2641:1299:20:o;4439:418::-;4588:2;4577:9;4570:21;4551:4;4620:6;4614:13;4663:6;4658:2;4647:9;4643:18;4636:34;4722:6;4717:2;4709:6;4705:15;4700:2;4689:9;4685:18;4679:50;4778:1;4773:2;4764:6;4753:9;4749:22;4745:31;4738:42;4848:2;4841;4837:7;4832:2;4824:6;4820:15;4816:29;4805:9;4801:45;4797:54;4789:62;;;4439:418;;;;:::o;4862:297::-;4980:12;;5027:4;5016:16;;;5010:23;;4980:12;5045:16;;5042:111;;;-1:-1:-1;;5119:4:20;5115:17;;;;5112:1;5108:25;5104:38;5093:50;;4862:297;-1:-1:-1;4862:297:20:o;:::-;381:1041:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1055": {
									"entryPoint": 801,
									"id": 1055,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2360": {
									"entryPoint": 1915,
									"id": 2360,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2372": {
									"entryPoint": 1960,
									"id": 2372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_715": {
									"entryPoint": 1280,
									"id": 715,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_775": {
									"entryPoint": 2093,
									"id": 775,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2290": {
									"entryPoint": null,
									"id": 2290,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_697": {
									"entryPoint": 1863,
									"id": 697,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_2269": {
									"entryPoint": 1514,
									"id": 2269,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2306": {
									"entryPoint": 2005,
									"id": 2306,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_664": {
									"entryPoint": 1811,
									"id": 664,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1130": {
									"entryPoint": null,
									"id": 1130,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_823": {
									"entryPoint": 1298,
									"id": 823,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2145": {
									"entryPoint": 2966,
									"id": 2145,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transfer_554": {
									"entryPoint": 1421,
									"id": 554,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_631": {
									"entryPoint": 2303,
									"id": 631,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1190": {
									"entryPoint": null,
									"id": 1190,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_451": {
									"entryPoint": null,
									"id": 451,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_475": {
									"entryPoint": 741,
									"id": 475,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_410": {
									"entryPoint": null,
									"id": 410,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burn_3749": {
									"entryPoint": 829,
									"id": 3749,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@byteLength_1334": {
									"entryPoint": 3211,
									"id": 1334,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_388": {
									"entryPoint": null,
									"id": 388,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2348": {
									"entryPoint": 871,
									"id": 2348,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@mint_3736": {
									"entryPoint": 815,
									"id": 3736,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_370": {
									"entryPoint": 597,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1045": {
									"entryPoint": 842,
									"id": 1045,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1175": {
									"entryPoint": null,
									"id": 1175,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@permit_1028": {
									"entryPoint": 965,
									"id": 1028,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2096": {
									"entryPoint": 2049,
									"id": 2096,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@symbol_379": {
									"entryPoint": 937,
									"id": 379,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1401": {
									"entryPoint": 2597,
									"id": 1401,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1302": {
									"entryPoint": 3150,
									"id": 1302,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2446": {
									"entryPoint": null,
									"id": 2446,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_397": {
									"entryPoint": null,
									"id": 397,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_507": {
									"entryPoint": 766,
									"id": 507,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_434": {
									"entryPoint": 952,
									"id": 434,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2060": {
									"entryPoint": 2766,
									"id": 2060,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"abi_decode_address": {
									"entryPoint": 3321,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3469,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 3753,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3388,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 3644,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3348,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3446,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3250,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 3494,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3296,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 3858,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 3802,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x21": {
									"entryPoint": 3889,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8203:20",
										"nodeType": "YulBlock",
										"src": "0:8203:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "64:239:20",
													"nodeType": "YulBlock",
													"src": "64:239:20",
													"statements": [
														{
															"nativeSrc": "74:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "74:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "94:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "94:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "88:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "88:5:20"
																},
																"nativeSrc": "88:12:20",
																"nodeType": "YulFunctionCall",
																"src": "88:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "78:6:20",
																	"nodeType": "YulTypedName",
																	"src": "78:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "116:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "116:3:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "121:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "121:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "109:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "109:6:20"
																},
																"nativeSrc": "109:19:20",
																"nodeType": "YulFunctionCall",
																"src": "109:19:20"
															},
															"nativeSrc": "109:19:20",
															"nodeType": "YulExpressionStatement",
															"src": "109:19:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "147:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "147:3:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "152:4:20",
																				"nodeType": "YulLiteral",
																				"src": "152:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "143:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "143:3:20"
																		},
																		"nativeSrc": "143:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "143:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "163:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "163:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "170:4:20",
																				"nodeType": "YulLiteral",
																				"src": "170:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "159:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "159:3:20"
																		},
																		"nativeSrc": "159:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "159:16:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "177:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "177:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "137:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "137:5:20"
																},
																"nativeSrc": "137:47:20",
																"nodeType": "YulFunctionCall",
																"src": "137:47:20"
															},
															"nativeSrc": "137:47:20",
															"nodeType": "YulExpressionStatement",
															"src": "137:47:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nativeSrc": "208:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "208:3:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "213:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "213:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "204:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "204:3:20"
																				},
																				"nativeSrc": "204:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "204:16:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "222:4:20",
																				"nodeType": "YulLiteral",
																				"src": "222:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "200:3:20"
																		},
																		"nativeSrc": "200:27:20",
																		"nodeType": "YulFunctionCall",
																		"src": "200:27:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "229:1:20",
																		"nodeType": "YulLiteral",
																		"src": "229:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "193:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "193:6:20"
																},
																"nativeSrc": "193:38:20",
																"nodeType": "YulFunctionCall",
																"src": "193:38:20"
															},
															"nativeSrc": "193:38:20",
															"nodeType": "YulExpressionStatement",
															"src": "193:38:20"
														},
														{
															"nativeSrc": "240:57:20",
															"nodeType": "YulAssignment",
															"src": "240:57:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "255:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "255:3:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "268:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "268:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "276:2:20",
																								"nodeType": "YulLiteral",
																								"src": "276:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "264:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "264:3:20"
																						},
																						"nativeSrc": "264:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "264:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "285:2:20",
																								"nodeType": "YulLiteral",
																								"src": "285:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "281:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "281:3:20"
																						},
																						"nativeSrc": "281:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "281:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "260:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "260:3:20"
																				},
																				"nativeSrc": "260:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "260:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "251:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "251:3:20"
																		},
																		"nativeSrc": "251:39:20",
																		"nodeType": "YulFunctionCall",
																		"src": "251:39:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "292:4:20",
																		"nodeType": "YulLiteral",
																		"src": "292:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "247:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "247:3:20"
																},
																"nativeSrc": "247:50:20",
																"nodeType": "YulFunctionCall",
																"src": "247:50:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "240:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "240:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nativeSrc": "14:289:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "41:5:20",
														"nodeType": "YulTypedName",
														"src": "41:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "48:3:20",
														"nodeType": "YulTypedName",
														"src": "48:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "56:3:20",
														"nodeType": "YulTypedName",
														"src": "56:3:20",
														"type": ""
													}
												],
												"src": "14:289:20"
											},
											{
												"body": {
													"nativeSrc": "429:99:20",
													"nodeType": "YulBlock",
													"src": "429:99:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "446:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "446:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "457:2:20",
																		"nodeType": "YulLiteral",
																		"src": "457:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "439:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "439:6:20"
																},
																"nativeSrc": "439:21:20",
																"nodeType": "YulFunctionCall",
																"src": "439:21:20"
															},
															"nativeSrc": "439:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "439:21:20"
														},
														{
															"nativeSrc": "469:53:20",
															"nodeType": "YulAssignment",
															"src": "469:53:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "495:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "495:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "507:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "507:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "518:2:20",
																				"nodeType": "YulLiteral",
																				"src": "518:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "503:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "503:3:20"
																		},
																		"nativeSrc": "503:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "503:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "477:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "477:17:20"
																},
																"nativeSrc": "477:45:20",
																"nodeType": "YulFunctionCall",
																"src": "477:45:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "469:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "469:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "308:220:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "398:9:20",
														"nodeType": "YulTypedName",
														"src": "398:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "409:6:20",
														"nodeType": "YulTypedName",
														"src": "409:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "420:4:20",
														"nodeType": "YulTypedName",
														"src": "420:4:20",
														"type": ""
													}
												],
												"src": "308:220:20"
											},
											{
												"body": {
													"nativeSrc": "582:124:20",
													"nodeType": "YulBlock",
													"src": "582:124:20",
													"statements": [
														{
															"nativeSrc": "592:29:20",
															"nodeType": "YulAssignment",
															"src": "592:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "614:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "614:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "601:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "601:12:20"
																},
																"nativeSrc": "601:20:20",
																"nodeType": "YulFunctionCall",
																"src": "601:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "592:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "592:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "684:16:20",
																"nodeType": "YulBlock",
																"src": "684:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "693:1:20",
																					"nodeType": "YulLiteral",
																					"src": "693:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "696:1:20",
																					"nodeType": "YulLiteral",
																					"src": "696:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "686:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "686:6:20"
																			},
																			"nativeSrc": "686:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "686:12:20"
																		},
																		"nativeSrc": "686:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "686:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "643:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "643:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "654:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "654:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "669:3:20",
																										"nodeType": "YulLiteral",
																										"src": "669:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "674:1:20",
																										"nodeType": "YulLiteral",
																										"src": "674:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "665:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "665:3:20"
																								},
																								"nativeSrc": "665:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "665:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "678:1:20",
																								"nodeType": "YulLiteral",
																								"src": "678:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "661:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "661:3:20"
																						},
																						"nativeSrc": "661:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "661:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "650:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "650:3:20"
																				},
																				"nativeSrc": "650:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "650:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "640:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "640:2:20"
																		},
																		"nativeSrc": "640:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "640:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "633:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "633:6:20"
																},
																"nativeSrc": "633:50:20",
																"nodeType": "YulFunctionCall",
																"src": "633:50:20"
															},
															"nativeSrc": "630:70:20",
															"nodeType": "YulIf",
															"src": "630:70:20"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "533:173:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "561:6:20",
														"nodeType": "YulTypedName",
														"src": "561:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "572:5:20",
														"nodeType": "YulTypedName",
														"src": "572:5:20",
														"type": ""
													}
												],
												"src": "533:173:20"
											},
											{
												"body": {
													"nativeSrc": "798:213:20",
													"nodeType": "YulBlock",
													"src": "798:213:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "844:16:20",
																"nodeType": "YulBlock",
																"src": "844:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "853:1:20",
																					"nodeType": "YulLiteral",
																					"src": "853:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "856:1:20",
																					"nodeType": "YulLiteral",
																					"src": "856:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "846:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "846:6:20"
																			},
																			"nativeSrc": "846:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "846:12:20"
																		},
																		"nativeSrc": "846:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "846:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "819:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "819:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "828:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "828:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "815:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "815:3:20"
																		},
																		"nativeSrc": "815:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "815:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "840:2:20",
																		"nodeType": "YulLiteral",
																		"src": "840:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "811:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:20"
																},
																"nativeSrc": "811:32:20",
																"nodeType": "YulFunctionCall",
																"src": "811:32:20"
															},
															"nativeSrc": "808:52:20",
															"nodeType": "YulIf",
															"src": "808:52:20"
														},
														{
															"nativeSrc": "869:39:20",
															"nodeType": "YulAssignment",
															"src": "869:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "898:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "879:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "879:18:20"
																},
																"nativeSrc": "879:29:20",
																"nodeType": "YulFunctionCall",
																"src": "879:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "869:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "869:6:20"
																}
															]
														},
														{
															"nativeSrc": "917:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "917:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "930:1:20",
																"nodeType": "YulLiteral",
																"src": "930:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "921:5:20",
																	"nodeType": "YulTypedName",
																	"src": "921:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "940:41:20",
															"nodeType": "YulAssignment",
															"src": "940:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "966:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "966:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "977:2:20",
																				"nodeType": "YulLiteral",
																				"src": "977:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "962:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "962:3:20"
																		},
																		"nativeSrc": "962:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "962:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "949:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "949:12:20"
																},
																"nativeSrc": "949:32:20",
																"nodeType": "YulFunctionCall",
																"src": "949:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "940:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "940:5:20"
																}
															]
														},
														{
															"nativeSrc": "990:15:20",
															"nodeType": "YulAssignment",
															"src": "990:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1000:5:20",
																"nodeType": "YulIdentifier",
																"src": "1000:5:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "990:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "990:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "711:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "756:9:20",
														"nodeType": "YulTypedName",
														"src": "756:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "767:7:20",
														"nodeType": "YulTypedName",
														"src": "767:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "779:6:20",
														"nodeType": "YulTypedName",
														"src": "779:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "787:6:20",
														"nodeType": "YulTypedName",
														"src": "787:6:20",
														"type": ""
													}
												],
												"src": "711:300:20"
											},
											{
												"body": {
													"nativeSrc": "1111:92:20",
													"nodeType": "YulBlock",
													"src": "1111:92:20",
													"statements": [
														{
															"nativeSrc": "1121:26:20",
															"nodeType": "YulAssignment",
															"src": "1121:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1133:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1133:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1144:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1144:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1129:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1129:3:20"
																},
																"nativeSrc": "1129:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1129:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1121:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1121:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1163:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1163:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1188:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "1188:6:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1181:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "1181:6:20"
																				},
																				"nativeSrc": "1181:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1181:14:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1174:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "1174:6:20"
																		},
																		"nativeSrc": "1174:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1174:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1156:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1156:6:20"
																},
																"nativeSrc": "1156:41:20",
																"nodeType": "YulFunctionCall",
																"src": "1156:41:20"
															},
															"nativeSrc": "1156:41:20",
															"nodeType": "YulExpressionStatement",
															"src": "1156:41:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1016:187:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1080:9:20",
														"nodeType": "YulTypedName",
														"src": "1080:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1091:6:20",
														"nodeType": "YulTypedName",
														"src": "1091:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1102:4:20",
														"nodeType": "YulTypedName",
														"src": "1102:4:20",
														"type": ""
													}
												],
												"src": "1016:187:20"
											},
											{
												"body": {
													"nativeSrc": "1309:76:20",
													"nodeType": "YulBlock",
													"src": "1309:76:20",
													"statements": [
														{
															"nativeSrc": "1319:26:20",
															"nodeType": "YulAssignment",
															"src": "1319:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1331:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1331:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1342:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1342:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1327:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1327:3:20"
																},
																"nativeSrc": "1327:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1327:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1319:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1319:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1361:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1361:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1372:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1372:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1354:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1354:6:20"
																},
																"nativeSrc": "1354:25:20",
																"nodeType": "YulFunctionCall",
																"src": "1354:25:20"
															},
															"nativeSrc": "1354:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "1354:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1208:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1278:9:20",
														"nodeType": "YulTypedName",
														"src": "1278:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1289:6:20",
														"nodeType": "YulTypedName",
														"src": "1289:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1300:4:20",
														"nodeType": "YulTypedName",
														"src": "1300:4:20",
														"type": ""
													}
												],
												"src": "1208:177:20"
											},
											{
												"body": {
													"nativeSrc": "1494:270:20",
													"nodeType": "YulBlock",
													"src": "1494:270:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1540:16:20",
																"nodeType": "YulBlock",
																"src": "1540:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1549:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1549:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1552:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1552:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1542:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1542:6:20"
																			},
																			"nativeSrc": "1542:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1542:12:20"
																		},
																		"nativeSrc": "1542:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1542:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1515:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "1515:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1524:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1524:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1511:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1511:3:20"
																		},
																		"nativeSrc": "1511:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1511:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1536:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1507:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1507:3:20"
																},
																"nativeSrc": "1507:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1507:32:20"
															},
															"nativeSrc": "1504:52:20",
															"nodeType": "YulIf",
															"src": "1504:52:20"
														},
														{
															"nativeSrc": "1565:39:20",
															"nodeType": "YulAssignment",
															"src": "1565:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1594:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1594:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1575:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1575:18:20"
																},
																"nativeSrc": "1575:29:20",
																"nodeType": "YulFunctionCall",
																"src": "1575:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1565:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1565:6:20"
																}
															]
														},
														{
															"nativeSrc": "1613:48:20",
															"nodeType": "YulAssignment",
															"src": "1613:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1646:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1646:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1657:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1657:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1642:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1642:3:20"
																		},
																		"nativeSrc": "1642:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1642:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1623:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1623:18:20"
																},
																"nativeSrc": "1623:38:20",
																"nodeType": "YulFunctionCall",
																"src": "1623:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1613:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1613:6:20"
																}
															]
														},
														{
															"nativeSrc": "1670:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1670:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1683:1:20",
																"nodeType": "YulLiteral",
																"src": "1683:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1674:5:20",
																	"nodeType": "YulTypedName",
																	"src": "1674:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1693:41:20",
															"nodeType": "YulAssignment",
															"src": "1693:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1719:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1719:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1730:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1730:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1715:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1715:3:20"
																		},
																		"nativeSrc": "1715:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1715:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1702:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "1702:12:20"
																},
																"nativeSrc": "1702:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1702:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1693:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1693:5:20"
																}
															]
														},
														{
															"nativeSrc": "1743:15:20",
															"nodeType": "YulAssignment",
															"src": "1743:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1753:5:20",
																"nodeType": "YulIdentifier",
																"src": "1753:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1743:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1743:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1390:374:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1444:9:20",
														"nodeType": "YulTypedName",
														"src": "1444:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1455:7:20",
														"nodeType": "YulTypedName",
														"src": "1455:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1467:6:20",
														"nodeType": "YulTypedName",
														"src": "1467:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1475:6:20",
														"nodeType": "YulTypedName",
														"src": "1475:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1483:6:20",
														"nodeType": "YulTypedName",
														"src": "1483:6:20",
														"type": ""
													}
												],
												"src": "1390:374:20"
											},
											{
												"body": {
													"nativeSrc": "1866:87:20",
													"nodeType": "YulBlock",
													"src": "1866:87:20",
													"statements": [
														{
															"nativeSrc": "1876:26:20",
															"nodeType": "YulAssignment",
															"src": "1876:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1888:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1888:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1899:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1899:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1884:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:20"
																},
																"nativeSrc": "1884:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1884:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1876:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1876:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1918:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1918:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1933:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1933:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1941:4:20",
																				"nodeType": "YulLiteral",
																				"src": "1941:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1929:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1929:3:20"
																		},
																		"nativeSrc": "1929:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1929:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1911:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1911:6:20"
																},
																"nativeSrc": "1911:36:20",
																"nodeType": "YulFunctionCall",
																"src": "1911:36:20"
															},
															"nativeSrc": "1911:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "1911:36:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1769:184:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1835:9:20",
														"nodeType": "YulTypedName",
														"src": "1835:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1846:6:20",
														"nodeType": "YulTypedName",
														"src": "1846:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1857:4:20",
														"nodeType": "YulTypedName",
														"src": "1857:4:20",
														"type": ""
													}
												],
												"src": "1769:184:20"
											},
											{
												"body": {
													"nativeSrc": "2059:76:20",
													"nodeType": "YulBlock",
													"src": "2059:76:20",
													"statements": [
														{
															"nativeSrc": "2069:26:20",
															"nodeType": "YulAssignment",
															"src": "2069:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2081:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2081:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2092:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2092:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2077:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2077:3:20"
																},
																"nativeSrc": "2077:18:20",
																"nodeType": "YulFunctionCall",
																"src": "2077:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2069:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2111:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2111:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2122:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2122:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2104:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:20"
																},
																"nativeSrc": "2104:25:20",
																"nodeType": "YulFunctionCall",
																"src": "2104:25:20"
															},
															"nativeSrc": "2104:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "2104:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "1958:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2028:9:20",
														"nodeType": "YulTypedName",
														"src": "2028:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2039:6:20",
														"nodeType": "YulTypedName",
														"src": "2039:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2050:4:20",
														"nodeType": "YulTypedName",
														"src": "2050:4:20",
														"type": ""
													}
												],
												"src": "1958:177:20"
											},
											{
												"body": {
													"nativeSrc": "2210:156:20",
													"nodeType": "YulBlock",
													"src": "2210:156:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2256:16:20",
																"nodeType": "YulBlock",
																"src": "2256:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2265:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2265:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2258:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2258:6:20"
																			},
																			"nativeSrc": "2258:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2258:12:20"
																		},
																		"nativeSrc": "2258:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2258:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2231:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2231:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2240:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2240:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2227:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2227:3:20"
																		},
																		"nativeSrc": "2227:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2227:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2252:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2252:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2223:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2223:3:20"
																},
																"nativeSrc": "2223:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2223:32:20"
															},
															"nativeSrc": "2220:52:20",
															"nodeType": "YulIf",
															"src": "2220:52:20"
														},
														{
															"nativeSrc": "2281:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2281:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2294:1:20",
																"nodeType": "YulLiteral",
																"src": "2294:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2285:5:20",
																	"nodeType": "YulTypedName",
																	"src": "2285:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2304:32:20",
															"nodeType": "YulAssignment",
															"src": "2304:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2326:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2313:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "2313:12:20"
																},
																"nativeSrc": "2313:23:20",
																"nodeType": "YulFunctionCall",
																"src": "2313:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2304:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "2304:5:20"
																}
															]
														},
														{
															"nativeSrc": "2345:15:20",
															"nodeType": "YulAssignment",
															"src": "2345:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "2355:5:20",
																"nodeType": "YulIdentifier",
																"src": "2355:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2345:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2345:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2140:226:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2176:9:20",
														"nodeType": "YulTypedName",
														"src": "2176:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2187:7:20",
														"nodeType": "YulTypedName",
														"src": "2187:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2199:6:20",
														"nodeType": "YulTypedName",
														"src": "2199:6:20",
														"type": ""
													}
												],
												"src": "2140:226:20"
											},
											{
												"body": {
													"nativeSrc": "2441:116:20",
													"nodeType": "YulBlock",
													"src": "2441:116:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2487:16:20",
																"nodeType": "YulBlock",
																"src": "2487:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2496:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2496:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2499:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2499:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2489:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:20"
																			},
																			"nativeSrc": "2489:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2489:12:20"
																		},
																		"nativeSrc": "2489:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2489:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2462:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2462:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2471:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2471:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2458:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2458:3:20"
																		},
																		"nativeSrc": "2458:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2458:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2483:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2454:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:20"
																},
																"nativeSrc": "2454:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2454:32:20"
															},
															"nativeSrc": "2451:52:20",
															"nodeType": "YulIf",
															"src": "2451:52:20"
														},
														{
															"nativeSrc": "2512:39:20",
															"nodeType": "YulAssignment",
															"src": "2512:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2541:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2541:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2522:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "2522:18:20"
																},
																"nativeSrc": "2522:29:20",
																"nodeType": "YulFunctionCall",
																"src": "2522:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2512:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2512:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "2371:186:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2407:9:20",
														"nodeType": "YulTypedName",
														"src": "2407:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2418:7:20",
														"nodeType": "YulTypedName",
														"src": "2418:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2430:6:20",
														"nodeType": "YulTypedName",
														"src": "2430:6:20",
														"type": ""
													}
												],
												"src": "2371:186:20"
											},
											{
												"body": {
													"nativeSrc": "2919:881:20",
													"nodeType": "YulBlock",
													"src": "2919:881:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2936:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2936:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2951:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2951:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2963:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2963:3:20",
																						"type": "",
																						"value": "248"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2968:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2968:3:20",
																						"type": "",
																						"value": "255"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2959:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2959:3:20"
																				},
																				"nativeSrc": "2959:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2959:13:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2947:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2947:3:20"
																		},
																		"nativeSrc": "2947:26:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2947:26:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2929:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2929:6:20"
																},
																"nativeSrc": "2929:45:20",
																"nodeType": "YulFunctionCall",
																"src": "2929:45:20"
															},
															"nativeSrc": "2929:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "2929:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2994:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2994:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3005:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3005:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2990:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2990:3:20"
																		},
																		"nativeSrc": "2990:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2990:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3010:3:20",
																		"nodeType": "YulLiteral",
																		"src": "3010:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2983:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2983:6:20"
																},
																"nativeSrc": "2983:31:20",
																"nodeType": "YulFunctionCall",
																"src": "2983:31:20"
															},
															"nativeSrc": "2983:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "2983:31:20"
														},
														{
															"nativeSrc": "3023:60:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3023:60:20",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "3055:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3055:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3067:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3067:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3078:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3078:3:20",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3063:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3063:3:20"
																		},
																		"nativeSrc": "3063:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3063:19:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3037:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3037:17:20"
																},
																"nativeSrc": "3037:46:20",
																"nodeType": "YulFunctionCall",
																"src": "3037:46:20"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nativeSrc": "3027:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3027:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3103:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3103:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3114:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3114:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3099:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3099:3:20"
																		},
																		"nativeSrc": "3099:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3099:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nativeSrc": "3123:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3123:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3131:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3131:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3119:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3119:3:20"
																		},
																		"nativeSrc": "3119:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3119:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3092:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:20"
																},
																"nativeSrc": "3092:50:20",
																"nodeType": "YulFunctionCall",
																"src": "3092:50:20"
															},
															"nativeSrc": "3092:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "3092:50:20"
														},
														{
															"nativeSrc": "3151:47:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3151:47:20",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "3183:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3183:6:20"
																	},
																	{
																		"name": "tail_1",
																		"nativeSrc": "3191:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3191:6:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3165:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3165:17:20"
																},
																"nativeSrc": "3165:33:20",
																"nodeType": "YulFunctionCall",
																"src": "3165:33:20"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nativeSrc": "3155:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3155:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3218:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3218:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3229:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3229:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3214:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3214:3:20"
																		},
																		"nativeSrc": "3214:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3214:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "3234:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3234:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3207:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3207:6:20"
																},
																"nativeSrc": "3207:34:20",
																"nodeType": "YulFunctionCall",
																"src": "3207:34:20"
															},
															"nativeSrc": "3207:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "3207:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3261:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3261:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3272:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3272:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3257:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3257:3:20"
																		},
																		"nativeSrc": "3257:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3257:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "3282:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3282:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3298:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3298:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3303:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3303:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3294:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3294:3:20"
																						},
																						"nativeSrc": "3294:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3294:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3307:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3307:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3290:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3290:3:20"
																				},
																				"nativeSrc": "3290:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3290:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3278:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3278:3:20"
																		},
																		"nativeSrc": "3278:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3278:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3250:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3250:6:20"
																},
																"nativeSrc": "3250:61:20",
																"nodeType": "YulFunctionCall",
																"src": "3250:61:20"
															},
															"nativeSrc": "3250:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "3250:61:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3331:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3331:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3342:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3342:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3327:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3327:3:20"
																		},
																		"nativeSrc": "3327:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3327:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "3348:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3348:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3320:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3320:6:20"
																},
																"nativeSrc": "3320:35:20",
																"nodeType": "YulFunctionCall",
																"src": "3320:35:20"
															},
															"nativeSrc": "3320:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "3320:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3375:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3375:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3386:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3386:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3371:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3371:3:20"
																		},
																		"nativeSrc": "3371:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3371:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nativeSrc": "3396:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3396:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3404:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3404:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3392:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3392:3:20"
																		},
																		"nativeSrc": "3392:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3392:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3364:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3364:6:20"
																},
																"nativeSrc": "3364:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3364:51:20"
															},
															"nativeSrc": "3364:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3364:51:20"
														},
														{
															"nativeSrc": "3424:17:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3424:17:20",
															"value": {
																"name": "tail_2",
																"nativeSrc": "3435:6:20",
																"nodeType": "YulIdentifier",
																"src": "3435:6:20"
															},
															"variables": [
																{
																	"name": "pos",
																	"nativeSrc": "3428:3:20",
																	"nodeType": "YulTypedName",
																	"src": "3428:3:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3450:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3450:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3470:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3470:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3464:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3464:5:20"
																},
																"nativeSrc": "3464:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3464:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3454:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3454:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3493:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3493:6:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3501:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3501:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3486:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3486:6:20"
																},
																"nativeSrc": "3486:22:20",
																"nodeType": "YulFunctionCall",
																"src": "3486:22:20"
															},
															"nativeSrc": "3486:22:20",
															"nodeType": "YulExpressionStatement",
															"src": "3486:22:20"
														},
														{
															"nativeSrc": "3517:22:20",
															"nodeType": "YulAssignment",
															"src": "3517:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3528:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3528:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3536:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3524:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3524:3:20"
																},
																"nativeSrc": "3524:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3524:15:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "3517:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3517:3:20"
																}
															]
														},
														{
															"nativeSrc": "3548:29:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3548:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3566:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3566:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3574:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3574:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3562:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3562:3:20"
																},
																"nativeSrc": "3562:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3562:15:20"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "3552:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3552:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3586:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3586:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "3595:1:20",
																"nodeType": "YulLiteral",
																"src": "3595:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "3590:1:20",
																	"nodeType": "YulTypedName",
																	"src": "3590:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3654:120:20",
																"nodeType": "YulBlock",
																"src": "3654:120:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3675:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3675:3:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nativeSrc": "3686:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "3686:6:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3680:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3680:5:20"
																					},
																					"nativeSrc": "3680:13:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3680:13:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3668:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3668:6:20"
																			},
																			"nativeSrc": "3668:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3668:26:20"
																		},
																		"nativeSrc": "3668:26:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "3668:26:20"
																	},
																	{
																		"nativeSrc": "3707:19:20",
																		"nodeType": "YulAssignment",
																		"src": "3707:19:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3718:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3718:3:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3723:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3723:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3714:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3714:3:20"
																			},
																			"nativeSrc": "3714:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3714:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "3707:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3707:3:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3739:25:20",
																		"nodeType": "YulAssignment",
																		"src": "3739:25:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "3753:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "3753:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3761:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3761:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3749:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3749:3:20"
																			},
																			"nativeSrc": "3749:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3749:15:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "3739:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3739:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "3616:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "3616:1:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3619:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3619:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3613:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3613:2:20"
																},
																"nativeSrc": "3613:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3613:13:20"
															},
															"nativeSrc": "3605:169:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3627:18:20",
																"nodeType": "YulBlock",
																"src": "3627:18:20",
																"statements": [
																	{
																		"nativeSrc": "3629:14:20",
																		"nodeType": "YulAssignment",
																		"src": "3629:14:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "3638:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "3638:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3641:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3641:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3634:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3634:3:20"
																			},
																			"nativeSrc": "3634:9:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3634:9:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "3629:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "3629:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3609:3:20",
																"nodeType": "YulBlock",
																"src": "3609:3:20",
																"statements": []
															},
															"src": "3605:169:20"
														},
														{
															"nativeSrc": "3783:11:20",
															"nodeType": "YulAssignment",
															"src": "3783:11:20",
															"value": {
																"name": "pos",
																"nativeSrc": "3791:3:20",
																"nodeType": "YulIdentifier",
																"src": "3791:3:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3783:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3783:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "2562:1238:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2840:9:20",
														"nodeType": "YulTypedName",
														"src": "2840:9:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "2851:6:20",
														"nodeType": "YulTypedName",
														"src": "2851:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "2859:6:20",
														"nodeType": "YulTypedName",
														"src": "2859:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "2867:6:20",
														"nodeType": "YulTypedName",
														"src": "2867:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2875:6:20",
														"nodeType": "YulTypedName",
														"src": "2875:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2883:6:20",
														"nodeType": "YulTypedName",
														"src": "2883:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2891:6:20",
														"nodeType": "YulTypedName",
														"src": "2891:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2899:6:20",
														"nodeType": "YulTypedName",
														"src": "2899:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2910:4:20",
														"nodeType": "YulTypedName",
														"src": "2910:4:20",
														"type": ""
													}
												],
												"src": "2562:1238:20"
											},
											{
												"body": {
													"nativeSrc": "3975:733:20",
													"nodeType": "YulBlock",
													"src": "3975:733:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "4022:16:20",
																"nodeType": "YulBlock",
																"src": "4022:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4031:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4031:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4034:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4034:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4024:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4024:6:20"
																			},
																			"nativeSrc": "4024:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4024:12:20"
																		},
																		"nativeSrc": "4024:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4024:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3996:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "3996:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4005:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4005:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3992:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3992:3:20"
																		},
																		"nativeSrc": "3992:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3992:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4017:3:20",
																		"nodeType": "YulLiteral",
																		"src": "4017:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3988:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3988:3:20"
																},
																"nativeSrc": "3988:33:20",
																"nodeType": "YulFunctionCall",
																"src": "3988:33:20"
															},
															"nativeSrc": "3985:53:20",
															"nodeType": "YulIf",
															"src": "3985:53:20"
														},
														{
															"nativeSrc": "4047:39:20",
															"nodeType": "YulAssignment",
															"src": "4047:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4076:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4076:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4057:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4057:18:20"
																},
																"nativeSrc": "4057:29:20",
																"nodeType": "YulFunctionCall",
																"src": "4057:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "4047:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4047:6:20"
																}
															]
														},
														{
															"nativeSrc": "4095:48:20",
															"nodeType": "YulAssignment",
															"src": "4095:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4128:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4128:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4139:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4139:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4124:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4124:3:20"
																		},
																		"nativeSrc": "4124:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4124:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4105:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4105:18:20"
																},
																"nativeSrc": "4105:38:20",
																"nodeType": "YulFunctionCall",
																"src": "4105:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4095:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4095:6:20"
																}
															]
														},
														{
															"nativeSrc": "4152:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4152:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4165:1:20",
																"nodeType": "YulLiteral",
																"src": "4165:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4156:5:20",
																	"nodeType": "YulTypedName",
																	"src": "4156:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4175:41:20",
															"nodeType": "YulAssignment",
															"src": "4175:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4201:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4201:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4212:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4212:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4197:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4197:3:20"
																		},
																		"nativeSrc": "4197:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4197:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4184:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4184:12:20"
																},
																"nativeSrc": "4184:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4184:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4175:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4175:5:20"
																}
															]
														},
														{
															"nativeSrc": "4225:15:20",
															"nodeType": "YulAssignment",
															"src": "4225:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "4235:5:20",
																"nodeType": "YulIdentifier",
																"src": "4235:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "4225:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4225:6:20"
																}
															]
														},
														{
															"nativeSrc": "4249:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4249:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4264:1:20",
																"nodeType": "YulLiteral",
																"src": "4264:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "4253:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4253:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4274:43:20",
															"nodeType": "YulAssignment",
															"src": "4274:43:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4302:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4302:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4313:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4313:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4298:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4298:3:20"
																		},
																		"nativeSrc": "4298:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4298:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4285:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4285:12:20"
																},
																"nativeSrc": "4285:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4285:32:20"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "4274:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4274:7:20"
																}
															]
														},
														{
															"nativeSrc": "4326:17:20",
															"nodeType": "YulAssignment",
															"src": "4326:17:20",
															"value": {
																"name": "value_1",
																"nativeSrc": "4336:7:20",
																"nodeType": "YulIdentifier",
																"src": "4336:7:20"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4326:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4326:6:20"
																}
															]
														},
														{
															"nativeSrc": "4352:48:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4352:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4384:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4384:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4395:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4395:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4380:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4380:3:20"
																		},
																		"nativeSrc": "4380:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4380:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4367:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4367:12:20"
																},
																"nativeSrc": "4367:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4367:33:20"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "4356:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4356:7:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4452:16:20",
																"nodeType": "YulBlock",
																"src": "4452:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4461:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4461:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4464:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4464:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4454:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4454:6:20"
																			},
																			"nativeSrc": "4454:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4454:12:20"
																		},
																		"nativeSrc": "4454:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4454:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_2",
																				"nativeSrc": "4422:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4422:7:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_2",
																						"nativeSrc": "4435:7:20",
																						"nodeType": "YulIdentifier",
																						"src": "4435:7:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4444:4:20",
																						"nodeType": "YulLiteral",
																						"src": "4444:4:20",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4431:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4431:3:20"
																				},
																				"nativeSrc": "4431:18:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4431:18:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "4419:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "4419:2:20"
																		},
																		"nativeSrc": "4419:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4419:31:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4412:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4412:6:20"
																},
																"nativeSrc": "4412:39:20",
																"nodeType": "YulFunctionCall",
																"src": "4412:39:20"
															},
															"nativeSrc": "4409:59:20",
															"nodeType": "YulIf",
															"src": "4409:59:20"
														},
														{
															"nativeSrc": "4477:17:20",
															"nodeType": "YulAssignment",
															"src": "4477:17:20",
															"value": {
																"name": "value_2",
																"nativeSrc": "4487:7:20",
																"nodeType": "YulIdentifier",
																"src": "4487:7:20"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4477:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4477:6:20"
																}
															]
														},
														{
															"nativeSrc": "4503:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4503:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4518:1:20",
																"nodeType": "YulLiteral",
																"src": "4518:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_3",
																	"nativeSrc": "4507:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4507:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4528:44:20",
															"nodeType": "YulAssignment",
															"src": "4528:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4556:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4556:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4567:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4567:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4552:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4552:3:20"
																		},
																		"nativeSrc": "4552:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4552:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4539:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4539:12:20"
																},
																"nativeSrc": "4539:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4539:33:20"
															},
															"variableNames": [
																{
																	"name": "value_3",
																	"nativeSrc": "4528:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4528:7:20"
																}
															]
														},
														{
															"nativeSrc": "4581:17:20",
															"nodeType": "YulAssignment",
															"src": "4581:17:20",
															"value": {
																"name": "value_3",
																"nativeSrc": "4591:7:20",
																"nodeType": "YulIdentifier",
																"src": "4591:7:20"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "4581:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4581:6:20"
																}
															]
														},
														{
															"nativeSrc": "4607:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4607:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4622:1:20",
																"nodeType": "YulLiteral",
																"src": "4622:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_4",
																	"nativeSrc": "4611:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4611:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4632:44:20",
															"nodeType": "YulAssignment",
															"src": "4632:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4660:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4660:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4671:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4671:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4656:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4656:3:20"
																		},
																		"nativeSrc": "4656:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4656:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4643:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4643:12:20"
																},
																"nativeSrc": "4643:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4643:33:20"
															},
															"variableNames": [
																{
																	"name": "value_4",
																	"nativeSrc": "4632:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4632:7:20"
																}
															]
														},
														{
															"nativeSrc": "4685:17:20",
															"nodeType": "YulAssignment",
															"src": "4685:17:20",
															"value": {
																"name": "value_4",
																"nativeSrc": "4695:7:20",
																"nodeType": "YulIdentifier",
																"src": "4695:7:20"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nativeSrc": "4685:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4685:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "3805:903:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3893:9:20",
														"nodeType": "YulTypedName",
														"src": "3893:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3904:7:20",
														"nodeType": "YulTypedName",
														"src": "3904:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3916:6:20",
														"nodeType": "YulTypedName",
														"src": "3916:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3924:6:20",
														"nodeType": "YulTypedName",
														"src": "3924:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3932:6:20",
														"nodeType": "YulTypedName",
														"src": "3932:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "3940:6:20",
														"nodeType": "YulTypedName",
														"src": "3940:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "3948:6:20",
														"nodeType": "YulTypedName",
														"src": "3948:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "3956:6:20",
														"nodeType": "YulTypedName",
														"src": "3956:6:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "3964:6:20",
														"nodeType": "YulTypedName",
														"src": "3964:6:20",
														"type": ""
													}
												],
												"src": "3805:903:20"
											},
											{
												"body": {
													"nativeSrc": "4800:173:20",
													"nodeType": "YulBlock",
													"src": "4800:173:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "4846:16:20",
																"nodeType": "YulBlock",
																"src": "4846:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4855:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4855:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4858:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4858:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4848:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4848:6:20"
																			},
																			"nativeSrc": "4848:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4848:12:20"
																		},
																		"nativeSrc": "4848:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4848:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4821:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4821:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4830:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4830:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4817:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4817:3:20"
																		},
																		"nativeSrc": "4817:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4817:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4842:2:20",
																		"nodeType": "YulLiteral",
																		"src": "4842:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4813:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4813:3:20"
																},
																"nativeSrc": "4813:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4813:32:20"
															},
															"nativeSrc": "4810:52:20",
															"nodeType": "YulIf",
															"src": "4810:52:20"
														},
														{
															"nativeSrc": "4871:39:20",
															"nodeType": "YulAssignment",
															"src": "4871:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4900:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4900:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4881:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4881:18:20"
																},
																"nativeSrc": "4881:29:20",
																"nodeType": "YulFunctionCall",
																"src": "4881:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "4871:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4871:6:20"
																}
															]
														},
														{
															"nativeSrc": "4919:48:20",
															"nodeType": "YulAssignment",
															"src": "4919:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4952:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4952:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4963:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4963:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4948:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4948:3:20"
																		},
																		"nativeSrc": "4948:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4948:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4929:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4929:18:20"
																},
																"nativeSrc": "4929:38:20",
																"nodeType": "YulFunctionCall",
																"src": "4929:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4919:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4919:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "4713:260:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4758:9:20",
														"nodeType": "YulTypedName",
														"src": "4758:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4769:7:20",
														"nodeType": "YulTypedName",
														"src": "4769:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4781:6:20",
														"nodeType": "YulTypedName",
														"src": "4781:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4789:6:20",
														"nodeType": "YulTypedName",
														"src": "4789:6:20",
														"type": ""
													}
												],
												"src": "4713:260:20"
											},
											{
												"body": {
													"nativeSrc": "5033:325:20",
													"nodeType": "YulBlock",
													"src": "5033:325:20",
													"statements": [
														{
															"nativeSrc": "5043:22:20",
															"nodeType": "YulAssignment",
															"src": "5043:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5057:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5057:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "5060:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5060:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "5053:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5053:3:20"
																},
																"nativeSrc": "5053:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5053:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "5043:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5043:6:20"
																}
															]
														},
														{
															"nativeSrc": "5074:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5074:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5104:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5104:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5110:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5110:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5100:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5100:3:20"
																},
																"nativeSrc": "5100:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5100:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "5078:18:20",
																	"nodeType": "YulTypedName",
																	"src": "5078:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5151:31:20",
																"nodeType": "YulBlock",
																"src": "5151:31:20",
																"statements": [
																	{
																		"nativeSrc": "5153:27:20",
																		"nodeType": "YulAssignment",
																		"src": "5153:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "5167:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5167:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5175:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5175:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5163:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5163:3:20"
																			},
																			"nativeSrc": "5163:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5163:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "5153:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5153:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5131:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5131:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5124:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5124:6:20"
																},
																"nativeSrc": "5124:26:20",
																"nodeType": "YulFunctionCall",
																"src": "5124:26:20"
															},
															"nativeSrc": "5121:61:20",
															"nodeType": "YulIf",
															"src": "5121:61:20"
														},
														{
															"body": {
																"nativeSrc": "5241:111:20",
																"nodeType": "YulBlock",
																"src": "5241:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5262:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5262:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "5269:3:20",
																							"nodeType": "YulLiteral",
																							"src": "5269:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5274:10:20",
																							"nodeType": "YulLiteral",
																							"src": "5274:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5265:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "5265:3:20"
																					},
																					"nativeSrc": "5265:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5265:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5255:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5255:6:20"
																			},
																			"nativeSrc": "5255:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5255:31:20"
																		},
																		"nativeSrc": "5255:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5255:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5306:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5306:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5309:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5309:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5299:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5299:6:20"
																			},
																			"nativeSrc": "5299:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5299:15:20"
																		},
																		"nativeSrc": "5299:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5299:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5334:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5334:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5337:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5337:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5327:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5327:6:20"
																			},
																			"nativeSrc": "5327:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5327:15:20"
																		},
																		"nativeSrc": "5327:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5327:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5197:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5197:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "5220:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5220:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5228:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5228:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "5217:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "5217:2:20"
																		},
																		"nativeSrc": "5217:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5217:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "5194:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5194:2:20"
																},
																"nativeSrc": "5194:38:20",
																"nodeType": "YulFunctionCall",
																"src": "5194:38:20"
															},
															"nativeSrc": "5191:161:20",
															"nodeType": "YulIf",
															"src": "5191:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "4978:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5013:4:20",
														"nodeType": "YulTypedName",
														"src": "5013:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "5022:6:20",
														"nodeType": "YulTypedName",
														"src": "5022:6:20",
														"type": ""
													}
												],
												"src": "4978:380:20"
											},
											{
												"body": {
													"nativeSrc": "5395:95:20",
													"nodeType": "YulBlock",
													"src": "5395:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5412:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5412:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5419:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5419:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5424:10:20",
																				"nodeType": "YulLiteral",
																				"src": "5424:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5415:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5415:3:20"
																		},
																		"nativeSrc": "5415:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5415:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5405:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5405:6:20"
																},
																"nativeSrc": "5405:31:20",
																"nodeType": "YulFunctionCall",
																"src": "5405:31:20"
															},
															"nativeSrc": "5405:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "5405:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5452:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5452:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5455:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5455:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5445:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5445:6:20"
																},
																"nativeSrc": "5445:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5445:15:20"
															},
															"nativeSrc": "5445:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5445:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5476:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5476:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5479:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5479:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5469:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5469:6:20"
																},
																"nativeSrc": "5469:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5469:15:20"
															},
															"nativeSrc": "5469:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5469:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "5363:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "5363:127:20"
											},
											{
												"body": {
													"nativeSrc": "5736:346:20",
													"nodeType": "YulBlock",
													"src": "5736:346:20",
													"statements": [
														{
															"nativeSrc": "5746:27:20",
															"nodeType": "YulAssignment",
															"src": "5746:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5758:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5758:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5769:3:20",
																		"nodeType": "YulLiteral",
																		"src": "5769:3:20",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5754:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5754:3:20"
																},
																"nativeSrc": "5754:19:20",
																"nodeType": "YulFunctionCall",
																"src": "5754:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5746:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "5746:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5789:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5789:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "5800:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5800:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5782:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5782:6:20"
																},
																"nativeSrc": "5782:25:20",
																"nodeType": "YulFunctionCall",
																"src": "5782:25:20"
															},
															"nativeSrc": "5782:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "5782:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5827:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5827:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5838:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5838:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5823:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5823:3:20"
																		},
																		"nativeSrc": "5823:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5823:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "5847:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5847:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5863:3:20",
																								"nodeType": "YulLiteral",
																								"src": "5863:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5868:1:20",
																								"nodeType": "YulLiteral",
																								"src": "5868:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5859:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5859:3:20"
																						},
																						"nativeSrc": "5859:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5859:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5872:1:20",
																						"nodeType": "YulLiteral",
																						"src": "5872:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5855:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5855:3:20"
																				},
																				"nativeSrc": "5855:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5855:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5843:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5843:3:20"
																		},
																		"nativeSrc": "5843:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5843:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5816:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5816:6:20"
																},
																"nativeSrc": "5816:60:20",
																"nodeType": "YulFunctionCall",
																"src": "5816:60:20"
															},
															"nativeSrc": "5816:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "5816:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5896:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5896:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5907:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5907:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5892:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5892:3:20"
																		},
																		"nativeSrc": "5892:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5892:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "5916:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5916:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5932:3:20",
																								"nodeType": "YulLiteral",
																								"src": "5932:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5937:1:20",
																								"nodeType": "YulLiteral",
																								"src": "5937:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5928:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5928:3:20"
																						},
																						"nativeSrc": "5928:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5928:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5941:1:20",
																						"nodeType": "YulLiteral",
																						"src": "5941:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5924:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5924:3:20"
																				},
																				"nativeSrc": "5924:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5924:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5912:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5912:3:20"
																		},
																		"nativeSrc": "5912:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5912:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5885:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5885:6:20"
																},
																"nativeSrc": "5885:60:20",
																"nodeType": "YulFunctionCall",
																"src": "5885:60:20"
															},
															"nativeSrc": "5885:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "5885:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5965:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5965:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5976:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5976:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5961:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5961:3:20"
																		},
																		"nativeSrc": "5961:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5961:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "5981:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5981:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5954:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5954:6:20"
																},
																"nativeSrc": "5954:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5954:34:20"
															},
															"nativeSrc": "5954:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5954:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6008:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6008:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6019:3:20",
																				"nodeType": "YulLiteral",
																				"src": "6019:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6004:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6004:3:20"
																		},
																		"nativeSrc": "6004:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6004:19:20"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "6025:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6025:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5997:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5997:6:20"
																},
																"nativeSrc": "5997:35:20",
																"nodeType": "YulFunctionCall",
																"src": "5997:35:20"
															},
															"nativeSrc": "5997:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "5997:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6052:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6052:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6063:3:20",
																				"nodeType": "YulLiteral",
																				"src": "6063:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6048:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6048:3:20"
																		},
																		"nativeSrc": "6048:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6048:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "6069:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6069:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6041:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6041:6:20"
																},
																"nativeSrc": "6041:35:20",
																"nodeType": "YulFunctionCall",
																"src": "6041:35:20"
															},
															"nativeSrc": "6041:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "6041:35:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5495:587:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5665:9:20",
														"nodeType": "YulTypedName",
														"src": "5665:9:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "5676:6:20",
														"nodeType": "YulTypedName",
														"src": "5676:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "5684:6:20",
														"nodeType": "YulTypedName",
														"src": "5684:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "5692:6:20",
														"nodeType": "YulTypedName",
														"src": "5692:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5700:6:20",
														"nodeType": "YulTypedName",
														"src": "5700:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5708:6:20",
														"nodeType": "YulTypedName",
														"src": "5708:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5716:6:20",
														"nodeType": "YulTypedName",
														"src": "5716:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5727:4:20",
														"nodeType": "YulTypedName",
														"src": "5727:4:20",
														"type": ""
													}
												],
												"src": "5495:587:20"
											},
											{
												"body": {
													"nativeSrc": "6216:171:20",
													"nodeType": "YulBlock",
													"src": "6216:171:20",
													"statements": [
														{
															"nativeSrc": "6226:26:20",
															"nodeType": "YulAssignment",
															"src": "6226:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6238:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6238:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6249:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6249:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6234:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6234:3:20"
																},
																"nativeSrc": "6234:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6234:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6226:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6226:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6268:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6268:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6283:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6283:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6299:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6299:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6304:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6304:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6295:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6295:3:20"
																						},
																						"nativeSrc": "6295:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6295:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6308:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6308:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6291:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6291:3:20"
																				},
																				"nativeSrc": "6291:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6291:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6279:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6279:3:20"
																		},
																		"nativeSrc": "6279:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6279:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6261:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6261:6:20"
																},
																"nativeSrc": "6261:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6261:51:20"
															},
															"nativeSrc": "6261:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6261:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6332:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6332:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6343:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6343:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6328:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6328:3:20"
																		},
																		"nativeSrc": "6328:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6328:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "6352:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6352:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6368:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6368:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6373:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6373:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6364:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6364:3:20"
																						},
																						"nativeSrc": "6364:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6364:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6377:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6377:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6360:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6360:3:20"
																				},
																				"nativeSrc": "6360:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6360:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6348:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6348:3:20"
																		},
																		"nativeSrc": "6348:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6348:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6321:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6321:6:20"
																},
																"nativeSrc": "6321:60:20",
																"nodeType": "YulFunctionCall",
																"src": "6321:60:20"
															},
															"nativeSrc": "6321:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "6321:60:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "6087:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6177:9:20",
														"nodeType": "YulTypedName",
														"src": "6177:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6188:6:20",
														"nodeType": "YulTypedName",
														"src": "6188:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6196:6:20",
														"nodeType": "YulTypedName",
														"src": "6196:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6207:4:20",
														"nodeType": "YulTypedName",
														"src": "6207:4:20",
														"type": ""
													}
												],
												"src": "6087:300:20"
											},
											{
												"body": {
													"nativeSrc": "6549:188:20",
													"nodeType": "YulBlock",
													"src": "6549:188:20",
													"statements": [
														{
															"nativeSrc": "6559:26:20",
															"nodeType": "YulAssignment",
															"src": "6559:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6571:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6571:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6582:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6582:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6567:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6567:3:20"
																},
																"nativeSrc": "6567:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6567:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6559:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6559:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6601:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6601:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6616:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6616:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6632:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6632:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6637:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6637:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6628:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6628:3:20"
																						},
																						"nativeSrc": "6628:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6628:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6641:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6641:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6624:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6624:3:20"
																				},
																				"nativeSrc": "6624:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6624:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6612:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6612:3:20"
																		},
																		"nativeSrc": "6612:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6612:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6594:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6594:6:20"
																},
																"nativeSrc": "6594:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6594:51:20"
															},
															"nativeSrc": "6594:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6594:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6665:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6665:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6676:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6676:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6661:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6661:3:20"
																		},
																		"nativeSrc": "6661:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6661:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6681:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6681:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6654:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6654:6:20"
																},
																"nativeSrc": "6654:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6654:34:20"
															},
															"nativeSrc": "6654:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6654:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6708:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6708:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6719:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6719:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6704:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6704:3:20"
																		},
																		"nativeSrc": "6704:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6704:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6724:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6724:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6697:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6697:6:20"
																},
																"nativeSrc": "6697:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6697:34:20"
															},
															"nativeSrc": "6697:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6697:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6392:345:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6502:9:20",
														"nodeType": "YulTypedName",
														"src": "6502:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6513:6:20",
														"nodeType": "YulTypedName",
														"src": "6513:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6521:6:20",
														"nodeType": "YulTypedName",
														"src": "6521:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6529:6:20",
														"nodeType": "YulTypedName",
														"src": "6529:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6540:4:20",
														"nodeType": "YulTypedName",
														"src": "6540:4:20",
														"type": ""
													}
												],
												"src": "6392:345:20"
											},
											{
												"body": {
													"nativeSrc": "6843:102:20",
													"nodeType": "YulBlock",
													"src": "6843:102:20",
													"statements": [
														{
															"nativeSrc": "6853:26:20",
															"nodeType": "YulAssignment",
															"src": "6853:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6865:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6865:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6876:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6876:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6861:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6861:3:20"
																},
																"nativeSrc": "6861:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6861:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6853:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6853:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6895:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6895:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6910:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6910:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6926:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6926:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6931:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6931:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6922:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6922:3:20"
																						},
																						"nativeSrc": "6922:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6922:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6935:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6935:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6918:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6918:3:20"
																				},
																				"nativeSrc": "6918:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6918:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6906:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6906:3:20"
																		},
																		"nativeSrc": "6906:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6906:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6888:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6888:6:20"
																},
																"nativeSrc": "6888:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6888:51:20"
															},
															"nativeSrc": "6888:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6888:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "6742:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6812:9:20",
														"nodeType": "YulTypedName",
														"src": "6812:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6823:6:20",
														"nodeType": "YulTypedName",
														"src": "6823:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6834:4:20",
														"nodeType": "YulTypedName",
														"src": "6834:4:20",
														"type": ""
													}
												],
												"src": "6742:203:20"
											},
											{
												"body": {
													"nativeSrc": "6998:174:20",
													"nodeType": "YulBlock",
													"src": "6998:174:20",
													"statements": [
														{
															"nativeSrc": "7008:16:20",
															"nodeType": "YulAssignment",
															"src": "7008:16:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7019:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7019:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "7022:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7022:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7015:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7015:3:20"
																},
																"nativeSrc": "7015:9:20",
																"nodeType": "YulFunctionCall",
																"src": "7015:9:20"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "7008:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7008:3:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7055:111:20",
																"nodeType": "YulBlock",
																"src": "7055:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7076:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7076:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7083:3:20",
																							"nodeType": "YulLiteral",
																							"src": "7083:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "7088:10:20",
																							"nodeType": "YulLiteral",
																							"src": "7088:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "7079:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "7079:3:20"
																					},
																					"nativeSrc": "7079:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "7079:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7069:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7069:6:20"
																			},
																			"nativeSrc": "7069:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7069:31:20"
																		},
																		"nativeSrc": "7069:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7069:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7120:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7120:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7123:4:20",
																					"nodeType": "YulLiteral",
																					"src": "7123:4:20",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7113:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7113:6:20"
																			},
																			"nativeSrc": "7113:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7113:15:20"
																		},
																		"nativeSrc": "7113:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7113:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7148:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7148:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7151:4:20",
																					"nodeType": "YulLiteral",
																					"src": "7151:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7141:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7141:6:20"
																			},
																			"nativeSrc": "7141:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7141:15:20"
																		},
																		"nativeSrc": "7141:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7141:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7039:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7039:1:20"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "7042:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "7042:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7036:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "7036:2:20"
																},
																"nativeSrc": "7036:10:20",
																"nodeType": "YulFunctionCall",
																"src": "7036:10:20"
															},
															"nativeSrc": "7033:133:20",
															"nodeType": "YulIf",
															"src": "7033:133:20"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6950:222:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6981:1:20",
														"nodeType": "YulTypedName",
														"src": "6981:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6984:1:20",
														"nodeType": "YulTypedName",
														"src": "6984:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6990:3:20",
														"nodeType": "YulTypedName",
														"src": "6990:3:20",
														"type": ""
													}
												],
												"src": "6950:222:20"
											},
											{
												"body": {
													"nativeSrc": "7390:276:20",
													"nodeType": "YulBlock",
													"src": "7390:276:20",
													"statements": [
														{
															"nativeSrc": "7400:27:20",
															"nodeType": "YulAssignment",
															"src": "7400:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7412:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7412:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7423:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7423:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7408:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7408:3:20"
																},
																"nativeSrc": "7408:19:20",
																"nodeType": "YulFunctionCall",
																"src": "7408:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7400:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7400:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7443:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7443:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7454:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7454:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7436:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7436:6:20"
																},
																"nativeSrc": "7436:25:20",
																"nodeType": "YulFunctionCall",
																"src": "7436:25:20"
															},
															"nativeSrc": "7436:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "7436:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7481:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7481:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7492:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7492:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7477:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7477:3:20"
																		},
																		"nativeSrc": "7477:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7477:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "7497:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7497:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7470:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7470:6:20"
																},
																"nativeSrc": "7470:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7470:34:20"
															},
															"nativeSrc": "7470:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7470:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7524:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7524:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7535:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7535:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7520:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7520:3:20"
																		},
																		"nativeSrc": "7520:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7520:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7540:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7540:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7513:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7513:6:20"
																},
																"nativeSrc": "7513:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7513:34:20"
															},
															"nativeSrc": "7513:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7513:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7567:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7567:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7578:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7578:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7563:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7563:3:20"
																		},
																		"nativeSrc": "7563:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7563:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "7583:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7583:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7556:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7556:6:20"
																},
																"nativeSrc": "7556:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7556:34:20"
															},
															"nativeSrc": "7556:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7556:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7610:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7610:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7621:3:20",
																				"nodeType": "YulLiteral",
																				"src": "7621:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7606:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7606:3:20"
																		},
																		"nativeSrc": "7606:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7606:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "7631:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7631:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7647:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7647:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7652:1:20",
																								"nodeType": "YulLiteral",
																								"src": "7652:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7643:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7643:3:20"
																						},
																						"nativeSrc": "7643:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7643:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7656:1:20",
																						"nodeType": "YulLiteral",
																						"src": "7656:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7639:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7639:3:20"
																				},
																				"nativeSrc": "7639:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7639:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7627:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7627:3:20"
																		},
																		"nativeSrc": "7627:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7627:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7599:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7599:6:20"
																},
																"nativeSrc": "7599:61:20",
																"nodeType": "YulFunctionCall",
																"src": "7599:61:20"
															},
															"nativeSrc": "7599:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "7599:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "7177:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7327:9:20",
														"nodeType": "YulTypedName",
														"src": "7327:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7338:6:20",
														"nodeType": "YulTypedName",
														"src": "7338:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7346:6:20",
														"nodeType": "YulTypedName",
														"src": "7346:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7354:6:20",
														"nodeType": "YulTypedName",
														"src": "7354:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7362:6:20",
														"nodeType": "YulTypedName",
														"src": "7362:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7370:6:20",
														"nodeType": "YulTypedName",
														"src": "7370:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7381:4:20",
														"nodeType": "YulTypedName",
														"src": "7381:4:20",
														"type": ""
													}
												],
												"src": "7177:489:20"
											},
											{
												"body": {
													"nativeSrc": "7852:217:20",
													"nodeType": "YulBlock",
													"src": "7852:217:20",
													"statements": [
														{
															"nativeSrc": "7862:27:20",
															"nodeType": "YulAssignment",
															"src": "7862:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7874:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7874:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7885:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7885:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7870:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7870:3:20"
																},
																"nativeSrc": "7870:19:20",
																"nodeType": "YulFunctionCall",
																"src": "7870:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7862:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7862:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7905:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7905:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7916:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7916:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7898:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7898:6:20"
																},
																"nativeSrc": "7898:25:20",
																"nodeType": "YulFunctionCall",
																"src": "7898:25:20"
															},
															"nativeSrc": "7898:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "7898:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7943:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7943:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7954:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7954:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7939:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7939:3:20"
																		},
																		"nativeSrc": "7939:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7939:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "7963:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7963:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7971:4:20",
																				"nodeType": "YulLiteral",
																				"src": "7971:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7959:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7959:3:20"
																		},
																		"nativeSrc": "7959:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7959:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7932:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7932:6:20"
																},
																"nativeSrc": "7932:45:20",
																"nodeType": "YulFunctionCall",
																"src": "7932:45:20"
															},
															"nativeSrc": "7932:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "7932:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7997:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7997:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8008:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8008:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7993:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7993:3:20"
																		},
																		"nativeSrc": "7993:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7993:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "8013:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8013:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7986:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7986:6:20"
																},
																"nativeSrc": "7986:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7986:34:20"
															},
															"nativeSrc": "7986:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7986:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8040:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8040:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8051:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8051:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8036:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8036:3:20"
																		},
																		"nativeSrc": "8036:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8036:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "8056:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8056:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8029:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8029:6:20"
																},
																"nativeSrc": "8029:34:20",
																"nodeType": "YulFunctionCall",
																"src": "8029:34:20"
															},
															"nativeSrc": "8029:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "8029:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "7671:398:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7797:9:20",
														"nodeType": "YulTypedName",
														"src": "7797:9:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7808:6:20",
														"nodeType": "YulTypedName",
														"src": "7808:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7816:6:20",
														"nodeType": "YulTypedName",
														"src": "7816:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7824:6:20",
														"nodeType": "YulTypedName",
														"src": "7824:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7832:6:20",
														"nodeType": "YulTypedName",
														"src": "7832:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7843:4:20",
														"nodeType": "YulTypedName",
														"src": "7843:4:20",
														"type": ""
													}
												],
												"src": "7671:398:20"
											},
											{
												"body": {
													"nativeSrc": "8106:95:20",
													"nodeType": "YulBlock",
													"src": "8106:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8123:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8123:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8130:3:20",
																				"nodeType": "YulLiteral",
																				"src": "8130:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8135:10:20",
																				"nodeType": "YulLiteral",
																				"src": "8135:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "8126:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8126:3:20"
																		},
																		"nativeSrc": "8126:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8126:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8116:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8116:6:20"
																},
																"nativeSrc": "8116:31:20",
																"nodeType": "YulFunctionCall",
																"src": "8116:31:20"
															},
															"nativeSrc": "8116:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "8116:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8163:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8163:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8166:4:20",
																		"nodeType": "YulLiteral",
																		"src": "8166:4:20",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8156:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8156:6:20"
																},
																"nativeSrc": "8156:15:20",
																"nodeType": "YulFunctionCall",
																"src": "8156:15:20"
															},
															"nativeSrc": "8156:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "8156:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8187:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8187:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8190:4:20",
																		"nodeType": "YulLiteral",
																		"src": "8190:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8180:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8180:6:20"
																},
																"nativeSrc": "8180:15:20",
																"nodeType": "YulFunctionCall",
																"src": "8180:15:20"
															},
															"nativeSrc": "8180:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "8180:15:20"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "8074:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "8074:127:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 160))\n        value5 := value_3\n        let value_4 := 0\n        value_4 := calldataload(add(headStart, 192))\n        value6 := value_4\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2167": [
									{
										"length": 32,
										"start": 1610
									}
								],
								"2169": [
									{
										"length": 32,
										"start": 1568
									}
								],
								"2171": [
									{
										"length": 32,
										"start": 1526
									}
								],
								"2173": [
									{
										"length": 32,
										"start": 1691
									}
								],
								"2175": [
									{
										"length": 32,
										"start": 1731
									}
								],
								"2178": [
									{
										"length": 32,
										"start": 1922
									}
								],
								"2181": [
									{
										"length": 32,
										"start": 1967
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b50600436106100f0575f3560e01c806342966c681161009357806395d89b411161006357806395d89b41146101ef578063a9059cbb146101f7578063d505accf1461020a578063dd62ed3e1461021d575f80fd5b806342966c681461018657806370a08231146101995780637ecebe00146101c157806384b0196e146101d4575f80fd5b806323b872dd116100ce57806323b872dd14610147578063313ce5671461015a5780633644e5151461016957806340c10f1914610171575f80fd5b806306fdde03146100f4578063095ea7b31461011257806318160ddd14610135575b5f80fd5b6100fc610255565b6040516101099190610ce0565b60405180910390f35b610125610120366004610d14565b6102e5565b6040519015158152602001610109565b6002545b604051908152602001610109565b610125610155366004610d3c565b6102fe565b60405160128152602001610109565b610139610321565b61018461017f366004610d14565b61032f565b005b610184610194366004610d76565b61033d565b6101396101a7366004610d8d565b6001600160a01b03165f9081526020819052604090205490565b6101396101cf366004610d8d565b61034a565b6101dc610367565b6040516101099796959493929190610da6565b6100fc6103a9565b610125610205366004610d14565b6103b8565b610184610218366004610e3c565b6103c5565b61013961022b366004610ea9565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b60606003805461026490610eda565b80601f016020809104026020016040519081016040528092919081815260200182805461029090610eda565b80156102db5780601f106102b2576101008083540402835291602001916102db565b820191905f5260205f20905b8154815290600101906020018083116102be57829003601f168201915b5050505050905090565b5f336102f2818585610500565b60019150505b92915050565b5f3361030b858285610512565b61031685858561058d565b506001949350505050565b5f61032a6105ea565b905090565b6103398282610713565b5050565b6103473382610747565b50565b6001600160a01b0381165f908152600760205260408120546102f8565b5f6060805f805f606061037861077b565b6103806107a8565b604080515f80825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461026490610eda565b5f336102f281858561058d565b834211156103ee5760405163313c898160e11b8152600481018590526024015b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886104398c6001600160a01b03165f90815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610493826107d5565b90505f6104a282878787610801565b9050896001600160a01b0316816001600160a01b0316146104e9576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016103e5565b6104f48a8a8a610500565b50505050505050505050565b61050d838383600161082d565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610587578181101561057957604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103e5565b61058784848484035f61082d565b50505050565b6001600160a01b0383166105b657604051634b637e8f60e11b81525f60048201526024016103e5565b6001600160a01b0382166105df5760405163ec442f0560e01b81525f60048201526024016103e5565b61050d8383836108ff565b5f306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561064257507f000000000000000000000000000000000000000000000000000000000000000046145b1561066c57507f000000000000000000000000000000000000000000000000000000000000000090565b61032a604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a08201525f9060c00160405160208183030381529060405280519060200120905090565b6001600160a01b03821661073c5760405163ec442f0560e01b81525f60048201526024016103e5565b6103395f83836108ff565b6001600160a01b03821661077057604051634b637e8f60e11b81525f60048201526024016103e5565b610339825f836108ff565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006005610a25565b606061032a7f00000000000000000000000000000000000000000000000000000000000000006006610a25565b5f6102f86107e16105ea565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061081188888888610ace565b9250925092506108218282610b96565b50909695505050505050565b6001600160a01b0384166108565760405163e602df0560e01b81525f60048201526024016103e5565b6001600160a01b03831661087f57604051634a1406b160e11b81525f60048201526024016103e5565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561058757826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108f191815260200190565b60405180910390a350505050565b6001600160a01b038316610929578060025f82825461091e9190610f12565b909155506109999050565b6001600160a01b0383165f908152602081905260409020548181101561097b5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103e5565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166109b5576002805482900390556109d3565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610a1891815260200190565b60405180910390a3505050565b606060ff8314610a3f57610a3883610c4e565b90506102f8565b818054610a4b90610eda565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7790610eda565b8015610ac25780601f10610a9957610100808354040283529160200191610ac2565b820191905f5260205f20905b815481529060010190602001808311610aa557829003601f168201915b505050505090506102f8565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610b0757505f91506003905082610b8c565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610b58573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116610b8357505f925060019150829050610b8c565b92505f91508190505b9450945094915050565b5f826003811115610ba957610ba9610f31565b03610bb2575050565b6001826003811115610bc657610bc6610f31565b03610be45760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610bf857610bf8610f31565b03610c195760405163fce698f760e01b8152600481018290526024016103e5565b6003826003811115610c2d57610c2d610f31565b03610339576040516335e2f38360e21b8152600481018290526024016103e5565b60605f610c5a83610c8b565b6040805160208082528183019092529192505f91906020820181803683375050509182525060208101929092525090565b5f60ff8216601f8111156102f857604051632cd44ac360e21b815260040160405180910390fd5b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610cf26020830184610cb2565b9392505050565b80356001600160a01b0381168114610d0f575f80fd5b919050565b5f8060408385031215610d25575f80fd5b610d2e83610cf9565b946020939093013593505050565b5f805f60608486031215610d4e575f80fd5b610d5784610cf9565b9250610d6560208501610cf9565b929592945050506040919091013590565b5f60208284031215610d86575f80fd5b5035919050565b5f60208284031215610d9d575f80fd5b610cf282610cf9565b60ff60f81b8816815260e060208201525f610dc460e0830189610cb2565b8281036040840152610dd68189610cb2565b606084018890526001600160a01b038716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015610e2b578351835260209384019390920191600101610e0d565b50909b9a5050505050505050505050565b5f805f805f805f60e0888a031215610e52575f80fd5b610e5b88610cf9565b9650610e6960208901610cf9565b95506040880135945060608801359350608088013560ff81168114610e8c575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610eba575f80fd5b610ec383610cf9565b9150610ed160208401610cf9565b90509250929050565b600181811c90821680610eee57607f821691505b602082108103610f0c57634e487b7160e01b5f52602260045260245ffd5b50919050565b808201808211156102f857634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52602160045260245ffdfea2646970667358221220af2c63efd3785c13b7337bdf1b9b3ae13750f3b4e38814f2701ad3c42bc6cd2064736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF0 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x42966C68 GT PUSH2 0x93 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x63 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x21D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42966C68 EQ PUSH2 0x186 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x199 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1C1 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xCE JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x169 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x171 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xF4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x112 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x135 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFC PUSH2 0x255 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP2 SWAP1 PUSH2 0xCE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x125 PUSH2 0x120 CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x2E5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x155 CALLDATASIZE PUSH1 0x4 PUSH2 0xD3C JUMP JUMPDEST PUSH2 0x2FE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x109 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x321 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x32F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x184 PUSH2 0x194 CALLDATASIZE PUSH1 0x4 PUSH2 0xD76 JUMP JUMPDEST PUSH2 0x33D JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x1CF CALLDATASIZE PUSH1 0x4 PUSH2 0xD8D JUMP JUMPDEST PUSH2 0x34A JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x367 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x109 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0xFC PUSH2 0x3A9 JUMP JUMPDEST PUSH2 0x125 PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xD14 JUMP JUMPDEST PUSH2 0x3B8 JUMP JUMPDEST PUSH2 0x184 PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0xE3C JUMP JUMPDEST PUSH2 0x3C5 JUMP JUMPDEST PUSH2 0x139 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x290 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2DB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B2 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2DB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2BE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x500 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x30B DUP6 DUP3 DUP6 PUSH2 0x512 JUMP JUMPDEST PUSH2 0x316 DUP6 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x32A PUSH2 0x5EA JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x339 DUP3 DUP3 PUSH2 0x713 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x347 CALLER DUP3 PUSH2 0x747 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x2F8 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x378 PUSH2 0x77B JUMP JUMPDEST PUSH2 0x380 PUSH2 0x7A8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x264 SWAP1 PUSH2 0xEDA JUMP JUMPDEST PUSH0 CALLER PUSH2 0x2F2 DUP2 DUP6 DUP6 PUSH2 0x58D JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x3EE JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x439 DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x493 DUP3 PUSH2 0x7D5 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x4A2 DUP3 DUP8 DUP8 DUP8 PUSH2 0x801 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x4E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x4F4 DUP11 DUP11 DUP11 PUSH2 0x500 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x50D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x82D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x587 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x579 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x587 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x82D JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5B6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5DF JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x50D DUP4 DUP4 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x642 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x66C JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x32A PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x73C JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x339 PUSH0 DUP4 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x770 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH2 0x339 DUP3 PUSH0 DUP4 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x5 PUSH2 0xA25 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x32A PUSH32 0x0 PUSH1 0x6 PUSH2 0xA25 JUMP JUMPDEST PUSH0 PUSH2 0x2F8 PUSH2 0x7E1 PUSH2 0x5EA JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x811 DUP9 DUP9 DUP9 DUP9 PUSH2 0xACE JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x821 DUP3 DUP3 PUSH2 0xB96 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x856 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x87F JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x587 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x8F1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x929 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x91E SWAP2 SWAP1 PUSH2 0xF12 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x999 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x97B JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9B5 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xA18 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xA3F JUMPI PUSH2 0xA38 DUP4 PUSH2 0xC4E JUMP JUMPDEST SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xA4B SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xA77 SWAP1 PUSH2 0xEDA JUMP JUMPDEST DUP1 ISZERO PUSH2 0xAC2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xA99 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xAC2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAA5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x2F8 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xB07 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xB58 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xB83 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xB8C JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBA9 JUMPI PUSH2 0xBA9 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xBB2 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBC6 JUMPI PUSH2 0xBC6 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xBE4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xBF8 JUMPI PUSH2 0xBF8 PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0xC19 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xC2D JUMPI PUSH2 0xC2D PUSH2 0xF31 JUMP JUMPDEST SUB PUSH2 0x339 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3E5 JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xC5A DUP4 PUSH2 0xC8B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x2F8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xCF2 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xCB2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xD0F JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xD25 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD2E DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xD4E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD57 DUP5 PUSH2 0xCF9 JUMP JUMPDEST SWAP3 POP PUSH2 0xD65 PUSH1 0x20 DUP6 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD86 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD9D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xCF2 DUP3 PUSH2 0xCF9 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xDC4 PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xCB2 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xDD6 DUP2 DUP10 PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xE2B JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xE0D JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xE52 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE5B DUP9 PUSH2 0xCF9 JUMP JUMPDEST SWAP7 POP PUSH2 0xE69 PUSH1 0x20 DUP10 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xE8C JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xEBA JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xEC3 DUP4 PUSH2 0xCF9 JUMP JUMPDEST SWAP2 POP PUSH2 0xED1 PUSH1 0x20 DUP5 ADD PUSH2 0xCF9 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xEEE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF0C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF 0x2C PUSH4 0xEFD3785C SGT 0xB7 CALLER PUSH28 0xDF1B9B3AE13750F3B4E38814F2701AD3C42BC6CD2064736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "381:1041:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1181:14:20;;1174:22;1156:41;;1144:2;1129:18;4293:186:3;1016:187:20;3144:97:3;3222:12;;3144:97;;;1354:25:20;;;1342:2;1327:18;3144:97:3;1208:177:20;5039:244:3;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1911:36:20;;1899:2;1884:18;3002:82:3;1769:184:20;2656:112:5;;;:::i;1050:85:19:-;;;;;;:::i;:::-;;:::i;:::-;;1336:83;;;;;;:::i;:::-;;:::i;3299:116:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:3;3364:7;3390:18;;;;;;;;;;;;3299:116;2406:143:5;;;;;;:::i;:::-;;:::i;5144:557:14:-;;;:::i;:::-;;;;;;;;;;;;;:::i;2276:93:3:-;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:5:-;;;;;;:::i;:::-;;:::i;3846:140:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:3;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2074:89;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:8;4420:31:3;735:10:8;4436:7:3;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:8;5182:37:3;5198:4;735:10:8;5213:5:3;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:3;;5039:244;-1:-1:-1;;;;5039:244:3:o;2656:112:5:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;1050:85:19:-;1110:17;1116:2;1120:6;1110:5;:17::i;:::-;1050:85;;:::o;1336:83::-;1384:27;735:10:8;1404:6:19;1384:5;:27::i;:::-;1336:83;:::o;2406:143:5:-;-1:-1:-1;;;;;624:14:9;;2497:7:5;624:14:9;;;:7;:14;;;;;;2523:19:5;538:107:9;5144:557:14;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:14;;;-1:-1:-1;5482:212:14;;-1:-1:-1;5590:13:14;;-1:-1:-1;5625:4:14;;-1:-1:-1;5652:1:14;-1:-1:-1;5668:16:14;-1:-1:-1;5482:212:14;-1:-1:-1;5144:557:14:o;2276:93:3:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:8;3733:27:3;735:10:8;3750:2:3;3754:5;3733:9;:27::i;1680:672:5:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:5;;;;;1354:25:20;;;1327:18;;1932:33:5;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:9;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:5;2017:78;;;;;;5782:25:20;;;;-1:-1:-1;;;;;5843:32:20;;;5823:18;;;5816:60;5912:32;;;;5892:18;;;5885:60;5961:18;;;5954:34;6004:19;;;5997:35;6048:19;;;6041:35;;;5754:19;;2017:78:5;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:5;:6;-1:-1:-1;;;;;2220:15:5;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:5;;-1:-1:-1;;;;;6279:32:20;;;2258:35:5;;;6261:51:20;6348:32;;6328:18;;;6321:60;6234:18;;2258:35:5;6087:300:20;2216:88:5;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;8989:128:3:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:3;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:3;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:3;;-1:-1:-1;;;;;6612:32:20;;10936:60:3;;;6594:51:20;6661:18;;;6654:34;;;6704:18;;;6697:34;;;6567:18;;10936:60:3;6392:345:20;10881:130:3;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:3;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:3;;5807:1;5780:30;;;6888:51:20;6861:18;;5780:30:3;6742:203:20;5735:86:3;-1:-1:-1;;;;;5834:16:3;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:3;;5902:1;5873:32;;;6888:51:20;6861:18;;5873:32:3;6742:203:20;5830:86:3;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:14:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:14;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:14;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;7436:25:20;4226:11:14;7477:18:20;;;7470:34;;;;4239:14:14;7520:18:20;;;7513:34;4255:13:14;7563:18:20;;;7556:34;4278:4:14;7606:19:20;;;7599:61;4168:7:14;;7408:19:20;;4204:80:14;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;7721:208:3;-1:-1:-1;;;;;7791:21:3;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:3;;7864:1;7835:32;;;6888:51:20;6861:18;;7835:32:3;6742:203:20;7787:91:3;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;8247:206::-;-1:-1:-1;;;;;8317:21:3;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:3;;8388:1;8361:30;;;6888:51:20;6861:18;;8361:30:3;6742:203:20;8313:89:3;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;6021:126:14:-;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:15;3549:11;-1:-1:-1;;;3573:23:15;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:13;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:13;;6803:260;-1:-1:-1;;;;;;6803:260:13:o;9949:432:3:-;-1:-1:-1;;;;;10061:19:3;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:3;;10132:1;10103:32;;;6888:51:20;6861:18;;10103:32:3;6742:203:20;10057:89:3;-1:-1:-1;;;;;10159:21:3;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:3;;10231:1;10203:31;;;6888:51:20;6861:18;;10203:31:3;6742:203:20;10155:90:3;-1:-1:-1;;;;;10254:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:3;10342:5;-1:-1:-1;;;;;10333:31:3;;10358:5;10333:31;;;;1354:25:20;;1342:2;1327:18;;1208:177;10333:31:3;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:3;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:3;;-1:-1:-1;6356:540:3;;-1:-1:-1;;;;;6570:15:3;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;6612:32:20;;6649:50:3;;;6594:51:20;6661:18;;;6654:34;;;6704:18;;;6697:34;;;6567:18;;6649:50:3;6392:345:20;6599:115:3;-1:-1:-1;;;;;6834:15:3;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:3;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:3;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:3;7355:4;-1:-1:-1;;;;;7346:25:3;;7365:5;7346:25;;;;1354::20;;1342:2;1327:18;;1208:177;7346:25:3;;;;;;;;6271:1107;;;:::o;3385:267:10:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:13;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:13;;-1:-1:-1;6301:30:13;;-1:-1:-1;6333:1:13;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;7898:25:20;;;7971:4;7959:17;;7939:18;;;7932:45;;;;7993:18;;;7986:34;;;8036:18;;;8029:34;;;6457:24:13;;7870:19:20;;6457:24:13;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:13;;-1:-1:-1;;6457:24:13;;;-1:-1:-1;;;;;;;6495:20:13;;6491:113;;-1:-1:-1;6547:1:13;;-1:-1:-1;6551:29:13;;-1:-1:-1;6547:1:13;;-1:-1:-1;6531:62:13;;6491:113;6622:6;-1:-1:-1;6630:20:13;;-1:-1:-1;6630:20:13;;-1:-1:-1;5140:1530:13;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:13;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:13;;;;;1354:25:20;;;1327:18;;7550:46:13;1208:177:20;7479:243:13;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:13;;;;;1354:25:20;;;1327:18;;7679:32:13;1208:177:20;2078:405:10;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:10;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:10;;;-1:-1:-1;2435:4:10;2426:14;;2419:28;;;;-1:-1:-1;2390:16:10;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:10;;;;;;;;;;;14:289:20;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;:::-;469:53;308:220;-1:-1:-1;;;308:220:20:o;533:173::-;601:20;;-1:-1:-1;;;;;650:31:20;;640:42;;630:70;;696:1;693;686:12;630:70;533:173;;;:::o;711:300::-;779:6;787;840:2;828:9;819:7;815:23;811:32;808:52;;;856:1;853;846:12;808:52;879:29;898:9;879:29;:::i;:::-;869:39;977:2;962:18;;;;949:32;;-1:-1:-1;;;711:300:20:o;1390:374::-;1467:6;1475;1483;1536:2;1524:9;1515:7;1511:23;1507:32;1504:52;;;1552:1;1549;1542:12;1504:52;1575:29;1594:9;1575:29;:::i;:::-;1565:39;;1623:38;1657:2;1646:9;1642:18;1623:38;:::i;:::-;1390:374;;1613:48;;-1:-1:-1;;;1730:2:20;1715:18;;;;1702:32;;1390:374::o;2140:226::-;2199:6;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;-1:-1:-1;2313:23:20;;2140:226;-1:-1:-1;2140:226:20:o;2371:186::-;2430:6;2483:2;2471:9;2462:7;2458:23;2454:32;2451:52;;;2499:1;2496;2489:12;2451:52;2522:29;2541:9;2522:29;:::i;2562:1238::-;2968:3;2963;2959:13;2951:6;2947:26;2936:9;2929:45;3010:3;3005:2;2994:9;2990:18;2983:31;2910:4;3037:46;3078:3;3067:9;3063:19;3055:6;3037:46;:::i;:::-;3131:9;3123:6;3119:22;3114:2;3103:9;3099:18;3092:50;3165:33;3191:6;3183;3165:33;:::i;:::-;3229:2;3214:18;;3207:34;;;-1:-1:-1;;;;;3278:32:20;;3272:3;3257:19;;3250:61;3298:3;3327:19;;3320:35;;;3392:22;;;3386:3;3371:19;;3364:51;3464:13;;3486:22;;;3536:2;3562:15;;;;-1:-1:-1;3524:15:20;;;;-1:-1:-1;3605:169:20;3619:6;3616:1;3613:13;3605:169;;;3680:13;;3668:26;;3723:2;3749:15;;;;3714:12;;;;3641:1;3634:9;3605:169;;;-1:-1:-1;3791:3:20;;2562:1238;-1:-1:-1;;;;;;;;;;;2562:1238:20:o;3805:903::-;3916:6;3924;3932;3940;3948;3956;3964;4017:3;4005:9;3996:7;3992:23;3988:33;3985:53;;;4034:1;4031;4024:12;3985:53;4057:29;4076:9;4057:29;:::i;:::-;4047:39;;4105:38;4139:2;4128:9;4124:18;4105:38;:::i;:::-;4095:48;-1:-1:-1;4212:2:20;4197:18;;4184:32;;-1:-1:-1;4313:2:20;4298:18;;4285:32;;-1:-1:-1;4395:3:20;4380:19;;4367:33;4444:4;4431:18;;4419:31;;4409:59;;4464:1;4461;4454:12;4409:59;3805:903;;;;-1:-1:-1;3805:903:20;;;;4487:7;4567:3;4552:19;;4539:33;;-1:-1:-1;4671:3:20;4656:19;;;4643:33;;3805:903;-1:-1:-1;;3805:903:20:o;4713:260::-;4781:6;4789;4842:2;4830:9;4821:7;4817:23;4813:32;4810:52;;;4858:1;4855;4848:12;4810:52;4881:29;4900:9;4881:29;:::i;:::-;4871:39;;4929:38;4963:2;4952:9;4948:18;4929:38;:::i;:::-;4919:48;;4713:260;;;;;:::o;4978:380::-;5057:1;5053:12;;;;5100;;;5121:61;;5175:4;5167:6;5163:17;5153:27;;5121:61;5228:2;5220:6;5217:14;5197:18;5194:38;5191:161;;5274:10;5269:3;5265:20;5262:1;5255:31;5309:4;5306:1;5299:15;5337:4;5334:1;5327:15;5191:161;;4978:380;;;:::o;6950:222::-;7015:9;;;7036:10;;;7033:133;;;7088:10;7083:3;7079:20;7076:1;7069:31;7123:4;7120:1;7113:15;7151:4;7148:1;7141:15;8074:127;8135:10;8130:3;8126:20;8123:1;8116:31;8166:4;8163:1;8156:15;8190:4;8187:1;8180:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "792600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24758",
								"balanceOf(address)": "2582",
								"burn(uint256)": "50939",
								"decimals()": "221",
								"eip712Domain()": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "2635",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2348",
								"transfer(address,uint256)": "51260",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "160"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "CALLVALUE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSHSIZE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "CODESIZE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSHSIZE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 648,
									"end": 765,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 648,
									"end": 765,
									"name": "tag",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 648,
									"end": 765,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 752,
									"end": 756,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 752,
									"end": 756,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 752,
									"end": 756,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 752,
									"end": 756,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 752,
									"end": 756,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 723,
									"end": 729,
									"name": "DUP5",
									"source": 19
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 752,
									"end": 756,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 14,
									"value": "13"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 14,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 3467,
									"end": 3474,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3501,
									"end": 3517,
									"name": "PUSH",
									"source": 14,
									"value": "6"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "14"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 14,
									"value": "15"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 14,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 14,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 14
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "16"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "PUSH",
									"source": 14,
									"value": "100"
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 14,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4229,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4245,
									"end": 4263,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 4245,
									"end": 4263,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4245,
									"end": 4263,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4238,
									"end": 4272,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 4238,
									"end": 4272,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 4238,
									"end": 4272,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 4238,
									"end": 4272,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4288,
									"end": 4306,
									"name": "PUSH",
									"source": 20,
									"value": "60"
								},
								{
									"begin": 4288,
									"end": 4306,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4288,
									"end": 4306,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4281,
									"end": 4315,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4255,
									"end": 4268,
									"name": "CHAINID",
									"source": 14
								},
								{
									"begin": 4331,
									"end": 4349,
									"name": "PUSH",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 4331,
									"end": 4349,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4331,
									"end": 4349,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4324,
									"end": 4358,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 4374,
									"end": 4393,
									"name": "PUSH",
									"source": 20,
									"value": "A0"
								},
								{
									"begin": 4374,
									"end": 4393,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4374,
									"end": 4393,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4367,
									"end": 4428,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4176,
									"end": 4195,
									"name": "PUSH",
									"source": 20,
									"value": "C0"
								},
								{
									"begin": 4176,
									"end": 4195,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 14
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "tag",
									"source": 14,
									"value": "16"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3747,
									"end": 3751,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 14,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "45"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 10,
									"value": "14"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3010,
									"end": 3021,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 3043,
									"end": 3048,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3037,
									"end": 3056,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 3098,
									"end": 3103,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 3084,
									"end": 3104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 3176,
									"end": 3181,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 3135,
									"end": 3181,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 10,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 10,
									"value": "25"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 2914,
									"end": 3254,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1773,
									"end": 1784,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 1796,
									"end": 1813,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1822,
									"end": 1825,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 1840,
									"end": 1844,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1840,
									"end": 1851,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1893,
									"end": 1896,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "305A27A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 10,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "35"
								},
								{
									"begin": 1879,
									"end": 1897,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SUB",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1974,
									"end": 1978,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 1957,
									"end": 1970,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 1994,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 20,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 146,
									"end": 869,
									"name": "tag",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 146,
									"end": 869,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 20,
									"value": "48"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 298,
									"end": 311,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 298,
									"end": 311,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 323,
									"end": 353,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 323,
									"end": 353,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 320,
									"end": 376,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 320,
									"end": 376,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "50"
								},
								{
									"begin": 320,
									"end": 376,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 356,
									"end": 374,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "50"
								},
								{
									"begin": 356,
									"end": 374,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 356,
									"end": 374,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 356,
									"end": 374,
									"name": "tag",
									"source": 20,
									"value": "50"
								},
								{
									"begin": 356,
									"end": 374,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 405,
									"end": 407,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 399,
									"end": 408,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 497,
									"end": 499,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 476,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 459,
									"end": 476,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 455,
									"end": 486,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 455,
									"end": 486,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 455,
									"end": 486,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 488,
									"end": 490,
									"name": "PUSH",
									"source": 20,
									"value": "3F"
								},
								{
									"begin": 451,
									"end": 491,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 447,
									"end": 501,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 435,
									"end": 502,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 435,
									"end": 502,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 517,
									"end": 551,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 517,
									"end": 551,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 553,
									"end": 575,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 553,
									"end": 575,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 553,
									"end": 575,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 514,
									"end": 576,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 511,
									"end": 599,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 511,
									"end": 599,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "52"
								},
								{
									"begin": 511,
									"end": 599,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 579,
									"end": 597,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "52"
								},
								{
									"begin": 579,
									"end": 597,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 579,
									"end": 597,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 579,
									"end": 597,
									"name": "tag",
									"source": 20,
									"value": "52"
								},
								{
									"begin": 579,
									"end": 597,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 615,
									"end": 617,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 608,
									"end": 630,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 639,
									"end": 661,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 639,
									"end": 661,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 639,
									"end": 661,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 680,
									"end": 699,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 680,
									"end": 699,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 680,
									"end": 699,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 701,
									"end": 705,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 676,
									"end": 706,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 673,
									"end": 712,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "LT",
									"source": -1
								},
								{
									"begin": 670,
									"end": 729,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 670,
									"end": 729,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "53"
								},
								{
									"begin": 670,
									"end": 729,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 725,
									"end": 726,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 722,
									"end": 723,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 715,
									"end": 727,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 670,
									"end": 729,
									"name": "tag",
									"source": 20,
									"value": "53"
								},
								{
									"begin": 670,
									"end": 729,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 782,
									"end": 788,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 775,
									"end": 779,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 767,
									"end": 773,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 763,
									"end": 780,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 756,
									"end": 760,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 748,
									"end": 754,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 744,
									"end": 761,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 738,
									"end": 789,
									"name": "MCOPY",
									"source": 20
								},
								{
									"begin": 837,
									"end": 838,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 809,
									"end": 828,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 809,
									"end": 828,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 809,
									"end": 828,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 830,
									"end": 834,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 805,
									"end": 835,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 798,
									"end": 839,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 798,
									"end": 839,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 798,
									"end": 839,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 798,
									"end": 839,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 813,
									"end": 819,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 146,
									"end": 869,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 869,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "tag",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 973,
									"end": 979,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 981,
									"end": 987,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1034,
									"end": 1036,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 1022,
									"end": 1031,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 1013,
									"end": 1020,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1009,
									"end": 1032,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 1005,
									"end": 1037,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 1002,
									"end": 1054,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1002,
									"end": 1054,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "55"
								},
								{
									"begin": 1002,
									"end": 1054,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1050,
									"end": 1051,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1047,
									"end": 1048,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1040,
									"end": 1052,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 1002,
									"end": 1054,
									"name": "tag",
									"source": 20,
									"value": "55"
								},
								{
									"begin": 1002,
									"end": 1054,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1077,
									"end": 1093,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1077,
									"end": 1093,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1105,
									"end": 1135,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1105,
									"end": 1135,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1102,
									"end": 1152,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1102,
									"end": 1152,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "56"
								},
								{
									"begin": 1102,
									"end": 1152,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1148,
									"end": 1149,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1145,
									"end": 1146,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1138,
									"end": 1150,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 1102,
									"end": 1152,
									"name": "tag",
									"source": 20,
									"value": "56"
								},
								{
									"begin": 1102,
									"end": 1152,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1171,
									"end": 1232,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "57"
								},
								{
									"begin": 1224,
									"end": 1231,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1215,
									"end": 1221,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1204,
									"end": 1213,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1200,
									"end": 1222,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1171,
									"end": 1232,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 1171,
									"end": 1232,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1171,
									"end": 1232,
									"name": "tag",
									"source": 20,
									"value": "57"
								},
								{
									"begin": 1171,
									"end": 1232,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1278,
									"end": 1280,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1263,
									"end": 1281,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1263,
									"end": 1281,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1257,
									"end": 1282,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 1161,
									"end": 1232,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1161,
									"end": 1232,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1257,
									"end": 1282,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1294,
									"end": 1326,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1294,
									"end": 1326,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1291,
									"end": 1343,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1291,
									"end": 1343,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "58"
								},
								{
									"begin": 1291,
									"end": 1343,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1339,
									"end": 1340,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1336,
									"end": 1337,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1329,
									"end": 1341,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 1291,
									"end": 1343,
									"name": "tag",
									"source": 20,
									"value": "58"
								},
								{
									"begin": 1291,
									"end": 1343,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1362,
									"end": 1425,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "59"
								},
								{
									"begin": 1417,
									"end": 1424,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1406,
									"end": 1414,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1395,
									"end": 1404,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 1391,
									"end": 1415,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1362,
									"end": 1425,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 1362,
									"end": 1425,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1362,
									"end": 1425,
									"name": "tag",
									"source": 20,
									"value": "59"
								},
								{
									"begin": 1362,
									"end": 1425,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1352,
									"end": 1425,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1352,
									"end": 1425,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1352,
									"end": 1425,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 874,
									"end": 1431,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1816,
									"name": "tag",
									"source": 20,
									"value": "41"
								},
								{
									"begin": 1436,
									"end": 1816,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1515,
									"end": 1516,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1511,
									"end": 1523,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1511,
									"end": 1523,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1511,
									"end": 1523,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1511,
									"end": 1523,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1558,
									"end": 1570,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1558,
									"end": 1570,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 1558,
									"end": 1570,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1579,
									"end": 1640,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "61"
								},
								{
									"begin": 1579,
									"end": 1640,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1633,
									"end": 1637,
									"name": "PUSH",
									"source": 20,
									"value": "7F"
								},
								{
									"begin": 1625,
									"end": 1631,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1621,
									"end": 1638,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 1611,
									"end": 1638,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1611,
									"end": 1638,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1579,
									"end": 1640,
									"name": "tag",
									"source": 20,
									"value": "61"
								},
								{
									"begin": 1579,
									"end": 1640,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1686,
									"end": 1688,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1678,
									"end": 1684,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1675,
									"end": 1689,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 1655,
									"end": 1673,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1652,
									"end": 1690,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 1649,
									"end": 1810,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "62"
								},
								{
									"begin": 1649,
									"end": 1810,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1732,
									"end": 1742,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 1727,
									"end": 1730,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 1723,
									"end": 1743,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 1720,
									"end": 1721,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1713,
									"end": 1744,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 1767,
									"end": 1771,
									"name": "PUSH",
									"source": 20,
									"value": "22"
								},
								{
									"begin": 1764,
									"end": 1765,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 1757,
									"end": 1772,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 1795,
									"end": 1799,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 1792,
									"end": 1793,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1785,
									"end": 1800,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 1649,
									"end": 1810,
									"name": "tag",
									"source": 20,
									"value": "62"
								},
								{
									"begin": 1649,
									"end": 1810,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1649,
									"end": 1810,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1816,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1816,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1816,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1816,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1947,
									"end": 2465,
									"name": "tag",
									"source": 20,
									"value": "43"
								},
								{
									"begin": 1947,
									"end": 2465,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2049,
									"end": 2051,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 2044,
									"end": 2047,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2041,
									"end": 2052,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 2038,
									"end": 2459,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2038,
									"end": 2459,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "65"
								},
								{
									"begin": 2038,
									"end": 2459,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2085,
									"end": 2090,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 2082,
									"end": 2083,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2075,
									"end": 2091,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 2129,
									"end": 2133,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 2126,
									"end": 2127,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2116,
									"end": 2134,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": 2199,
									"end": 2201,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 2187,
									"end": 2197,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2183,
									"end": 2202,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2180,
									"end": 2181,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 2176,
									"end": 2203,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 2170,
									"end": 2174,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2166,
									"end": 2204,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2235,
									"end": 2239,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 2223,
									"end": 2233,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2220,
									"end": 2240,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 2217,
									"end": 2264,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2217,
									"end": 2264,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "66"
								},
								{
									"begin": 2217,
									"end": 2264,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2258,
									"end": 2262,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 2217,
									"end": 2264,
									"name": "tag",
									"source": 20,
									"value": "66"
								},
								{
									"begin": 2217,
									"end": 2264,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2313,
									"end": 2315,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 2308,
									"end": 2311,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2304,
									"end": 2316,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2301,
									"end": 2302,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 2297,
									"end": 2317,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 2291,
									"end": 2295,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2287,
									"end": 2318,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2277,
									"end": 2318,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 2277,
									"end": 2318,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "tag",
									"source": 20,
									"value": "67"
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2386,
									"end": 2388,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2379,
									"end": 2384,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2376,
									"end": 2389,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "69"
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2445,
									"end": 2446,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2431,
									"end": 2447,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2431,
									"end": 2447,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2412,
									"end": 2413,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2401,
									"end": 2414,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "67"
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "tag",
									"source": 20,
									"value": "69"
								},
								{
									"begin": 2368,
									"end": 2449,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2372,
									"end": 2375,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2372,
									"end": 2375,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2038,
									"end": 2459,
									"name": "tag",
									"source": 20,
									"value": "65"
								},
								{
									"begin": 2038,
									"end": 2459,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1947,
									"end": 2465,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1947,
									"end": 2465,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1947,
									"end": 2465,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1947,
									"end": 2465,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2641,
									"end": 3940,
									"name": "tag",
									"source": 20,
									"value": "10"
								},
								{
									"begin": 2641,
									"end": 3940,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2761,
									"end": 2771,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2761,
									"end": 2771,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2783,
									"end": 2813,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2783,
									"end": 2813,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 2780,
									"end": 2836,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2780,
									"end": 2836,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 2780,
									"end": 2836,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2816,
									"end": 2834,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 2816,
									"end": 2834,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "39"
								},
								{
									"begin": 2816,
									"end": 2834,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2816,
									"end": 2834,
									"name": "tag",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 2816,
									"end": 2834,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2845,
									"end": 2942,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "74"
								},
								{
									"begin": 2935,
									"end": 2941,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2895,
									"end": 2933,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "75"
								},
								{
									"begin": 2927,
									"end": 2931,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2921,
									"end": 2932,
									"name": "SLOAD",
									"source": 20
								},
								{
									"begin": 2895,
									"end": 2933,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "41"
								},
								{
									"begin": 2895,
									"end": 2933,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2895,
									"end": 2933,
									"name": "tag",
									"source": 20,
									"value": "75"
								},
								{
									"begin": 2895,
									"end": 2933,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2889,
									"end": 2893,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2845,
									"end": 2942,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "43"
								},
								{
									"begin": 2845,
									"end": 2942,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2845,
									"end": 2942,
									"name": "tag",
									"source": 20,
									"value": "74"
								},
								{
									"begin": 2845,
									"end": 2942,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2991,
									"end": 2995,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 3022,
									"end": 3024,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 3011,
									"end": 3025,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3011,
									"end": 3025,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3039,
									"end": 3040,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "77"
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3727,
									"end": 3728,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3744,
									"end": 3750,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 3741,
									"end": 3830,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3741,
									"end": 3830,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 3741,
									"end": 3830,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3796,
									"end": 3815,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3796,
									"end": 3815,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3796,
									"end": 3815,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3790,
									"end": 3816,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 3741,
									"end": 3830,
									"name": "tag",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 3741,
									"end": 3830,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2598,
									"end": 2599,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 2594,
									"end": 2605,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2594,
									"end": 2605,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2594,
									"end": 2605,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2590,
									"end": 2614,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 2586,
									"end": 2615,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 2576,
									"end": 2616,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2622,
									"end": 2623,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2618,
									"end": 2629,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2618,
									"end": 2629,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2618,
									"end": 2629,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2573,
									"end": 2630,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 3843,
									"end": 3924,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3843,
									"end": 3924,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 3004,
									"end": 3934,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "69"
								},
								{
									"begin": 3004,
									"end": 3934,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "tag",
									"source": 20,
									"value": "77"
								},
								{
									"begin": 3034,
									"end": 3683,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1894,
									"end": 1895,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1887,
									"end": 1901,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1887,
									"end": 1901,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1887,
									"end": 1901,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 1931,
									"end": 1935,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1918,
									"end": 1936,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1918,
									"end": 1936,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3070,
									"end": 3090,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 3070,
									"end": 3090,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3070,
									"end": 3090,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "tag",
									"source": 20,
									"value": "81"
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3202,
									"end": 3209,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3199,
									"end": 3200,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3196,
									"end": 3210,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "83"
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3284,
									"end": 3303,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 3284,
									"end": 3303,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 3284,
									"end": 3303,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3278,
									"end": 3304,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 3263,
									"end": 3305,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3263,
									"end": 3305,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 3391,
									"end": 3395,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 3376,
									"end": 3396,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 3376,
									"end": 3396,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 3376,
									"end": 3396,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3376,
									"end": 3396,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 3344,
									"end": 3345,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3332,
									"end": 3346,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3332,
									"end": 3346,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 3332,
									"end": 3346,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3332,
									"end": 3346,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 3218,
									"end": 3230,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "81"
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "tag",
									"source": 20,
									"value": "83"
								},
								{
									"begin": 3188,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3192,
									"end": 3195,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3438,
									"end": 3444,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3429,
									"end": 3436,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3426,
									"end": 3445,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 3423,
									"end": 3624,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3423,
									"end": 3624,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 3423,
									"end": 3624,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3499,
									"end": 3518,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 3499,
									"end": 3518,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3499,
									"end": 3518,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3493,
									"end": 3519,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3582,
									"end": 3583,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 3578,
									"end": 3592,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 3578,
									"end": 3592,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3578,
									"end": 3592,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 3594,
									"end": 3597,
									"name": "PUSH",
									"source": 20,
									"value": "F8"
								},
								{
									"begin": 3574,
									"end": 3598,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3570,
									"end": 3607,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 3566,
									"end": 3608,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 3551,
									"end": 3609,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3536,
									"end": 3610,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3536,
									"end": 3610,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 3423,
									"end": 3624,
									"name": "tag",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 3423,
									"end": 3624,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3670,
									"end": 3671,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3654,
									"end": 3668,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3654,
									"end": 3668,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3654,
									"end": 3668,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 3650,
									"end": 3672,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 3637,
									"end": 3673,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3637,
									"end": 3673,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2641,
									"end": 3940,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "tag",
									"source": 20,
									"value": "35"
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4588,
									"end": 4590,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 4577,
									"end": 4586,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4570,
									"end": 4591,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4551,
									"end": 4555,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4620,
									"end": 4626,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4614,
									"end": 4627,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 4663,
									"end": 4669,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4658,
									"end": 4660,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 4647,
									"end": 4656,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4643,
									"end": 4661,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4636,
									"end": 4670,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4722,
									"end": 4728,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4717,
									"end": 4719,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 4709,
									"end": 4715,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 4705,
									"end": 4720,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4700,
									"end": 4702,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4689,
									"end": 4698,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 4685,
									"end": 4703,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4679,
									"end": 4729,
									"name": "MCOPY",
									"source": 20
								},
								{
									"begin": 4778,
									"end": 4779,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4773,
									"end": 4775,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4764,
									"end": 4770,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4753,
									"end": 4762,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 4749,
									"end": 4771,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4745,
									"end": 4776,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4738,
									"end": 4780,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4848,
									"end": 4850,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4841,
									"end": 4843,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 4837,
									"end": 4844,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 4832,
									"end": 4834,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 4824,
									"end": 4830,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4820,
									"end": 4835,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4816,
									"end": 4845,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 4805,
									"end": 4814,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4801,
									"end": 4846,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4797,
									"end": 4851,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4789,
									"end": 4851,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 4789,
									"end": 4851,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 4789,
									"end": 4851,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 4439,
									"end": 4857,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4862,
									"end": 5159,
									"name": "tag",
									"source": 20,
									"value": "37"
								},
								{
									"begin": 4862,
									"end": 5159,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4980,
									"end": 4992,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4980,
									"end": 4992,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5027,
									"end": 5031,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5016,
									"end": 5032,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5016,
									"end": 5032,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 5016,
									"end": 5032,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5010,
									"end": 5033,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5010,
									"end": 5033,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 4980,
									"end": 4992,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5045,
									"end": 5061,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5045,
									"end": 5061,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 5042,
									"end": 5153,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 5042,
									"end": 5153,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "62"
								},
								{
									"begin": 5042,
									"end": 5153,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 5119,
									"end": 5123,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5115,
									"end": 5132,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5115,
									"end": 5132,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5115,
									"end": 5132,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5115,
									"end": 5132,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 5112,
									"end": 5113,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 5108,
									"end": 5133,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 5104,
									"end": 5142,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 5093,
									"end": 5143,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 5093,
									"end": 5143,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 4862,
									"end": 5159,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4862,
									"end": 5159,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4862,
									"end": 5159,
									"name": "tag",
									"source": 20,
									"value": "45"
								},
								{
									"begin": 4862,
									"end": 5159,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "A0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "C0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "100"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "120"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "140"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2181"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2178"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2175"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2173"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2171"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2169"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2167"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 381,
									"end": 1422,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220af2c63efd3785c13b7337bdf1b9b3ae13750f3b4e38814f2701ad3c42bc6cd2064736f6c634300081a0033",
									".code": [
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "tag",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "42966C68"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "15"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "D505ACCF"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "16"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "DD62ED3E"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "17"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "tag",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "42966C68"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "70A08231"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "7ECEBE00"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "84B0196E"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "tag",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "23B872DD"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "23B872DD"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "6"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "313CE567"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "3644E515"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "40C10F19"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "tag",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "6FDDE03"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "95EA7B3"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "18160DDD"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "tag",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 381,
											"end": 1422,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1174,
											"end": 1196,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1144,
											"end": 1146,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1129,
											"end": 1147,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1016,
											"end": 1203,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3075,
											"end": 3077,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1899,
											"end": 1901,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1884,
											"end": 1902,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1769,
											"end": 1953,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 5,
											"value": "8"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "tag",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "48"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "49"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "27"
										},
										{
											"begin": 1050,
											"end": 1135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "tag",
											"source": 19,
											"value": "49"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "50"
										},
										{
											"begin": 1050,
											"end": 1135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "tag",
											"source": 19,
											"value": "48"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "STOP",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "tag",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "48"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "52"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "53"
										},
										{
											"begin": 1336,
											"end": 1419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "tag",
											"source": 19,
											"value": "52"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "54"
										},
										{
											"begin": 1336,
											"end": 1419,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "31"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "57"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 14,
											"value": "13"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "67"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "15"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 5,
											"value": "16"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "48"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "77"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "88"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 5,
											"value": "45"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2741,
											"end": 2759,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "106"
										},
										{
											"begin": 2741,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "tag",
											"source": 5,
											"value": "105"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "tag",
											"source": 19,
											"value": "50"
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1127,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "108"
										},
										{
											"begin": 1116,
											"end": 1118,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1120,
											"end": 1126,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1115,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "109"
										},
										{
											"begin": 1110,
											"end": 1127,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1110,
											"end": 1127,
											"name": "tag",
											"source": 19,
											"value": "108"
										},
										{
											"begin": 1110,
											"end": 1127,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1050,
											"end": 1135,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "tag",
											"source": 19,
											"value": "54"
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1384,
											"end": 1411,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "111"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 1404,
											"end": 1410,
											"name": "DUP3",
											"source": 19
										},
										{
											"begin": 1384,
											"end": 1389,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "113"
										},
										{
											"begin": 1384,
											"end": 1411,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 1384,
											"end": 1411,
											"name": "tag",
											"source": 19,
											"value": "111"
										},
										{
											"begin": 1384,
											"end": 1411,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 1336,
											"end": 1419,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 19
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 2497,
											"end": 2504,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "91"
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5242,
											"end": 5255,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5269,
											"end": 5287,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5301,
											"end": 5322,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5336,
											"end": 5351,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5365,
											"end": 5390,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5404,
											"end": 5416,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5430,
											"end": 5457,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "119"
										},
										{
											"begin": 5533,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 5533,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "tag",
											"source": 14,
											"value": "119"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 5560,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 5560,
											"end": 5576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "tag",
											"source": 14,
											"value": "121"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP12",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP11",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "73"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1901,
											"end": 1909,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1883,
											"end": 1898,
											"name": "TIMESTAMP",
											"source": 5
										},
										{
											"begin": 1883,
											"end": 1909,
											"name": "GT",
											"source": 5
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313C8981"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "tag",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "tag",
											"source": 5,
											"value": "137"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1986,
											"end": 2004,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 1022,
											"end": 1117,
											"name": "PUSH",
											"source": 5,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2045,
											"end": 2050,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2052,
											"end": 2059,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2061,
											"end": 2066,
											"name": "DUP9",
											"source": 5
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP13",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 819,
											"end": 826,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "tag",
											"source": 5,
											"value": "139"
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 5782,
											"end": 5807,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 5782,
											"end": 5807,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5782,
											"end": 5807,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 5782,
											"end": 5807,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5843,
											"end": 5875,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 5843,
											"end": 5875,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5843,
											"end": 5875,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5823,
											"end": 5841,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5823,
											"end": 5841,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 5823,
											"end": 5841,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5816,
											"end": 5876,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 5944,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 5944,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 5944,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5912,
											"end": 5944,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5892,
											"end": 5910,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 5892,
											"end": 5910,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 5892,
											"end": 5910,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5885,
											"end": 5945,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5961,
											"end": 5979,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 5961,
											"end": 5979,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5961,
											"end": 5979,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5954,
											"end": 5988,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6004,
											"end": 6023,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 6004,
											"end": 6023,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6004,
											"end": 6023,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5997,
											"end": 6032,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6048,
											"end": 6067,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 6048,
											"end": 6067,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6048,
											"end": 6067,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6041,
											"end": 6076,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6041,
											"end": 6076,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6041,
											"end": 6076,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5754,
											"end": 5773,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5754,
											"end": 5773,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "PUSH",
											"source": 5,
											"value": "20"
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "KECCAK256",
											"source": 5
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2107,
											"end": 2119,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 2139,
											"end": 2149,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2122,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "144"
										},
										{
											"begin": 2122,
											"end": 2150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "tag",
											"source": 5,
											"value": "143"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2161,
											"end": 2175,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 2192,
											"end": 2196,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "DUP8",
											"source": 5
										},
										{
											"begin": 2178,
											"end": 2191,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "146"
										},
										{
											"begin": 2178,
											"end": 2206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "tag",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "DUP10",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MLOAD",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "25C00723"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6279,
											"end": 6311,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 6279,
											"end": 6311,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6279,
											"end": 6311,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 6261,
											"end": 6312,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6348,
											"end": 6380,
											"name": "DUP12",
											"source": 20
										},
										{
											"begin": 6348,
											"end": 6380,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6328,
											"end": 6346,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6328,
											"end": 6346,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6328,
											"end": 6346,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6321,
											"end": 6381,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6234,
											"end": 6252,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6234,
											"end": 6252,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "138"
										},
										{
											"begin": 6087,
											"end": 6387,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "tag",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 2323,
											"end": 2328,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2330,
											"end": 2337,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2339,
											"end": 2344,
											"name": "DUP11",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "95"
										},
										{
											"begin": 2314,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "tag",
											"source": 5,
											"value": "150"
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6612,
											"end": 6644,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 6612,
											"end": 6644,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6594,
											"end": 6645,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6567,
											"end": 6585,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 6567,
											"end": 6585,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6392,
											"end": 6737,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "159"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "164"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "167"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "154"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2171"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2169"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 14,
											"value": "172"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2167"
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3845,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 14,
											"value": "173"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "105"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 14,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7436,
											"end": 7461,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2173"
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2175"
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7513,
											"end": 7547,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 14
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7556,
											"end": 7590,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7599,
											"end": 7660,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7408,
											"end": 7427,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 7408,
											"end": 7427,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 3,
											"value": "109"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "tag",
											"source": 14,
											"value": "120"
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6067,
											"end": 6080,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "105"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2178"
										},
										{
											"begin": 6126,
											"end": 6139,
											"name": "PUSH",
											"source": 14,
											"value": "5"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "tag",
											"source": 14,
											"value": "122"
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6522,
											"end": 6535,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "105"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 14,
											"value": "2181"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 14,
											"value": "6"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "188"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4994,
											"end": 5001,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "91"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5053,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "106"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 14,
											"value": "194"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5075,
											"end": 5085,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 3555,
											"end": 3559,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3560,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3625,
											"end": 3629,
											"name": "PUSH",
											"source": 15,
											"value": "2"
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3677,
											"end": 3681,
											"name": "PUSH",
											"source": 15,
											"value": "22"
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 3661,
											"end": 3695,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 3733,
											"end": 3737,
											"name": "PUSH",
											"source": 15,
											"value": "42"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 15
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "tag",
											"source": 13,
											"value": "146"
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6888,
											"end": 6895,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6925,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "197"
										},
										{
											"begin": 6978,
											"end": 6982,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6984,
											"end": 6985,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6987,
											"end": 6988,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6990,
											"end": 6991,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6967,
											"end": 6977,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 6967,
											"end": 6992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "tag",
											"source": 13,
											"value": "197"
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7021,
											"end": 7029,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7002,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 7002,
											"end": 7030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "tag",
											"source": 13,
											"value": "199"
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 7063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 3,
											"value": "155"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6888,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6861,
											"end": 6879,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6742,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "162"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "207"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 3,
											"value": "207"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 3,
											"value": "170"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "209"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6612,
											"end": 6644,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6612,
											"end": 6644,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6594,
											"end": 6645,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6661,
											"end": 6679,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6654,
											"end": 6688,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6704,
											"end": 6722,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6697,
											"end": 6731,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6567,
											"end": 6585,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 6567,
											"end": 6585,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 6392,
											"end": 6737,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "212"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3479,
											"end": 3492,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3586,
											"end": 3591,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "tag",
											"source": 10,
											"value": "223"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 10,
											"value": "222"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3630,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "226"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "86"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 13,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "233"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6333,
											"end": 6334,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "232"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 13,
											"value": "233"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6440,
											"end": 6454,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7971,
											"end": 7975,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 7959,
											"end": 7976,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 7959,
											"end": 7976,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7889,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 7870,
											"end": 7889,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATACOPY",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "232"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 13,
											"value": "238"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6622,
											"end": 6628,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 13,
											"value": "232"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7291,
											"end": 7311,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7282,
											"end": 7287,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "244"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "244"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "242"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 13,
											"value": "244"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7196,
											"end": 7728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "tag",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7387,
											"end": 7416,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "250"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "250"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "242"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 13,
											"value": "250"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F645EEDF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "tag",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7492,
											"end": 7527,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 7483,
											"end": 7488,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "256"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "256"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "242"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 13,
											"value": "256"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "257"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FCE698F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "tag",
											"source": 13,
											"value": "257"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7626,
											"end": 7656,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7622,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "242"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 13,
											"value": "263"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "35E2F383"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2137,
											"end": 2150,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 2162,
											"end": 2173,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 2187,
											"end": 2191,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 2176,
											"end": 2192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "tag",
											"source": 10,
											"value": "267"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2435,
											"end": 2439,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "tag",
											"source": 10,
											"value": "268"
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2616,
											"end": 2623,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 10,
											"value": "FF"
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "91"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 14,
											"end": 303,
											"name": "tag",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 14,
											"end": 303,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 56,
											"end": 59,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 94,
											"end": 99,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 88,
											"end": 100,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 121,
											"end": 127,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 116,
											"end": 119,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 109,
											"end": 128,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 177,
											"end": 183,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 170,
											"end": 174,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 163,
											"end": 168,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 159,
											"end": 175,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 147,
											"end": 150,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 143,
											"end": 157,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 137,
											"end": 184,
											"name": "MCOPY",
											"source": 20
										},
										{
											"begin": 229,
											"end": 230,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 222,
											"end": 226,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 213,
											"end": 219,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 208,
											"end": 211,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 204,
											"end": 220,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 200,
											"end": 227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 193,
											"end": 231,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 292,
											"end": 296,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 285,
											"end": 287,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 281,
											"end": 288,
											"name": "NOT",
											"source": 20
										},
										{
											"begin": 276,
											"end": 278,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 268,
											"end": 274,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 264,
											"end": 279,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 260,
											"end": 289,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 255,
											"end": 258,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 251,
											"end": 290,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 247,
											"end": 297,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "tag",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 308,
											"end": 528,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 457,
											"end": 459,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 446,
											"end": 455,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 439,
											"end": 460,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 420,
											"end": 424,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 518,
											"end": 520,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 507,
											"end": 516,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 503,
											"end": 521,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 495,
											"end": 501,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 477,
											"end": 522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "tag",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 469,
											"end": 522,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 308,
											"end": 528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "tag",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 533,
											"end": 706,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 650,
											"end": 681,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 650,
											"end": 681,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 696,
											"end": 697,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 693,
											"end": 694,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 686,
											"end": 698,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "tag",
											"source": 20,
											"value": "281"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "tag",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 779,
											"end": 785,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 787,
											"end": 793,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 840,
											"end": 842,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 828,
											"end": 837,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 819,
											"end": 826,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 815,
											"end": 838,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 811,
											"end": 843,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 856,
											"end": 857,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 853,
											"end": 854,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 846,
											"end": 858,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "tag",
											"source": 20,
											"value": "283"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 879,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "tag",
											"source": 20,
											"value": "284"
										},
										{
											"begin": 879,
											"end": 908,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 869,
											"end": 908,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 977,
											"end": 979,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 711,
											"end": 1011,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "tag",
											"source": 20,
											"value": "37"
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1467,
											"end": 1473,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1481,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1483,
											"end": 1489,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1538,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1524,
											"end": 1533,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1515,
											"end": 1522,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1511,
											"end": 1534,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1507,
											"end": 1539,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "288"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1550,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1542,
											"end": 1554,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "tag",
											"source": 20,
											"value": "288"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "289"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 1575,
											"end": 1604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "tag",
											"source": 20,
											"value": "289"
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "290"
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1646,
											"end": 1655,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1642,
											"end": 1660,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 1623,
											"end": 1661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 20,
											"value": "290"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1730,
											"end": 1732,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "tag",
											"source": 20,
											"value": "53"
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2199,
											"end": 2205,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2252,
											"end": 2254,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2240,
											"end": 2249,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2231,
											"end": 2238,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2227,
											"end": 2250,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2223,
											"end": 2255,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "294"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2265,
											"end": 2266,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2270,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "tag",
											"source": 20,
											"value": "294"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2140,
											"end": 2366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "tag",
											"source": 20,
											"value": "57"
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2430,
											"end": 2436,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2485,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2480,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2462,
											"end": 2469,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2458,
											"end": 2481,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2454,
											"end": 2486,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2499,
											"end": 2500,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2496,
											"end": 2497,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2489,
											"end": 2501,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "tag",
											"source": 20,
											"value": "296"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "279"
										},
										{
											"begin": 2541,
											"end": 2550,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 2522,
											"end": 2551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "tag",
											"source": 20,
											"value": "67"
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2968,
											"end": 2971,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 2963,
											"end": 2966,
											"name": "PUSH",
											"source": 20,
											"value": "F8"
										},
										{
											"begin": 2959,
											"end": 2972,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 2951,
											"end": 2957,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 2947,
											"end": 2973,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2936,
											"end": 2945,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 2974,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3010,
											"end": 3013,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2983,
											"end": 3014,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2910,
											"end": 2914,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "299"
										},
										{
											"begin": 3078,
											"end": 3081,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3067,
											"end": 3076,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3063,
											"end": 3082,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3055,
											"end": 3061,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 3037,
											"end": 3083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "tag",
											"source": 20,
											"value": "299"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3123,
											"end": 3129,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3119,
											"end": 3141,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3114,
											"end": 3116,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 3103,
											"end": 3112,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3099,
											"end": 3117,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3092,
											"end": 3142,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "300"
										},
										{
											"begin": 3191,
											"end": 3197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3183,
											"end": 3189,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "274"
										},
										{
											"begin": 3165,
											"end": 3198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "tag",
											"source": 20,
											"value": "300"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3229,
											"end": 3231,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 3272,
											"end": 3275,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3250,
											"end": 3311,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3298,
											"end": 3301,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3386,
											"end": 3389,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3364,
											"end": 3415,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3536,
											"end": 3538,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3616,
											"end": 3617,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3613,
											"end": 3626,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3723,
											"end": 3725,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3641,
											"end": 3642,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 3634,
											"end": 3643,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "301"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP12",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "SWAP11",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 3800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "tag",
											"source": 20,
											"value": "77"
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3916,
											"end": 3922,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3924,
											"end": 3930,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3932,
											"end": 3938,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3940,
											"end": 3946,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3948,
											"end": 3954,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3956,
											"end": 3962,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3964,
											"end": 3970,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4017,
											"end": 4020,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 4005,
											"end": 4014,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 3996,
											"end": 4003,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 3992,
											"end": 4015,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3988,
											"end": 4021,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 3985,
											"end": 4038,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3985,
											"end": 4038,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "305"
										},
										{
											"begin": 3985,
											"end": 4038,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4034,
											"end": 4035,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4031,
											"end": 4032,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4024,
											"end": 4036,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 3985,
											"end": 4038,
											"name": "tag",
											"source": 20,
											"value": "305"
										},
										{
											"begin": 3985,
											"end": 4038,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4057,
											"end": 4086,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 4076,
											"end": 4085,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4057,
											"end": 4086,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 4057,
											"end": 4086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4057,
											"end": 4086,
											"name": "tag",
											"source": 20,
											"value": "306"
										},
										{
											"begin": 4057,
											"end": 4086,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4047,
											"end": 4086,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4047,
											"end": 4086,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4105,
											"end": 4143,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 4139,
											"end": 4141,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4128,
											"end": 4137,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 4124,
											"end": 4142,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4105,
											"end": 4143,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 4105,
											"end": 4143,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4105,
											"end": 4143,
											"name": "tag",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 4105,
											"end": 4143,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4095,
											"end": 4143,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4212,
											"end": 4214,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4197,
											"end": 4215,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4197,
											"end": 4215,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4184,
											"end": 4216,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4313,
											"end": 4315,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 4298,
											"end": 4316,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4298,
											"end": 4316,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4285,
											"end": 4317,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4285,
											"end": 4317,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4395,
											"end": 4398,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 4380,
											"end": 4399,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4380,
											"end": 4399,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4367,
											"end": 4400,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4444,
											"end": 4448,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 4431,
											"end": 4449,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4431,
											"end": 4449,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 4419,
											"end": 4450,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4419,
											"end": 4450,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 4409,
											"end": 4468,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "308"
										},
										{
											"begin": 4409,
											"end": 4468,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4464,
											"end": 4465,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4461,
											"end": 4462,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4454,
											"end": 4466,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4409,
											"end": 4468,
											"name": "tag",
											"source": 20,
											"value": "308"
										},
										{
											"begin": 4409,
											"end": 4468,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP10",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP9",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 4487,
											"end": 4494,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 4567,
											"end": 4570,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 4552,
											"end": 4571,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4552,
											"end": 4571,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4539,
											"end": 4572,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4539,
											"end": 4572,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4671,
											"end": 4674,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 4656,
											"end": 4675,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4656,
											"end": 4675,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4656,
											"end": 4675,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4643,
											"end": 4676,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4643,
											"end": 4676,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3805,
											"end": 4708,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3805,
											"end": 4708,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "tag",
											"source": 20,
											"value": "81"
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4781,
											"end": 4787,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4789,
											"end": 4795,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4842,
											"end": 4844,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4830,
											"end": 4839,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 4821,
											"end": 4828,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 4817,
											"end": 4840,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 4813,
											"end": 4845,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 4810,
											"end": 4862,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4810,
											"end": 4862,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 4810,
											"end": 4862,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4858,
											"end": 4859,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4855,
											"end": 4856,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4848,
											"end": 4860,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4810,
											"end": 4862,
											"name": "tag",
											"source": 20,
											"value": "310"
										},
										{
											"begin": 4810,
											"end": 4862,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4881,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 4900,
											"end": 4909,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 4881,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 4881,
											"end": 4910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4881,
											"end": 4910,
											"name": "tag",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 4881,
											"end": 4910,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4871,
											"end": 4910,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4871,
											"end": 4910,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4929,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 4963,
											"end": 4965,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4952,
											"end": 4961,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4948,
											"end": 4966,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4929,
											"end": 4967,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "275"
										},
										{
											"begin": 4929,
											"end": 4967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4929,
											"end": 4967,
											"name": "tag",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 4929,
											"end": 4967,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4919,
											"end": 4967,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4919,
											"end": 4967,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4713,
											"end": 4973,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4978,
											"end": 5358,
											"name": "tag",
											"source": 20,
											"value": "86"
										},
										{
											"begin": 4978,
											"end": 5358,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5057,
											"end": 5058,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 5053,
											"end": 5065,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5053,
											"end": 5065,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5053,
											"end": 5065,
											"name": "SHR",
											"source": 20
										},
										{
											"begin": 5053,
											"end": 5065,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5100,
											"end": 5112,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5100,
											"end": 5112,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5100,
											"end": 5112,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5121,
											"end": 5182,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "314"
										},
										{
											"begin": 5121,
											"end": 5182,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5175,
											"end": 5179,
											"name": "PUSH",
											"source": 20,
											"value": "7F"
										},
										{
											"begin": 5167,
											"end": 5173,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5163,
											"end": 5180,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5153,
											"end": 5180,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5153,
											"end": 5180,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5121,
											"end": 5182,
											"name": "tag",
											"source": 20,
											"value": "314"
										},
										{
											"begin": 5121,
											"end": 5182,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5228,
											"end": 5230,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5220,
											"end": 5226,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5217,
											"end": 5231,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 5197,
											"end": 5215,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5194,
											"end": 5232,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5191,
											"end": 5352,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 5191,
											"end": 5352,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5274,
											"end": 5284,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 5269,
											"end": 5272,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5265,
											"end": 5285,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 5262,
											"end": 5263,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5255,
											"end": 5286,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5309,
											"end": 5313,
											"name": "PUSH",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 5306,
											"end": 5307,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 5299,
											"end": 5314,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5337,
											"end": 5341,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 5334,
											"end": 5335,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5327,
											"end": 5342,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5191,
											"end": 5352,
											"name": "tag",
											"source": 20,
											"value": "315"
										},
										{
											"begin": 5191,
											"end": 5352,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5191,
											"end": 5352,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4978,
											"end": 5358,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 4978,
											"end": 5358,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4978,
											"end": 5358,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4978,
											"end": 5358,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6950,
											"end": 7172,
											"name": "tag",
											"source": 20,
											"value": "211"
										},
										{
											"begin": 6950,
											"end": 7172,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "91"
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7088,
											"end": 7098,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 7083,
											"end": 7086,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 7079,
											"end": 7099,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 7076,
											"end": 7077,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7069,
											"end": 7100,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7123,
											"end": 7127,
											"name": "PUSH",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 7120,
											"end": 7121,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7128,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7151,
											"end": 7155,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 7148,
											"end": 7149,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7141,
											"end": 7156,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 8074,
											"end": 8201,
											"name": "tag",
											"source": 20,
											"value": "242"
										},
										{
											"begin": 8074,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8135,
											"end": 8145,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 8130,
											"end": 8133,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 8126,
											"end": 8146,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 8123,
											"end": 8124,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8116,
											"end": 8147,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8166,
											"end": 8170,
											"name": "PUSH",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 8163,
											"end": 8164,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 8156,
											"end": 8171,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8190,
											"end": 8194,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 8187,
											"end": 8188,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8180,
											"end": 8195,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/contracts/tokens/BulkMinter.sol",
								"contracts/contracts/tokens/MockTokenCreator.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of OpenZeppelin's ERC20 and ERC20Permit contract. Allows for minting and burning of tokens, and includes permit functionality.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Caller must have at least `amount` tokens.\",\"params\":{\"amount\":\"The number of tokens to burn.\"}},\"constructor\":{\"details\":\"Initializes the contract with the token name and symbol, and sets up permit functionality.\",\"params\":{\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"mint(address,uint256)\":{\"details\":\"Caller must have a role that allows them to mint (not implemented in this simple example).\",\"params\":{\"amount\":\"The number of tokens to mint.\",\"to\":\"The address of the recipient.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"title\":\"MockTokenCreator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns `amount` tokens from the caller\\u2019s account.\"},\"mint(address,uint256)\":{\"notice\":\"Mints `amount` tokens to address `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/tokens/MockTokenCreator.sol\":\"MockTokenCreator\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/contracts/tokens/MockTokenCreator.sol\":{\"keccak256\":\"0xb3e56d84fc2d59ef068140e7aaf462d73248976c640bbd31586726f8654cca62\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c72deca63803eb83e9361c1b35b0263d35b3f56eb3106b6837980ec64afffa62\",\"dweb:/ipfs/QmWYSPiELgrTbCjcykLSTSfv81T4bMu271eNB84vVnNgML\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2183,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2185,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1162,
								"contract": "contracts/contracts/tokens/MockTokenCreator.sol:MockTokenCreator",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "Burns `amount` tokens from the callerâ€™s account."
							},
							"mint(address,uint256)": {
								"notice": "Mints `amount` tokens to address `to`."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1148
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1149,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1148,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1148,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1148
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1130,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1130,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							172
						]
					},
					"id": 173,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 172,
							"linearizedBaseContracts": [
								172
							],
							"name": "IERC5267",
							"nameLocation": "143:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 152,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:1"
									},
									"src": "247:28:1"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:1"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "510:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 155,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "537:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 157,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "569:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "604:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "633:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "672:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 165,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "698:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 167,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 168,
													"nodeType": "ArrayTypeName",
													"src": "698:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:1"
									},
									"scope": 172,
									"src": "426:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 173,
							"src": "133:605:1",
							"usedErrors": [],
							"usedEvents": [
								152
							]
						}
					],
					"src": "107:632:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							309
						],
						"IERC20Errors": [
							214
						],
						"IERC721Errors": [
							262
						]
					},
					"id": 310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 174,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 175,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 184,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "652:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "668:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "685:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:2"
									},
									"src": "621:80:2"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 189,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:2"
									},
									"src": "864:41:2"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 194,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "1102:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:2"
									},
									"src": "1075:45:2"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:2",
										"text": " @dev Indicates a failure with the `spender`â€™s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 203,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1509:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1526:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1545:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:2"
									},
									"src": "1476:85:2"
								},
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 208,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1773:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:2"
									},
									"src": "1746:45:2"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 213,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:2"
									},
									"src": "1997:43:2"
								}
							],
							"scope": 310,
							"src": "278:1764:2",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 262,
							"linearizedBaseContracts": [
								262
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 220,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "2465:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:2"
									},
									"src": "2440:40:2"
								},
								{
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 225,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2652:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:2"
									},
									"src": "2623:46:2"
								},
								{
									"documentation": {
										"id": 226,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 234,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "2996:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3012:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3029:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:2"
									},
									"src": "2969:75:2"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 239,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3233:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:2"
									},
									"src": "3207:42:2"
								},
								{
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 244,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "3447:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:2"
									},
									"src": "3419:46:2"
								},
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:2",
										"text": " @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 251,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3756:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3774:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:2"
									},
									"src": "3723:68:2"
								},
								{
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 256,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "4004:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:2"
									},
									"src": "3976:46:2"
								},
								{
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 261,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "4258:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:2"
									},
									"src": "4230:46:2"
								}
							],
							"scope": 310,
							"src": "2186:2092:2",
							"usedErrors": [
								220,
								225,
								234,
								239,
								244,
								251,
								256,
								261
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 263,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 274,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4854:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4887:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4903:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:2"
									},
									"src": "4821:99:2"
								},
								{
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 279,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "5110:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:2"
									},
									"src": "5083:43:2"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 284,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5325:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:2"
									},
									"src": "5296:47:2"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:2",
										"text": " @dev Indicates a failure with the `operator`â€™s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 291,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5645:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5663:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:2"
									},
									"src": "5610:68:2"
								},
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 296,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "5892:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:2"
									},
									"src": "5863:47:2"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 301,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "6147:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:2"
									},
									"src": "6118:47:2"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 308,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6488:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6507:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:2"
									},
									"src": "6456:73:2"
								}
							],
							"scope": 310,
							"src": "4424:2107:2",
							"usedErrors": [
								274,
								279,
								284,
								291,
								296,
								301,
								308
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1148
						],
						"ERC20": [
							824
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1082
						]
					},
					"id": 825,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 311,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 313,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 903,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 312,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 315,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1083,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 314,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1082,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 317,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1149,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 316,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1148,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 319,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 310,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 318,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 321,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1148,
										"src": "1428:7:3"
									},
									"id": 322,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 323,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "1437:6:3"
									},
									"id": 324,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 325,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1082,
										"src": "1445:14:3"
									},
									"id": 326,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 327,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "1461:12:3"
									},
									"id": 328,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 320,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 824,
							"linearizedBaseContracts": [
								824,
								214,
								1082,
								902,
								1148
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 332,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 331,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 329,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 330,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 338,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 337,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 333,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 336,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 334,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 335,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 340,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 339,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 342,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 341,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 344,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 343,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 352,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 342,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 353,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 356,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 357,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 349,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 361,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 346,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 824,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1069
									],
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 367,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 342,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 366,
												"id": 368,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 364,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 824,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1075
									],
									"body": {
										"id": 378,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 376,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 344,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 375,
												"id": 377,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 373,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 824,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1081
									],
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 384,
												"id": 386,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 382,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 824,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										851
									],
									"body": {
										"id": 396,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 394,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 340,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 393,
												"id": 395,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 824,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										859
									],
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 405,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 407,
													"indexExpression": {
														"id": 406,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 404,
												"id": 408,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 824,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										869
									],
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													421
												],
												"declarations": [
													{
														"constant": false,
														"id": 421,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 420,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 422,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1130,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 426,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 427,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 428,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 425,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 419,
												"id": 432,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 824,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										879
									],
									"body": {
										"id": 450,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 444,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 446,
														"indexExpression": {
															"id": 445,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 448,
													"indexExpression": {
														"id": 447,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 439,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 443,
												"id": 449,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 451,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 824,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										889
									],
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													462
												],
												"declarations": [
													{
														"constant": false,
														"id": 462,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 461,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 465,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 463,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1130,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 467,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 466,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 460,
												"id": 473,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 458,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 824,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										901
									],
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													488
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 487,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 491,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 489,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1130,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 494,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 492,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 497,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 499,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 500,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 501,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 498,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 486,
												"id": 505,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 484,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 824,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 553,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 517,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 510,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 518,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 531,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 530,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 526,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 524,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 523,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 529,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 532,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 533,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 536,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 546,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 545,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 541,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 539,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 538,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 544,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 510,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 514,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 547,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 552,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 824,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 564,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 557,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 565,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 601,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																576
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 576,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 601,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 575,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 580,
															"initialValue": {
																"baseExpression": {
																	"id": 577,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 332,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 579,
																"indexExpression": {
																	"id": 578,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 583,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 581,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 576,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 582,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 591,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 590,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 585,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 557,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 586,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 576,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 587,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 561,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 584,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 588,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 589,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 600,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 592,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 594,
																			"indexExpression": {
																				"id": 593,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 557,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 595,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 576,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 596,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 561,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 599,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 602,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 574,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 570,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 571,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 573,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 603,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 604,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 622,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 621,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 615,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 617,
																			"indexExpression": {
																				"id": 616,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 559,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 618,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 620,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 623,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 614,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 613,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 609,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 340,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 610,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 612,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 625,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 626,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 627,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 624,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 836,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 629,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 824,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 639,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 640,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 653,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 652,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 648,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 646,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 645,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 651,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 655,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 659,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 660,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 824,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 672,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 673,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 676,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 681,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 679,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 678,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 684,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 688,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 689,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 692,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 693,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 687,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 824,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 710,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 707,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 775,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 824,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 774,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 727,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 728,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 741,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 740,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 736,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 734,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 733,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 739,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 742,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 744,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 743,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 746,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 756,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 755,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 751,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 750,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 749,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 748,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 754,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 757,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 338,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 760,
															"indexExpression": {
																"id": 758,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 761,
														"indexExpression": {
															"id": 759,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 762,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 722,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 764,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 765,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 724,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 773,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 767,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 718,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 768,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 720,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 769,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 766,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 771,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 723,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 824,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													786
												],
												"declarations": [
													{
														"constant": false,
														"id": 786,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 822,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 785,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 791,
												"initialValue": {
													"arguments": [
														{
															"id": 788,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 789,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 787,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 451,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 792,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 786,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 794,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 793,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 821,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 820,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 799,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 800,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 809,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 808,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 803,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 780,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 804,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 805,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 802,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 203,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 807,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 819,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 811,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 778,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 812,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 780,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 815,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 813,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 814,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 816,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 810,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				715,
																				775
																			],
																			"referencedDeclaration": 775,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 818,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 776,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 781,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 824,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 825,
							"src": "1401:9741:3",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						]
					},
					"id": 903,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 826,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 827,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 902,
							"linearizedBaseContracts": [
								902
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 836,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 845,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 846,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 851,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 851,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 902,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 852,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 859,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 902,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 866,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 902,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 879,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 902,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 880,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 886,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 902,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 898,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 902,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 903,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							2146
						],
						"EIP712": [
							2373
						],
						"ERC20": [
							824
						],
						"ERC20Permit": [
							1056
						],
						"IERC20Permit": [
							1118
						],
						"Nonces": [
							1216
						]
					},
					"id": 1057,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 904,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 906,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1057,
							"sourceUnit": 1119,
							"src": "148:48:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 905,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1118,
										"src": "156:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 908,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1057,
							"sourceUnit": 825,
							"src": "197:35:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 907,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "205:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 910,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1057,
							"sourceUnit": 2147,
							"src": "233:60:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 909,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2146,
										"src": "241:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 912,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1057,
							"sourceUnit": 2374,
							"src": "294:62:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 911,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2373,
										"src": "302:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 914,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1057,
							"sourceUnit": 1217,
							"src": "357:49:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 913,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1216,
										"src": "365:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 916,
										"name": "ERC20",
										"nameLocations": [
											"929:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "929:5:5"
									},
									"id": 917,
									"nodeType": "InheritanceSpecifier",
									"src": "929:5:5"
								},
								{
									"baseName": {
										"id": 918,
										"name": "IERC20Permit",
										"nameLocations": [
											"936:12:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1118,
										"src": "936:12:5"
									},
									"id": 919,
									"nodeType": "InheritanceSpecifier",
									"src": "936:12:5"
								},
								{
									"baseName": {
										"id": 920,
										"name": "EIP712",
										"nameLocations": [
											"950:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2373,
										"src": "950:6:5"
									},
									"id": 921,
									"nodeType": "InheritanceSpecifier",
									"src": "950:6:5"
								},
								{
									"baseName": {
										"id": 922,
										"name": "Nonces",
										"nameLocations": [
											"958:6:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1216,
										"src": "958:6:5"
									},
									"id": 923,
									"nodeType": "InheritanceSpecifier",
									"src": "958:6:5"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 915,
								"nodeType": "StructuredDocumentation",
								"src": "408:487:5",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1056,
							"linearizedBaseContracts": [
								1056,
								1216,
								2373,
								172,
								1118,
								824,
								214,
								1082,
								902,
								1148
							],
							"name": "ERC20Permit",
							"nameLocation": "914:11:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 928,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "996:15:5",
									"nodeType": "VariableDeclaration",
									"scope": 1056,
									"src": "971:146:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 924,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "971:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 926,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1032:84:5",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 925,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1022:9:5",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 927,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1022:95:5",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 929,
										"nodeType": "StructuredDocumentation",
										"src": "1124:52:5",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 933,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1187:23:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1219:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 933,
												"src": "1211:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:18:5"
									},
									"src": "1181:48:5"
								},
								{
									"documentation": {
										"id": 934,
										"nodeType": "StructuredDocumentation",
										"src": "1235:45:5",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 940,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1291:20:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 939,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 936,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1320:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "1312:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 935,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1312:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 938,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1336:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 940,
												"src": "1328:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 937,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1328:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:31:5"
									},
									"src": "1285:58:5"
								},
								{
									"body": {
										"id": 950,
										"nodeType": "Block",
										"src": "1624:2:5",
										"statements": []
									},
									"documentation": {
										"id": 941,
										"nodeType": "StructuredDocumentation",
										"src": "1349:220:5",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 951,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 946,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 943,
													"src": "1613:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 947,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1619:3:5",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 948,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 945,
												"name": "EIP712",
												"nameLocations": [
													"1606:6:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2373,
												"src": "1606:6:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "1606:17:5"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1600:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 951,
												"src": "1586:18:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 942,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:5"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1624:0:5"
									},
									"scope": 1056,
									"src": "1574:52:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1103
									],
									"body": {
										"id": 1027,
										"nodeType": "Block",
										"src": "1869:483:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 972,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 969,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1883:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 970,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1889:9:5",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1883:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 971,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 960,
														"src": "1901:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1883:26:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 978,
												"nodeType": "IfStatement",
												"src": "1879:97:5",
												"trueBody": {
													"id": 977,
													"nodeType": "Block",
													"src": "1911:65:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 974,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 960,
																		"src": "1956:8:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 973,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 933,
																	"src": "1932:23:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1932:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 976,
															"nodeType": "RevertStatement",
															"src": "1925:40:5"
														}
													]
												}
											},
											{
												"assignments": [
													980
												],
												"declarations": [
													{
														"constant": false,
														"id": 980,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "1994:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1027,
														"src": "1986:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 979,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1986:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 994,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 984,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 928,
																	"src": "2028:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 985,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 954,
																	"src": "2045:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 986,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 956,
																	"src": "2052:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 987,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 958,
																	"src": "2061:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 989,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 954,
																			"src": "2078:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 988,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1190,
																		"src": "2068:9:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 990,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2068:16:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 991,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 960,
																	"src": "2086:8:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 982,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2017:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 983,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2021:6:5",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2017:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:78:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 981,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2007:9:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2007:89:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:110:5"
											},
											{
												"assignments": [
													996
												],
												"declarations": [
													{
														"constant": false,
														"id": 996,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2115:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 1027,
														"src": "2107:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 995,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2107:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1000,
												"initialValue": {
													"arguments": [
														{
															"id": 998,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 980,
															"src": "2139:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 997,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2306,
														"src": "2122:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2122:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2107:43:5"
											},
											{
												"assignments": [
													1002
												],
												"declarations": [
													{
														"constant": false,
														"id": 1002,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2169:6:5",
														"nodeType": "VariableDeclaration",
														"scope": 1027,
														"src": "2161:14:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1001,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2161:7:5",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1010,
												"initialValue": {
													"arguments": [
														{
															"id": 1005,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 996,
															"src": "2192:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1006,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 962,
															"src": "2198:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1007,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "2201:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1008,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "2204:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1003,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "2178:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2146_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2184:7:5",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2096,
														"src": "2178:13:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2178:28:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2161:45:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1011,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1002,
														"src": "2220:6:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1012,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 954,
														"src": "2230:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1020,
												"nodeType": "IfStatement",
												"src": "2216:88:5",
												"trueBody": {
													"id": 1019,
													"nodeType": "Block",
													"src": "2237:67:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1015,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1002,
																		"src": "2279:6:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1016,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 954,
																		"src": "2287:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1014,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 940,
																	"src": "2258:20:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:35:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1018,
															"nodeType": "RevertStatement",
															"src": "2251:42:5"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1022,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 954,
															"src": "2323:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1023,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 956,
															"src": "2330:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1024,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 958,
															"src": "2339:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1021,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "2314:8:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2314:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1026,
												"nodeType": "ExpressionStatement",
												"src": "2314:31:5"
											}
										]
									},
									"documentation": {
										"id": 952,
										"nodeType": "StructuredDocumentation",
										"src": "1632:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1028,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1689:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1713:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1705:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 953,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1736:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1728:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1761:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1753:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 957,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1784:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1776:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1776:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1808:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1802:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 961,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1802:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1827:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1819:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 963,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1819:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1846:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "1838:9:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 965,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:158:5"
									},
									"returnParameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1869:0:5"
									},
									"scope": 1056,
									"src": "1680:672:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1111,
										1175
									],
									"body": {
										"id": 1044,
										"nodeType": "Block",
										"src": "2506:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1041,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1031,
															"src": "2536:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1039,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2523:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$1056_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 1040,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2529:6:5",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1175,
														"src": "2523:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1042,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2523:19:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1038,
												"id": 1043,
												"nodeType": "Return",
												"src": "2516:26:5"
											}
										]
									},
									"documentation": {
										"id": 1029,
										"nodeType": "StructuredDocumentation",
										"src": "2358:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1045,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2415:6:5",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1035,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1033,
												"name": "IERC20Permit",
												"nameLocations": [
													"2466:12:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1118,
												"src": "2466:12:5"
											},
											{
												"id": 1034,
												"name": "Nonces",
												"nameLocations": [
													"2480:6:5"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1216,
												"src": "2480:6:5"
											}
										],
										"src": "2457:30:5"
									},
									"parameters": {
										"id": 1032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2430:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "2422:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1030,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2422:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2421:15:5"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1045,
												"src": "2497:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2496:9:5"
									},
									"scope": 1056,
									"src": "2406:143:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1117
									],
									"body": {
										"id": 1054,
										"nodeType": "Block",
										"src": "2724:44:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1051,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2269,
														"src": "2741:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1050,
												"id": 1053,
												"nodeType": "Return",
												"src": "2734:27:5"
											}
										]
									},
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:5",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1055,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2665:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2681:2:5"
									},
									"returnParameters": {
										"id": 1050,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1049,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1055,
												"src": "2715:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1048,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:9:5"
									},
									"scope": 1056,
									"src": "2656:112:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1057,
							"src": "896:1874:5",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								933,
								940,
								1158,
								1230,
								1232,
								1809,
								1814,
								1819
							],
							"usedEvents": [
								152,
								836,
								845
							]
						}
					],
					"src": "122:2649:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						],
						"IERC20Metadata": [
							1082
						]
					},
					"id": 1083,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1058,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1060,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1083,
							"sourceUnit": 903,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1059,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1062,
										"name": "IERC20",
										"nameLocations": [
											"305:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "305:6:6"
									},
									"id": 1063,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1061,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:6",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1082,
							"linearizedBaseContracts": [
								1082,
								902
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1064,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1069,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:6"
									},
									"returnParameters": {
										"id": 1068,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "416:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1066,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:6"
									},
									"scope": 1082,
									"src": "377:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1075,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1071,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:6"
									},
									"returnParameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1073,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1075,
												"src": "539:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1072,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:6"
									},
									"scope": 1082,
									"src": "498:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1076,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1081,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:6"
									},
									"returnParameters": {
										"id": 1080,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1079,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1081,
												"src": "673:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1078,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:6"
									},
									"scope": 1082,
									"src": "630:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1083,
							"src": "277:405:6",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "125:558:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1118
						]
					},
					"id": 1119,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1084,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1085,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:7",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1118,
							"linearizedBaseContracts": [
								1118
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1086,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:7",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1103,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1088,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3022:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1087,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3045:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3070:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3093:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3119:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1095,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1098,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3136:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1097,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1100,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "3155:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1099,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:7"
									},
									"returnParameters": {
										"id": 1102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:7"
									},
									"scope": 1118,
									"src": "2997:183:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:7",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1111,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "3501:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1105,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:7"
									},
									"returnParameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1111,
												"src": "3539:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:7"
									},
									"scope": 1118,
									"src": "3485:63:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1112,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:7",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1117,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:7"
									},
									"returnParameters": {
										"id": 1116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1117,
												"src": "3791:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1114,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:7"
									},
									"scope": 1118,
									"src": "3740:60:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1119,
							"src": "2113:1689:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1148
						]
					},
					"id": 1149,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1120,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1121,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1148,
							"linearizedBaseContracts": [
								1148
							],
							"name": "Context",
							"nameLocation": "642:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1129,
										"nodeType": "Block",
										"src": "718:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1126,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1127,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1125,
												"id": 1128,
												"nodeType": "Return",
												"src": "728:17:8"
											}
										]
									},
									"id": 1130,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:8"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1130,
												"src": "709:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1123,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:8"
									},
									"scope": 1148,
									"src": "656:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1138,
										"nodeType": "Block",
										"src": "825:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1135,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:8",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1134,
												"id": 1137,
												"nodeType": "Return",
												"src": "835:15:8"
											}
										]
									},
									"id": 1139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:8"
									},
									"returnParameters": {
										"id": 1134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1133,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "809:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1132,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:8"
									},
									"scope": 1148,
									"src": "758:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1146,
										"nodeType": "Block",
										"src": "935:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1143,
												"id": 1145,
												"nodeType": "Return",
												"src": "945:8:8"
											}
										]
									},
									"id": 1147,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:8"
									},
									"returnParameters": {
										"id": 1143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1147,
												"src": "926:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:8"
									},
									"scope": 1148,
									"src": "863:97:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1149,
							"src": "624:338:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1216
						]
					},
					"id": 1217,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1150,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1151,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:9",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1216,
							"linearizedBaseContracts": [
								1216
							],
							"name": "Nonces",
							"nameLocation": "227:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1152,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:9",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1158,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1158,
												"src": "361:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:9",
												"nodeType": "VariableDeclaration",
												"scope": 1158,
												"src": "378:20:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:9"
									},
									"src": "335:65:9"
								},
								{
									"constant": false,
									"id": 1162,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 1216,
									"src": "406:51:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1161,
										"keyName": "account",
										"keyNameLocation": "422:7:9",
										"keyType": {
											"id": 1159,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1160,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1174,
										"nodeType": "Block",
										"src": "607:38:9",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1170,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1162,
														"src": "624:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1172,
													"indexExpression": {
														"id": 1171,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1165,
														"src": "632:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1169,
												"id": 1173,
												"nodeType": "Return",
												"src": "617:21:9"
											}
										]
									},
									"documentation": {
										"id": 1163,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:9",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1175,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "554:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1164,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:9"
									},
									"returnParameters": {
										"id": 1169,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "598:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:9"
									},
									"scope": 1216,
									"src": "538:107:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1189,
										"nodeType": "Block",
										"src": "828:326:9",
										"statements": [
											{
												"id": 1188,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:9",
												"statements": [
													{
														"expression": {
															"id": 1186,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:9",
															"subExpression": {
																"baseExpression": {
																	"id": 1183,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1162,
																	"src": "1121:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1185,
																"indexExpression": {
																	"id": 1184,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1178,
																	"src": "1129:5:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1182,
														"id": 1187,
														"nodeType": "Return",
														"src": "1114:23:9"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1176,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:9",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1190,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "778:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:9"
									},
									"returnParameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1190,
												"src": "819:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1180,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:9"
									},
									"scope": 1216,
									"src": "759:395:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1214,
										"nodeType": "Block",
										"src": "1338:149:9",
										"statements": [
											{
												"assignments": [
													1199
												],
												"declarations": [
													{
														"constant": false,
														"id": 1199,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 1214,
														"src": "1348:15:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1198,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1203,
												"initialValue": {
													"arguments": [
														{
															"id": 1201,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "1376:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1200,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1190,
														"src": "1366:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:9"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1204,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1195,
														"src": "1396:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1205,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "1405:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1213,
												"nodeType": "IfStatement",
												"src": "1392:89:9",
												"trueBody": {
													"id": 1212,
													"nodeType": "Block",
													"src": "1414:67:9",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1208,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1193,
																		"src": "1455:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1209,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1199,
																		"src": "1462:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1207,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1158,
																	"src": "1435:19:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256) pure returns (error)"
																	}
																},
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1211,
															"nodeType": "RevertStatement",
															"src": "1428:42:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1191,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:9",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1215,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "1291:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1215,
												"src": "1306:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:9"
									},
									"returnParameters": {
										"id": 1197,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:9"
									},
									"scope": 1216,
									"src": "1265:222:9",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1217,
							"src": "209:1280:9",
							"usedErrors": [
								1158
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1222
						],
						"ShortStrings": [
							1433
						],
						"StorageSlot": [
							1543
						]
					},
					"id": 1434,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1218,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1220,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1434,
							"sourceUnit": 1544,
							"src": "132:46:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1219,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1543,
										"src": "140:11:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1222,
							"name": "ShortString",
							"nameLocation": "353:11:10",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:10",
							"underlyingType": {
								"id": 1221,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:10",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1223,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:10",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1433,
							"linearizedBaseContracts": [
								1433
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1226,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:10",
									"nodeType": "VariableDeclaration",
									"scope": 1433,
									"src": "1345:111:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1224,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1225,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:10",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1230,
									"name": "StringTooLong",
									"nameLocation": "1469:13:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1230,
												"src": "1483:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1227,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:10"
									},
									"src": "1463:32:10"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1232,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:10"
									},
									"src": "1500:27:10"
								},
								{
									"body": {
										"id": 1275,
										"nodeType": "Block",
										"src": "1786:208:10",
										"statements": [
											{
												"assignments": [
													1242
												],
												"declarations": [
													{
														"constant": false,
														"id": 1242,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1275,
														"src": "1796:17:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1241,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1247,
												"initialValue": {
													"arguments": [
														{
															"id": 1245,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1235,
															"src": "1822:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1244,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1243,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:10",
															"typeDescriptions": {}
														}
													},
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1248,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1242,
															"src": "1840:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1249,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1250,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1257,
												"nodeType": "IfStatement",
												"src": "1836:72:10",
												"trueBody": {
													"id": 1256,
													"nodeType": "Block",
													"src": "1858:50:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1253,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1235,
																		"src": "1893:3:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1252,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1230,
																	"src": "1879:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (string memory) pure returns (error)"
																	}
																},
																"id": 1254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1255,
															"nodeType": "RevertStatement",
															"src": "1872:25:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1271,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1266,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1242,
																						"src": "1965:4:10",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1265,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1264,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:10",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1267,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:10",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1262,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1269,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1242,
																			"src": "1974:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1270,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:10",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1261,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1260,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1258,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1222,
															"src": "1924:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1222_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1259,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:10",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1222_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1273,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1240,
												"id": 1274,
												"nodeType": "Return",
												"src": "1917:70:10"
											}
										]
									},
									"documentation": {
										"id": 1233,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:10",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1276,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1236,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:10",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "1731:17:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1234,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:10"
									},
									"returnParameters": {
										"id": 1240,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "1773:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1238,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1237,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "1773:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "1773:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:10"
									},
									"scope": 1433,
									"src": "1708:286:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1301,
										"nodeType": "Block",
										"src": "2152:331:10",
										"statements": [
											{
												"assignments": [
													1286
												],
												"declarations": [
													{
														"constant": false,
														"id": 1286,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:10",
														"nodeType": "VariableDeclaration",
														"scope": 1301,
														"src": "2162:11:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1285,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1290,
												"initialValue": {
													"arguments": [
														{
															"id": 1288,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1280,
															"src": "2187:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																"typeString": "ShortString"
															}
														],
														"id": 1287,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1334,
														"src": "2176:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:10"
											},
											{
												"assignments": [
													1292
												],
												"declarations": [
													{
														"constant": false,
														"id": 1292,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:10",
														"nodeType": "VariableDeclaration",
														"scope": 1301,
														"src": "2280:17:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1291,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1297,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1294,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1293,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1296,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:10"
											},
											{
												"AST": {
													"nativeSrc": "2376:81:10",
													"nodeType": "YulBlock",
													"src": "2376:81:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2397:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "2397:3:10"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2402:3:10",
																		"nodeType": "YulIdentifier",
																		"src": "2402:3:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2390:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2390:6:10"
																},
																"nativeSrc": "2390:16:10",
																"nodeType": "YulFunctionCall",
																"src": "2390:16:10"
															},
															"nativeSrc": "2390:16:10",
															"nodeType": "YulExpressionStatement",
															"src": "2390:16:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2430:3:10",
																				"nodeType": "YulIdentifier",
																				"src": "2430:3:10"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2435:4:10",
																				"nodeType": "YulLiteral",
																				"src": "2435:4:10",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2426:3:10",
																			"nodeType": "YulIdentifier",
																			"src": "2426:3:10"
																		},
																		"nativeSrc": "2426:14:10",
																		"nodeType": "YulFunctionCall",
																		"src": "2426:14:10"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2442:4:10",
																		"nodeType": "YulIdentifier",
																		"src": "2442:4:10"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2419:6:10",
																	"nodeType": "YulIdentifier",
																	"src": "2419:6:10"
																},
																"nativeSrc": "2419:28:10",
																"nodeType": "YulFunctionCall",
																"src": "2419:28:10"
															},
															"nativeSrc": "2419:28:10",
															"nodeType": "YulExpressionStatement",
															"src": "2419:28:10"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1286,
														"isOffset": false,
														"isSlot": false,
														"src": "2402:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1280,
														"isOffset": false,
														"isSlot": false,
														"src": "2442:4:10",
														"valueSize": 1
													},
													{
														"declaration": 1292,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:3:10",
														"valueSize": 1
													},
													{
														"declaration": 1292,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:3:10",
														"valueSize": 1
													}
												],
												"id": 1298,
												"nodeType": "InlineAssembly",
												"src": "2367:90:10"
											},
											{
												"expression": {
													"id": 1299,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1292,
													"src": "2473:3:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1284,
												"id": 1300,
												"nodeType": "Return",
												"src": "2466:10:10"
											}
										]
									},
									"documentation": {
										"id": 1277,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:10",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1302,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "2096:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1279,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1278,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "2096:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "2096:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:10"
									},
									"returnParameters": {
										"id": 1284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1283,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1302,
												"src": "2137:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1282,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:10"
									},
									"scope": 1433,
									"src": "2078:405:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1333,
										"nodeType": "Block",
										"src": "2625:175:10",
										"statements": [
											{
												"assignments": [
													1312
												],
												"declarations": [
													{
														"constant": false,
														"id": 1312,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2643:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1333,
														"src": "2635:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1311,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2635:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1322,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1317,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1306,
																		"src": "2679:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1315,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1222,
																		"src": "2660:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1222_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1316,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2672:6:10",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2660:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2660:24:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2652:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1313,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2652:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 1319,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2652:33:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1320,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2652:40:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2635:57:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1325,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1323,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1312,
														"src": "2706:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1324,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2715:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2706:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1330,
												"nodeType": "IfStatement",
												"src": "2702:69:10",
												"trueBody": {
													"id": 1329,
													"nodeType": "Block",
													"src": "2719:52:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1326,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1232,
																	"src": "2740:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1327,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2740:20:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1328,
															"nodeType": "RevertStatement",
															"src": "2733:27:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1331,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1312,
													"src": "2787:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1310,
												"id": 1332,
												"nodeType": "Return",
												"src": "2780:13:10"
											}
										]
									},
									"documentation": {
										"id": 1303,
										"nodeType": "StructuredDocumentation",
										"src": "2489:61:10",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1334,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2564:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1306,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2587:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "2575:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1305,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1304,
														"name": "ShortString",
														"nameLocations": [
															"2575:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "2575:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "2575:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2574:18:10"
									},
									"returnParameters": {
										"id": 1310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1334,
												"src": "2616:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2615:9:10"
									},
									"scope": 1433,
									"src": "2555:245:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1373,
										"nodeType": "Block",
										"src": "3023:231:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1347,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1337,
																	"src": "3043:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1346,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3037:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1345,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3037:5:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1348,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3037:12:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1349,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3050:6:10",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3037:19:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1350,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:2:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3037:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1371,
													"nodeType": "Block",
													"src": "3121:127:10",
													"statements": [
														{
															"expression": {
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1360,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1339,
																				"src": "3161:5:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1357,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1543,
																				"src": "3135:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1543_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1359,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3147:13:10",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1520,
																			"src": "3135:25:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1451_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3135:32:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1451_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3168:5:10",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1450,
																	"src": "3135:38:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1363,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1337,
																	"src": "3176:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3135:46:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1365,
															"nodeType": "ExpressionStatement",
															"src": "3135:46:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1368,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1226,
																		"src": "3219:17:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1366,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1222,
																		"src": "3202:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1222_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1367,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3214:4:10",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3202:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1222_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1369,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:35:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1344,
															"id": 1370,
															"nodeType": "Return",
															"src": "3195:42:10"
														}
													]
												},
												"id": 1372,
												"nodeType": "IfStatement",
												"src": "3033:215:10",
												"trueBody": {
													"id": 1356,
													"nodeType": "Block",
													"src": "3063:52:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1353,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1337,
																		"src": "3098:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1352,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1276,
																	"src": "3084:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1222_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1354,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3084:20:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1344,
															"id": 1355,
															"nodeType": "Return",
															"src": "3077:27:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1335,
										"nodeType": "StructuredDocumentation",
										"src": "2806:103:10",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1374,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2923:25:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1337,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2963:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "2949:19:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1336,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1339,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2985:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "2970:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1338,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2970:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:43:10"
									},
									"returnParameters": {
										"id": 1344,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1374,
												"src": "3010:11:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1342,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1341,
														"name": "ShortString",
														"nameLocations": [
															"3010:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "3010:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "3010:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3009:13:10"
									},
									"scope": 1433,
									"src": "2914:340:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1400,
										"nodeType": "Block",
										"src": "3494:158:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1387,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1378,
																"src": "3527:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1385,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1222,
																"src": "3508:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1222_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3520:6:10",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3508:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1388,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3508:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1389,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "3537:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3508:46:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1398,
													"nodeType": "Block",
													"src": "3609:37:10",
													"statements": [
														{
															"expression": {
																"id": 1396,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1380,
																"src": "3630:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1384,
															"id": 1397,
															"nodeType": "Return",
															"src": "3623:12:10"
														}
													]
												},
												"id": 1399,
												"nodeType": "IfStatement",
												"src": "3504:142:10",
												"trueBody": {
													"id": 1395,
													"nodeType": "Block",
													"src": "3556:47:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1392,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1378,
																		"src": "3586:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1391,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1302,
																	"src": "3577:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3577:15:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1384,
															"id": 1394,
															"nodeType": "Return",
															"src": "3570:22:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1375,
										"nodeType": "StructuredDocumentation",
										"src": "3260:120:10",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3394:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3427:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "3415:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1377,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1376,
														"name": "ShortString",
														"nameLocations": [
															"3415:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "3415:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "3415:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1380,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3449:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "3434:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1379,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3434:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:41:10"
									},
									"returnParameters": {
										"id": 1384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "3479:13:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3479:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:15:10"
									},
									"scope": 1433,
									"src": "3385:267:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1431,
										"nodeType": "Block",
										"src": "4132:174:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1417,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1414,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1405,
																"src": "4165:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1412,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1222,
																"src": "4146:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1222_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1413,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4158:6:10",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4146:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1415,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4146:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1416,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1226,
														"src": "4175:17:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4146:46:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1429,
													"nodeType": "Block",
													"src": "4249:51:10",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1425,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1407,
																			"src": "4276:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1423,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:5:10",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1426,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:12:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1427,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4283:6:10",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4270:19:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1411,
															"id": 1428,
															"nodeType": "Return",
															"src": "4263:26:10"
														}
													]
												},
												"id": 1430,
												"nodeType": "IfStatement",
												"src": "4142:158:10",
												"trueBody": {
													"id": 1422,
													"nodeType": "Block",
													"src": "4194:49:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1419,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1405,
																		"src": "4226:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1418,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1334,
																	"src": "4215:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1222_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4215:17:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1411,
															"id": 1421,
															"nodeType": "Return",
															"src": "4208:24:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1402,
										"nodeType": "StructuredDocumentation",
										"src": "3658:364:10",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4036:22:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4071:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "4059:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1404,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1403,
														"name": "ShortString",
														"nameLocations": [
															"4059:11:10"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1222,
														"src": "4059:11:10"
													},
													"referencedDeclaration": 1222,
													"src": "4059:11:10",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4093:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "4078:20:10",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1406,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4078:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4058:41:10"
									},
									"returnParameters": {
										"id": 1411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1432,
												"src": "4123:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1409,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4122:9:10"
									},
									"scope": 1433,
									"src": "4027:279:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1434,
							"src": "1255:3053:10",
							"usedErrors": [
								1230,
								1232
							],
							"usedEvents": []
						}
					],
					"src": "106:4203:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1543
						]
					},
					"id": 1544,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1435,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1436,
								"nodeType": "StructuredDocumentation",
								"src": "219:1025:11",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1543,
							"linearizedBaseContracts": [
								1543
							],
							"name": "StorageSlot",
							"nameLocation": "1253:11:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1439,
									"members": [
										{
											"constant": false,
											"id": 1438,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1308:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1439,
											"src": "1300:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1437,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1300:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1278:11:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1271:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1442,
									"members": [
										{
											"constant": false,
											"id": 1441,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1360:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1442,
											"src": "1355:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1440,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1355:4:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1333:11:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1326:46:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1445,
									"members": [
										{
											"constant": false,
											"id": 1444,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1415:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1445,
											"src": "1407:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1443,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1407:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1385:11:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1378:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1448,
									"members": [
										{
											"constant": false,
											"id": 1447,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1448,
											"src": "1462:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1446,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1440:11:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1433:49:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1451,
									"members": [
										{
											"constant": false,
											"id": 1450,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1523:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1451,
											"src": "1516:12:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1449,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1516:6:11",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1495:10:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1488:47:11",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1454,
									"members": [
										{
											"constant": false,
											"id": 1453,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1574:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1454,
											"src": "1568:11:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1452,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1568:5:11",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1548:9:11",
									"nodeType": "StructDefinition",
									"scope": 1543,
									"src": "1541:45:11",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1464,
										"nodeType": "Block",
										"src": "1768:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1830:38:11",
													"nodeType": "YulBlock",
													"src": "1830:38:11",
													"statements": [
														{
															"nativeSrc": "1844:14:11",
															"nodeType": "YulAssignment",
															"src": "1844:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "1854:4:11",
																"nodeType": "YulIdentifier",
																"src": "1854:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "1844:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1461,
														"isOffset": false,
														"isSlot": true,
														"src": "1844:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1457,
														"isOffset": false,
														"isSlot": false,
														"src": "1854:4:11",
														"valueSize": 1
													}
												],
												"id": 1463,
												"nodeType": "InlineAssembly",
												"src": "1821:47:11"
											}
										]
									},
									"documentation": {
										"id": 1455,
										"nodeType": "StructuredDocumentation",
										"src": "1592:87:11",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1693:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1457,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1716:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1708:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1456,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:14:11"
									},
									"returnParameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1765:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1465,
												"src": "1745:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1439_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1460,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1459,
														"name": "AddressSlot",
														"nameLocations": [
															"1745:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1439,
														"src": "1745:11:11"
													},
													"referencedDeclaration": 1439,
													"src": "1745:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1439_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:23:11"
									},
									"scope": 1543,
									"src": "1684:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1475,
										"nodeType": "Block",
										"src": "2056:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2118:38:11",
													"nodeType": "YulBlock",
													"src": "2118:38:11",
													"statements": [
														{
															"nativeSrc": "2132:14:11",
															"nodeType": "YulAssignment",
															"src": "2132:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "2142:4:11",
																"nodeType": "YulIdentifier",
																"src": "2142:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2132:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2132:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1472,
														"isOffset": false,
														"isSlot": true,
														"src": "2132:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1468,
														"isOffset": false,
														"isSlot": false,
														"src": "2142:4:11",
														"valueSize": 1
													}
												],
												"id": 1474,
												"nodeType": "InlineAssembly",
												"src": "2109:47:11"
											}
										]
									},
									"documentation": {
										"id": 1466,
										"nodeType": "StructuredDocumentation",
										"src": "1880:87:11",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1476,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1981:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1468,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2004:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1476,
												"src": "1996:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1467,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:11"
									},
									"returnParameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2053:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1476,
												"src": "2033:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1442_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1471,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1470,
														"name": "BooleanSlot",
														"nameLocations": [
															"2033:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1442,
														"src": "2033:11:11"
													},
													"referencedDeclaration": 1442,
													"src": "2033:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1442_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2032:23:11"
									},
									"scope": 1543,
									"src": "1972:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1486,
										"nodeType": "Block",
										"src": "2344:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2406:38:11",
													"nodeType": "YulBlock",
													"src": "2406:38:11",
													"statements": [
														{
															"nativeSrc": "2420:14:11",
															"nodeType": "YulAssignment",
															"src": "2420:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "2430:4:11",
																"nodeType": "YulIdentifier",
																"src": "2430:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2420:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2420:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1483,
														"isOffset": false,
														"isSlot": true,
														"src": "2420:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1479,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:4:11",
														"valueSize": 1
													}
												],
												"id": 1485,
												"nodeType": "InlineAssembly",
												"src": "2397:47:11"
											}
										]
									},
									"documentation": {
										"id": 1477,
										"nodeType": "StructuredDocumentation",
										"src": "2168:87:11",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2269:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2292:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "2284:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1478,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2284:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2283:14:11"
									},
									"returnParameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2341:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "2321:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1445_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1482,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1481,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2321:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1445,
														"src": "2321:11:11"
													},
													"referencedDeclaration": 1445,
													"src": "2321:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1445_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2320:23:11"
									},
									"scope": 1543,
									"src": "2260:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1497,
										"nodeType": "Block",
										"src": "2632:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2694:38:11",
													"nodeType": "YulBlock",
													"src": "2694:38:11",
													"statements": [
														{
															"nativeSrc": "2708:14:11",
															"nodeType": "YulAssignment",
															"src": "2708:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "2718:4:11",
																"nodeType": "YulIdentifier",
																"src": "2718:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2708:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2708:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1494,
														"isOffset": false,
														"isSlot": true,
														"src": "2708:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1490,
														"isOffset": false,
														"isSlot": false,
														"src": "2718:4:11",
														"valueSize": 1
													}
												],
												"id": 1496,
												"nodeType": "InlineAssembly",
												"src": "2685:47:11"
											}
										]
									},
									"documentation": {
										"id": 1488,
										"nodeType": "StructuredDocumentation",
										"src": "2456:87:11",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1498,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2557:14:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2580:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1498,
												"src": "2572:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1489,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2571:14:11"
									},
									"returnParameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2629:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1498,
												"src": "2609:21:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1448_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1493,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1492,
														"name": "Uint256Slot",
														"nameLocations": [
															"2609:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1448,
														"src": "2609:11:11"
													},
													"referencedDeclaration": 1448,
													"src": "2609:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1448_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2608:23:11"
									},
									"scope": 1543,
									"src": "2548:190:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1508,
										"nodeType": "Block",
										"src": "2917:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2979:38:11",
													"nodeType": "YulBlock",
													"src": "2979:38:11",
													"statements": [
														{
															"nativeSrc": "2993:14:11",
															"nodeType": "YulAssignment",
															"src": "2993:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "3003:4:11",
																"nodeType": "YulIdentifier",
																"src": "3003:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2993:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1505,
														"isOffset": false,
														"isSlot": true,
														"src": "2993:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1501,
														"isOffset": false,
														"isSlot": false,
														"src": "3003:4:11",
														"valueSize": 1
													}
												],
												"id": 1507,
												"nodeType": "InlineAssembly",
												"src": "2970:47:11"
											}
										]
									},
									"documentation": {
										"id": 1499,
										"nodeType": "StructuredDocumentation",
										"src": "2744:86:11",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1509,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2844:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1502,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1501,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2866:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2858:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1500,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:14:11"
									},
									"returnParameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2914:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1509,
												"src": "2895:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1451_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1504,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1503,
														"name": "StringSlot",
														"nameLocations": [
															"2895:10:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1451,
														"src": "2895:10:11"
													},
													"referencedDeclaration": 1451,
													"src": "2895:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1451_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2894:22:11"
									},
									"scope": 1543,
									"src": "2835:188:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1519,
										"nodeType": "Block",
										"src": "3225:112:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3287:44:11",
													"nodeType": "YulBlock",
													"src": "3287:44:11",
													"statements": [
														{
															"nativeSrc": "3301:20:11",
															"nodeType": "YulAssignment",
															"src": "3301:20:11",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3311:10:11",
																"nodeType": "YulIdentifier",
																"src": "3311:10:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3301:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1516,
														"isOffset": false,
														"isSlot": true,
														"src": "3301:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1512,
														"isOffset": false,
														"isSlot": true,
														"src": "3311:10:11",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1518,
												"nodeType": "InlineAssembly",
												"src": "3278:53:11"
											}
										]
									},
									"documentation": {
										"id": 1510,
										"nodeType": "StructuredDocumentation",
										"src": "3029:101:11",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3144:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3173:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "3158:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1511,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3157:22:11"
									},
									"returnParameters": {
										"id": 1517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1516,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3222:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1520,
												"src": "3203:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1451_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1515,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1514,
														"name": "StringSlot",
														"nameLocations": [
															"3203:10:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1451,
														"src": "3203:10:11"
													},
													"referencedDeclaration": 1451,
													"src": "3203:10:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1451_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3202:22:11"
									},
									"scope": 1543,
									"src": "3135:202:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1530,
										"nodeType": "Block",
										"src": "3513:106:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3575:38:11",
													"nodeType": "YulBlock",
													"src": "3575:38:11",
													"statements": [
														{
															"nativeSrc": "3589:14:11",
															"nodeType": "YulAssignment",
															"src": "3589:14:11",
															"value": {
																"name": "slot",
																"nativeSrc": "3599:4:11",
																"nodeType": "YulIdentifier",
																"src": "3599:4:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3589:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1527,
														"isOffset": false,
														"isSlot": true,
														"src": "3589:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1523,
														"isOffset": false,
														"isSlot": false,
														"src": "3599:4:11",
														"valueSize": 1
													}
												],
												"id": 1529,
												"nodeType": "InlineAssembly",
												"src": "3566:47:11"
											}
										]
									},
									"documentation": {
										"id": 1521,
										"nodeType": "StructuredDocumentation",
										"src": "3343:85:11",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3442:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1523,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3463:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "3455:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1522,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:14:11"
									},
									"returnParameters": {
										"id": 1528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1527,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3510:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "3492:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1454_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1526,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1525,
														"name": "BytesSlot",
														"nameLocations": [
															"3492:9:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1454,
														"src": "3492:9:11"
													},
													"referencedDeclaration": 1454,
													"src": "3492:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1454_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:21:11"
									},
									"scope": 1543,
									"src": "3433:186:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1541,
										"nodeType": "Block",
										"src": "3816:112:11",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3878:44:11",
													"nodeType": "YulBlock",
													"src": "3878:44:11",
													"statements": [
														{
															"nativeSrc": "3892:20:11",
															"nodeType": "YulAssignment",
															"src": "3892:20:11",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3902:10:11",
																"nodeType": "YulIdentifier",
																"src": "3902:10:11"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3892:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "3892:6:11"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1538,
														"isOffset": false,
														"isSlot": true,
														"src": "3892:6:11",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1534,
														"isOffset": false,
														"isSlot": true,
														"src": "3902:10:11",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1540,
												"nodeType": "InlineAssembly",
												"src": "3869:53:11"
											}
										]
									},
									"documentation": {
										"id": 1532,
										"nodeType": "StructuredDocumentation",
										"src": "3625:99:11",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1542,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3738:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3765:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "3751:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:21:11"
									},
									"returnParameters": {
										"id": 1539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1538,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3813:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1542,
												"src": "3795:19:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1454_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1537,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1536,
														"name": "BytesSlot",
														"nameLocations": [
															"3795:9:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1454,
														"src": "3795:9:11"
													},
													"referencedDeclaration": 1454,
													"src": "3795:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1454_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3794:21:11"
									},
									"scope": 1543,
									"src": "3729:199:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1544,
							"src": "1245:2685:11",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3738:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3501
						],
						"SignedMath": [
							3606
						],
						"Strings": [
							1798
						]
					},
					"id": 1799,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1545,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1547,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1799,
							"sourceUnit": 3502,
							"src": "127:37:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1546,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3501,
										"src": "135:4:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1549,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1799,
							"sourceUnit": 3607,
							"src": "165:49:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1548,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3606,
										"src": "173:10:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1550,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:12",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1798,
							"linearizedBaseContracts": [
								1798
							],
							"name": "Strings",
							"nameLocation": "259:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1553,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:12",
									"nodeType": "VariableDeclaration",
									"scope": 1798,
									"src": "273:56:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1551,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1552,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1556,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:12",
									"nodeType": "VariableDeclaration",
									"scope": 1798,
									"src": "335:42:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1554,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1555,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:12",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1557,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:12",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1563,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1559,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "505:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1561,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1563,
												"src": "520:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:12"
									},
									"src": "470:66:12"
								},
								{
									"body": {
										"id": 1610,
										"nodeType": "Block",
										"src": "708:627:12",
										"statements": [
											{
												"id": 1609,
												"nodeType": "UncheckedBlock",
												"src": "718:611:12",
												"statements": [
													{
														"assignments": [
															1572
														],
														"declarations": [
															{
																"constant": false,
																"id": 1572,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 1609,
																"src": "742:14:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1571,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1579,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1578,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1575,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1566,
																		"src": "770:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1573,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3501,
																		"src": "759:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3501_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:12",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3321,
																	"src": "759:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1576,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1577,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:12"
													},
													{
														"assignments": [
															1581
														],
														"declarations": [
															{
																"constant": false,
																"id": 1581,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:12",
																"nodeType": "VariableDeclaration",
																"scope": 1609,
																"src": "794:20:12",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1580,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1586,
														"initialValue": {
															"arguments": [
																{
																	"id": 1584,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1572,
																	"src": "828:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1583,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1582,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1585,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:12"
													},
													{
														"assignments": [
															1588
														],
														"declarations": [
															{
																"constant": false,
																"id": 1588,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:12",
																"nodeType": "VariableDeclaration",
																"scope": 1609,
																"src": "849:11:12",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1587,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1589,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:12"
													},
													{
														"AST": {
															"nativeSrc": "930:67:12",
															"nodeType": "YulBlock",
															"src": "930:67:12",
															"statements": [
																{
																	"nativeSrc": "948:35:12",
																	"nodeType": "YulAssignment",
																	"src": "948:35:12",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:12",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:12"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:12",
																						"nodeType": "YulLiteral",
																						"src": "971:2:12",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:12",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:12"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:12",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:12"
																				},
																				"nativeSrc": "967:15:12",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:12"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:12"
																		},
																		"nativeSrc": "955:28:12",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:12"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:12",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:12"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1581,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:12",
																"valueSize": 1
															},
															{
																"declaration": 1572,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:12",
																"valueSize": 1
															},
															{
																"declaration": 1588,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:12",
																"valueSize": 1
															}
														],
														"id": 1590,
														"nodeType": "InlineAssembly",
														"src": "921:76:12"
													},
													{
														"body": {
															"id": 1605,
															"nodeType": "Block",
															"src": "1023:269:12",
															"statements": [
																{
																	"expression": {
																		"id": 1593,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:12",
																		"subExpression": {
																			"id": 1592,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1588,
																			"src": "1041:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1594,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:12"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:12",
																		"nodeType": "YulBlock",
																		"src": "1124:86:12",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:12",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:12"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:12",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:12"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:12",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:12",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:12",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:12"
																									},
																									"nativeSrc": "1164:14:12",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:12"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:12",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:12"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:12",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:12"
																							},
																							"nativeSrc": "1159:32:12",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:12"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:12",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:12"
																					},
																					"nativeSrc": "1146:46:12",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:12"
																				},
																				"nativeSrc": "1146:46:12",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:12"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "cancun",
																	"externalReferences": [
																		{
																			"declaration": 1553,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1588,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:12",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1566,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:12",
																			"valueSize": 1
																		}
																	],
																	"id": 1595,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:12"
																},
																{
																	"expression": {
																		"id": 1598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1596,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1566,
																			"src": "1227:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1599,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:12"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1600,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1566,
																			"src": "1260:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1601,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1604,
																	"nodeType": "IfStatement",
																	"src": "1256:21:12",
																	"trueBody": {
																		"id": 1603,
																		"nodeType": "Break",
																		"src": "1272:5:12"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1591,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1606,
														"nodeType": "WhileStatement",
														"src": "1010:282:12"
													},
													{
														"expression": {
															"id": 1607,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1581,
															"src": "1312:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1570,
														"id": 1608,
														"nodeType": "Return",
														"src": "1305:13:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1564,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "655:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:12"
									},
									"returnParameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1611,
												"src": "693:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1568,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:12"
									},
									"scope": 1798,
									"src": "637:698:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1636,
										"nodeType": "Block",
										"src": "1511:92:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1624,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1622,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1614,
																	"src": "1542:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:12",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1625,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1631,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1614,
																			"src": "1588:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1629,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3606,
																			"src": "1573:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3606_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1630,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:12",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3605,
																		"src": "1573:14:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1628,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1611,
																"src": "1564:8:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1620,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1619,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:12",
																"typeDescriptions": {}
															}
														},
														"id": 1621,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:12",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1618,
												"id": 1635,
												"nodeType": "Return",
												"src": "1521:75:12"
											}
										]
									},
									"documentation": {
										"id": 1612,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:12",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1637,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1459:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1613,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:12"
									},
									"returnParameters": {
										"id": 1618,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1617,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1637,
												"src": "1496:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1616,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:12"
									},
									"scope": 1798,
									"src": "1435:168:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1656,
										"nodeType": "Block",
										"src": "1782:100:12",
										"statements": [
											{
												"id": 1655,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:12",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1646,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1640,
																	"src": "1835:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1652,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1649,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1640,
																				"src": "1854:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1647,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3501,
																				"src": "1842:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3501_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1648,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:12",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3443,
																			"src": "1842:11:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1651,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1645,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1657,
																	1740,
																	1760
																],
																"referencedDeclaration": 1740,
																"src": "1823:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1644,
														"id": 1654,
														"nodeType": "Return",
														"src": "1816:49:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1638,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1641,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1640,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1657,
												"src": "1729:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1639,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:12"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1657,
												"src": "1767:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1642,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:12"
									},
									"scope": 1798,
									"src": "1708:174:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1739,
										"nodeType": "Block",
										"src": "2095:435:12",
										"statements": [
											{
												"assignments": [
													1668
												],
												"declarations": [
													{
														"constant": false,
														"id": 1668,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 1739,
														"src": "2105:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1667,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1670,
												"initialValue": {
													"id": 1669,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1660,
													"src": "2126:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:12"
											},
											{
												"assignments": [
													1672
												],
												"declarations": [
													{
														"constant": false,
														"id": 1672,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1739,
														"src": "2141:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1671,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1681,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1677,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1676,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1662,
																	"src": "2177:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1678,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1674,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1673,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:12"
											},
											{
												"expression": {
													"id": 1686,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1682,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1672,
															"src": "2198:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1684,
														"indexExpression": {
															"hexValue": "30",
															"id": 1683,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1685,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1687,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:12"
											},
											{
												"expression": {
													"id": 1692,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1688,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1672,
															"src": "2223:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1690,
														"indexExpression": {
															"hexValue": "31",
															"id": 1689,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1691,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1693,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:12"
											},
											{
												"body": {
													"id": 1722,
													"nodeType": "Block",
													"src": "2293:95:12",
													"statements": [
														{
															"expression": {
																"id": 1716,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1708,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1672,
																		"src": "2307:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1710,
																	"indexExpression": {
																		"id": 1709,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1695,
																		"src": "2314:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1711,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1553,
																		"src": "2319:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1715,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1712,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1668,
																			"src": "2330:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1713,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1717,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:12"
														},
														{
															"expression": {
																"id": 1720,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1718,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1668,
																	"src": "2361:10:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1719,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1721,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1702,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1695,
														"src": "2281:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1703,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1723,
												"initializationExpression": {
													"assignments": [
														1695
													],
													"declarations": [
														{
															"constant": false,
															"id": 1695,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:12",
															"nodeType": "VariableDeclaration",
															"scope": 1723,
															"src": "2253:9:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1694,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1701,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1700,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1698,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1696,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1697,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1662,
																"src": "2269:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1699,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:12"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1706,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:12",
														"subExpression": {
															"id": 1705,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1695,
															"src": "2290:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1707,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:12"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:12"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1724,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "2401:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1725,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1733,
												"nodeType": "IfStatement",
												"src": "2397:96:12",
												"trueBody": {
													"id": 1732,
													"nodeType": "Block",
													"src": "2418:75:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1728,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1660,
																		"src": "2468:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1729,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1662,
																		"src": "2475:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1727,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1563,
																	"src": "2439:28:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1730,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1731,
															"nodeType": "RevertStatement",
															"src": "2432:50:12"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1736,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1672,
															"src": "2516:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1735,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1734,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1666,
												"id": 1738,
												"nodeType": "Return",
												"src": "2502:21:12"
											}
										]
									},
									"documentation": {
										"id": 1658,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "2026:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1662,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "2041:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:12"
									},
									"returnParameters": {
										"id": 1666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1740,
												"src": "2080:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1664,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:12"
									},
									"scope": 1798,
									"src": "2005:525:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1759,
										"nodeType": "Block",
										"src": "2762:75:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1753,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1743,
																			"src": "2807:4:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1751,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1750,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1749,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1755,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1756,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1556,
															"src": "2815:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1748,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1657,
															1740,
															1760
														],
														"referencedDeclaration": 1740,
														"src": "2779:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1747,
												"id": 1758,
												"nodeType": "Return",
												"src": "2772:58:12"
											}
										]
									},
									"documentation": {
										"id": 1741,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:12",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1760,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1744,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1743,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "2710:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1742,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:12"
									},
									"returnParameters": {
										"id": 1747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1746,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "2747:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1745,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:12"
									},
									"scope": 1798,
									"src": "2689:148:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1796,
										"nodeType": "Block",
										"src": "2992:104:12",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1780,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1772,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1763,
																		"src": "3015:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1770,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1773,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1774,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:12",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1777,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1765,
																		"src": "3034:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1776,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1775,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:12",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1793,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1784,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "3063:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1783,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1782,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1785,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1781,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1786,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1790,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1765,
																			"src": "3086:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1789,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1788,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1787,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1792,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1769,
												"id": 1795,
												"nodeType": "Return",
												"src": "3002:87:12"
											}
										]
									},
									"documentation": {
										"id": 1761,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:12",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1797,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2929:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1762,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1765,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2946:15:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1764,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:12"
									},
									"returnParameters": {
										"id": 1769,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1768,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1797,
												"src": "2986:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1767,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:12"
									},
									"scope": 1798,
									"src": "2914:182:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1799,
							"src": "251:2847:12",
							"usedErrors": [
								1563
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2146
						]
					},
					"id": 2147,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1800,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:13"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1801,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:13",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2146,
							"linearizedBaseContracts": [
								2146
							],
							"name": "ECDSA",
							"nameLocation": "352:5:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1806,
									"members": [
										{
											"id": 1802,
											"name": "NoError",
											"nameLocation": "392:7:13",
											"nodeType": "EnumValue",
											"src": "392:7:13"
										},
										{
											"id": 1803,
											"name": "InvalidSignature",
											"nameLocation": "409:16:13",
											"nodeType": "EnumValue",
											"src": "409:16:13"
										},
										{
											"id": 1804,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:13",
											"nodeType": "EnumValue",
											"src": "435:22:13"
										},
										{
											"id": 1805,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:13",
											"nodeType": "EnumValue",
											"src": "467:17:13"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:13",
									"nodeType": "EnumDefinition",
									"src": "364:126:13"
								},
								{
									"documentation": {
										"id": 1807,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:13",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1809,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1808,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:13"
									},
									"src": "564:30:13"
								},
								{
									"documentation": {
										"id": 1810,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:13",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1814,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1813,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1812,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1814,
												"src": "699:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1811,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:13"
									},
									"src": "665:50:13"
								},
								{
									"documentation": {
										"id": 1815,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:13",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1819,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1818,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1817,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1819,
												"src": "840:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1816,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:13"
									},
									"src": "811:40:13"
								},
								{
									"body": {
										"id": 1871,
										"nodeType": "Block",
										"src": "2242:653:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1837,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1834,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1824,
															"src": "2256:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1835,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1836,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1869,
													"nodeType": "Block",
													"src": "2781:108:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1858,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1857,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1856,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1859,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1860,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1806,
																			"src": "2815:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1861,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:13",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1804,
																		"src": "2815:35:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1806",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1864,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1824,
																					"src": "2860:9:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1865,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:13",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1863,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1862,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1867,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1833,
															"id": 1868,
															"nodeType": "Return",
															"src": "2795:83:13"
														}
													]
												},
												"id": 1870,
												"nodeType": "IfStatement",
												"src": "2252:637:13",
												"trueBody": {
													"id": 1855,
													"nodeType": "Block",
													"src": "2280:495:13",
													"statements": [
														{
															"assignments": [
																1839
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1839,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1855,
																	"src": "2294:9:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1838,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1840,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:13"
														},
														{
															"assignments": [
																1842
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1842,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1855,
																	"src": "2317:9:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1841,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1843,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:13"
														},
														{
															"assignments": [
																1845
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1845,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:13",
																	"nodeType": "VariableDeclaration",
																	"scope": 1855,
																	"src": "2340:7:13",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1844,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1846,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:13"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:13",
																"nodeType": "YulBlock",
																"src": "2548:171:13",
																"statements": [
																	{
																		"nativeSrc": "2566:32:13",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:13",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:13"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:13",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:13",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:13"
																					},
																					"nativeSrc": "2577:20:13",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:13"
																			},
																			"nativeSrc": "2571:27:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:13"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:13",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:13",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:13",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:13",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:13"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:13",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:13",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:13",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:13"
																					},
																					"nativeSrc": "2626:20:13",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:13",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:13"
																			},
																			"nativeSrc": "2620:27:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:13"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:13",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:13"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:13",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:13",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:13",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:13",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:13"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:13",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:13",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:13",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:13"
																							},
																							"nativeSrc": "2683:20:13",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:13",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:13"
																					},
																					"nativeSrc": "2677:27:13",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:13"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:13",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:13"
																			},
																			"nativeSrc": "2669:36:13",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:13"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:13",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:13"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 1839,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1842,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1824,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1824,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1824,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:13",
																	"valueSize": 1
																},
																{
																	"declaration": 1845,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:13",
																	"valueSize": 1
																}
															],
															"id": 1847,
															"nodeType": "InlineAssembly",
															"src": "2539:180:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1849,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1822,
																		"src": "2750:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1850,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1845,
																		"src": "2756:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1851,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1839,
																		"src": "2759:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1852,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1842,
																		"src": "2762:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1848,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1872,
																		1952,
																		2060
																	],
																	"referencedDeclaration": 2060,
																	"src": "2739:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1853,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1833,
															"id": 1854,
															"nodeType": "Return",
															"src": "2732:32:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1820,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:13",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1822,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "2149:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1821,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1824,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "2163:22:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1823,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:13"
									},
									"returnParameters": {
										"id": 1833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1827,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "2210:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1826,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1830,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "2219:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1806",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1829,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1828,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1806,
														"src": "2219:12:13"
													},
													"referencedDeclaration": 1806,
													"src": "2219:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1806",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1872,
												"src": "2233:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1831,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:13"
									},
									"scope": 2146,
									"src": "2129:766:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1901,
										"nodeType": "Block",
										"src": "3789:168:13",
										"statements": [
											{
												"assignments": [
													1883,
													1886,
													1888
												],
												"declarations": [
													{
														"constant": false,
														"id": 1883,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 1901,
														"src": "3800:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1882,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1886,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1901,
														"src": "3819:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1885,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1884,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1806,
																"src": "3819:12:13"
															},
															"referencedDeclaration": 1806,
															"src": "3819:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1888,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:13",
														"nodeType": "VariableDeclaration",
														"scope": 1901,
														"src": "3839:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1887,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1893,
												"initialValue": {
													"arguments": [
														{
															"id": 1890,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1875,
															"src": "3870:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1891,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1877,
															"src": "3876:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1889,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1872,
															1952,
															2060
														],
														"referencedDeclaration": 1872,
														"src": "3859:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1895,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1886,
															"src": "3908:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1896,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1888,
															"src": "3915:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1894,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2145,
														"src": "3896:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1806_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1897,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1898,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:13"
											},
											{
												"expression": {
													"id": 1899,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1883,
													"src": "3941:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1881,
												"id": 1900,
												"nodeType": "Return",
												"src": "3934:16:13"
											}
										]
									},
									"documentation": {
										"id": 1873,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:13",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1902,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1875,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "3719:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1874,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1877,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "3733:22:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1876,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:13"
									},
									"returnParameters": {
										"id": 1881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1902,
												"src": "3780:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:13"
									},
									"scope": 2146,
									"src": "3702:255:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1951,
										"nodeType": "Block",
										"src": "4285:342:13",
										"statements": [
											{
												"id": 1950,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:13",
												"statements": [
													{
														"assignments": [
															1920
														],
														"declarations": [
															{
																"constant": false,
																"id": 1920,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:13",
																"nodeType": "VariableDeclaration",
																"scope": 1950,
																"src": "4319:9:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1919,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1927,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1921,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1909,
																"src": "4331:2:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 1924,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 1923,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1922,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1925,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:13"
													},
													{
														"assignments": [
															1929
														],
														"declarations": [
															{
																"constant": false,
																"id": 1929,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:13",
																"nodeType": "VariableDeclaration",
																"scope": 1950,
																"src": "4522:7:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 1928,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1942,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1940,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1937,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 1934,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1909,
																							"src": "4547:2:13",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 1933,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1932,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:13",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1935,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:13",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 1936,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1938,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 1939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1931,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 1930,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:13"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1944,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1905,
																	"src": "4596:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1945,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1929,
																	"src": "4602:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 1946,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1907,
																	"src": "4605:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1947,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1920,
																	"src": "4608:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1943,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1872,
																	1952,
																	2060
																],
																"referencedDeclaration": 2060,
																"src": "4585:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 1948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1918,
														"id": 1949,
														"nodeType": "Return",
														"src": "4578:32:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1903,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:13",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 1952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4193:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1904,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1907,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4207:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1906,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1909,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4218:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1908,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:13"
									},
									"returnParameters": {
										"id": 1918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4253:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1915,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4262:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1806",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1914,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1913,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1806,
														"src": "4262:12:13"
													},
													"referencedDeclaration": 1806,
													"src": "4262:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1806",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1952,
												"src": "4276:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1916,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:13"
									},
									"scope": 2146,
									"src": "4173:454:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "4840:164:13",
										"statements": [
											{
												"assignments": [
													1965,
													1968,
													1970
												],
												"declarations": [
													{
														"constant": false,
														"id": 1965,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 1984,
														"src": "4851:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1964,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1968,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1984,
														"src": "4870:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1967,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1966,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1806,
																"src": "4870:12:13"
															},
															"referencedDeclaration": 1806,
															"src": "4870:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1970,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:13",
														"nodeType": "VariableDeclaration",
														"scope": 1984,
														"src": "4890:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1969,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1976,
												"initialValue": {
													"arguments": [
														{
															"id": 1972,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1955,
															"src": "4921:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1973,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1957,
															"src": "4927:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1974,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1959,
															"src": "4930:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1971,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1872,
															1952,
															2060
														],
														"referencedDeclaration": 1952,
														"src": "4910:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1975,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1978,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1968,
															"src": "4955:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1979,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1970,
															"src": "4962:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1977,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2145,
														"src": "4943:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1806_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1980,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1981,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:13"
											},
											{
												"expression": {
													"id": 1982,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1965,
													"src": "4988:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1963,
												"id": 1983,
												"nodeType": "Return",
												"src": "4981:16:13"
											}
										]
									},
									"documentation": {
										"id": 1953,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:13",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "4771:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1954,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1957,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "4785:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1956,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1959,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "4796:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1958,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:13"
									},
									"returnParameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "4831:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:13"
									},
									"scope": 2146,
									"src": "4754:250:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "5298:1372:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2009,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2006,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1994,
																"src": "6194:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2005,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2004,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 2007,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2008,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2020,
												"nodeType": "IfStatement",
												"src": "6182:164:13",
												"trueBody": {
													"id": 2019,
													"nodeType": "Block",
													"src": "6267:79:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2012,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2011,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2010,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2014,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1806,
																			"src": "6301:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2015,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:13",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1805,
																		"src": "6301:30:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1806",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2016,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1994,
																		"src": "6333:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2017,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2003,
															"id": 2018,
															"nodeType": "Return",
															"src": "6281:54:13"
														}
													]
												}
											},
											{
												"assignments": [
													2022
												],
												"declarations": [
													{
														"constant": false,
														"id": 2022,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 2059,
														"src": "6440:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2021,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2029,
												"initialValue": {
													"arguments": [
														{
															"id": 2024,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1988,
															"src": "6467:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2025,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1990,
															"src": "6473:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2026,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1992,
															"src": "6476:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2027,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1994,
															"src": "6479:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2023,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2030,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2022,
														"src": "6495:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2033,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2032,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2031,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 2034,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2049,
												"nodeType": "IfStatement",
												"src": "6491:113:13",
												"trueBody": {
													"id": 2048,
													"nodeType": "Block",
													"src": "6517:87:13",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2038,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2036,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2039,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2040,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1806,
																			"src": "6551:12:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2041,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:13",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1803,
																		"src": "6551:29:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1806",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2044,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2042,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2045,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2046,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2003,
															"id": 2047,
															"nodeType": "Return",
															"src": "6531:62:13"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2050,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2022,
															"src": "6622:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2051,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1806,
																"src": "6630:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2052,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:13",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1802,
															"src": "6630:20:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2055,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2054,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2053,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 2056,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2057,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:13",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2003,
												"id": 2058,
												"nodeType": "Return",
												"src": "6614:49:13"
											}
										]
									},
									"documentation": {
										"id": 1986,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:13",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5169:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1987,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5191:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1989,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5208:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1991,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1994,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5227:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1993,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:13"
									},
									"returnParameters": {
										"id": 2003,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1997,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5266:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1996,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2000,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5275:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1806",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1999,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1998,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1806,
														"src": "5275:12:13"
													},
													"referencedDeclaration": 1806,
													"src": "5275:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1806",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2002,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2060,
												"src": "5289:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2001,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:13"
									},
									"scope": 2146,
									"src": "5140:1530:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2095,
										"nodeType": "Block",
										"src": "6897:166:13",
										"statements": [
											{
												"assignments": [
													2075,
													2078,
													2080
												],
												"declarations": [
													{
														"constant": false,
														"id": 2075,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:13",
														"nodeType": "VariableDeclaration",
														"scope": 2095,
														"src": "6908:17:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2074,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2078,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 2095,
														"src": "6927:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2077,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2076,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:13"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1806,
																"src": "6927:12:13"
															},
															"referencedDeclaration": 1806,
															"src": "6927:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2080,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:13",
														"nodeType": "VariableDeclaration",
														"scope": 2095,
														"src": "6947:16:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2079,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2087,
												"initialValue": {
													"arguments": [
														{
															"id": 2082,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2063,
															"src": "6978:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2083,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2065,
															"src": "6984:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2084,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2067,
															"src": "6987:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2085,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2069,
															"src": "6990:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2081,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1872,
															1952,
															2060
														],
														"referencedDeclaration": 2060,
														"src": "6967:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2086,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1806_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2089,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2078,
															"src": "7014:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2090,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2080,
															"src": "7021:8:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2088,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2145,
														"src": "7002:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1806_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2091,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2092,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:13"
											},
											{
												"expression": {
													"id": 2093,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2075,
													"src": "7047:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2073,
												"id": 2094,
												"nodeType": "Return",
												"src": "7040:16:13"
											}
										]
									},
									"documentation": {
										"id": 2061,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:13",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2096,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2070,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2063,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "6820:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2062,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2065,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "6834:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2064,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2067,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "6843:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2066,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2069,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "6854:9:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2068,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:13"
									},
									"returnParameters": {
										"id": 2073,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2072,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2096,
												"src": "6888:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2071,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:13"
									},
									"scope": 2146,
									"src": "6803:260:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2144,
										"nodeType": "Block",
										"src": "7268:460:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1806",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2105,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2100,
														"src": "7282:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2106,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1806,
															"src": "7291:12:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2107,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:13",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1802,
														"src": "7291:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1806",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2114,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2111,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2100,
															"src": "7378:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2112,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1806,
																"src": "7387:12:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:13",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1803,
															"src": "7387:29:13",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1806",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2119,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2100,
																"src": "7483:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1806",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2120,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1806,
																	"src": "7492:12:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2121,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:13",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1804,
																"src": "7492:35:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1806",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1806",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2134,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2131,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2100,
																	"src": "7617:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1806",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2132,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1806,
																		"src": "7626:12:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1806_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2133,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:13",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1805,
																	"src": "7626:30:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1806",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2140,
															"nodeType": "IfStatement",
															"src": "7613:109:13",
															"trueBody": {
																"id": 2139,
																"nodeType": "Block",
																"src": "7658:64:13",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2136,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2102,
																					"src": "7702:8:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2135,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1819,
																				"src": "7679:22:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 2137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:13",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2138,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:13"
																	}
																]
															}
														},
														"id": 2141,
														"nodeType": "IfStatement",
														"src": "7479:243:13",
														"trueBody": {
															"id": 2130,
															"nodeType": "Block",
															"src": "7529:78:13",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2126,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2102,
																						"src": "7586:8:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2125,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2124,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:13",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2123,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1814,
																			"src": "7550:27:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 2128,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2129,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:13"
																}
															]
														}
													},
													"id": 2142,
													"nodeType": "IfStatement",
													"src": "7374:348:13",
													"trueBody": {
														"id": 2118,
														"nodeType": "Block",
														"src": "7418:55:13",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2115,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1809,
																		"src": "7439:21:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 2116,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 2117,
																"nodeType": "RevertStatement",
																"src": "7432:30:13"
															}
														]
													}
												},
												"id": 2143,
												"nodeType": "IfStatement",
												"src": "7278:444:13",
												"trueBody": {
													"id": 2110,
													"nodeType": "Block",
													"src": "7313:55:13",
													"statements": [
														{
															"functionReturnParameters": 2104,
															"id": 2109,
															"nodeType": "Return",
															"src": "7327:7:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2097,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:13",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2100,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2145,
												"src": "7217:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1806",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2099,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2098,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1806,
														"src": "7217:12:13"
													},
													"referencedDeclaration": 1806,
													"src": "7217:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1806",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:13",
												"nodeType": "VariableDeclaration",
												"scope": 2145,
												"src": "7237:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2101,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:13"
									},
									"returnParameters": {
										"id": 2104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:13"
									},
									"scope": 2146,
									"src": "7196:532:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2147,
							"src": "344:7386:13",
							"usedErrors": [
								1809,
								1814,
								1819
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2373
						],
						"IERC5267": [
							172
						],
						"MessageHashUtils": [
							2447
						],
						"ShortString": [
							1222
						],
						"ShortStrings": [
							1433
						]
					},
					"id": 2374,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2148,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:14"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2150,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2374,
							"sourceUnit": 2448,
							"src": "139:56:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2149,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2447,
										"src": "147:16:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2153,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2374,
							"sourceUnit": 1434,
							"src": "196:62:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2151,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1433,
										"src": "204:12:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2152,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1222,
										"src": "218:11:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2155,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2374,
							"sourceUnit": 173,
							"src": "259:55:14",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2154,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 172,
										"src": "267:8:14",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2157,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 172,
										"src": "1988:8:14"
									},
									"id": 2158,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:14"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2156,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:14",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2373,
							"linearizedBaseContracts": [
								2373,
								172
							],
							"name": "EIP712",
							"nameLocation": "1978:6:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2160,
									"libraryName": {
										"id": 2159,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:14"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1433,
										"src": "2009:12:14"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:14"
								},
								{
									"constant": true,
									"id": 2165,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2034:140:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2161,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2163,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:14",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2162,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:14",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2164,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:14",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2167,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2373:48:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2166,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2169,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2427:40:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2168,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2171,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2473:37:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2170,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:14",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2173,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2517:37:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2172,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2175,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2560:40:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2174,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:14",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2178,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2607:35:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2177,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2176,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:14"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1222,
											"src": "2607:11:14"
										},
										"referencedDeclaration": 1222,
										"src": "2607:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2181,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2648:38:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2180,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2179,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:14"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1222,
											"src": "2648:11:14"
										},
										"referencedDeclaration": 1222,
										"src": "2648:11:14",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2183,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2692:28:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2182,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2185,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:14",
									"nodeType": "VariableDeclaration",
									"scope": 2373,
									"src": "2726:31:14",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2184,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:14",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2242,
										"nodeType": "Block",
										"src": "3383:376:14",
										"statements": [
											{
												"expression": {
													"id": 2198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2193,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2178,
														"src": "3393:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2196,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2183,
																"src": "3432:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2194,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2188,
																"src": "3401:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2195,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:14",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1374,
															"src": "3401:30:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1222_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2197,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"id": 2199,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:14"
											},
											{
												"expression": {
													"id": 2205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2200,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2181,
														"src": "3456:8:14",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2203,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2185,
																"src": "3501:16:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2201,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2190,
																"src": "3467:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2202,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:14",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1374,
															"src": "3467:33:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1222_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:14",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
														"typeString": "ShortString"
													}
												},
												"id": 2206,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:14"
											},
											{
												"expression": {
													"id": 2214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2207,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2173,
														"src": "3528:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2211,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2188,
																		"src": "3558:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2210,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2209,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2208,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2213,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2215,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:14"
											},
											{
												"expression": {
													"id": 2223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2216,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2175,
														"src": "3574:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2220,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2190,
																		"src": "3607:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2219,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2218,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 2221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2217,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2222,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2224,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:14"
											},
											{
												"expression": {
													"id": 2228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2225,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2169,
														"src": "3627:14:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2226,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2227,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:14",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2229,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:14"
											},
											{
												"expression": {
													"id": 2233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2230,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2167,
														"src": "3667:22:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2231,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2290,
															"src": "3692:21:14",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2232,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2234,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:14"
											},
											{
												"expression": {
													"id": 2240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2235,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2171,
														"src": "3725:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2238,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2373",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2373",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2237,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2236,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2239,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2241,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:14"
											}
										]
									},
									"documentation": {
										"id": 2186,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:14",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2243,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2188,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "3340:18:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2187,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2190,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2243,
												"src": "3360:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2189,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:14"
									},
									"returnParameters": {
										"id": 2192,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:14"
									},
									"scope": 2373,
									"src": "3328:431:14",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2268,
										"nodeType": "Block",
										"src": "3907:200:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2251,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2373",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2373",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2250,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2249,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2253,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2171,
															"src": "3938:11:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2258,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2255,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:14",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2257,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2169,
															"src": "3970:14:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2266,
													"nodeType": "Block",
													"src": "4046:55:14",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2263,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2290,
																	"src": "4067:21:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2248,
															"id": 2265,
															"nodeType": "Return",
															"src": "4060:30:14"
														}
													]
												},
												"id": 2267,
												"nodeType": "IfStatement",
												"src": "3917:184:14",
												"trueBody": {
													"id": 2262,
													"nodeType": "Block",
													"src": "3986:54:14",
													"statements": [
														{
															"expression": {
																"id": 2260,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2167,
																"src": "4007:22:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2248,
															"id": 2261,
															"nodeType": "Return",
															"src": "4000:29:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2244,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:14",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2245,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:14"
									},
									"returnParameters": {
										"id": 2248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2269,
												"src": "3898:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2246,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:14"
									},
									"scope": 2373,
									"src": "3845:262:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2289,
										"nodeType": "Block",
										"src": "4177:115:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2277,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2165,
																	"src": "4215:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2278,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2173,
																	"src": "4226:11:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2279,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2175,
																	"src": "4239:14:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2280,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2281,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:14",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2284,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2373",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2373",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2283,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2282,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:14",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2275,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2276,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:14",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2274,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2273,
												"id": 2288,
												"nodeType": "Return",
												"src": "4187:98:14"
											}
										]
									},
									"id": 2290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:14"
									},
									"returnParameters": {
										"id": 2273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2272,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2290,
												"src": "4168:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2271,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:14"
									},
									"scope": 2373,
									"src": "4113:179:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2305,
										"nodeType": "Block",
										"src": "5003:90:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2300,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2269,
																"src": "5053:18:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2302,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2293,
															"src": "5075:10:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2298,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2447,
															"src": "5020:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2447_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2299,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:14",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2446,
														"src": "5020:32:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2303,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2297,
												"id": 2304,
												"nodeType": "Return",
												"src": "5013:73:14"
											}
										]
									},
									"documentation": {
										"id": 2291,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:14",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2306,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2293,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "4943:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2292,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:14"
									},
									"returnParameters": {
										"id": 2297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2296,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2306,
												"src": "4994:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2295,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:14"
									},
									"scope": 2373,
									"src": "4917:176:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										171
									],
									"body": {
										"id": 2347,
										"nodeType": "Block",
										"src": "5472:229:14",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2325,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2326,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2360,
																"src": "5533:11:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2327,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2328,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2372,
																"src": "5560:14:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2330,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2331,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:14",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2334,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2373",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2373",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2333,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2332,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2338,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2337,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2336,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2343,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2342,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2340,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2341,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2344,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2345,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:14",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2324,
												"id": 2346,
												"nodeType": "Return",
												"src": "5482:212:14"
											}
										]
									},
									"documentation": {
										"id": 2307,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:14",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2308,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:14"
									},
									"returnParameters": {
										"id": 2324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2310,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5242:13:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2309,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2312,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5269:18:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2311,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2314,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5301:21:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2313,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2316,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5336:15:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5365:25:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2317,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5404:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2319,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2323,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:14",
												"nodeType": "VariableDeclaration",
												"scope": 2348,
												"src": "5430:27:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2321,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2322,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:14"
									},
									"scope": 2373,
									"src": "5144:557:14",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2359,
										"nodeType": "Block",
										"src": "6082:65:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2356,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2183,
															"src": "6126:13:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2354,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2178,
															"src": "6099:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																"typeString": "ShortString"
															}
														},
														"id": 2355,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:14",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1401,
														"src": "6099:26:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1222_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1222_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2353,
												"id": 2358,
												"nodeType": "Return",
												"src": "6092:48:14"
											}
										]
									},
									"documentation": {
										"id": 2349,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:14",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2360,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:14"
									},
									"returnParameters": {
										"id": 2353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2360,
												"src": "6067:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2351,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:14"
									},
									"scope": 2373,
									"src": "6021:126:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2371,
										"nodeType": "Block",
										"src": "6537:71:14",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2368,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2185,
															"src": "6584:16:14",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2366,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2181,
															"src": "6554:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1222",
																"typeString": "ShortString"
															}
														},
														"id": 2367,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:14",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1401,
														"src": "6554:29:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1222_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1222_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2365,
												"id": 2370,
												"nodeType": "Return",
												"src": "6547:54:14"
											}
										]
									},
									"documentation": {
										"id": 2361,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:14",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2362,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:14"
									},
									"returnParameters": {
										"id": 2365,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2364,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2372,
												"src": "6522:13:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2363,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:14"
									},
									"scope": 2373,
									"src": "6473:135:14",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2374,
							"src": "1960:4650:14",
							"usedErrors": [
								1230,
								1232
							],
							"usedEvents": [
								152
							]
						}
					],
					"src": "113:6498:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2447
						],
						"Strings": [
							1798
						]
					},
					"id": 2448,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2375,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2377,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2448,
							"sourceUnit": 1799,
							"src": "149:39:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2376,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1798,
										"src": "157:7:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2378,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:15",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2447,
							"linearizedBaseContracts": [
								2447
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2387,
										"nodeType": "Block",
										"src": "1314:368:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1376:300:15",
													"nodeType": "YulBlock",
													"src": "1376:300:15",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1397:4:15",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1403:34:15",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:15",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1390:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:15"
																},
																"nativeSrc": "1390:48:15",
																"nodeType": "YulFunctionCall",
																"src": "1390:48:15"
															},
															"nativeSrc": "1390:48:15",
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1499:4:15",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:15",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1505:11:15",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1492:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:15"
																},
																"nativeSrc": "1492:25:15",
																"nodeType": "YulFunctionCall",
																"src": "1492:25:15"
															},
															"nativeSrc": "1492:25:15",
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:15"
														},
														{
															"nativeSrc": "1571:31:15",
															"nodeType": "YulAssignment",
															"src": "1571:31:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1591:4:15",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:15",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1597:4:15",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:15",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1581:9:15",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:15"
																},
																"nativeSrc": "1581:21:15",
																"nodeType": "YulFunctionCall",
																"src": "1581:21:15"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1571:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2384,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2381,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:15",
														"valueSize": 1
													}
												],
												"id": 2386,
												"nodeType": "InlineAssembly",
												"src": "1367:309:15"
											}
										]
									},
									"documentation": {
										"id": 2379,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:15",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2381,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:15",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "1254:19:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2380,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:15"
									},
									"returnParameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2384,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2388,
												"src": "1298:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2383,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:15"
									},
									"scope": 2447,
									"src": "1222:460:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2413,
										"nodeType": "Block",
										"src": "2234:143:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2400,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2405,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2391,
																						"src": "2343:7:15",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2406,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:15",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2403,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1798,
																					"src": "2326:7:15",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1798_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2404,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:15",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1611,
																				"src": "2326:16:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2407,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:15",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2402,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2401,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2409,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2391,
																	"src": "2361:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2398,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2397,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2399,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:15",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2396,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2395,
												"id": 2412,
												"nodeType": "Return",
												"src": "2244:126:15"
											}
										]
									},
									"documentation": {
										"id": 2389,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:15",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2391,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2414,
												"src": "2180:20:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2390,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:15"
									},
									"returnParameters": {
										"id": 2395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2414,
												"src": "2225:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2393,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:15"
									},
									"scope": 2447,
									"src": "2148:229:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2433,
										"nodeType": "Block",
										"src": "2831:80:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2427,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2428,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2417,
																	"src": "2887:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2429,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2419,
																	"src": "2898:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2425,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2426,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:15",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2424,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2423,
												"id": 2432,
												"nodeType": "Return",
												"src": "2841:63:15"
											}
										]
									},
									"documentation": {
										"id": 2415,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:15",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2420,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2417,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:15",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "2761:17:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2416,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2419,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "2780:17:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2418,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:15"
									},
									"returnParameters": {
										"id": 2423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "2822:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2421,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:15"
									},
									"scope": 2447,
									"src": "2720:191:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2445,
										"nodeType": "Block",
										"src": "3462:292:15",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3524:224:15",
													"nodeType": "YulBlock",
													"src": "3524:224:15",
													"statements": [
														{
															"nativeSrc": "3538:22:15",
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:15",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3555:4:15",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:15",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3549:5:15",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:15"
																},
																"nativeSrc": "3549:11:15",
																"nodeType": "YulFunctionCall",
																"src": "3549:11:15"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3542:3:15",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:15",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3580:3:15",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:15"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3585:10:15",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:15",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3573:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:15"
																},
																"nativeSrc": "3573:23:15",
																"nodeType": "YulFunctionCall",
																"src": "3573:23:15"
															},
															"nativeSrc": "3573:23:15",
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3620:3:15",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:15"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:4:15",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:15",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3616:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:15"
																		},
																		"nativeSrc": "3616:14:15",
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:15"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3632:15:15",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3609:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:15"
																},
																"nativeSrc": "3609:39:15",
																"nodeType": "YulFunctionCall",
																"src": "3609:39:15"
															},
															"nativeSrc": "3609:39:15",
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:15"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3672:3:15",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:15"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3677:4:15",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:15",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3668:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:15"
																		},
																		"nativeSrc": "3668:14:15",
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:15"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3684:10:15",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3661:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:15"
																},
																"nativeSrc": "3661:34:15",
																"nodeType": "YulFunctionCall",
																"src": "3661:34:15"
															},
															"nativeSrc": "3661:34:15",
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:15"
														},
														{
															"nativeSrc": "3708:30:15",
															"nodeType": "YulAssignment",
															"src": "3708:30:15",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3728:3:15",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:15"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3733:4:15",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:15",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3718:9:15",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:15"
																},
																"nativeSrc": "3718:20:15",
																"nodeType": "YulFunctionCall",
																"src": "3718:20:15"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3708:6:15",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:15"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2442,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:15",
														"valueSize": 1
													},
													{
														"declaration": 2437,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:15",
														"valueSize": 1
													},
													{
														"declaration": 2439,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:15",
														"valueSize": 1
													}
												],
												"id": 2444,
												"nodeType": "InlineAssembly",
												"src": "3515:233:15"
											}
										]
									},
									"documentation": {
										"id": 2435,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:15",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2446,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2437,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:15",
												"nodeType": "VariableDeclaration",
												"scope": 2446,
												"src": "3378:23:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2436,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2439,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2446,
												"src": "3403:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2438,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:15"
									},
									"returnParameters": {
										"id": 2443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2442,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2446,
												"src": "3446:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2441,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:15"
									},
									"scope": 2447,
									"src": "3353:401:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2448,
							"src": "521:3235:15",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3501
						]
					},
					"id": 3502,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2449,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2450,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:16",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3501,
							"linearizedBaseContracts": [
								3501
							],
							"name": "Math",
							"nameLocation": "211:4:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2451,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:16",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2453,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2452,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:16"
									},
									"src": "277:29:16"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2458,
									"members": [
										{
											"id": 2454,
											"name": "Floor",
											"nameLocation": "336:5:16",
											"nodeType": "EnumValue",
											"src": "336:5:16"
										},
										{
											"id": 2455,
											"name": "Ceil",
											"nameLocation": "379:4:16",
											"nodeType": "EnumValue",
											"src": "379:4:16"
										},
										{
											"id": 2456,
											"name": "Trunc",
											"nameLocation": "421:5:16",
											"nodeType": "EnumValue",
											"src": "421:5:16"
										},
										{
											"id": 2457,
											"name": "Expand",
											"nameLocation": "451:6:16",
											"nodeType": "EnumValue",
											"src": "451:6:16"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:16",
									"nodeType": "EnumDefinition",
									"src": "312:169:16"
								},
								{
									"body": {
										"id": 2489,
										"nodeType": "Block",
										"src": "661:140:16",
										"statements": [
											{
												"id": 2488,
												"nodeType": "UncheckedBlock",
												"src": "671:124:16",
												"statements": [
													{
														"assignments": [
															2471
														],
														"declarations": [
															{
																"constant": false,
																"id": 2471,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2488,
																"src": "695:9:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2470,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2475,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2474,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2472,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2461,
																"src": "707:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2473,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2463,
																"src": "711:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:16"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2476,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2471,
																"src": "730:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2477,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2461,
																"src": "734:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2483,
														"nodeType": "IfStatement",
														"src": "726:28:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2479,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2481,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2469,
															"id": 2482,
															"nodeType": "Return",
															"src": "737:17:16"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2485,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2471,
																	"src": "782:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2486,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2469,
														"id": 2487,
														"nodeType": "Return",
														"src": "768:16:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2459,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:16",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2490,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2461,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "601:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "612:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:16"
									},
									"returnParameters": {
										"id": 2469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2466,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "646:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2465,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2490,
												"src": "652:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2467,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:16"
									},
									"scope": 3501,
									"src": "585:216:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2517,
										"nodeType": "Block",
										"src": "984:113:16",
										"statements": [
											{
												"id": 2516,
												"nodeType": "UncheckedBlock",
												"src": "994:97:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2502,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2495,
																"src": "1022:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2503,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2493,
																"src": "1026:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2509,
														"nodeType": "IfStatement",
														"src": "1018:28:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2505,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2507,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2501,
															"id": 2508,
															"nodeType": "Return",
															"src": "1029:17:16"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2511,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2493,
																		"src": "1074:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2512,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2495,
																		"src": "1078:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2514,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2501,
														"id": 2515,
														"nodeType": "Return",
														"src": "1060:20:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2491,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:16",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2493,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "924:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2495,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "935:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:16"
									},
									"returnParameters": {
										"id": 2501,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "969:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2497,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2500,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2518,
												"src": "975:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2499,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:16"
									},
									"scope": 3501,
									"src": "908:189:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2559,
										"nodeType": "Block",
										"src": "1283:417:16",
										"statements": [
											{
												"id": 2558,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2532,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2530,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2521,
																"src": "1551:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2531,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2537,
														"nodeType": "IfStatement",
														"src": "1547:28:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2533,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2534,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2535,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2529,
															"id": 2536,
															"nodeType": "Return",
															"src": "1559:16:16"
														}
													},
													{
														"assignments": [
															2539
														],
														"declarations": [
															{
																"constant": false,
																"id": 2539,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2558,
																"src": "1589:9:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2538,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2543,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2542,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2540,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2521,
																"src": "1601:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2541,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2523,
																"src": "1605:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:16"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2544,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2539,
																	"src": "1624:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2545,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2521,
																	"src": "1628:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2547,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2523,
																"src": "1633:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2553,
														"nodeType": "IfStatement",
														"src": "1620:33:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2549,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2550,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2551,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2529,
															"id": 2552,
															"nodeType": "Return",
															"src": "1636:17:16"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2555,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2539,
																	"src": "1681:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2556,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2529,
														"id": 2557,
														"nodeType": "Return",
														"src": "1667:16:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2519,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:16",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2560,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2524,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2521,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2560,
												"src": "1223:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2523,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2560,
												"src": "1234:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2522,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:16"
									},
									"returnParameters": {
										"id": 2529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2526,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2560,
												"src": "1268:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2525,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2560,
												"src": "1274:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2527,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:16"
									},
									"scope": 3501,
									"src": "1207:493:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2587,
										"nodeType": "Block",
										"src": "1887:114:16",
										"statements": [
											{
												"id": 2586,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2572,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2565,
																"src": "1925:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2579,
														"nodeType": "IfStatement",
														"src": "1921:29:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2575,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2577,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2571,
															"id": 2578,
															"nodeType": "Return",
															"src": "1933:17:16"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2580,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2583,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2581,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2563,
																		"src": "1978:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2582,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2565,
																		"src": "1982:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2584,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2571,
														"id": 2585,
														"nodeType": "Return",
														"src": "1964:20:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2561,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:16",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2588,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2566,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2563,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2588,
												"src": "1827:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2562,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2565,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2588,
												"src": "1838:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2564,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:16"
									},
									"returnParameters": {
										"id": 2571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2568,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2588,
												"src": "1872:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2567,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2588,
												"src": "1878:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:16"
									},
									"scope": 3501,
									"src": "1811:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2615,
										"nodeType": "Block",
										"src": "2198:114:16",
										"statements": [
											{
												"id": 2614,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2602,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2600,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2593,
																"src": "2236:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2601,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2607,
														"nodeType": "IfStatement",
														"src": "2232:29:16",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2604,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2605,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2599,
															"id": 2606,
															"nodeType": "Return",
															"src": "2244:17:16"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2608,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2611,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2609,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2591,
																		"src": "2289:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2610,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2593,
																		"src": "2293:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2612,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:16",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2599,
														"id": 2613,
														"nodeType": "Return",
														"src": "2275:20:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2589,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:16",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2591,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2616,
												"src": "2138:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2590,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2593,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2616,
												"src": "2149:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2592,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:16"
									},
									"returnParameters": {
										"id": 2599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2596,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2616,
												"src": "2183:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2595,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2598,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2616,
												"src": "2189:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2597,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:16"
									},
									"scope": 3501,
									"src": "2122:190:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2633,
										"nodeType": "Block",
										"src": "2449:37:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2628,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2626,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2619,
															"src": "2466:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2627,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2621,
															"src": "2470:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2630,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2621,
														"src": "2478:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2631,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:16",
													"trueExpression": {
														"id": 2629,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2619,
														"src": "2474:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2625,
												"id": 2632,
												"nodeType": "Return",
												"src": "2459:20:16"
											}
										]
									},
									"documentation": {
										"id": 2617,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:16",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2619,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "2395:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2618,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2621,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "2406:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:16"
									},
									"returnParameters": {
										"id": 2625,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "2440:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:16"
									},
									"scope": 3501,
									"src": "2382:104:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2651,
										"nodeType": "Block",
										"src": "2624:37:16",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2646,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2644,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2637,
															"src": "2641:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2645,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2639,
															"src": "2645:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2648,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2639,
														"src": "2653:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:16",
													"trueExpression": {
														"id": 2647,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2637,
														"src": "2649:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2643,
												"id": 2650,
												"nodeType": "Return",
												"src": "2634:20:16"
											}
										]
									},
									"documentation": {
										"id": 2635,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:16",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2637,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2652,
												"src": "2570:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2652,
												"src": "2581:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:16"
									},
									"returnParameters": {
										"id": 2643,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2652,
												"src": "2615:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2641,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:16"
									},
									"scope": 3501,
									"src": "2557:104:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2674,
										"nodeType": "Block",
										"src": "2845:82:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2664,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2662,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2655,
																	"src": "2900:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2663,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2657,
																	"src": "2904:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2665,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2671,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2668,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2666,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2655,
																		"src": "2910:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2667,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2657,
																		"src": "2914:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2669,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2661,
												"id": 2673,
												"nodeType": "Return",
												"src": "2892:28:16"
											}
										]
									},
									"documentation": {
										"id": 2653,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:16",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2675,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2655,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2675,
												"src": "2791:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2657,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2675,
												"src": "2802:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:16"
									},
									"returnParameters": {
										"id": 2661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2675,
												"src": "2836:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:16"
									},
									"scope": 3501,
									"src": "2774:153:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2708,
										"nodeType": "Block",
										"src": "3219:260:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2687,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2685,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2680,
														"src": "3233:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2686,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2693,
												"nodeType": "IfStatement",
												"src": "3229:127:16",
												"trueBody": {
													"id": 2692,
													"nodeType": "Block",
													"src": "3241:115:16",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2690,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2688,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2678,
																	"src": "3340:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2689,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2680,
																	"src": "3344:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2684,
															"id": 2691,
															"nodeType": "Return",
															"src": "3333:12:16"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2696,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2694,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2678,
															"src": "3444:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2695,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2705,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2703,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2700,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2698,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2678,
																			"src": "3458:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2699,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2701,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2702,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2680,
																"src": "3467:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2704,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2706,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:16",
													"trueExpression": {
														"hexValue": "30",
														"id": 2697,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2684,
												"id": 2707,
												"nodeType": "Return",
												"src": "3437:35:16"
											}
										]
									},
									"documentation": {
										"id": 2676,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:16",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2678,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "3165:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2677,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2680,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "3176:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2679,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:16"
									},
									"returnParameters": {
										"id": 2684,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2683,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2709,
												"src": "3210:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:16"
									},
									"scope": 3501,
									"src": "3148:331:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2834,
										"nodeType": "Block",
										"src": "3901:4018:16",
										"statements": [
											{
												"id": 2833,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:16",
												"statements": [
													{
														"assignments": [
															2722
														],
														"declarations": [
															{
																"constant": false,
																"id": 2722,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:16",
																"nodeType": "VariableDeclaration",
																"scope": 2833,
																"src": "4232:13:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2721,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2726,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2723,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2712,
																"src": "4248:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2724,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2714,
																"src": "4252:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:16"
													},
													{
														"assignments": [
															2728
														],
														"declarations": [
															{
																"constant": false,
																"id": 2728,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:16",
																"nodeType": "VariableDeclaration",
																"scope": 2833,
																"src": "4312:13:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2727,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2729,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:16"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:16",
															"nodeType": "YulBlock",
															"src": "4392:122:16",
															"statements": [
																{
																	"nativeSrc": "4410:30:16",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:16"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:16"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:16",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:16",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:16",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:16"
																				},
																				"nativeSrc": "4433:6:16",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:16"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:16",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:16"
																		},
																		"nativeSrc": "4420:20:16",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:16"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:16",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:16",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:16",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:16",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:16",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:16"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:16",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:16"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:16",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:16"
																				},
																				"nativeSrc": "4470:14:16",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:16",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:16"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:16",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:16"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:16",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:16"
																				},
																				"nativeSrc": "4486:13:16",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:16"
																		},
																		"nativeSrc": "4466:34:16",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:16"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:16",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:16"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2728,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2712,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:16",
																"valueSize": 1
															},
															{
																"declaration": 2714,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:16",
																"valueSize": 1
															}
														],
														"id": 2730,
														"nodeType": "InlineAssembly",
														"src": "4383:131:16"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2731,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2728,
																"src": "4595:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2732,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2739,
														"nodeType": "IfStatement",
														"src": "4591:368:16",
														"trueBody": {
															"id": 2738,
															"nodeType": "Block",
															"src": "4607:352:16",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2736,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2734,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2722,
																			"src": "4925:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2735,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2716,
																			"src": "4933:11:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2720,
																	"id": 2737,
																	"nodeType": "Return",
																	"src": "4918:26:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2742,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2740,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2716,
																"src": "5065:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2741,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2728,
																"src": "5080:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2747,
														"nodeType": "IfStatement",
														"src": "5061:88:16",
														"trueBody": {
															"id": 2746,
															"nodeType": "Block",
															"src": "5087:62:16",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2743,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2453,
																			"src": "5112:20:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 2744,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2745,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:16"
																}
															]
														}
													},
													{
														"assignments": [
															2749
														],
														"declarations": [
															{
																"constant": false,
																"id": 2749,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:16",
																"nodeType": "VariableDeclaration",
																"scope": 2833,
																"src": "5404:17:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2748,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2750,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:16"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:16",
															"nodeType": "YulBlock",
															"src": "5444:291:16",
															"statements": [
																{
																	"nativeSrc": "5513:38:16",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:16"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:16"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:16",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:16"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:16",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:16"
																		},
																		"nativeSrc": "5526:25:16",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:16"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:16",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:16"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:16",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:16"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:16",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:16"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:16",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:16"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:16",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:16"
																				},
																				"nativeSrc": "5653:20:16",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:16"
																		},
																		"nativeSrc": "5642:32:16",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:16"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:16",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:16"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:16",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:16"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:16",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:16"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:16"
																		},
																		"nativeSrc": "5700:21:16",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:16"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:16",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:16"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2716,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2728,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2728,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2749,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:16",
																"valueSize": 1
															},
															{
																"declaration": 2749,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:16",
																"valueSize": 1
															},
															{
																"declaration": 2749,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:16",
																"valueSize": 1
															},
															{
																"declaration": 2712,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:16",
																"valueSize": 1
															},
															{
																"declaration": 2714,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:16",
																"valueSize": 1
															}
														],
														"id": 2751,
														"nodeType": "InlineAssembly",
														"src": "5435:300:16"
													},
													{
														"assignments": [
															2753
														],
														"declarations": [
															{
																"constant": false,
																"id": 2753,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:16",
																"nodeType": "VariableDeclaration",
																"scope": 2833,
																"src": "5939:12:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2752,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2760,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2759,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2754,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2716,
																"src": "5954:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2757,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2755,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2756,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2716,
																			"src": "5973:11:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2758,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:16"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:16",
															"nodeType": "YulBlock",
															"src": "6008:362:16",
															"statements": [
																{
																	"nativeSrc": "6073:37:16",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:16",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:16"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:16",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:16"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:16"
																		},
																		"nativeSrc": "6088:22:16",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:16"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:16",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:16"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:16",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:16",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:16"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:16",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:16"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:16"
																		},
																		"nativeSrc": "6186:16:16",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:16"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:16",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:16"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:16",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:16",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:16",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:16",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:16",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:16"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:16",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:16"
																						},
																						"nativeSrc": "6333:12:16",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:16"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:16",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:16"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:16",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:16"
																				},
																				"nativeSrc": "6329:23:16",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:16"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:16",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:16",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:16"
																		},
																		"nativeSrc": "6325:31:16",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:16"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:16",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:16"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2716,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:16",
																"valueSize": 1
															},
															{
																"declaration": 2716,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2722,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:16",
																"valueSize": 1
															},
															{
																"declaration": 2753,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:16",
																"valueSize": 1
															},
															{
																"declaration": 2753,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:16",
																"valueSize": 1
															},
															{
																"declaration": 2753,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:16",
																"valueSize": 1
															},
															{
																"declaration": 2753,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:16",
																"valueSize": 1
															},
															{
																"declaration": 2753,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:16",
																"valueSize": 1
															}
														],
														"id": 2761,
														"nodeType": "InlineAssembly",
														"src": "5999:371:16"
													},
													{
														"expression": {
															"id": 2766,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2762,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2722,
																"src": "6436:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2765,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2763,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2728,
																	"src": "6445:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2764,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2753,
																	"src": "6453:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2767,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:16"
													},
													{
														"assignments": [
															2769
														],
														"declarations": [
															{
																"constant": false,
																"id": 2769,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:16",
																"nodeType": "VariableDeclaration",
																"scope": 2833,
																"src": "6775:15:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2768,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2776,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2772,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2770,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2771,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2716,
																			"src": "6798:11:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2773,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:16"
													},
													{
														"expression": {
															"id": 2783,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2777,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7031:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2782,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2778,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2781,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2779,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7046:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2780,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7060:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2784,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:16"
													},
													{
														"expression": {
															"id": 2791,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2785,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7100:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2790,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2786,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2789,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2787,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7115:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2788,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7129:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2792,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:16"
													},
													{
														"expression": {
															"id": 2799,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2793,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7170:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2798,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2794,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2797,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2795,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7185:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2796,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7199:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2800,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:16"
													},
													{
														"expression": {
															"id": 2807,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2801,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7240:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2806,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2802,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2803,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7255:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2804,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7269:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2808,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:16"
													},
													{
														"expression": {
															"id": 2815,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2809,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7310:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2814,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2810,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2813,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2811,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7325:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2812,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7339:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2816,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:16"
													},
													{
														"expression": {
															"id": 2823,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2817,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2769,
																"src": "7381:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2822,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2818,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2821,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2819,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2716,
																		"src": "7396:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2820,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2769,
																		"src": "7410:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2824,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:16"
													},
													{
														"expression": {
															"id": 2829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2825,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2719,
																"src": "7851:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2828,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2826,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2722,
																	"src": "7860:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2827,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2769,
																	"src": "7868:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2830,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:16"
													},
													{
														"expression": {
															"id": 2831,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2719,
															"src": "7896:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2720,
														"id": 2832,
														"nodeType": "Return",
														"src": "7889:13:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2710,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:16",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2835,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2712,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3819:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2714,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3830:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2713,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2716,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3841:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2715,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:16"
									},
									"returnParameters": {
										"id": 2720,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2719,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2835,
												"src": "3885:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2718,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:16"
									},
									"scope": 3501,
									"src": "3803:4116:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2877,
										"nodeType": "Block",
										"src": "8161:192:16",
										"statements": [
											{
												"assignments": [
													2851
												],
												"declarations": [
													{
														"constant": false,
														"id": 2851,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2877,
														"src": "8171:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2850,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2857,
												"initialValue": {
													"arguments": [
														{
															"id": 2853,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2838,
															"src": "8195:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2854,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2840,
															"src": "8198:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2855,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2842,
															"src": "8201:11:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2852,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2835,
															2878
														],
														"referencedDeclaration": 2835,
														"src": "8188:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2856,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2868,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2859,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2845,
																"src": "8244:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2458",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2458",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2858,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3500,
															"src": "8227:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2458_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2860,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2867,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2862,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2838,
																	"src": "8264:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2863,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2840,
																	"src": "8267:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2864,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2842,
																	"src": "8270:11:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2861,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2865,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2866,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2874,
												"nodeType": "IfStatement",
												"src": "8223:101:16",
												"trueBody": {
													"id": 2873,
													"nodeType": "Block",
													"src": "8288:36:16",
													"statements": [
														{
															"expression": {
																"id": 2871,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2869,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2851,
																	"src": "8302:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2870,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2872,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:16"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2875,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2851,
													"src": "8340:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2849,
												"id": 2876,
												"nodeType": "Return",
												"src": "8333:13:16"
											}
										]
									},
									"documentation": {
										"id": 2836,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:16",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2878,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2838,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "8067:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2837,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2840,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "8078:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2842,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "8089:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2841,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2845,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "8110:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2844,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2843,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "8110:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "8110:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:16"
									},
									"returnParameters": {
										"id": 2849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2848,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2878,
												"src": "8152:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:16"
									},
									"scope": 3501,
									"src": "8051:302:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2989,
										"nodeType": "Block",
										"src": "8644:1585:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2888,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2886,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2881,
														"src": "8658:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2887,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2892,
												"nodeType": "IfStatement",
												"src": "8654:45:16",
												"trueBody": {
													"id": 2891,
													"nodeType": "Block",
													"src": "8666:33:16",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2889,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2885,
															"id": 2890,
															"nodeType": "Return",
															"src": "8680:8:16"
														}
													]
												}
											},
											{
												"assignments": [
													2894
												],
												"declarations": [
													{
														"constant": false,
														"id": 2894,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2989,
														"src": "9378:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2893,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2903,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2895,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2900,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2897,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2881,
																			"src": "9406:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2896,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3157,
																			3192
																		],
																		"referencedDeclaration": 3157,
																		"src": "9401:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2898,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2899,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2901,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:16"
											},
											{
												"id": 2988,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:16",
												"statements": [
													{
														"expression": {
															"id": 2913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2904,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "9839:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2912,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2905,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "9849:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2908,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2906,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "9858:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2907,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "9862:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2910,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2911,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2914,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:16"
													},
													{
														"expression": {
															"id": 2924,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2915,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "9888:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2920,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2916,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "9898:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2919,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2917,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "9907:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2918,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "9911:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2921,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2922,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2925,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:16"
													},
													{
														"expression": {
															"id": 2935,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2926,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "9937:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2934,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2931,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2927,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "9947:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2930,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2928,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "9956:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2929,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "9960:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2932,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2936,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:16"
													},
													{
														"expression": {
															"id": 2946,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2937,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "9986:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2945,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2938,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "9996:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2941,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2939,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "10005:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2940,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "10009:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2943,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2947,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:16"
													},
													{
														"expression": {
															"id": 2957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2948,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "10035:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2956,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2953,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2949,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "10045:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2952,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2950,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "10054:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2951,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "10058:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2954,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2955,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2958,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:16"
													},
													{
														"expression": {
															"id": 2968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2959,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "10084:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2967,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2964,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2960,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "10094:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2963,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2961,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "10103:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2962,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "10107:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2965,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2966,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2969,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:16"
													},
													{
														"expression": {
															"id": 2979,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2970,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2894,
																"src": "10133:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2978,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2975,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2971,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2894,
																				"src": "10143:6:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2974,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2972,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2881,
																					"src": "10152:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2973,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2894,
																					"src": "10156:6:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2976,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2980,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:16"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2982,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2894,
																	"src": "10193:6:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2985,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2983,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2881,
																		"src": "10201:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2984,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2894,
																		"src": "10205:6:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2981,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2652,
																"src": "10189:3:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2986,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2885,
														"id": 2987,
														"nodeType": "Return",
														"src": "10182:30:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2879,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:16",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2990,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2882,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2881,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "8601:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2880,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:16"
									},
									"returnParameters": {
										"id": 2885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2884,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2990,
												"src": "8635:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:16"
									},
									"scope": 3501,
									"src": "8587:1642:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3024,
										"nodeType": "Block",
										"src": "10405:164:16",
										"statements": [
											{
												"id": 3023,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:16",
												"statements": [
													{
														"assignments": [
															3002
														],
														"declarations": [
															{
																"constant": false,
																"id": 3002,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 3023,
																"src": "10439:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3001,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3006,
														"initialValue": {
															"arguments": [
																{
																	"id": 3004,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2993,
																	"src": "10461:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3003,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2990,
																	3025
																],
																"referencedDeclaration": 2990,
																"src": "10456:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3005,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:16"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3007,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3002,
																"src": "10484:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3016,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3009,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2996,
																						"src": "10511:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3008,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3500,
																					"src": "10494:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2458_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3010,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3015,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3013,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3011,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3002,
																						"src": "10524:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3012,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3002,
																						"src": "10533:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3014,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2993,
																					"src": "10542:1:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3018,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3019,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:16",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3017,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3020,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3000,
														"id": 3022,
														"nodeType": "Return",
														"src": "10477:75:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2991,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:16",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3025,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2997,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2993,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "10343:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2996,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "10354:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2995,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2994,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "10354:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "10354:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:16"
									},
									"returnParameters": {
										"id": 3000,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2999,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3025,
												"src": "10396:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2998,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:16"
									},
									"scope": 3501,
									"src": "10329:240:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3156,
										"nodeType": "Block",
										"src": "10760:922:16",
										"statements": [
											{
												"assignments": [
													3034
												],
												"declarations": [
													{
														"constant": false,
														"id": 3034,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 3156,
														"src": "10770:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3033,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3036,
												"initialValue": {
													"hexValue": "30",
													"id": 3035,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:16",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:16"
											},
											{
												"id": 3153,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3041,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3039,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3037,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "10826:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3040,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3051,
														"nodeType": "IfStatement",
														"src": "10822:99:16",
														"trueBody": {
															"id": 3050,
															"nodeType": "Block",
															"src": "10844:77:16",
															"statements": [
																{
																	"expression": {
																		"id": 3044,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3042,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "10862:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3043,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3045,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:16"
																},
																{
																	"expression": {
																		"id": 3048,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3046,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "10893:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3047,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3049,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3056,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3054,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3052,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "10938:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3053,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3055,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3066,
														"nodeType": "IfStatement",
														"src": "10934:96:16",
														"trueBody": {
															"id": 3065,
															"nodeType": "Block",
															"src": "10955:75:16",
															"statements": [
																{
																	"expression": {
																		"id": 3059,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3057,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "10973:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3058,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3060,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:16"
																},
																{
																	"expression": {
																		"id": 3063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3061,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11003:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3064,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3071,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3069,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3067,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11047:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3068,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3070,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3081,
														"nodeType": "IfStatement",
														"src": "11043:96:16",
														"trueBody": {
															"id": 3080,
															"nodeType": "Block",
															"src": "11064:75:16",
															"statements": [
																{
																	"expression": {
																		"id": 3074,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3072,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "11082:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3073,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3075,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:16"
																},
																{
																	"expression": {
																		"id": 3078,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3076,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11112:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3077,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3079,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3086,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3084,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3082,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11156:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3083,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3085,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3096,
														"nodeType": "IfStatement",
														"src": "11152:96:16",
														"trueBody": {
															"id": 3095,
															"nodeType": "Block",
															"src": "11173:75:16",
															"statements": [
																{
																	"expression": {
																		"id": 3089,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3087,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "11191:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3088,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3090,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:16"
																},
																{
																	"expression": {
																		"id": 3093,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3091,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11221:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3092,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3094,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3101,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3099,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3097,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11265:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3098,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3111,
														"nodeType": "IfStatement",
														"src": "11261:93:16",
														"trueBody": {
															"id": 3110,
															"nodeType": "Block",
															"src": "11281:73:16",
															"statements": [
																{
																	"expression": {
																		"id": 3104,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3102,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "11299:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3103,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3105,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:16"
																},
																{
																	"expression": {
																		"id": 3108,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3106,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11328:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3107,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3109,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3116,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3114,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3112,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11371:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3113,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3115,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3126,
														"nodeType": "IfStatement",
														"src": "11367:93:16",
														"trueBody": {
															"id": 3125,
															"nodeType": "Block",
															"src": "11387:73:16",
															"statements": [
																{
																	"expression": {
																		"id": 3119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3117,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "11405:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3118,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3120,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:16"
																},
																{
																	"expression": {
																		"id": 3123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3121,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11434:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3122,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3124,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3129,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3127,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11477:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3128,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3130,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3141,
														"nodeType": "IfStatement",
														"src": "11473:93:16",
														"trueBody": {
															"id": 3140,
															"nodeType": "Block",
															"src": "11493:73:16",
															"statements": [
																{
																	"expression": {
																		"id": 3134,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3132,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3028,
																			"src": "11511:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3133,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3135,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:16"
																},
																{
																	"expression": {
																		"id": 3138,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3136,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11540:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3137,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3139,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3146,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3144,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3142,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3028,
																	"src": "11583:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3143,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3145,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3152,
														"nodeType": "IfStatement",
														"src": "11579:64:16",
														"trueBody": {
															"id": 3151,
															"nodeType": "Block",
															"src": "11599:44:16",
															"statements": [
																{
																	"expression": {
																		"id": 3149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3147,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3034,
																			"src": "11617:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3148,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3150,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:16"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3154,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3034,
													"src": "11669:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3032,
												"id": 3155,
												"nodeType": "Return",
												"src": "11662:13:16"
											}
										]
									},
									"documentation": {
										"id": 3026,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:16",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3028,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3157,
												"src": "10713:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:16"
									},
									"returnParameters": {
										"id": 3032,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3031,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3157,
												"src": "10751:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3030,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:16"
									},
									"scope": 3501,
									"src": "10699:983:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3191,
										"nodeType": "Block",
										"src": "11915:168:16",
										"statements": [
											{
												"id": 3190,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:16",
												"statements": [
													{
														"assignments": [
															3169
														],
														"declarations": [
															{
																"constant": false,
																"id": 3169,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 3190,
																"src": "11949:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3168,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3173,
														"initialValue": {
															"arguments": [
																{
																	"id": 3171,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3160,
																	"src": "11971:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3170,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3157,
																	3192
																],
																"referencedDeclaration": 3157,
																"src": "11966:4:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3172,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:16"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3188,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3174,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3169,
																"src": "11998:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3176,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3163,
																						"src": "12025:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3175,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3500,
																					"src": "12008:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2458_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3177,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3182,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3180,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3178,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3179,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3169,
																						"src": "12043:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3181,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3160,
																					"src": "12052:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3185,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3186,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:16",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3184,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3187,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3167,
														"id": 3189,
														"nodeType": "Return",
														"src": "11991:75:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3158,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:16",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3192,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3160,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "11849:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3159,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3163,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "11864:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3162,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3161,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "11864:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "11864:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:16"
									},
									"returnParameters": {
										"id": 3167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3192,
												"src": "11906:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:16"
									},
									"scope": 3501,
									"src": "11835:248:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3320,
										"nodeType": "Block",
										"src": "12276:854:16",
										"statements": [
											{
												"assignments": [
													3201
												],
												"declarations": [
													{
														"constant": false,
														"id": 3201,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 3320,
														"src": "12286:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3200,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3203,
												"initialValue": {
													"hexValue": "30",
													"id": 3202,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:16",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:16"
											},
											{
												"id": 3317,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3208,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3204,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12342:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3207,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3205,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3206,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3220,
														"nodeType": "IfStatement",
														"src": "12338:103:16",
														"trueBody": {
															"id": 3219,
															"nodeType": "Block",
															"src": "12361:80:16",
															"statements": [
																{
																	"expression": {
																		"id": 3213,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3209,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12379:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3210,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3211,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3214,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:16"
																},
																{
																	"expression": {
																		"id": 3217,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3215,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12414:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3216,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3218,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3225,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3221,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12458:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3224,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3222,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3223,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3237,
														"nodeType": "IfStatement",
														"src": "12454:103:16",
														"trueBody": {
															"id": 3236,
															"nodeType": "Block",
															"src": "12477:80:16",
															"statements": [
																{
																	"expression": {
																		"id": 3230,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3226,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12495:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3229,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3227,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3228,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3231,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:16"
																},
																{
																	"expression": {
																		"id": 3234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3232,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12530:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3233,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3235,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3242,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3238,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12574:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3241,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3239,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3254,
														"nodeType": "IfStatement",
														"src": "12570:103:16",
														"trueBody": {
															"id": 3253,
															"nodeType": "Block",
															"src": "12593:80:16",
															"statements": [
																{
																	"expression": {
																		"id": 3247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3243,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12611:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3246,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3244,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3245,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3248,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:16"
																},
																{
																	"expression": {
																		"id": 3251,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3249,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12646:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3250,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3252,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3255,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12690:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3258,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3271,
														"nodeType": "IfStatement",
														"src": "12686:100:16",
														"trueBody": {
															"id": 3270,
															"nodeType": "Block",
															"src": "12708:78:16",
															"statements": [
																{
																	"expression": {
																		"id": 3264,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3260,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12726:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3263,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3261,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3262,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3265,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:16"
																},
																{
																	"expression": {
																		"id": 3268,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3266,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12760:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3267,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3269,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3272,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12803:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3288,
														"nodeType": "IfStatement",
														"src": "12799:100:16",
														"trueBody": {
															"id": 3287,
															"nodeType": "Block",
															"src": "12821:78:16",
															"statements": [
																{
																	"expression": {
																		"id": 3281,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3277,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12839:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3280,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3278,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3279,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3282,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:16"
																},
																{
																	"expression": {
																		"id": 3285,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3283,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12873:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3284,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3286,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3289,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "12916:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3292,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3290,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3291,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3305,
														"nodeType": "IfStatement",
														"src": "12912:100:16",
														"trueBody": {
															"id": 3304,
															"nodeType": "Block",
															"src": "12934:78:16",
															"statements": [
																{
																	"expression": {
																		"id": 3298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3294,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3195,
																			"src": "12952:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3297,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3295,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3296,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3299,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:16"
																},
																{
																	"expression": {
																		"id": 3302,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3300,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "12986:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3301,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3303,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3306,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3195,
																"src": "13029:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3309,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3307,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3308,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3316,
														"nodeType": "IfStatement",
														"src": "13025:66:16",
														"trueBody": {
															"id": 3315,
															"nodeType": "Block",
															"src": "13047:44:16",
															"statements": [
																{
																	"expression": {
																		"id": 3313,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3311,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3201,
																			"src": "13065:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3312,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3314,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:16"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3318,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3201,
													"src": "13117:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3199,
												"id": 3319,
												"nodeType": "Return",
												"src": "13110:13:16"
											}
										]
									},
									"documentation": {
										"id": 3193,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:16",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3195,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3321,
												"src": "12229:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:16"
									},
									"returnParameters": {
										"id": 3199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3321,
												"src": "12267:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3197,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:16"
									},
									"scope": 3501,
									"src": "12214:916:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3355,
										"nodeType": "Block",
										"src": "13365:170:16",
										"statements": [
											{
												"id": 3354,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:16",
												"statements": [
													{
														"assignments": [
															3333
														],
														"declarations": [
															{
																"constant": false,
																"id": 3333,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 3354,
																"src": "13399:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3332,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3337,
														"initialValue": {
															"arguments": [
																{
																	"id": 3335,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3324,
																	"src": "13422:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3334,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3321,
																	3356
																],
																"referencedDeclaration": 3321,
																"src": "13416:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3336,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:16"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3352,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3338,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3333,
																"src": "13449:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3340,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3327,
																						"src": "13476:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3339,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3500,
																					"src": "13459:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2458_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3341,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3346,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3344,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3342,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3343,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3333,
																						"src": "13495:6:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3345,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3324,
																					"src": "13504:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3349,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3350,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:16",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3348,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3351,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3331,
														"id": 3353,
														"nodeType": "Return",
														"src": "13442:76:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3322,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:16",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3356,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3328,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3324,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3356,
												"src": "13299:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3323,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3327,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3356,
												"src": "13314:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3326,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3325,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "13314:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "13314:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:16"
									},
									"returnParameters": {
										"id": 3331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3330,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3356,
												"src": "13356:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3329,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:16"
									},
									"scope": 3501,
									"src": "13284:251:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3442,
										"nodeType": "Block",
										"src": "13855:600:16",
										"statements": [
											{
												"assignments": [
													3365
												],
												"declarations": [
													{
														"constant": false,
														"id": 3365,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 3442,
														"src": "13865:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3364,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3367,
												"initialValue": {
													"hexValue": "30",
													"id": 3366,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:16",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:16"
											},
											{
												"id": 3439,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:16",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3372,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3368,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3359,
																	"src": "13921:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3371,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3382,
														"nodeType": "IfStatement",
														"src": "13917:98:16",
														"trueBody": {
															"id": 3381,
															"nodeType": "Block",
															"src": "13939:76:16",
															"statements": [
																{
																	"expression": {
																		"id": 3375,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3373,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3359,
																			"src": "13957:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3374,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3376,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:16"
																},
																{
																	"expression": {
																		"id": 3379,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3377,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3365,
																			"src": "13988:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3378,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3380,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3387,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3383,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3359,
																	"src": "14032:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3386,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3397,
														"nodeType": "IfStatement",
														"src": "14028:95:16",
														"trueBody": {
															"id": 3396,
															"nodeType": "Block",
															"src": "14049:74:16",
															"statements": [
																{
																	"expression": {
																		"id": 3390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3388,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3359,
																			"src": "14067:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3389,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3391,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:16"
																},
																{
																	"expression": {
																		"id": 3394,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3392,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3365,
																			"src": "14097:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3395,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3402,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3398,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3359,
																	"src": "14140:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3401,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3412,
														"nodeType": "IfStatement",
														"src": "14136:95:16",
														"trueBody": {
															"id": 3411,
															"nodeType": "Block",
															"src": "14157:74:16",
															"statements": [
																{
																	"expression": {
																		"id": 3405,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3403,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3359,
																			"src": "14175:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3404,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3406,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:16"
																},
																{
																	"expression": {
																		"id": 3409,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3407,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3365,
																			"src": "14205:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3408,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3410,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3413,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3359,
																	"src": "14248:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3416,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3427,
														"nodeType": "IfStatement",
														"src": "14244:95:16",
														"trueBody": {
															"id": 3426,
															"nodeType": "Block",
															"src": "14265:74:16",
															"statements": [
																{
																	"expression": {
																		"id": 3420,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3418,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3359,
																			"src": "14283:5:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3419,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3421,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:16"
																},
																{
																	"expression": {
																		"id": 3424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3422,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3365,
																			"src": "14313:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3423,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3425,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:16"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3428,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3359,
																	"src": "14356:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3431,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3438,
														"nodeType": "IfStatement",
														"src": "14352:64:16",
														"trueBody": {
															"id": 3437,
															"nodeType": "Block",
															"src": "14372:44:16",
															"statements": [
																{
																	"expression": {
																		"id": 3435,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3433,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3365,
																			"src": "14390:6:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3434,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3436,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:16"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3440,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3365,
													"src": "14442:6:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3363,
												"id": 3441,
												"nodeType": "Return",
												"src": "14435:13:16"
											}
										]
									},
									"documentation": {
										"id": 3357,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:16",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3443,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3359,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3443,
												"src": "13808:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:16"
									},
									"returnParameters": {
										"id": 3363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3443,
												"src": "13846:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:16"
									},
									"scope": 3501,
									"src": "13792:663:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3480,
										"nodeType": "Block",
										"src": "14692:177:16",
										"statements": [
											{
												"id": 3479,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:16",
												"statements": [
													{
														"assignments": [
															3455
														],
														"declarations": [
															{
																"constant": false,
																"id": 3455,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:16",
																"nodeType": "VariableDeclaration",
																"scope": 3479,
																"src": "14726:14:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3454,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3459,
														"initialValue": {
															"arguments": [
																{
																	"id": 3457,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3446,
																	"src": "14750:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3456,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3443,
																	3481
																],
																"referencedDeclaration": 3443,
																"src": "14743:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:16"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3477,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3460,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3455,
																"src": "14777:6:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3472,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3462,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3449,
																						"src": "14804:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2458",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3461,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3500,
																					"src": "14787:16:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2458_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3463,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3471,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3469,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3464,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3467,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3465,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3455,
																									"src": "14823:6:16",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3466,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:16",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:16",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3468,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3470,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3446,
																					"src": "14838:5:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3474,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3475,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:16",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3473,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3476,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3453,
														"id": 3478,
														"nodeType": "Return",
														"src": "14770:82:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3444,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:16",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3481,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3446,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 3481,
												"src": "14626:13:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3445,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3449,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3481,
												"src": "14641:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3448,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3447,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "14641:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "14641:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:16"
									},
									"returnParameters": {
										"id": 3453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3452,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3481,
												"src": "14683:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:16"
									},
									"scope": 3501,
									"src": "14610:259:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3499,
										"nodeType": "Block",
										"src": "15067:48:16",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3495,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3492,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3485,
																	"src": "15090:8:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2458",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2458",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3491,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3490,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:16",
																	"typeDescriptions": {}
																}
															},
															"id": 3493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3489,
												"id": 3498,
												"nodeType": "Return",
												"src": "15077:31:16"
											}
										]
									},
									"documentation": {
										"id": 3482,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:16",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3500,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3485,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 3500,
												"src": "15019:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2458",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3484,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3483,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2458,
														"src": "15019:8:16"
													},
													"referencedDeclaration": 2458,
													"src": "15019:8:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2458",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:16"
									},
									"returnParameters": {
										"id": 3489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3488,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3500,
												"src": "15061:4:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3487,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:16"
									},
									"scope": 3501,
									"src": "14993:122:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3502,
							"src": "203:14914:16",
							"usedErrors": [
								2453
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3606
						]
					},
					"id": 3607,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3503,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3504,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:17",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3606,
							"linearizedBaseContracts": [
								3606
							],
							"name": "SignedMath",
							"nameLocation": "224:10:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3521,
										"nodeType": "Block",
										"src": "376:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3514,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3507,
															"src": "393:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3515,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3509,
															"src": "397:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3518,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3509,
														"src": "405:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:17",
													"trueExpression": {
														"id": 3517,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3507,
														"src": "401:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3513,
												"id": 3520,
												"nodeType": "Return",
												"src": "386:20:17"
											}
										]
									},
									"documentation": {
										"id": 3505,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:17",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3507,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3522,
												"src": "325:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3506,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3509,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3522,
												"src": "335:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3508,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:17"
									},
									"returnParameters": {
										"id": 3513,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3512,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3522,
												"src": "368:6:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3511,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:17"
									},
									"scope": 3606,
									"src": "312:101:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3539,
										"nodeType": "Block",
										"src": "555:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3534,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3532,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3525,
															"src": "572:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3533,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3527,
															"src": "576:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3536,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3527,
														"src": "584:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:17",
													"trueExpression": {
														"id": 3535,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3525,
														"src": "580:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3531,
												"id": 3538,
												"nodeType": "Return",
												"src": "565:20:17"
											}
										]
									},
									"documentation": {
										"id": 3523,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:17",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3540,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3525,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3540,
												"src": "504:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3524,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3527,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3540,
												"src": "514:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3526,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:17"
									},
									"returnParameters": {
										"id": 3531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3530,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3540,
												"src": "547:6:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3529,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:17"
									},
									"scope": 3606,
									"src": "491:101:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3583,
										"nodeType": "Block",
										"src": "797:162:17",
										"statements": [
											{
												"assignments": [
													3551
												],
												"declarations": [
													{
														"constant": false,
														"id": 3551,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:17",
														"nodeType": "VariableDeclaration",
														"scope": 3583,
														"src": "859:8:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3550,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3564,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3554,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3552,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3543,
																	"src": "871:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3553,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3545,
																	"src": "875:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3555,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3558,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3556,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3543,
																				"src": "882:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3557,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3545,
																				"src": "886:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3559,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3560,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3562,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:17"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3565,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3551,
														"src": "911:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3573,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3570,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3551,
																						"src": "931:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3569,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3568,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:17",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3571,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3572,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3566,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3577,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3575,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3543,
																				"src": "945:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3576,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3545,
																				"src": "949:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3578,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3580,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:17",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3549,
												"id": 3582,
												"nodeType": "Return",
												"src": "904:48:17"
											}
										]
									},
									"documentation": {
										"id": 3541,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:17",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3546,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3543,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3584,
												"src": "746:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3542,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3545,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3584,
												"src": "756:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3544,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:17"
									},
									"returnParameters": {
										"id": 3549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3548,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3584,
												"src": "789:6:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3547,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:17"
									},
									"scope": 3606,
									"src": "729:230:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3604,
										"nodeType": "Block",
										"src": "1103:158:17",
										"statements": [
											{
												"id": 3603,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:17",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3594,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3587,
																			"src": "1228:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3595,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:17",
																		"subExpression": {
																			"id": 3598,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3587,
																			"src": "1242:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:17",
																	"trueExpression": {
																		"id": 3597,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3587,
																		"src": "1237:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3593,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3592,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3601,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3591,
														"id": 3602,
														"nodeType": "Return",
														"src": "1213:31:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3585,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:17",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3605,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3587,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3605,
												"src": "1061:8:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3586,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:17"
									},
									"returnParameters": {
										"id": 3591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3605,
												"src": "1094:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:17"
									},
									"scope": 3606,
									"src": "1048:213:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3607,
							"src": "216:1047:17",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:17"
				},
				"id": 17
			},
			"contracts/contracts/tokens/BulkMinter.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/tokens/BulkMinter.sol",
					"exportedSymbols": {
						"BulkMinter": [
							3697
						],
						"Context": [
							1148
						],
						"ECDSA": [
							2146
						],
						"EIP712": [
							2373
						],
						"ERC20": [
							824
						],
						"ERC20Permit": [
							1056
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1082
						],
						"IERC20Permit": [
							1118
						],
						"MockTokenCreator": [
							3750
						],
						"Nonces": [
							1216
						],
						"Ownable": [
							147
						]
					},
					"id": 3698,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3608,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".18"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3609,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3698,
							"sourceUnit": 148,
							"src": "61:52:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/tokens/MockTokenCreator.sol",
							"file": "./MockTokenCreator.sol",
							"id": 3610,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3698,
							"sourceUnit": 3751,
							"src": "115:32:18",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3612,
										"name": "Ownable",
										"nameLocations": [
											"366:7:18"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "366:7:18"
									},
									"id": 3613,
									"nodeType": "InheritanceSpecifier",
									"src": "366:7:18"
								}
							],
							"canonicalName": "BulkMinter",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3611,
								"nodeType": "StructuredDocumentation",
								"src": "205:136:18",
								"text": " @title BulkMinter\n @dev This contract allows the minting of multiple ERC20 tokens to the caller in a single transaction."
							},
							"fullyImplemented": true,
							"id": 3697,
							"linearizedBaseContracts": [
								3697,
								147,
								1148
							],
							"name": "BulkMinter",
							"nameLocation": "352:10:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 3614,
										"nodeType": "StructuredDocumentation",
										"src": "381:72:18",
										"text": "@notice Array to hold the addresses of the deployed ERC20 contracts."
									},
									"functionSelector": "4f64b2be",
									"id": 3618,
									"mutability": "mutable",
									"name": "tokens",
									"nameLocation": "485:6:18",
									"nodeType": "VariableDeclaration",
									"scope": 3697,
									"src": "459:32:18",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
										"typeString": "contract MockTokenCreator[]"
									},
									"typeName": {
										"baseType": {
											"id": 3616,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 3615,
												"name": "MockTokenCreator",
												"nameLocations": [
													"459:16:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 3750,
												"src": "459:16:18"
											},
											"referencedDeclaration": 3750,
											"src": "459:16:18",
											"typeDescriptions": {
												"typeIdentifier": "t_contract$_MockTokenCreator_$3750",
												"typeString": "contract MockTokenCreator"
											}
										},
										"id": 3617,
										"nodeType": "ArrayTypeName",
										"src": "459:18:18",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage_ptr",
											"typeString": "contract MockTokenCreator[]"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 3627,
										"nodeType": "Block",
										"src": "701:10:18",
										"statements": []
									},
									"documentation": {
										"id": 3619,
										"nodeType": "StructuredDocumentation",
										"src": "500:139:18",
										"text": " @dev Initializes the contract setting the initial owner.\n @param initialOwner The address of the initial owner."
									},
									"id": 3628,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3624,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3621,
													"src": "687:12:18",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3625,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3623,
												"name": "Ownable",
												"nameLocations": [
													"679:7:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "679:7:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "679:21:18"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3621,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "665:12:18",
												"nodeType": "VariableDeclaration",
												"scope": 3628,
												"src": "657:20:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3620,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:18"
									},
									"returnParameters": {
										"id": 3626,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:0:18"
									},
									"scope": 3697,
									"src": "645:66:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3644,
										"nodeType": "Block",
										"src": "897:55:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 3640,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3631,
																	"src": "937:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 3639,
																"name": "MockTokenCreator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3750,
																"src": "920:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_MockTokenCreator_$3750_$",
																	"typeString": "type(contract MockTokenCreator)"
																}
															},
															"id": 3641,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "920:23:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_MockTokenCreator_$3750",
																"typeString": "contract MockTokenCreator"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_MockTokenCreator_$3750",
																"typeString": "contract MockTokenCreator"
															}
														],
														"expression": {
															"id": 3636,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3618,
															"src": "908:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
																"typeString": "contract MockTokenCreator[] storage ref"
															}
														},
														"id": 3638,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "915:4:18",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "908:11:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage_ptr_$_t_contract$_MockTokenCreator_$3750_$returns$__$attached_to$_t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage_ptr_$",
															"typeString": "function (contract MockTokenCreator[] storage pointer,contract MockTokenCreator)"
														}
													},
													"id": 3642,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "908:36:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3643,
												"nodeType": "ExpressionStatement",
												"src": "908:36:18"
											}
										]
									},
									"documentation": {
										"id": 3629,
										"nodeType": "StructuredDocumentation",
										"src": "719:120:18",
										"text": " @dev Adds a new token contract to the list.\n @param token The address of the token contract."
									},
									"functionSelector": "d48bfca7",
									"id": 3645,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3634,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3633,
												"name": "onlyOwner",
												"nameLocations": [
													"887:9:18"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "887:9:18"
											},
											"nodeType": "ModifierInvocation",
											"src": "887:9:18"
										}
									],
									"name": "addToken",
									"nameLocation": "854:8:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3632,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3631,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "871:5:18",
												"nodeType": "VariableDeclaration",
												"scope": 3645,
												"src": "863:13:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "863:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "862:15:18"
									},
									"returnParameters": {
										"id": 3635,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "897:0:18"
									},
									"scope": 3697,
									"src": "845:107:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3685,
										"nodeType": "Block",
										"src": "1326:236:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3657,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 3653,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3649,
																	"src": "1345:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 3654,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1353:6:18",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1345:14:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 3655,
																	"name": "tokens",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3618,
																	"src": "1363:6:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
																		"typeString": "contract MockTokenCreator[] storage ref"
																	}
																},
																"id": 3656,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1370:6:18",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "1363:13:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1345:31:18",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416d6f756e7473206172726179206c656e677468206d757374206d6174636820746f6b656e73206172726179206c656e6774682e",
															"id": 3658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1378:54:18",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9acabb8a53cb35573da7f47df5e549a72d3aa5c35ce2efbc9c9bf6150d194e72",
																"typeString": "literal_string \"Amounts array length must match tokens array length.\""
															},
															"value": "Amounts array length must match tokens array length."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9acabb8a53cb35573da7f47df5e549a72d3aa5c35ce2efbc9c9bf6150d194e72",
																"typeString": "literal_string \"Amounts array length must match tokens array length.\""
															}
														],
														"id": 3652,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1337:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 3659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1337:96:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3660,
												"nodeType": "ExpressionStatement",
												"src": "1337:96:18"
											},
											{
												"body": {
													"id": 3683,
													"nodeType": "Block",
													"src": "1490:65:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 3676,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1520:3:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 3677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1524:6:18",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1520:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"baseExpression": {
																			"id": 3678,
																			"name": "amounts",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3649,
																			"src": "1532:7:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																				"typeString": "uint256[] calldata"
																			}
																		},
																		"id": 3680,
																		"indexExpression": {
																			"id": 3679,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3662,
																			"src": "1540:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1532:10:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"baseExpression": {
																			"id": 3672,
																			"name": "tokens",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3618,
																			"src": "1505:6:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
																				"typeString": "contract MockTokenCreator[] storage ref"
																			}
																		},
																		"id": 3674,
																		"indexExpression": {
																			"id": 3673,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3662,
																			"src": "1512:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1505:9:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_MockTokenCreator_$3750",
																			"typeString": "contract MockTokenCreator"
																		}
																	},
																	"id": 3675,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1515:4:18",
																	"memberName": "mint",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3736,
																	"src": "1505:14:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256) external"
																	}
																},
																"id": 3681,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1505:38:18",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 3682,
															"nodeType": "ExpressionStatement",
															"src": "1505:38:18"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3668,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3665,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3662,
														"src": "1466:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 3666,
															"name": "tokens",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3618,
															"src": "1470:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
																"typeString": "contract MockTokenCreator[] storage ref"
															}
														},
														"id": 3667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1477:6:18",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1470:13:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1466:17:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3684,
												"initializationExpression": {
													"assignments": [
														3662
													],
													"declarations": [
														{
															"constant": false,
															"id": 3662,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1459:1:18",
															"nodeType": "VariableDeclaration",
															"scope": 3684,
															"src": "1451:9:18",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 3661,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1451:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 3664,
													"initialValue": {
														"hexValue": "30",
														"id": 3663,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1463:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1451:13:18"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 3670,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1485:3:18",
														"subExpression": {
															"id": 3669,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3662,
															"src": "1485:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3671,
													"nodeType": "ExpressionStatement",
													"src": "1485:3:18"
												},
												"nodeType": "ForStatement",
												"src": "1446:109:18"
											}
										]
									},
									"documentation": {
										"id": 3646,
										"nodeType": "StructuredDocumentation",
										"src": "960:306:18",
										"text": " @notice Mints tokens from all the listed contracts to the caller.\n @dev The `amounts` array must match the length of the `tokens` array.\n @param amounts An array of amounts to mint from each token contract.\n The array index corresponds to the token contract index."
									},
									"functionSelector": "85e5d7ee",
									"id": 3686,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mintAll",
									"nameLocation": "1281:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3649,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "1308:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 3686,
												"src": "1289:26:18",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 3647,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "1289:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 3648,
													"nodeType": "ArrayTypeName",
													"src": "1289:9:18",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1288:28:18"
									},
									"returnParameters": {
										"id": 3651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1326:0:18"
									},
									"scope": 3697,
									"src": "1272:290:18",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 3695,
										"nodeType": "Block",
										"src": "1750:39:18",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 3692,
														"name": "tokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3618,
														"src": "1768:6:18",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_contract$_MockTokenCreator_$3750_$dyn_storage",
															"typeString": "contract MockTokenCreator[] storage ref"
														}
													},
													"id": 3693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1775:6:18",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "1768:13:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3691,
												"id": 3694,
												"nodeType": "Return",
												"src": "1761:20:18"
											}
										]
									},
									"documentation": {
										"id": 3687,
										"nodeType": "StructuredDocumentation",
										"src": "1570:117:18",
										"text": " @notice Gets the number of token contracts added.\n @return The number of token contracts."
									},
									"functionSelector": "78a89567",
									"id": 3696,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getTokenCount",
									"nameLocation": "1702:13:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3688,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1715:2:18"
									},
									"returnParameters": {
										"id": 3691,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3690,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3696,
												"src": "1741:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1741:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1740:9:18"
									},
									"scope": 3697,
									"src": "1693:96:18",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 3698,
							"src": "343:1449:18",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "33:1761:18"
				},
				"id": 18
			},
			"contracts/contracts/tokens/MockTokenCreator.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/tokens/MockTokenCreator.sol",
					"exportedSymbols": {
						"Context": [
							1148
						],
						"ECDSA": [
							2146
						],
						"EIP712": [
							2373
						],
						"ERC20": [
							824
						],
						"ERC20Permit": [
							1056
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1082
						],
						"IERC20Permit": [
							1118
						],
						"MockTokenCreator": [
							3750
						],
						"Nonces": [
							1216
						]
					},
					"id": 3751,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3699,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3700,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3751,
							"sourceUnit": 825,
							"src": "60:55:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3701,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3751,
							"sourceUnit": 1057,
							"src": "117:72:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3703,
										"name": "ERC20",
										"nameLocations": [
											"410:5:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "410:5:19"
									},
									"id": 3704,
									"nodeType": "InheritanceSpecifier",
									"src": "410:5:19"
								},
								{
									"baseName": {
										"id": 3705,
										"name": "ERC20Permit",
										"nameLocations": [
											"417:11:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1056,
										"src": "417:11:19"
									},
									"id": 3706,
									"nodeType": "InheritanceSpecifier",
									"src": "417:11:19"
								}
							],
							"canonicalName": "MockTokenCreator",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 3702,
								"nodeType": "StructuredDocumentation",
								"src": "193:186:19",
								"text": " @title MockTokenCreator\n @dev Extension of OpenZeppelin's ERC20 and ERC20Permit contract.\n Allows for minting and burning of tokens, and includes permit functionality."
							},
							"fullyImplemented": true,
							"id": 3750,
							"linearizedBaseContracts": [
								3750,
								1056,
								1216,
								2373,
								172,
								1118,
								824,
								214,
								1082,
								902,
								1148
							],
							"name": "MockTokenCreator",
							"nameLocation": "390:16:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3721,
										"nodeType": "Block",
										"src": "763:2:19",
										"statements": []
									},
									"documentation": {
										"id": 3707,
										"nodeType": "StructuredDocumentation",
										"src": "436:206:19",
										"text": " @dev Initializes the contract with the token name and symbol, and sets up permit functionality.\n @param name The name of the token.\n @param symbol The symbol of the token."
									},
									"id": 3722,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 3714,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3709,
													"src": "717:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"id": 3715,
													"name": "symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3711,
													"src": "723:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 3716,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3713,
												"name": "ERC20",
												"nameLocations": [
													"711:5:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 824,
												"src": "711:5:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "711:19:19"
										},
										{
											"arguments": [
												{
													"id": 3718,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3709,
													"src": "752:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												}
											],
											"id": 3719,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3717,
												"name": "ERC20Permit",
												"nameLocations": [
													"740:11:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1056,
												"src": "740:11:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "740:17:19"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3709,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "674:4:19",
												"nodeType": "VariableDeclaration",
												"scope": 3722,
												"src": "660:18:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3708,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "660:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3711,
												"mutability": "mutable",
												"name": "symbol",
												"nameLocation": "694:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3722,
												"src": "680:20:19",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 3710,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "680:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "659:42:19"
									},
									"returnParameters": {
										"id": 3720,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "763:0:19"
									},
									"scope": 3750,
									"src": "648:117:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3735,
										"nodeType": "Block",
										"src": "1099:36:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3731,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3725,
															"src": "1116:2:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3732,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3727,
															"src": "1120:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3730,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "1110:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1110:17:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3734,
												"nodeType": "ExpressionStatement",
												"src": "1110:17:19"
											}
										]
									},
									"documentation": {
										"id": 3723,
										"nodeType": "StructuredDocumentation",
										"src": "773:271:19",
										"text": " @notice Mints `amount` tokens to address `to`.\n @dev Caller must have a role that allows them to mint (not implemented in this simple example).\n @param to The address of the recipient.\n @param amount The number of tokens to mint."
									},
									"functionSelector": "40c10f19",
									"id": 3736,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "1059:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3725,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1072:2:19",
												"nodeType": "VariableDeclaration",
												"scope": 3736,
												"src": "1064:10:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3724,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1064:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3727,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1084:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3736,
												"src": "1076:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3726,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1076:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1063:28:19"
									},
									"returnParameters": {
										"id": 3729,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1099:0:19"
									},
									"scope": 3750,
									"src": "1050:85:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3748,
										"nodeType": "Block",
										"src": "1373:46:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 3743,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1130,
																"src": "1390:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 3744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1390:12:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3745,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3739,
															"src": "1404:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3742,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "1384:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1384:27:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3747,
												"nodeType": "ExpressionStatement",
												"src": "1384:27:19"
											}
										]
									},
									"documentation": {
										"id": 3737,
										"nodeType": "StructuredDocumentation",
										"src": "1143:187:19",
										"text": " @notice Burns `amount` tokens from the callerâ€™s account.\n @dev Caller must have at least `amount` tokens.\n @param amount The number of tokens to burn."
									},
									"functionSelector": "42966c68",
									"id": 3749,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "1345:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3739,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1358:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3749,
												"src": "1350:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1350:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1349:16:19"
									},
									"returnParameters": {
										"id": 3741,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1373:0:19"
									},
									"scope": 3750,
									"src": "1336:83:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3751,
							"src": "381:1041:19",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								933,
								940,
								1158,
								1230,
								1232,
								1809,
								1814,
								1819
							],
							"usedEvents": [
								152,
								836,
								845
							]
						}
					],
					"src": "33:1391:19"
				},
				"id": 19
			}
		}
	}
}