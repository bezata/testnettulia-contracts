{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "AllowanceExpired",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExcessiveInvalidation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "InsufficientAllowance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidContractSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidNonce",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidSigner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "signatureDeadline",
						"type": "uint256"
					}
				],
				"name": "SignatureExpired",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "Lockdown",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "oldNonce",
						"type": "uint48"
					}
				],
				"name": "NonceInvalidation",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					},
					{
						"indexed": false,
						"internalType": "uint48",
						"name": "nonce",
						"type": "uint48"
					}
				],
				"name": "Permit",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					},
					{
						"internalType": "uint48",
						"name": "nonce",
						"type": "uint48"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "uint48",
						"name": "expiration",
						"type": "uint48"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint48",
						"name": "newNonce",
						"type": "uint48"
					}
				],
				"name": "invalidateNonces",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
						"name": "approvals",
						"type": "tuple[]"
					}
				],
				"name": "lockdown",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails[]",
								"name": "details",
								"type": "tuple[]"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitBatch",
						"name": "permitBatch",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "address",
										"name": "token",
										"type": "address"
									},
									{
										"internalType": "uint160",
										"name": "amount",
										"type": "uint160"
									},
									{
										"internalType": "uint48",
										"name": "expiration",
										"type": "uint48"
									},
									{
										"internalType": "uint48",
										"name": "nonce",
										"type": "uint48"
									}
								],
								"internalType": "struct IAllowanceTransfer.PermitDetails",
								"name": "details",
								"type": "tuple"
							},
							{
								"internalType": "address",
								"name": "spender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sigDeadline",
								"type": "uint256"
							}
						],
						"internalType": "struct IAllowanceTransfer.PermitSingle",
						"name": "permitSingle",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "permit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "from",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint160",
								"name": "amount",
								"type": "uint160"
							},
							{
								"internalType": "address",
								"name": "token",
								"type": "address"
							}
						],
						"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
						"name": "transferDetails",
						"type": "tuple[]"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint160",
						"name": "amount",
						"type": "uint160"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"params": {
							"deadline": "The timestamp at which the allowed amount is no longer valid"
						}
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"params": {
							"amount": "The maximum amount allowed"
						}
					}
				],
				"SignatureExpired(uint256)": [
					{
						"params": {
							"signatureDeadline": "The timestamp at which a signature is no longer valid"
						}
					}
				]
			},
			"kind": "dev",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"details": "Uses cached version if chainid and address are unchanged from construction."
				},
				"approve(address,address,uint160,uint48)": {
					"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
					"params": {
						"amount": "The approved amount of the token",
						"expiration": "The timestamp at which the approval is no longer valid",
						"spender": "The spender address to approve",
						"token": "The token to approve"
					}
				},
				"invalidateNonces(address,address,uint48)": {
					"details": "Can't invalidate more than 2**16 nonces per transaction.",
					"params": {
						"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
						"spender": "The spender to invalidate nonces for",
						"token": "The token to invalidate nonces for"
					}
				},
				"lockdown((address,address)[])": {
					"params": {
						"approvals": "Array of approvals to revoke."
					}
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitSingle": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
					"params": {
						"owner": "The owner of the tokens being approved",
						"permitBatch": "Data signed over by the owner specifying the terms of approval",
						"signature": "The owner's signature over the permit data"
					}
				},
				"transferFrom((address,address,uint160,address)[])": {
					"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
					}
				},
				"transferFrom(address,address,uint160,address)": {
					"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
					"params": {
						"amount": "The amount of the token to transfer",
						"from": "The address to transfer from",
						"to": "The address of the recipient",
						"token": "The token address to transfer"
					}
				}
			},
			"stateVariables": {
				"allowance": {
					"details": "Indexed in the order of token owner address, token address, spender addressThe stored word saves the allowed amount, expiration on the allowance, and nonce"
				}
			},
			"version": 1
		},
		"userdoc": {
			"errors": {
				"AllowanceExpired(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has expired."
					}
				],
				"ExcessiveInvalidation()": [
					{
						"notice": "Thrown when too many nonces are invalidated."
					}
				],
				"InsufficientAllowance(uint256)": [
					{
						"notice": "Thrown when an allowance on a token has been depleted."
					}
				],
				"InvalidContractSignature()": [
					{
						"notice": "Thrown when the recovered contract signature is incorrect"
					}
				],
				"InvalidNonce()": [
					{
						"notice": "Thrown when validating that the inputted nonce has not been used"
					}
				],
				"InvalidSignature()": [
					{
						"notice": "Thrown when the recovered signer is equal to the zero address"
					}
				],
				"InvalidSignatureLength()": [
					{
						"notice": "Thrown when the passed in signature is not a valid length"
					}
				],
				"InvalidSigner()": [
					{
						"notice": "Thrown when the recovered signer does not equal the claimedSigner"
					}
				],
				"SignatureExpired(uint256)": [
					{
						"notice": "Thrown when validating an inputted signature that is stale"
					}
				]
			},
			"events": {
				"Approval(address,address,address,uint160,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
				},
				"Lockdown(address,address,address)": {
					"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
				},
				"NonceInvalidation(address,address,address,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
				},
				"Permit(address,address,address,uint160,uint48,uint48)": {
					"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
				}
			},
			"kind": "user",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"notice": "Returns the domain separator for the current chain."
				},
				"allowance(address,address,address)": {
					"notice": "Maps users to tokens to spender addresses and information about the approval on the token"
				},
				"approve(address,address,uint160,uint48)": {
					"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
				},
				"invalidateNonces(address,address,uint48)": {
					"notice": "Invalidate nonces for a given (token, spender) pair"
				},
				"lockdown((address,address)[])": {
					"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
				},
				"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
					"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
				},
				"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
					"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
				},
				"transferFrom((address,address,uint160,address)[])": {
					"notice": "Transfer approved tokens in a batch"
				},
				"transferFrom(address,address,uint160,address)": {
					"notice": "Transfer approved tokens from one address to another"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/permit2/AllowanceTransfer.sol": "AllowanceTransfer"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
			"keccak256": "0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29",
			"license": "MIT",
			"urls": [
				"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0",
				"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN"
			]
		},
		"contracts/contracts/interfaces/IEIP712.sol": {
			"keccak256": "0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138",
			"license": "MIT",
			"urls": [
				"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72",
				"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk"
			]
		},
		"contracts/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x0a546b8535127fb4a49d36d5f306fd5a8bbe6125a1852f935b9bb85a04c1acef",
			"license": "MIT",
			"urls": [
				"bzz-raw://4b99651e2df98e283a97c46d8d1ac4eff0d6a3618e25f7f85294472a670b541c",
				"dweb:/ipfs/QmYRy5G8fXE8BfmyvGEbESEYZPPg3zJEFxHzR5GJZEMMTk"
			]
		},
		"contracts/contracts/interfaces/ISignatureTransfer.sol": {
			"keccak256": "0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317",
				"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d"
			]
		},
		"contracts/contracts/lib/Allowance.sol": {
			"keccak256": "0xc44ad59f9c6306b5f3d019ce95e29a5de88862f7bdc51375d44c15fca536bf2a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9f33f02f549c1d7dcb45a592f1b4082ceabbea5f9a7190567e85ffd23b670788",
				"dweb:/ipfs/QmUnBU5BoudGbN3dtLTci1xb6q5SxpPwTBpAC1cq6nNEg2"
			]
		},
		"contracts/contracts/lib/PermitHash.sol": {
			"keccak256": "0xbd0fcb52a5a753f77b10f30d653e638bf40705a0aa10cf96978ef82ea926e637",
			"license": "MIT",
			"urls": [
				"bzz-raw://de007b53ff2757733e919d17d53dc0c0b1e1f856132e0004dd9f79272472a093",
				"dweb:/ipfs/QmST5dKQYMZWD6magJPUXsJSWf57Rr5nWi1AgethhAvoCj"
			]
		},
		"contracts/contracts/lib/SignatureVerification.sol": {
			"keccak256": "0xb5cf5e3c9407dc26f95d01170dbc2c82cd5c210ecc39ad3559b314df0c0c90d0",
			"license": "MIT",
			"urls": [
				"bzz-raw://39a5929df7b7ad16e2a429e5e76712f95d914d1e72d8350cd3b445e84058bbb2",
				"dweb:/ipfs/QmXBnuFKWjK3huwN9qoePSyxT9qwpdGXfpTgjApRPiQsrd"
			]
		},
		"contracts/contracts/permit2/AllowanceTransfer.sol": {
			"keccak256": "0x24707e751d61cb52795c451160129d50e164695918474e64d1f1f35cac90f18e",
			"license": "MIT",
			"urls": [
				"bzz-raw://b262f113e538b677bcdb90403d8b2697b71f7a382824c3957f9641047489792b",
				"dweb:/ipfs/QmXr23z5Ks4jrPiFM9JSqi8J54Pp3Levz9y3Qdngx1uqVk"
			]
		},
		"contracts/contracts/permit2/EIP712.sol": {
			"keccak256": "0x8bf0e994a040c5de83f9848dca37b71b45bf09d6b8028a925a76d1c917654b6d",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb0435626dccaaa530a392320a9099d489e6d28155c8a20cb86579517f5336a2",
				"dweb:/ipfs/QmbVkXYsMxqYoiTH5WLNjhToJWbjMSuqGLGVBj7SU69khP"
			]
		},
		"contracts/contracts/permit2/PermitErrors.sol": {
			"keccak256": "0x42d48b78944c43d75496f49a62e1a9b858c2ecacc09f016a68204f7cac9ab014",
			"license": "MIT",
			"urls": [
				"bzz-raw://3ed8221dc84848fd5aa1234b68d31adf9bded04a56175e545fe0119a5a886674",
				"dweb:/ipfs/QmQQGA8GFVvTDdism9JxAFqFoy37fokryqwnzixeQNenui"
			]
		},
		"solmate/src/tokens/ERC20.sol": {
			"keccak256": "0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://57b3ab70cde374af1cf2c9888636e8de6cf660f087b1c9abd805e9271e19fa35",
				"dweb:/ipfs/QmNrLDBAHYFjpjSd12jerm1AdBkDqEYUUaXgnT854BUZ97"
			]
		},
		"solmate/src/utils/SafeTransferLib.sol": {
			"keccak256": "0x6ab948013c2c7ca6351e593600425b0ec6df9035320280c678e735bce16e996b",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://2ab977d0eeb2bf458f9798250215c646d2f3b1f90b5a7e2b506fdf3335c0f060",
				"dweb:/ipfs/QmYPRoPhNtBAmCSq7imN1scMVpKNQvMTpoqab3tXUx5Tnv"
			]
		}
	},
	"version": 1
}