{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "accrueReward",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "claimRewards",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "deregisterPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getAccruedRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rewardToken",
						"type": "address"
					}
				],
				"name": "registerPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rewardToken",
						"type": "address"
					}
				],
				"name": "setRewardToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Interface for managing rewards across all active loan pools, allowing for dynamic reward tokens.",
			"kind": "dev",
			"methods": {
				"accrueReward(address)": {
					"params": {
						"pool": "The TuliaPool instance."
					}
				},
				"claimRewards(address)": {
					"params": {
						"pool": "The TuliaPool instance claiming its rewards."
					}
				},
				"deregisterPool(address)": {
					"params": {
						"pool": "Address of the pool whose vault is to be deregistered."
					}
				},
				"getAccruedRewards(address)": {
					"params": {
						"pool": "The address of the TuliaPool."
					},
					"returns": {
						"reward": "The total accrued rewards for the pool."
					}
				},
				"registerPool(address,address)": {
					"params": {
						"pool": "The address of the TuliaPool to register.",
						"rewardToken": "The reward token for this pool."
					}
				},
				"setRewardToken(address,address)": {
					"params": {
						"pool": "The address of the TuliaPool.",
						"rewardToken": "The reward token for this pool."
					}
				}
			},
			"title": "IRewardManager",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"accrueReward(address)": {
					"notice": "Accrues rewards for a pool based on its loan amount since the loan was funded."
				},
				"claimRewards(address)": {
					"notice": "Allows a pool to claim its accrued rewards."
				},
				"deregisterPool(address)": {
					"notice": "Deregisters a pool when a loan is closed."
				},
				"getAccruedRewards(address)": {
					"notice": "Retrieves the total accrued rewards for a specified pool."
				},
				"registerPool(address,address)": {
					"notice": "Registers a pool to be eligible for rewards, initializing its reward token."
				},
				"setRewardToken(address,address)": {
					"notice": "Sets the reward token for a specific pool."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/interfaces/IRewardManager.sol": "IRewardManager"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"contracts/contracts/interfaces/IRewardManager.sol": {
			"keccak256": "0xe3c69239d04d61f5342b5e7fe84efa65935b5068cdfef5d276baccaf947f6f05",
			"license": "MIT",
			"urls": [
				"bzz-raw://1b4e5103fc8600295e4fe33a713ebcdd6d83cf38903c4e6947b03f0a88766869",
				"dweb:/ipfs/QmRAnDKVZ6WndjDVvavBcrpkkrqUyZoSB3PYEMQVDTKiaB"
			]
		}
	},
	"version": 1
}