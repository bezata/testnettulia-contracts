{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "deregisterPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getPoolDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "lender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "creationTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "loanToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "assetToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "repaymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "loanAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interestRate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "repaymentPeriod",
								"type": "uint256"
							},
							{
								"internalType": "enum IPoolOrganizer.PoolType",
								"name": "poolType",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "funded",
								"type": "bool"
							}
						],
						"internalType": "struct IPoolOrganizer.PoolDetails",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					}
				],
				"name": "getPoolsByLender",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalPools",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getVaultForPool",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "factoryAddress",
						"type": "address"
					}
				],
				"name": "grantFactoryAccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "markPoolAsFunded",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_vaultManager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardManager",
						"type": "address"
					}
				],
				"name": "registerManagers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "loanToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "assetToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "repaymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "loanAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "repaymentPeriod",
						"type": "uint256"
					},
					{
						"internalType": "enum IPoolOrganizer.PoolType",
						"name": "poolType",
						"type": "uint8"
					}
				],
				"name": "registerPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"name": "registerVault",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"deregisterPool(address)": {
					"params": {
						"pool": "The address of the pool to deregister"
					}
				},
				"getPoolDetails(address)": {
					"params": {
						"pool": "The address of the pool"
					},
					"returns": {
						"_0": "The details of the specified pool"
					}
				},
				"getPoolsByLender(address)": {
					"params": {
						"lender": "The address of the lender"
					},
					"returns": {
						"_0": "An array of pool addresses"
					}
				},
				"getTotalPools()": {
					"returns": {
						"_0": "The total number of registered pools"
					}
				},
				"getVaultForPool(address)": {
					"params": {
						"pool": "The address of the pool"
					},
					"returns": {
						"_0": "The address of the linked vault"
					}
				},
				"grantFactoryAccess(address)": {
					"params": {
						"factoryAddress": "The address of the factory to be granted access"
					}
				},
				"markPoolAsFunded(address)": {
					"params": {
						"pool": "The address of the pool to mark as funded"
					}
				},
				"registerManagers(address,address)": {
					"params": {
						"_rewardManager": "The address of the RewardManager contract",
						"_vaultManager": "The address of the VaultManager contract"
					}
				},
				"registerPool(address,address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"params": {
						"assetToken": "The token used as collateral",
						"borrower": "The address of the borrower",
						"interestRate": "The interest rate of the loan",
						"lender": "The address of the lender",
						"loanAmount": "The amount of the loan",
						"loanToken": "The token to be loaned",
						"pool": "The address of the pool contract",
						"poolType": "The type of the pool (standard or flash loan)",
						"repaymentPeriod": "The loan repayment period",
						"repaymentToken": "The token used for loan repayment",
						"vault": "The address of the vault associated with the pool"
					}
				},
				"registerVault(address,address)": {
					"params": {
						"pool": "The address of the pool",
						"vault": "The address of the vault"
					}
				}
			},
			"title": "IPoolOrganizer interface",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deregisterPool(address)": {
					"notice": "Deregisters a pool"
				},
				"getPoolDetails(address)": {
					"notice": "Retrieves detailed information about a specific pool"
				},
				"getPoolsByLender(address)": {
					"notice": "Retrieves all pool addresses associated with a specific lender"
				},
				"getTotalPools()": {
					"notice": "Gets the total number of registered pools"
				},
				"getVaultForPool(address)": {
					"notice": "Retrieves the associated vault address for a given pool"
				},
				"grantFactoryAccess(address)": {
					"notice": "Grants factory access to manage pools"
				},
				"markPoolAsFunded(address)": {
					"notice": "Marks a pool as funded"
				},
				"registerManagers(address,address)": {
					"notice": "Registers manager contracts for managing vaults and rewards"
				},
				"registerPool(address,address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"notice": "Registers a new pool"
				},
				"registerVault(address,address)": {
					"notice": "Registers a vault for a specific pool"
				}
			},
			"notice": "Interface for the Pool Organizer contract managing pools, vaults, and rewards.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/interfaces/IPoolOrganizer.sol": "IPoolOrganizer"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"contracts/contracts/interfaces/IPoolOrganizer.sol": {
			"keccak256": "0x3f77fcf711a180d4188993249f1c5d140cef6157fa7433c87f738114678a25f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://85a618b42504378a0136025e3526644421383a3aaedd33be4a38cf62e799efc3",
				"dweb:/ipfs/QmUAc8CUvADYqVMRbjMWzcdXJgyLK76QyVCWe72HJ4MLEV"
			]
		}
	},
	"version": 1
}