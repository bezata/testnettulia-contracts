{
	"compiler": {
		"version": "0.8.25+commit.b61c2a91"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Approval",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					}
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "spender",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalSupply",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Interface for MockToken contracts that implement ERC20 standard functions with additional minting and burning capabilities.",
			"events": {
				"Approval(address,address,uint256)": {
					"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
				},
				"Transfer(address,address,uint256)": {
					"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(address,address)": {
					"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner`.",
					"params": {
						"owner": "The owner of the tokens.",
						"spender": "The address which will spend the tokens."
					},
					"returns": {
						"_0": "The remaining number of tokens that `spender` can spend."
					}
				},
				"approve(address,uint256)": {
					"details": "Sets `amount` as the allowance of `spender` over the caller's tokens.",
					"params": {
						"amount": "The amount of tokens to be allowed.",
						"spender": "The address which will spend the funds."
					},
					"returns": {
						"_0": "A boolean value indicating whether the operation was successful."
					}
				},
				"balanceOf(address)": {
					"details": "Returns the amount of tokens owned by `account`.",
					"params": {
						"account": "The address to retrieve the balance from."
					},
					"returns": {
						"_0": "The amount owned by the account."
					}
				},
				"burn(uint256)": {
					"details": "Burns `amount` tokens from the caller's account, reducing the total supply.",
					"params": {
						"amount": "The number of tokens to burn."
					}
				},
				"mint(address,uint256)": {
					"details": "Mints `amount` tokens to address `to`. Can be restricted to certain roles or accounts.",
					"params": {
						"amount": "The number of tokens to mint.",
						"to": "The address of the recipient."
					}
				},
				"totalSupply()": {
					"details": "Returns the total number of tokens in existence.",
					"returns": {
						"_0": "The total supply of the token."
					}
				},
				"transfer(address,uint256)": {
					"details": "Transfers `amount` tokens to the `recipient`.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"recipient": "The address to transfer the tokens to."
					},
					"returns": {
						"_0": "A boolean value indicating whether the operation was successful."
					}
				},
				"transferFrom(address,address,uint256)": {
					"details": "Transfers `amount` tokens from `sender` to `recipient` using the allowance mechanism. Amount is then deducted from the callerâ€™s allowance.",
					"params": {
						"amount": "The amount of tokens to transfer.",
						"recipient": "The address to which the tokens are transferred.",
						"sender": "The address from which the tokens are transferred."
					},
					"returns": {
						"_0": "A boolean value indicating whether the operation was successful."
					}
				}
			},
			"title": "IMockToken",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/interfaces/IMockToken.sol": "IMockToken"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"contracts/contracts/interfaces/IMockToken.sol": {
			"keccak256": "0x2dccc5acdd83ccbe35b1b2f73aa14130d943b220f3b10e6e7ab87e99d7247639",
			"license": "MIT",
			"urls": [
				"bzz-raw://a20971cd9527eecd6b3e2da866c94188a23f4949f08653466f9ff52124d701b2",
				"dweb:/ipfs/QmZNxeX1pdWo8mfXtn16Rzn451U86DTwoXN56ovZWZhRaa"
			]
		}
	},
	"version": 1
}