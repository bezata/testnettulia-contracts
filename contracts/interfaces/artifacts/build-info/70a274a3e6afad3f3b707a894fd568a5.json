{
	"id": "70a274a3e6afad3f3b707a894fd568a5",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IEIP712} from \"./IEIP712.sol\";\n\n/// @title SignatureTransfer\n/// @notice Handles ERC20 token transfers through signature based actions\n/// @dev Requires user's token approval on the Permit2 contract\ninterface ISignatureTransfer is IEIP712 {\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n    /// @param maxAmount The maximum amount a spender can request to transfer\n    error InvalidAmount(uint256 maxAmount);\n\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\n    error LengthMismatch();\n\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\n\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\n    struct TokenPermissions {\n        // ERC20 token address\n        address token;\n        // the maximum amount that can be spent\n        uint256 amount;\n    }\n\n    /// @notice The signed permit message for a single token transfer\n    struct PermitTransferFrom {\n        TokenPermissions permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice Specifies the recipient address and amount for batched transfers.\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\n    struct SignatureTransferDetails {\n        // recipient address\n        address to;\n        // spender requested amount\n        uint256 requestedAmount;\n    }\n\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\n    /// @dev Note that a user still signs over a spender address\n    struct PermitBatchTransferFrom {\n        // the tokens and corresponding amounts permitted for a transfer\n        TokenPermissions[] permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n    /// @dev It returns a uint256 bitmap\n    /// @dev The index, or wordPosition is capped at type(uint248).max\n    function nonceBitmap(address, uint256) external view returns (uint256);\n\n    /// @notice Transfers a token using a signed permit message\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers a token using a signed permit message\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\n    /// @dev The wordPos is maxed at type(uint248).max\n    /// @param wordPos A number to index the nonceBitmap at\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\n}\n"
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IEIP712 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/contracts/interfaces/IEIP712.sol": {
				"IEIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IEIP712.sol\":\"IEIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ISignatureTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxAmount",
									"type": "uint256"
								}
							],
							"name": "InvalidAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "word",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "UnorderedNonceInvalidation",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wordPos",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "invalidateUnorderedNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nonceBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"params": {
										"maxAmount": "The maximum amount a spender can request to transfer"
									}
								}
							],
							"LengthMismatch()": [
								{
									"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
								}
							]
						},
						"kind": "dev",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"details": "The wordPos is maxed at type(uint248).max",
								"params": {
									"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
									"wordPos": "A number to index the nonceBitmap at"
								}
							},
							"nonceBitmap(address,uint256)": {
								"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"details": "Reverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token"
								}
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer"
								}
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							}
						},
						"title": "SignatureTransfer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
							"nonceBitmap(address,uint256)": "4fe02b44",
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}]},\"kind\":\"dev\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"nonceBitmap(address,uint256)\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}}},\"title\":\"SignatureTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}]},\"events\":{\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"}},\"notice\":\"Handles ERC20 token transfers through signature based actions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/ISignatureTransfer.sol\":\"ISignatureTransfer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0x16a051e45a3f1ab341a8560aa106c483c3d0a3be4abc52225651c78939b18f93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7cda3c6ed2db1454b4a6ec1e418956d199019085d92163a038d0064615a5acb\",\"dweb:/ipfs/QmWDfZwi8jcGFBuiwHKq6iBWCZq2mA8HmkM9NNTzotMpXH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
								}
							]
						},
						"events": {
							"UnorderedNonceInvalidation(address,uint256,uint256)": {
								"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
							}
						},
						"kind": "user",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
							},
							"nonceBitmap(address,uint256)": {
								"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"notice": "Transfers a token using a signed permit message"
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit message"
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							}
						},
						"notice": "Handles ERC20 token transfers through signature based actions",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/contracts/interfaces/IEIP712.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
					"exportedSymbols": {
						"IEIP712": [
							7
						]
					},
					"id": 8,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IEIP712",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 7,
							"linearizedBaseContracts": [
								7
							],
							"name": "IEIP712",
							"nameLocation": "67:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "3644e515",
									"id": 6,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "90:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "106:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "132:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 3,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "131:9:0"
									},
									"scope": 7,
									"src": "81:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 8,
							"src": "57:86:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:112:0"
				},
				"id": 0
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/ISignatureTransfer.sol",
					"exportedSymbols": {
						"IEIP712": [
							7
						],
						"ISignatureTransfer": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 9,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
							"file": "./IEIP712.sol",
							"id": 11,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 8,
							"src": "58:38:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 10,
										"name": "IEIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 7,
										"src": "66:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 13,
										"name": "IEIP712",
										"nameLocations": [
											"297:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 7,
										"src": "297:7:1"
									},
									"id": 14,
									"nodeType": "InheritanceSpecifier",
									"src": "297:7:1"
								}
							],
							"canonicalName": "ISignatureTransfer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 12,
								"nodeType": "StructuredDocumentation",
								"src": "98:167:1",
								"text": "@title SignatureTransfer\n @notice Handles ERC20 token transfers through signature based actions\n @dev Requires user's token approval on the Permit2 contract"
							},
							"fullyImplemented": false,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								7
							],
							"name": "ISignatureTransfer",
							"nameLocation": "275:18:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 15,
										"nodeType": "StructuredDocumentation",
										"src": "311:176:1",
										"text": "@notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n @param maxAmount The maximum amount a spender can request to transfer"
									},
									"errorSelector": "3728b83d",
									"id": 19,
									"name": "InvalidAmount",
									"nameLocation": "498:13:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "maxAmount",
												"nameLocation": "520:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 19,
												"src": "512:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 16,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "512:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "511:19:1"
									},
									"src": "492:39:1"
								},
								{
									"documentation": {
										"id": 20,
										"nodeType": "StructuredDocumentation",
										"src": "537:261:1",
										"text": "@notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
									},
									"errorSelector": "ff633a38",
									"id": 22,
									"name": "LengthMismatch",
									"nameLocation": "809:14:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "823:2:1"
									},
									"src": "803:23:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "832:86:1",
										"text": "@notice Emits an event when the owner successfully invalidates an unordered nonce."
									},
									"eventSelector": "3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d",
									"id": 31,
									"name": "UnorderedNonceInvalidation",
									"nameLocation": "929:26:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "972:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "956:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 24,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "956:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"indexed": false,
												"mutability": "mutable",
												"name": "word",
												"nameLocation": "987:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "979:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 26,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "979:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 29,
												"indexed": false,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "1001:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 31,
												"src": "993:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 28,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "955:51:1"
									},
									"src": "923:84:1"
								},
								{
									"canonicalName": "ISignatureTransfer.TokenPermissions",
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1013:95:1",
										"text": "@notice The token and amount details for a transfer signed in the permit transfer signature"
									},
									"id": 37,
									"members": [
										{
											"constant": false,
											"id": 34,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1186:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 37,
											"src": "1178:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 33,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1178:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 36,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1257:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 37,
											"src": "1249:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 35,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1249:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenPermissions",
									"nameLocation": "1120:16:1",
									"nodeType": "StructDefinition",
									"scope": 147,
									"src": "1113:157:1",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitTransferFrom",
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1276:65:1",
										"text": "@notice The signed permit message for a single token transfer"
									},
									"id": 46,
									"members": [
										{
											"constant": false,
											"id": 41,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "1399:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 46,
											"src": "1382:26:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenPermissions_$37_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions"
											},
											"typeName": {
												"id": 40,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 39,
													"name": "TokenPermissions",
													"nameLocations": [
														"1382:16:1"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 37,
													"src": "1382:16:1"
												},
												"referencedDeclaration": 37,
												"src": "1382:16:1",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenPermissions_$37_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 43,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "1515:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 46,
											"src": "1507:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 42,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1507:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 45,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1582:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 46,
											"src": "1574:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 44,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1574:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitTransferFrom",
									"nameLocation": "1353:18:1",
									"nodeType": "StructDefinition",
									"scope": 147,
									"src": "1346:251:1",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.SignatureTransferDetails",
									"documentation": {
										"id": 47,
										"nodeType": "StructuredDocumentation",
										"src": "1603:266:1",
										"text": "@notice Specifies the recipient address and amount for batched transfers.\n @dev Recipients and amounts correspond to the index of the signed token permissions array.\n @dev Reverts if the requested amount is greater than the permitted signed amount."
									},
									"id": 52,
									"members": [
										{
											"constant": false,
											"id": 49,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "1953:2:1",
											"nodeType": "VariableDeclaration",
											"scope": 52,
											"src": "1945:10:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 48,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1945:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 51,
											"mutability": "mutable",
											"name": "requestedAmount",
											"nameLocation": "2009:15:1",
											"nodeType": "VariableDeclaration",
											"scope": 52,
											"src": "2001:23:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 50,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2001:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SignatureTransferDetails",
									"nameLocation": "1881:24:1",
									"nodeType": "StructDefinition",
									"scope": 147,
									"src": "1874:157:1",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitBatchTransferFrom",
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "2037:243:1",
										"text": "@notice Used to reconstruct the signed permit message for multiple token transfers\n @dev Do not need to pass in spender address as it is required that it is msg.sender\n @dev Note that a user still signs over a spender address"
									},
									"id": 62,
									"members": [
										{
											"constant": false,
											"id": 57,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "2418:9:1",
											"nodeType": "VariableDeclaration",
											"scope": 62,
											"src": "2399:28:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$37_storage_$dyn_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions[]"
											},
											"typeName": {
												"baseType": {
													"id": 55,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 54,
														"name": "TokenPermissions",
														"nameLocations": [
															"2399:16:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 37,
														"src": "2399:16:1"
													},
													"referencedDeclaration": 37,
													"src": "2399:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenPermissions_$37_storage_ptr",
														"typeString": "struct ISignatureTransfer.TokenPermissions"
													}
												},
												"id": 56,
												"nodeType": "ArrayTypeName",
												"src": "2399:18:1",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$37_storage_$dyn_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 59,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "2534:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 62,
											"src": "2526:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 58,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2526:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 61,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2601:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 62,
											"src": "2593:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 60,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2593:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitBatchTransferFrom",
									"nameLocation": "2292:23:1",
									"nodeType": "StructDefinition",
									"scope": 147,
									"src": "2285:331:1",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 63,
										"nodeType": "StructuredDocumentation",
										"src": "2622:483:1",
										"text": "@notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n @dev It returns a uint256 bitmap\n @dev The index, or wordPosition is capped at type(uint248).max"
									},
									"functionSelector": "4fe02b44",
									"id": 72,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonceBitmap",
									"nameLocation": "3119:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "3131:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3131:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "3140:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3140:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3130:18:1"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "3172:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 69,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3172:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3171:9:1"
									},
									"scope": 147,
									"src": "3110:71:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "3187:413:1",
										"text": "@notice Transfers a token using a signed permit message\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param signature The signature to verify"
									},
									"functionSelector": "30f28b7a",
									"id": 86,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "3614:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "3668:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3642:32:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$46_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 75,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 74,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"3642:18:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 46,
														"src": "3642:18:1"
													},
													"referencedDeclaration": 46,
													"src": "3642:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$46_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "3718:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3684:49:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 78,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 77,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"3684:24:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 52,
														"src": "3684:24:1"
													},
													"referencedDeclaration": 52,
													"src": "3684:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3751:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3743:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3743:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3781:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 86,
												"src": "3766:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 82,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3766:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3632:164:1"
									},
									"returnParameters": {
										"id": 85,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3805:0:1"
									},
									"scope": 147,
									"src": "3605:201:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 87,
										"nodeType": "StructuredDocumentation",
										"src": "3812:815:1",
										"text": "@notice Transfers a token using a signed permit message\n @notice Includes extra data provided by the caller to verify signature over\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "137c29fe",
									"id": 104,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "4641:25:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "4702:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4676:32:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$46_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 89,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 88,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"4676:18:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 46,
														"src": "4676:18:1"
													},
													"referencedDeclaration": 46,
													"src": "4676:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$46_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "4752:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4718:49:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 92,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 91,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"4718:24:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 52,
														"src": "4718:24:1"
													},
													"referencedDeclaration": 52,
													"src": "4718:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4785:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4777:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4777:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "4808:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4800:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 96,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4800:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "4841:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4825:33:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 98,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4825:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4883:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 104,
												"src": "4868:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 100,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4868:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4666:232:1"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4907:0:1"
									},
									"scope": 147,
									"src": "4632:276:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 105,
										"nodeType": "StructuredDocumentation",
										"src": "4914:335:1",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param signature The signature to verify"
									},
									"functionSelector": "edd9444b",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "5263:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "5322:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "5291:37:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$62_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 107,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 106,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"5291:23:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 62,
														"src": "5291:23:1"
													},
													"referencedDeclaration": 62,
													"src": "5291:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$62_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "5374:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "5338:51:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$52_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 110,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 109,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"5338:24:1"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 52,
															"src": "5338:24:1"
														},
														"referencedDeclaration": 52,
														"src": "5338:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 111,
													"nodeType": "ArrayTypeName",
													"src": "5338:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$52_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5407:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "5399:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5399:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "5437:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "5422:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 115,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5422:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5281:171:1"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5461:0:1"
									},
									"scope": 147,
									"src": "5254:208:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "5468:737:1",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @notice Includes extra data provided by the caller to verify signature over\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "fe8ec1a7",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "6219:25:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "6285:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6254:37:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$62_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 122,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 121,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"6254:23:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 62,
														"src": "6254:23:1"
													},
													"referencedDeclaration": 62,
													"src": "6254:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$62_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "6337:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6301:51:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$52_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 125,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 124,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"6301:24:1"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 52,
															"src": "6301:24:1"
														},
														"referencedDeclaration": 52,
														"src": "6301:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$52_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 126,
													"nodeType": "ArrayTypeName",
													"src": "6301:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$52_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6370:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6362:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6362:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "6393:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6385:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 130,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6385:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "6426:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6410:33:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 132,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6410:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "6468:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6453:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 134,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6453:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6244:239:1"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6492:0:1"
									},
									"scope": 147,
									"src": "6210:283:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "6499:294:1",
										"text": "@notice Invalidates the bits specified in mask for the bitmap at the word position\n @dev The wordPos is maxed at type(uint248).max\n @param wordPos A number to index the nonceBitmap at\n @param mask A bitmap masked against msg.sender's current bitmap at the word position"
									},
									"functionSelector": "3ff9dcb1",
									"id": 146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invalidateUnorderedNonces",
									"nameLocation": "6807:25:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 141,
												"mutability": "mutable",
												"name": "wordPos",
												"nameLocation": "6841:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "6833:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 140,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6833:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 143,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "6858:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "6850:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6850:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6832:31:1"
									},
									"returnParameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6872:0:1"
									},
									"scope": 147,
									"src": "6798:75:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 148,
							"src": "265:6610:1",
							"usedErrors": [
								19,
								22
							],
							"usedEvents": [
								31
							]
						}
					],
					"src": "32:6844:1"
				},
				"id": 1
			}
		}
	}
}