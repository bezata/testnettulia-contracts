{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessControlBadConfirmation",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "neededRole",
						"type": "bytes32"
					}
				],
				"name": "AccessControlUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "vaultManager",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "rewardManager",
						"type": "address"
					}
				],
				"name": "ManagerRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "PoolDeregistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "lender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "enum IPoolOrganizer.PoolType",
						"name": "poolType",
						"type": "uint8"
					}
				],
				"name": "PoolRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "previousAdminRole",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "newAdminRole",
						"type": "bytes32"
					}
				],
				"name": "RoleAdminChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleGranted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "account",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					}
				],
				"name": "RoleRevoked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"name": "VaultRegistered",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DEFAULT_ADMIN_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "POOL_MANAGER_ROLE",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "deregisterPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					}
				],
				"name": "getAllBorrowerPoolDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "lender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "creationTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "loanToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "assetToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "repaymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "loanAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interestRate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "repaymentPeriod",
								"type": "uint256"
							},
							{
								"internalType": "enum IPoolOrganizer.PoolType",
								"name": "poolType",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "funded",
								"type": "bool"
							}
						],
						"internalType": "struct IPoolOrganizer.PoolDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					}
				],
				"name": "getAllLenderPoolDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "lender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "creationTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "loanToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "assetToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "repaymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "loanAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interestRate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "repaymentPeriod",
								"type": "uint256"
							},
							{
								"internalType": "enum IPoolOrganizer.PoolType",
								"name": "poolType",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "funded",
								"type": "bool"
							}
						],
						"internalType": "struct IPoolOrganizer.PoolDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getManagers",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getPoolDetails",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "lender",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "borrower",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "creationTime",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "vault",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "loanToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "assetToken",
								"type": "address"
							},
							{
								"internalType": "contract IERC20",
								"name": "repaymentToken",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "loanAmount",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interestRate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "repaymentPeriod",
								"type": "uint256"
							},
							{
								"internalType": "enum IPoolOrganizer.PoolType",
								"name": "poolType",
								"type": "uint8"
							},
							{
								"internalType": "bool",
								"name": "funded",
								"type": "bool"
							}
						],
						"internalType": "struct IPoolOrganizer.PoolDetails",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					}
				],
				"name": "getPoolsByLender",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					}
				],
				"name": "getRoleAdmin",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalPools",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "getVaultForPool",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "factoryAddress",
						"type": "address"
					}
				],
				"name": "grantFactoryAccess",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "grantRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "hasRole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					}
				],
				"name": "markPoolAsFunded",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "poolVaults",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_vaultManager",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rewardManager",
						"type": "address"
					}
				],
				"name": "registerManagers",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "lender",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "borrower",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "loanToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "assetToken",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "repaymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "loanAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "repaymentPeriod",
						"type": "uint256"
					},
					{
						"internalType": "enum IPoolOrganizer.PoolType",
						"name": "poolType",
						"type": "uint8"
					}
				],
				"name": "registerPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "vault",
						"type": "address"
					}
				],
				"name": "registerVault",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "callerConfirmation",
						"type": "address"
					}
				],
				"name": "renounceRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "role",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "revokeRole",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "rewardManager",
				"outputs": [
					{
						"internalType": "contract IRewardManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "pool",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newBorrower",
						"type": "address"
					}
				],
				"name": "setBorrowerForPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "vaultManager",
				"outputs": [
					{
						"internalType": "contract IVaultManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Implements access control and management for pool lifecycle and integration with external managers.",
			"errors": {
				"AccessControlBadConfirmation()": [
					{
						"details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
					}
				],
				"AccessControlUnauthorizedAccount(address,bytes32)": [
					{
						"details": "The `account` is missing a role."
					}
				]
			},
			"events": {
				"RoleAdminChanged(bytes32,bytes32,bytes32)": {
					"details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
				},
				"RoleGranted(bytes32,address,address)": {
					"details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
				},
				"RoleRevoked(bytes32,address,address)": {
					"details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
				}
			},
			"kind": "dev",
			"methods": {
				"deregisterPool(address)": {
					"params": {
						"pool": "The address of the pool to deregister"
					}
				},
				"getPoolDetails(address)": {
					"params": {
						"pool": "The address of the pool"
					},
					"returns": {
						"_0": "The details of the specified pool"
					}
				},
				"getPoolsByLender(address)": {
					"params": {
						"lender": "The address of the lender"
					},
					"returns": {
						"_0": "An array of pool addresses"
					}
				},
				"getRoleAdmin(bytes32)": {
					"details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
				},
				"getTotalPools()": {
					"returns": {
						"_0": "The total number of registered pools"
					}
				},
				"getVaultForPool(address)": {
					"params": {
						"pool": "The address of the pool"
					},
					"returns": {
						"_0": "The address of the linked vault"
					}
				},
				"grantFactoryAccess(address)": {
					"params": {
						"factoryAddress": "The address of the factory to be granted access"
					}
				},
				"grantRole(bytes32,address)": {
					"details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
				},
				"hasRole(bytes32,address)": {
					"details": "Returns `true` if `account` has been granted `role`."
				},
				"markPoolAsFunded(address)": {
					"params": {
						"pool": "The address of the pool to mark as funded"
					}
				},
				"registerManagers(address,address)": {
					"params": {
						"_rewardManager": "The address of the RewardManager contract",
						"_vaultManager": "The address of the VaultManager contract"
					}
				},
				"registerPool(address,address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"params": {
						"assetToken": "The token used as collateral",
						"borrower": "The address of the borrower",
						"interestRate": "The interest rate of the loan",
						"lender": "The address of the lender",
						"loanAmount": "The amount of the loan",
						"loanToken": "The token to be loaned",
						"pool": "The address of the pool contract",
						"poolType": "The type of the pool (standard or flash loan)",
						"repaymentPeriod": "The loan repayment period",
						"repaymentToken": "The token used for loan repayment",
						"vault": "The address of the vault associated with the pool"
					}
				},
				"registerVault(address,address)": {
					"params": {
						"pool": "The address of the pool",
						"vault": "The address of the vault"
					}
				},
				"renounceRole(bytes32,address)": {
					"details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
				},
				"revokeRole(bytes32,address)": {
					"details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
				},
				"supportsInterface(bytes4)": {
					"details": "See {IERC165-supportsInterface}."
				}
			},
			"title": "Pool Organizer for managing pools, vaults, and rewards.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deregisterPool(address)": {
					"notice": "Deregisters a pool"
				},
				"getPoolDetails(address)": {
					"notice": "Retrieves detailed information about a specific pool"
				},
				"getPoolsByLender(address)": {
					"notice": "Retrieves all pool addresses associated with a specific lender"
				},
				"getTotalPools()": {
					"notice": "Gets the total number of registered pools"
				},
				"getVaultForPool(address)": {
					"notice": "Retrieves the associated vault address for a given pool"
				},
				"grantFactoryAccess(address)": {
					"notice": "Grants factory access to manage pools"
				},
				"markPoolAsFunded(address)": {
					"notice": "Marks a pool as funded"
				},
				"registerManagers(address,address)": {
					"notice": "Registers manager contracts for managing vaults and rewards"
				},
				"registerPool(address,address,address,address,address,address,address,uint256,uint256,uint256,uint8)": {
					"notice": "Registers a new pool"
				},
				"registerVault(address,address)": {
					"notice": "Registers a vault for a specific pool"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts/protocol/PoolOrganizer.sol": "PoolOrganizer"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts/access/AccessControl.sol": {
			"keccak256": "0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308",
			"license": "MIT",
			"urls": [
				"bzz-raw://46326c0bb1e296b67185e81c918e0b40501b8b6386165855df0a3f3c634b6a80",
				"dweb:/ipfs/QmTwyrDYtsxsk6pymJTK94PnEpzsmkpUxFuzEiakDopy4Z"
			]
		},
		"@openzeppelin/contracts/access/IAccessControl.sol": {
			"keccak256": "0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41",
			"license": "MIT",
			"urls": [
				"bzz-raw://1fd2f35495652e57e3f99bc6c510bc5f7dd398a176ea2e72d8ed730aebc6ca26",
				"dweb:/ipfs/QmTQV6X4gkikTib49cho5iDX3JvSQbdsoEChoDwrk3CbbH"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"contracts/contracts/interfaces/IPoolOrganizer.sol": {
			"keccak256": "0x3f77fcf711a180d4188993249f1c5d140cef6157fa7433c87f738114678a25f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://85a618b42504378a0136025e3526644421383a3aaedd33be4a38cf62e799efc3",
				"dweb:/ipfs/QmUAc8CUvADYqVMRbjMWzcdXJgyLK76QyVCWe72HJ4MLEV"
			]
		},
		"contracts/contracts/interfaces/IRewardManager.sol": {
			"keccak256": "0x692870b248c0b71185a5c030f853306d6a4c3a25180a3f57ff56dfb2da59a9d2",
			"license": "MIT",
			"urls": [
				"bzz-raw://d27ba33e21e32b7bfff41db71f93f4ba9a427659a2c04fdf8510087963dbcb62",
				"dweb:/ipfs/QmcnnmcjEc7gkPNHKLECceA9FdVryvK9qKppnakhXGgNMh"
			]
		},
		"contracts/contracts/interfaces/IVaultManager.sol": {
			"keccak256": "0xdd866073f1029189ab6d2f04f7cdf481fb48e9e12ef4f9cd2376778674ce1f1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d1aef045b26166c370937ef37a8917a00d63021343795f47c30516745e3786d",
				"dweb:/ipfs/QmbAuF7Ufd78MYjnYKUybDtGDVFcn7e6wSNN8hEg6fGFg5"
			]
		},
		"contracts/contracts/protocol/PoolOrganizer.sol": {
			"keccak256": "0x5f94d2a87ca2e73e2ee927a2502566fe9b6ee0f389ec3f25faeaf72ebc8580fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://e35edfa7662da87eb6a1ac601755163d1ae658f5febe77cf66828f7b6287f766",
				"dweb:/ipfs/Qmcw11bYWkQ2xLqjzBT6JFtvj4yXAkuDKDB5emP2PcTasq"
			]
		}
	},
	"version": 1
}