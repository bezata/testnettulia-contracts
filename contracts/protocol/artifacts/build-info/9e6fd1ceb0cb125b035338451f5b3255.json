{
	"id": "9e6fd1ceb0cb125b035338451f5b3255",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/contracts/protocol/TuliaFlashPool.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\";\r\nimport \"../interfaces/IPermit2.sol\";\r\nimport \"../interfaces/IFeeManager.sol\";  \r\n\r\n/// @title TuliaFlashPool\r\n/// @dev Implements flash loan functionalities with integrated fee management.\r\n/// This contract allows issuing flash loans backed by ERC20 tokens.\r\ncontract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice ERC20 asset used for flash loans\r\n    IERC20 public asset;\r\n\r\n    /// @notice Permit2 contract utilized for permissioned token transfers\r\n    IPermit2 public permit2;\r\n\r\n    /// @notice Contract managing the fee rates for flash loans\r\n    IFeeManager public feeManager;\r\n\r\n    /// @notice Initial fee rate for flash loans issued by this pool\r\n    uint256 public flashLoanFeeRate;\r\n\r\n    /// @notice Enum representing the state of the pool\r\n    enum PoolState { IDLE, AWAITING_BORROWER, ACTIVE }\r\n    PoolState public state;\r\n\r\n    /// @notice Constructs the TuliaFlashPool lending pool\r\n    /// @param _asset The ERC20 token asset used for flash loans\r\n    /// @param _permit2 The Permit2 contract utilized for permissioned token transfers\r\n    /// @param _feeManager The contract managing the fee rates for the flash loans\r\n    /// @param _flashLoanFeeRate The initial fee rate for flash loans issued by this pool\r\n    constructor(\r\n        IERC20 _asset, \r\n        IPermit2 _permit2, \r\n        IFeeManager _feeManager,\r\n        uint256 _flashLoanFeeRate\r\n    ) {\r\n        asset = _asset;\r\n        permit2 = _permit2;\r\n        feeManager = _feeManager;\r\n        flashLoanFeeRate = _flashLoanFeeRate;\r\n        state = PoolState.IDLE;\r\n    }\r\n\r\n    /// @notice Returns the maximum loanable amount of the asset\r\n    /// @param token The ERC20 token address for which the max loan amount is queried\r\n    /// @return The maximum amount available for a flash loan\r\n    function maxFlashLoan(address token) public view override returns (uint256) {\r\n        return token == address(asset) ? asset.balanceOf(address(this)) : 0;\r\n    }\r\n\r\n    /// @notice Calculates the flash loan fee for a given loan amount\r\n    /// @param token The ERC20 token for which the fee is calculated\r\n    /// @param amount The amount of the loan\r\n    /// @return The calculated fee amount\r\n    function flashFee(address token, uint256 amount) public view override returns (uint256) {\r\n        require(token == address(asset), \"Unsupported token\");\r\n        uint256 userFee = (amount * flashLoanFeeRate) / 10000;\r\n        uint256 protocolFee = (amount * feeManager.getflashPoolFeeRate()) / 10000;\r\n        return userFee + protocolFee;\r\n    }\r\n\r\n    /// @notice Initiates a flash loan transaction\r\n    /// @param receiver The borrower contract that must implement the IERC3156FlashBorrower interface\r\n    /// @param token The ERC20 token to be borrowed\r\n    /// @param amount The amount of tokens to borrow\r\n    /// @param data Arbitrary data passed to the borrower's `onFlashLoan` method\r\n    /// @return true if the flash loan is paid back successfully within the same transaction\r\n    function flashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) external override nonReentrant returns (bool) {\r\n        return _executeFlashLoan(receiver, token, amount, data);\r\n    }\r\n\r\n    /// @dev Internal function to execute a flash loan transaction\r\n    /// Handles the lifecycle of a flash loan including fee calculation, asset transfer, and repayment check\r\n    /// @param receiver The borrower contract\r\n    /// @param token The ERC20 token for the loan\r\n    /// @param amount The loan amount\r\n    /// @param data Data payload for the borrower\r\n    /// @return true if the transaction is successful\r\n    function _executeFlashLoan(\r\n        IERC3156FlashBorrower receiver,\r\n        address token,\r\n        uint256 amount,\r\n        bytes calldata data\r\n    ) internal returns (bool) {\r\n        require(token == address(asset), \"Unsupported token\");\r\n        require(state == PoolState.IDLE, \"Flash loan not available\");\r\n\r\n        uint256 totalFee = flashFee(token, amount);\r\n        uint256 balanceBefore = asset.balanceOf(address(this));\r\n\r\n        asset.safeTransfer(address(receiver), amount);\r\n\r\n        require(\r\n            receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) == keccak256(\"ERC3156FlashBorrower.onFlashLoan\"),\r\n            \"Flash loan failed\"\r\n        );\r\n\r\n        uint256 amountOwed = amount + totalFee;\r\n        asset.safeTransferFrom(address(receiver), address(this), amountOwed);\r\n\r\n        require(asset.balanceOf(address(this)) >= balanceBefore, \"Flash loan repayment failed\");\r\n        state = PoolState.IDLE;\r\n\r\n        return true;\r\n    }\r\n}\r\n"
			},
			"contracts/contracts/interfaces/IFeeManager.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFeeManager {\r\n    /// @notice Get the current tuliaPool fee rate\r\n    /// @return The tuliaPool fee rate in basis points\r\n    function gettuliaPoolFeeRate() external view returns (uint256);\r\n\r\n    /// @notice Set the tuliaPool fee rate\r\n    /// @param newFeeRate The new tuliaPool fee rate in basis points\r\n    function settuliaPoolFeeRate(uint256 newFeeRate) external;\r\n\r\n    /// @notice Get the current flashPool fee rate\r\n    /// @return The flashPool fee rate in basis points\r\n    function getflashPoolFeeRate() external view returns (uint256);\r\n\r\n    /// @notice Set the flashPool fee rate\r\n    /// @param newFeeRate The new flashPool fee rate in basis points\r\n    function setflashPoolFeeRate(uint256 newFeeRate) external;\r\n\r\n    /// @notice Event emitted when the tuliaPool fee rate is updated\r\n    /// @param newFeeRate The new tuliaPool fee rate that has been set\r\n    event tuliaPoolFeeRateUpdated(uint256 newFeeRate);\r\n\r\n    /// @notice Event emitted when the flashPool fee rate is updated\r\n    /// @param newFeeRate The new flashPool fee rate that has been set\r\n    event flashPoolFeeRateUpdated(uint256 newFeeRate);\r\n}\r\n"
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ISignatureTransfer} from \"./ISignatureTransfer.sol\";\nimport {IAllowanceTransfer} from \"./IAllowanceTransfer.sol\";\n\n/// @notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\n/// @dev Users must approve Permit2 before calling any of the transfer functions.\ninterface IPermit2 is ISignatureTransfer, IAllowanceTransfer {\n// IPermit2 unifies the two interfaces so users have maximal flexibility with their approval.\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashBorrower.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC3156 FlashBorrower, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashBorrower {\n    /**\n     * @dev Receive a flash loan.\n     * @param initiator The initiator of the loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param fee The additional amount of tokens to repay.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\n     */\n    function onFlashLoan(\n        address initiator,\n        address token,\n        uint256 amount,\n        uint256 fee,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC3156FlashLender.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC3156FlashBorrower} from \"./IERC3156FlashBorrower.sol\";\n\n/**\n * @dev Interface of the ERC3156 FlashLender, as defined in\n * https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\n */\ninterface IERC3156FlashLender {\n    /**\n     * @dev The amount of currency available to be lended.\n     * @param token The loan currency.\n     * @return The amount of `token` that can be borrowed.\n     */\n    function maxFlashLoan(address token) external view returns (uint256);\n\n    /**\n     * @dev The fee to be charged for a given loan.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n     */\n    function flashFee(address token, uint256 amount) external view returns (uint256);\n\n    /**\n     * @dev Initiate a flash loan.\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n     * @param token The loan currency.\n     * @param amount The amount of tokens lent.\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n     */\n    function flashLoan(\n        IERC3156FlashBorrower receiver,\n        address token,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IEIP712} from \"./IEIP712.sol\";\n\n/// @title AllowanceTransfer\n/// @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n/// @dev Requires user's token approval on the Permit2 contract\ninterface IAllowanceTransfer is IEIP712 {\n    /// @notice Thrown when an allowance on a token has expired.\n    /// @param deadline The timestamp at which the allowed amount is no longer valid\n    error AllowanceExpired(uint256 deadline);\n\n    /// @notice Thrown when an allowance on a token has been depleted.\n    /// @param amount The maximum amount allowed\n    error InsufficientAllowance(uint256 amount);\n\n    /// @notice Thrown when too many nonces are invalidated.\n    error ExcessiveInvalidation();\n\n    /// @notice Emits an event when the owner successfully invalidates an ordered nonce.\n    event NonceInvalidation(\n        address indexed owner, address indexed token, address indexed spender, uint48 newNonce, uint48 oldNonce\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions on a token for the spender.\n    event Approval(\n        address indexed owner, address indexed token, address indexed spender, uint160 amount, uint48 expiration\n    );\n\n    /// @notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\n    event Permit(\n        address indexed owner,\n        address indexed token,\n        address indexed spender,\n        uint160 amount,\n        uint48 expiration,\n        uint48 nonce\n    );\n\n    /// @notice Emits an event when the owner sets the allowance back to 0 with the lockdown function.\n    event Lockdown(address indexed owner, address token, address spender);\n\n    /// @notice The permit data for a token\n    struct PermitDetails {\n        // ERC20 token address\n        address token;\n        // the maximum amount allowed to spend\n        uint160 amount;\n        // timestamp at which a spender's token allowances become invalid\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice The permit message signed for a single token allowance\n    struct PermitSingle {\n        // the permit data for a single token alownce\n        PermitDetails details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The permit message signed for multiple token allowances\n    struct PermitBatch {\n        // the permit data for multiple token allowances\n        PermitDetails[] details;\n        // address permissioned on the allowed tokens\n        address spender;\n        // deadline on the permit signature\n        uint256 sigDeadline;\n    }\n\n    /// @notice The saved permissions\n    /// @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    struct PackedAllowance {\n        // amount allowed\n        uint160 amount;\n        // permission expiry\n        uint48 expiration;\n        // an incrementing value indexed per owner,token,and spender for each signature\n        uint48 nonce;\n    }\n\n    /// @notice A token spender pair.\n    struct TokenSpenderPair {\n        // the token the spender is approved\n        address token;\n        // the spender address\n        address spender;\n    }\n\n    /// @notice Details for a token transfer.\n    struct AllowanceTransferDetails {\n        // the owner of the token\n        address from;\n        // the recipient of the token\n        address to;\n        // the amount of the token\n        uint160 amount;\n        // the token to be transferred\n        address token;\n    }\n\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\n    function allowance(address user, address token, address spender)\n        external\n        view\n        returns (uint160 amount, uint48 expiration, uint48 nonce);\n\n    /// @notice Approves the spender to use up to amount of the specified token up until the expiration\n    /// @param token The token to approve\n    /// @param spender The spender address to approve\n    /// @param amount The approved amount of the token\n    /// @param expiration The timestamp at which the approval is no longer valid\n    /// @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n    /// @dev Setting amount to type(uint160).max sets an unlimited approval\n    function approve(address token, address spender, uint160 amount, uint48 expiration) external;\n\n    /// @notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitSingle Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\n\n    /// @notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n    /// @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n    /// @param owner The owner of the tokens being approved\n    /// @param permitBatch Data signed over by the owner specifying the terms of approval\n    /// @param signature The owner's signature over the permit data\n    function permit(address owner, PermitBatch memory permitBatch, bytes calldata signature) external;\n\n    /// @notice Transfer approved tokens from one address to another\n    /// @param from The address to transfer from\n    /// @param to The address of the recipient\n    /// @param amount The amount of the token to transfer\n    /// @param token The token address to transfer\n    /// @dev Requires the from address to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(address from, address to, uint160 amount, address token) external;\n\n    /// @notice Transfer approved tokens in a batch\n    /// @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n    /// @dev Requires the from addresses to have approved at least the desired amount\n    /// of tokens to msg.sender.\n    function transferFrom(AllowanceTransferDetails[] calldata transferDetails) external;\n\n    /// @notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n    /// by batch revoking approvals\n    /// @param approvals Array of approvals to revoke.\n    function lockdown(TokenSpenderPair[] calldata approvals) external;\n\n    /// @notice Invalidate nonces for a given (token, spender) pair\n    /// @param token The token to invalidate nonces for\n    /// @param spender The spender to invalidate nonces for\n    /// @param newNonce The new nonce to set. Invalidates all nonces less than it.\n    /// @dev Can't invalidate more than 2**16 nonces per transaction.\n    function invalidateNonces(address token, address spender, uint48 newNonce) external;\n}\n"
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IEIP712} from \"./IEIP712.sol\";\n\n/// @title SignatureTransfer\n/// @notice Handles ERC20 token transfers through signature based actions\n/// @dev Requires user's token approval on the Permit2 contract\ninterface ISignatureTransfer is IEIP712 {\n    /// @notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n    /// @param maxAmount The maximum amount a spender can request to transfer\n    error InvalidAmount(uint256 maxAmount);\n\n    /// @notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n    /// @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\n    error LengthMismatch();\n\n    /// @notice Emits an event when the owner successfully invalidates an unordered nonce.\n    event UnorderedNonceInvalidation(address indexed owner, uint256 word, uint256 mask);\n\n    /// @notice The token and amount details for a transfer signed in the permit transfer signature\n    struct TokenPermissions {\n        // ERC20 token address\n        address token;\n        // the maximum amount that can be spent\n        uint256 amount;\n    }\n\n    /// @notice The signed permit message for a single token transfer\n    struct PermitTransferFrom {\n        TokenPermissions permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice Specifies the recipient address and amount for batched transfers.\n    /// @dev Recipients and amounts correspond to the index of the signed token permissions array.\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount.\n    struct SignatureTransferDetails {\n        // recipient address\n        address to;\n        // spender requested amount\n        uint256 requestedAmount;\n    }\n\n    /// @notice Used to reconstruct the signed permit message for multiple token transfers\n    /// @dev Do not need to pass in spender address as it is required that it is msg.sender\n    /// @dev Note that a user still signs over a spender address\n    struct PermitBatchTransferFrom {\n        // the tokens and corresponding amounts permitted for a transfer\n        TokenPermissions[] permitted;\n        // a unique value for every token owner's signature to prevent signature replays\n        uint256 nonce;\n        // deadline on the permit signature\n        uint256 deadline;\n    }\n\n    /// @notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n    /// @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n    /// @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n    /// @dev It returns a uint256 bitmap\n    /// @dev The index, or wordPosition is capped at type(uint248).max\n    function nonceBitmap(address, uint256) external view returns (uint256);\n\n    /// @notice Transfers a token using a signed permit message\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers a token using a signed permit message\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails The spender's requested transfer details for the permitted token\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitTransferFrom memory permit,\n        SignatureTransferDetails calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param signature The signature to verify\n    function permitTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Transfers multiple tokens using a signed permit message\n    /// @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n    /// @notice Includes extra data provided by the caller to verify signature over\n    /// @param permit The permit data signed over by the owner\n    /// @param owner The owner of the tokens to transfer\n    /// @param transferDetails Specifies the recipient and requested amount for the token transfer\n    /// @param witness Extra data to include when checking the user signature\n    /// @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n    /// @param signature The signature to verify\n    function permitWitnessTransferFrom(\n        PermitBatchTransferFrom memory permit,\n        SignatureTransferDetails[] calldata transferDetails,\n        address owner,\n        bytes32 witness,\n        string calldata witnessTypeString,\n        bytes calldata signature\n    ) external;\n\n    /// @notice Invalidates the bits specified in mask for the bitmap at the word position\n    /// @dev The wordPos is maxed at type(uint248).max\n    /// @param wordPos A number to index the nonceBitmap at\n    /// @param mask A bitmap masked against msg.sender's current bitmap at the word position\n    function invalidateUnorderedNonces(uint256 wordPos, uint256 mask) external;\n}\n"
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IEIP712 {\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"IERC3156FlashBorrower": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initiator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "fee",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onFlashLoan",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC3156 FlashBorrower, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].",
						"kind": "dev",
						"methods": {
							"onFlashLoan(address,address,uint256,uint256,bytes)": {
								"details": "Receive a flash loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"data": "Arbitrary data structure, intended to contain user-defined parameters.",
									"fee": "The additional amount of tokens to repay.",
									"initiator": "The initiator of the loan.",
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\""
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onFlashLoan(address,address,uint256,uint256,bytes)": "23e30c8b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC3156 FlashBorrower, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\",\"kind\":\"dev\",\"methods\":{\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"Receive a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"fee\":\"The additional amount of tokens to repay.\",\"initiator\":\"The initiator of the loan.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":\"IERC3156FlashBorrower\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"IERC3156FlashLender": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "flashFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC3156FlashBorrower",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "maxFlashLoan",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC3156 FlashLender, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].",
						"kind": "dev",
						"methods": {
							"flashFee(address,uint256)": {
								"details": "The fee to be charged for a given loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The amount of `token` to be charged for the loan, on top of the returned principal."
								}
							},
							"flashLoan(address,address,uint256,bytes)": {
								"details": "Initiate a flash loan.",
								"params": {
									"amount": "The amount of tokens lent.",
									"data": "Arbitrary data structure, intended to contain user-defined parameters.",
									"receiver": "The receiver of the tokens in the loan, and the receiver of the callback.",
									"token": "The loan currency."
								}
							},
							"maxFlashLoan(address)": {
								"details": "The amount of currency available to be lended.",
								"params": {
									"token": "The loan currency."
								},
								"returns": {
									"_0": "The amount of `token` that can be borrowed."
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"flashFee(address,uint256)": "d9d98ce4",
							"flashLoan(address,address,uint256,bytes)": "5cffe9de",
							"maxFlashLoan(address)": "613255ab"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC3156 FlashLender, as defined in https://eips.ethereum.org/EIPS/eip-3156[ERC-3156].\",\"kind\":\"dev\",\"methods\":{\"flashFee(address,uint256)\":{\"details\":\"The fee to be charged for a given loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` to be charged for the loan, on top of the returned principal.\"}},\"flashLoan(address,address,uint256,bytes)\":{\"details\":\"Initiate a flash loan.\",\"params\":{\"amount\":\"The amount of tokens lent.\",\"data\":\"Arbitrary data structure, intended to contain user-defined parameters.\",\"receiver\":\"The receiver of the tokens in the loan, and the receiver of the callback.\",\"token\":\"The loan currency.\"}},\"maxFlashLoan(address)\":{\"details\":\"The amount of currency available to be lended.\",\"params\":{\"token\":\"The loan currency.\"},\"returns\":{\"_0\":\"The amount of `token` that can be borrowed.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":\"IERC3156FlashLender\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 69,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":751:5769  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bc2168398a4ccfac50b128774190acdce96068b028f5beee01fe3d45ecd46d4664736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220bc2168398a4ccfac50b128774190acdce96068b028f5beee01fe3d45ecd46d4664736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x21 PUSH9 0x398A4CCFAC50B12877 COINBASE SWAP1 0xAC 0xDC 0xE9 PUSH1 0x68 0xB0 0x28 CREATE2 0xBE 0xEE ADD INVALID RETURNDATASIZE GASLIMIT 0xEC 0xD4 PUSH14 0x4664736F6C634300081400330000 ",
							"sourceMap": "751:5018:5:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea2646970667358221220bc2168398a4ccfac50b128774190acdce96068b028f5beee01fe3d45ecd46d4664736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC 0x21 PUSH9 0x398A4CCFAC50B12877 COINBASE SWAP1 0xAC 0xDC 0xE9 PUSH1 0x68 0xB0 0x28 CREATE2 0xBE 0xEE ADD INVALID RETURNDATASIZE GASLIMIT 0xEC 0xD4 PUSH14 0x4664736F6C634300081400330000 ",
							"sourceMap": "751:5018:5:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "ASSIGNIMMUTABLE",
									"source": 5,
									"value": "library_deploy_address"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "RETURN",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 751,
									"end": 5769,
									"name": "REVERT",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bc2168398a4ccfac50b128774190acdce96068b028f5beee01fe3d45ecd46d4664736f6c63430008140033",
									".code": [
										{
											"begin": 751,
											"end": 5769,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 751,
											"end": 5769,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IFeeManager.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaFlashPool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Address.sol\":195:6261  library Address {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122021dfbbcf8a2f867bbd3462116b57f416c1c540a6ab21463ab132ef899eeefe6864736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122021dfbbcf8a2f867bbd3462116b57f416c1c540a6ab21463ab132ef899eeefe6864736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0xDF 0xBB 0xCF DUP11 0x2F DUP7 PUSH28 0xBD3462116B57F416C1C540A6AB21463AB132EF899EEEFE6864736F6C PUSH4 0x43000814 STOP CALLER ",
							"sourceMap": "195:6066:6:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea264697066735822122021dfbbcf8a2f867bbd3462116b57f416c1c540a6ab21463ab132ef899eeefe6864736f6c63430008140033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x21 0xDF 0xBB 0xCF DUP11 0x2F DUP7 PUSH28 0xBD3462116B57F416C1C540A6AB21463AB132EF899EEEFE6864736F6C PUSH4 0x43000814 STOP CALLER ",
							"sourceMap": "195:6066:6:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 6,
									"value": "80"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CALLVALUE",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "SWAP1",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "ASSIGNIMMUTABLE",
									"source": 6,
									"value": "library_deploy_address"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "RETURN",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 195,
									"end": 6261,
									"name": "REVERT",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122021dfbbcf8a2f867bbd3462116b57f416c1c540a6ab21463ab132ef899eeefe6864736f6c63430008140033",
									".code": [
										{
											"begin": 195,
											"end": 6261,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 195,
											"end": 6261,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IFeeManager.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaFlashPool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"IAllowanceTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "AllowanceExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExcessiveInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "Lockdown",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "oldNonce",
									"type": "uint48"
								}
							],
							"name": "NonceInvalidation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"name": "Permit",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								}
							],
							"name": "invalidateNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
									"name": "approvals",
									"type": "tuple[]"
								}
							],
							"name": "lockdown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch",
									"name": "permitBatch",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"params": {
										"deadline": "The timestamp at which the allowed amount is no longer valid"
									}
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"params": {
										"amount": "The maximum amount allowed"
									}
								}
							]
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"invalidateNonces(address,address,uint48)": {
								"details": "Can't invalidate more than 2**16 nonces per transaction.",
								"params": {
									"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
									"spender": "The spender to invalidate nonces for",
									"token": "The token to invalidate nonces for"
								}
							},
							"lockdown((address,address)[])": {
								"params": {
									"approvals": "Array of approvals to revoke."
								}
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitSingle": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitBatch": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"transferFrom((address,address,uint160,address)[])": {
								"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"amount": "The amount of the token to transfer",
									"from": "The address to transfer from",
									"to": "The address of the recipient",
									"token": "The token address to transfer"
								}
							}
						},
						"title": "AllowanceTransfer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address,address)": "927da105",
							"approve(address,address,uint160,uint48)": "87517c45",
							"invalidateNonces(address,address,uint48)": "65d9723c",
							"lockdown((address,address)[])": "cc53287f",
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "2b67b570",
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "2a2d80d1",
							"transferFrom((address,address,uint160,address)[])": "0d58b1db",
							"transferFrom(address,address,uint160,address)": "36c78516"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"title\":\"AllowanceTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":\"IAllowanceTransfer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has expired."
								}
							],
							"ExcessiveInvalidation()": [
								{
									"notice": "Thrown when too many nonces are invalidated."
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has been depleted."
								}
							]
						},
						"events": {
							"Approval(address,address,address,uint160,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
							},
							"Lockdown(address,address,address)": {
								"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
							},
							"NonceInvalidation(address,address,address,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
							},
							"Permit(address,address,address,uint160,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"invalidateNonces(address,address,uint48)": {
								"notice": "Invalidate nonces for a given (token, spender) pair"
							},
							"lockdown((address,address)[])": {
								"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
							},
							"transferFrom((address,address,uint160,address)[])": {
								"notice": "Transfer approved tokens in a batch"
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Transfer approved tokens from one address to another"
							}
						},
						"notice": "Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts",
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"IEIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IEIP712.sol\":\"IEIP712\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IFeeManager.sol": {
				"IFeeManager": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newFeeRate",
									"type": "uint256"
								}
							],
							"name": "flashPoolFeeRateUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newFeeRate",
									"type": "uint256"
								}
							],
							"name": "tuliaPoolFeeRateUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "getflashPoolFeeRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gettuliaPoolFeeRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newFeeRate",
									"type": "uint256"
								}
							],
							"name": "setflashPoolFeeRate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "newFeeRate",
									"type": "uint256"
								}
							],
							"name": "settuliaPoolFeeRate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"flashPoolFeeRateUpdated(uint256)": {
								"params": {
									"newFeeRate": "The new flashPool fee rate that has been set"
								}
							},
							"tuliaPoolFeeRateUpdated(uint256)": {
								"params": {
									"newFeeRate": "The new tuliaPool fee rate that has been set"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"getflashPoolFeeRate()": {
								"returns": {
									"_0": "The flashPool fee rate in basis points"
								}
							},
							"gettuliaPoolFeeRate()": {
								"returns": {
									"_0": "The tuliaPool fee rate in basis points"
								}
							},
							"setflashPoolFeeRate(uint256)": {
								"params": {
									"newFeeRate": "The new flashPool fee rate in basis points"
								}
							},
							"settuliaPoolFeeRate(uint256)": {
								"params": {
									"newFeeRate": "The new tuliaPool fee rate in basis points"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getflashPoolFeeRate()": "053e755b",
							"gettuliaPoolFeeRate()": "26d03cd9",
							"setflashPoolFeeRate(uint256)": "369058bb",
							"settuliaPoolFeeRate(uint256)": "24d8af8d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"flashPoolFeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"tuliaPoolFeeRateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getflashPoolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gettuliaPoolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setflashPoolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"settuliaPoolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"flashPoolFeeRateUpdated(uint256)\":{\"params\":{\"newFeeRate\":\"The new flashPool fee rate that has been set\"}},\"tuliaPoolFeeRateUpdated(uint256)\":{\"params\":{\"newFeeRate\":\"The new tuliaPool fee rate that has been set\"}}},\"kind\":\"dev\",\"methods\":{\"getflashPoolFeeRate()\":{\"returns\":{\"_0\":\"The flashPool fee rate in basis points\"}},\"gettuliaPoolFeeRate()\":{\"returns\":{\"_0\":\"The tuliaPool fee rate in basis points\"}},\"setflashPoolFeeRate(uint256)\":{\"params\":{\"newFeeRate\":\"The new flashPool fee rate in basis points\"}},\"settuliaPoolFeeRate(uint256)\":{\"params\":{\"newFeeRate\":\"The new tuliaPool fee rate in basis points\"}}},\"version\":1},\"userdoc\":{\"events\":{\"flashPoolFeeRateUpdated(uint256)\":{\"notice\":\"Event emitted when the flashPool fee rate is updated\"},\"tuliaPoolFeeRateUpdated(uint256)\":{\"notice\":\"Event emitted when the tuliaPool fee rate is updated\"}},\"kind\":\"user\",\"methods\":{\"getflashPoolFeeRate()\":{\"notice\":\"Get the current flashPool fee rate\"},\"gettuliaPoolFeeRate()\":{\"notice\":\"Get the current tuliaPool fee rate\"},\"setflashPoolFeeRate(uint256)\":{\"notice\":\"Set the flashPool fee rate\"},\"settuliaPoolFeeRate(uint256)\":{\"notice\":\"Set the tuliaPool fee rate\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IFeeManager.sol\":\"IFeeManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IFeeManager.sol\":{\"keccak256\":\"0xfb4947229a6667185236729142241f9a40c8cb2d316a8e1710d44ba07a92cd27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b14648cd3ff808d78e4139c8b2968db331fbf7e282bdba86c5171967754cb52a\",\"dweb:/ipfs/QmRQ4M9Yzi6eKGPPRL4q8wLaUuvkWYfRY5ZmNk7L2BXoFM\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"flashPoolFeeRateUpdated(uint256)": {
								"notice": "Event emitted when the flashPool fee rate is updated"
							},
							"tuliaPoolFeeRateUpdated(uint256)": {
								"notice": "Event emitted when the tuliaPool fee rate is updated"
							}
						},
						"kind": "user",
						"methods": {
							"getflashPoolFeeRate()": {
								"notice": "Get the current flashPool fee rate"
							},
							"gettuliaPoolFeeRate()": {
								"notice": "Get the current tuliaPool fee rate"
							},
							"setflashPoolFeeRate(uint256)": {
								"notice": "Set the flashPool fee rate"
							},
							"settuliaPoolFeeRate(uint256)": {
								"notice": "Set the tuliaPool fee rate"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"IPermit2": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "AllowanceExpired",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExcessiveInvalidation",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxAmount",
									"type": "uint256"
								}
							],
							"name": "InvalidAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "Lockdown",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "oldNonce",
									"type": "uint48"
								}
							],
							"name": "NonceInvalidation",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"indexed": false,
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"name": "Permit",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "word",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "UnorderedNonceInvalidation",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								},
								{
									"internalType": "uint48",
									"name": "nonce",
									"type": "uint48"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "uint48",
									"name": "expiration",
									"type": "uint48"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint48",
									"name": "newNonce",
									"type": "uint48"
								}
							],
							"name": "invalidateNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wordPos",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "invalidateUnorderedNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.TokenSpenderPair[]",
									"name": "approvals",
									"type": "tuple[]"
								}
							],
							"name": "lockdown",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nonceBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails[]",
											"name": "details",
											"type": "tuple[]"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitBatch",
									"name": "permitBatch",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint160",
													"name": "amount",
													"type": "uint160"
												},
												{
													"internalType": "uint48",
													"name": "expiration",
													"type": "uint48"
												},
												{
													"internalType": "uint48",
													"name": "nonce",
													"type": "uint48"
												}
											],
											"internalType": "struct IAllowanceTransfer.PermitDetails",
											"name": "details",
											"type": "tuple"
										},
										{
											"internalType": "address",
											"name": "spender",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sigDeadline",
											"type": "uint256"
										}
									],
									"internalType": "struct IAllowanceTransfer.PermitSingle",
									"name": "permitSingle",
									"type": "tuple"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "from",
											"type": "address"
										},
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint160",
											"name": "amount",
											"type": "uint160"
										},
										{
											"internalType": "address",
											"name": "token",
											"type": "address"
										}
									],
									"internalType": "struct IAllowanceTransfer.AllowanceTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint160",
									"name": "amount",
									"type": "uint160"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Users must approve Permit2 before calling any of the transfer functions.",
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"params": {
										"deadline": "The timestamp at which the allowed amount is no longer valid"
									}
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"params": {
										"amount": "The maximum amount allowed"
									}
								}
							],
							"InvalidAmount(uint256)": [
								{
									"params": {
										"maxAmount": "The maximum amount a spender can request to transfer"
									}
								}
							],
							"LengthMismatch()": [
								{
									"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
								}
							]
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address,address)": {
								"details": "The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
							},
							"approve(address,address,uint160,uint48)": {
								"details": "The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval",
								"params": {
									"amount": "The approved amount of the token",
									"expiration": "The timestamp at which the approval is no longer valid",
									"spender": "The spender address to approve",
									"token": "The token to approve"
								}
							},
							"invalidateNonces(address,address,uint48)": {
								"details": "Can't invalidate more than 2**16 nonces per transaction.",
								"params": {
									"newNonce": "The new nonce to set. Invalidates all nonces less than it.",
									"spender": "The spender to invalidate nonces for",
									"token": "The token to invalidate nonces for"
								}
							},
							"invalidateUnorderedNonces(uint256,uint256)": {
								"details": "The wordPos is maxed at type(uint248).max",
								"params": {
									"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
									"wordPos": "A number to index the nonceBitmap at"
								}
							},
							"lockdown((address,address)[])": {
								"params": {
									"approvals": "Array of approvals to revoke."
								}
							},
							"nonceBitmap(address,uint256)": {
								"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitSingle": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"details": "May fail if the owner's nonce was invalidated in-flight by invalidateNonce",
								"params": {
									"owner": "The owner of the tokens being approved",
									"permitBatch": "Data signed over by the owner specifying the terms of approval",
									"signature": "The owner's signature over the permit data"
								}
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"details": "Reverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token"
								}
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer"
								}
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"transferFrom((address,address,uint160,address)[])": {
								"details": "Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"transferDetails": "Array of owners, recipients, amounts, and tokens for the transfers"
								}
							},
							"transferFrom(address,address,uint160,address)": {
								"details": "Requires the from address to have approved at least the desired amount of tokens to msg.sender.",
								"params": {
									"amount": "The amount of the token to transfer",
									"from": "The address to transfer from",
									"to": "The address of the recipient",
									"token": "The token address to transfer"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address,address)": "927da105",
							"approve(address,address,uint160,uint48)": "87517c45",
							"invalidateNonces(address,address,uint48)": "65d9723c",
							"invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
							"lockdown((address,address)[])": "cc53287f",
							"nonceBitmap(address,uint256)": "4fe02b44",
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": "2b67b570",
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": "2a2d80d1",
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7",
							"transferFrom((address,address,uint160,address)[])": "0d58b1db",
							"transferFrom(address,address,uint160,address)": "36c78516"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"AllowanceExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExcessiveInvalidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Lockdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"oldNonce\",\"type\":\"uint48\"}],\"name\":\"NonceInvalidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"name\":\"Permit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"newNonce\",\"type\":\"uint48\"}],\"name\":\"invalidateNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.TokenSpenderPair[]\",\"name\":\"approvals\",\"type\":\"tuple[]\"}],\"name\":\"lockdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails[]\",\"name\":\"details\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitBatch\",\"name\":\"permitBatch\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"expiration\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"nonce\",\"type\":\"uint48\"}],\"internalType\":\"struct IAllowanceTransfer.PermitDetails\",\"name\":\"details\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sigDeadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IAllowanceTransfer.PermitSingle\",\"name\":\"permitSingle\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"amount\",\"type\":\"uint160\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Users must approve Permit2 before calling any of the transfer functions.\",\"errors\":{\"AllowanceExpired(uint256)\":[{\"params\":{\"deadline\":\"The timestamp at which the allowed amount is no longer valid\"}}],\"InsufficientAllowance(uint256)\":[{\"params\":{\"amount\":\"The maximum amount allowed\"}}],\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address,address)\":{\"details\":\"The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\"},\"approve(address,address,uint160,uint48)\":{\"details\":\"The packed allowance also holds a nonce, which will stay unchanged in approveSetting amount to type(uint160).max sets an unlimited approval\",\"params\":{\"amount\":\"The approved amount of the token\",\"expiration\":\"The timestamp at which the approval is no longer valid\",\"spender\":\"The spender address to approve\",\"token\":\"The token to approve\"}},\"invalidateNonces(address,address,uint48)\":{\"details\":\"Can't invalidate more than 2**16 nonces per transaction.\",\"params\":{\"newNonce\":\"The new nonce to set. Invalidates all nonces less than it.\",\"spender\":\"The spender to invalidate nonces for\",\"token\":\"The token to invalidate nonces for\"}},\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"lockdown((address,address)[])\":{\"params\":{\"approvals\":\"Array of approvals to revoke.\"}},\"nonceBitmap(address,uint256)\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitSingle\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"details\":\"May fail if the owner's nonce was invalidated in-flight by invalidateNonce\",\"params\":{\"owner\":\"The owner of the tokens being approved\",\"permitBatch\":\"Data signed over by the owner specifying the terms of approval\",\"signature\":\"The owner's signature over the permit data\"}},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"transferFrom((address,address,uint160,address)[])\":{\"details\":\"Requires the from addresses to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"transferDetails\":\"Array of owners, recipients, amounts, and tokens for the transfers\"}},\"transferFrom(address,address,uint160,address)\":{\"details\":\"Requires the from address to have approved at least the desired amount of tokens to msg.sender.\",\"params\":{\"amount\":\"The amount of the token to transfer\",\"from\":\"The address to transfer from\",\"to\":\"The address of the recipient\",\"token\":\"The token address to transfer\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AllowanceExpired(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has expired.\"}],\"ExcessiveInvalidation()\":[{\"notice\":\"Thrown when too many nonces are invalidated.\"}],\"InsufficientAllowance(uint256)\":[{\"notice\":\"Thrown when an allowance on a token has been depleted.\"}],\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}]},\"events\":{\"Approval(address,address,address,uint160,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions on a token for the spender.\"},\"Lockdown(address,address,address)\":{\"notice\":\"Emits an event when the owner sets the allowance back to 0 with the lockdown function.\"},\"NonceInvalidation(address,address,address,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully invalidates an ordered nonce.\"},\"Permit(address,address,address,uint160,uint48,uint48)\":{\"notice\":\"Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender.\"},\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address,address)\":{\"notice\":\"A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\"},\"approve(address,address,uint160,uint48)\":{\"notice\":\"Approves the spender to use up to amount of the specified token up until the expiration\"},\"invalidateNonces(address,address,uint48)\":{\"notice\":\"Invalidate nonces for a given (token, spender) pair\"},\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"lockdown((address,address)[])\":{\"notice\":\"Enables performing a \\\"lockdown\\\" of the sender's Permit2 identity by batch revoking approvals\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)\":{\"notice\":\"Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\"},\"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)\":{\"notice\":\"Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"transferFrom((address,address,uint160,address)[])\":{\"notice\":\"Transfer approved tokens in a batch\"},\"transferFrom(address,address,uint160,address)\":{\"notice\":\"Transfer approved tokens from one address to another\"}},\"notice\":\"Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/IPermit2.sol\":\"IPermit2\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/IPermit2.sol\":{\"keccak256\":\"0xaa631cc9f53e699301d94233007110a345e6779011def484e8dd97b8fe0af771\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc0502cf19c9c18f320a3001201e89e350393b75837f6b7971de18b2de06f30d\",\"dweb:/ipfs/QmT9SfhdJ7VJNNrf94g4H5usyi7ShqWGx7Cqsz9jZTjX96\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"AllowanceExpired(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has expired."
								}
							],
							"ExcessiveInvalidation()": [
								{
									"notice": "Thrown when too many nonces are invalidated."
								}
							],
							"InsufficientAllowance(uint256)": [
								{
									"notice": "Thrown when an allowance on a token has been depleted."
								}
							],
							"InvalidAmount(uint256)": [
								{
									"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
								}
							]
						},
						"events": {
							"Approval(address,address,address,uint160,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions on a token for the spender."
							},
							"Lockdown(address,address,address)": {
								"notice": "Emits an event when the owner sets the allowance back to 0 with the lockdown function."
							},
							"NonceInvalidation(address,address,address,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully invalidates an ordered nonce."
							},
							"Permit(address,address,address,uint160,uint48,uint48)": {
								"notice": "Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
							},
							"UnorderedNonceInvalidation(address,uint256,uint256)": {
								"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
							}
						},
						"kind": "user",
						"methods": {
							"allowance(address,address,address)": {
								"notice": "A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]"
							},
							"approve(address,address,uint160,uint48)": {
								"notice": "Approves the spender to use up to amount of the specified token up until the expiration"
							},
							"invalidateNonces(address,address,uint48)": {
								"notice": "Invalidate nonces for a given (token, spender) pair"
							},
							"invalidateUnorderedNonces(uint256,uint256)": {
								"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
							},
							"lockdown((address,address)[])": {
								"notice": "Enables performing a \"lockdown\" of the sender's Permit2 identity by batch revoking approvals"
							},
							"nonceBitmap(address,uint256)": {
								"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
							},
							"permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": {
								"notice": "Permit a spender to a given amount of the owners token via the owner's EIP-712 signature"
							},
							"permit(address,((address,uint160,uint48,uint48)[],address,uint256),bytes)": {
								"notice": "Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"notice": "Transfers a token using a signed permit message"
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit message"
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"transferFrom((address,address,uint160,address)[])": {
								"notice": "Transfer approved tokens in a batch"
							},
							"transferFrom(address,address,uint160,address)": {
								"notice": "Transfer approved tokens from one address to another"
							}
						},
						"notice": "Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.",
						"version": 1
					}
				}
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ISignatureTransfer": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "maxAmount",
									"type": "uint256"
								}
							],
							"name": "InvalidAmount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "LengthMismatch",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "word",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "UnorderedNonceInvalidation",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "wordPos",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "mask",
									"type": "uint256"
								}
							],
							"name": "invalidateUnorderedNonces",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nonceBitmap",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions",
											"name": "permitted",
											"type": "tuple"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails",
									"name": "transferDetails",
									"type": "tuple"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"components": [
												{
													"internalType": "address",
													"name": "token",
													"type": "address"
												},
												{
													"internalType": "uint256",
													"name": "amount",
													"type": "uint256"
												}
											],
											"internalType": "struct ISignatureTransfer.TokenPermissions[]",
											"name": "permitted",
											"type": "tuple[]"
										},
										{
											"internalType": "uint256",
											"name": "nonce",
											"type": "uint256"
										},
										{
											"internalType": "uint256",
											"name": "deadline",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.PermitBatchTransferFrom",
									"name": "permit",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "to",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "requestedAmount",
											"type": "uint256"
										}
									],
									"internalType": "struct ISignatureTransfer.SignatureTransferDetails[]",
									"name": "transferDetails",
									"type": "tuple[]"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "witness",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "witnessTypeString",
									"type": "string"
								},
								{
									"internalType": "bytes",
									"name": "signature",
									"type": "bytes"
								}
							],
							"name": "permitWitnessTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Requires user's token approval on the Permit2 contract",
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"params": {
										"maxAmount": "The maximum amount a spender can request to transfer"
									}
								}
							],
							"LengthMismatch()": [
								{
									"details": "If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
								}
							]
						},
						"kind": "dev",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"details": "The wordPos is maxed at type(uint248).max",
								"params": {
									"mask": "A bitmap masked against msg.sender's current bitmap at the word position",
									"wordPos": "A number to index the nonceBitmap at"
								}
							},
							"nonceBitmap(address,uint256)": {
								"details": "Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"details": "Reverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token"
								}
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer"
								}
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "The spender's requested transfer details for the permitted token",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"details": "The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition",
								"params": {
									"owner": "The owner of the tokens to transfer",
									"permit": "The permit data signed over by the owner",
									"signature": "The signature to verify",
									"transferDetails": "Specifies the recipient and requested amount for the token transfer",
									"witness": "Extra data to include when checking the user signature",
									"witnessTypeString": "The EIP-712 type definition for remaining string stub of the typehash"
								}
							}
						},
						"title": "SignatureTransfer",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"invalidateUnorderedNonces(uint256,uint256)": "3ff9dcb1",
							"nonceBitmap(address,uint256)": "4fe02b44",
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": "30f28b7a",
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": "edd9444b",
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": "137c29fe",
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": "fe8ec1a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"word\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"UnorderedNonceInvalidation\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wordPos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"invalidateUnorderedNonces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceBitmap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails\",\"name\":\"transferDetails\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.TokenPermissions[]\",\"name\":\"permitted\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.PermitBatchTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureTransfer.SignatureTransferDetails[]\",\"name\":\"transferDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"witness\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"witnessTypeString\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permitWitnessTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Requires user's token approval on the Permit2 contract\",\"errors\":{\"InvalidAmount(uint256)\":[{\"params\":{\"maxAmount\":\"The maximum amount a spender can request to transfer\"}}],\"LengthMismatch()\":[{\"details\":\"If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred\"}]},\"kind\":\"dev\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"details\":\"The wordPos is maxed at type(uint248).max\",\"params\":{\"mask\":\"A bitmap masked against msg.sender's current bitmap at the word position\",\"wordPos\":\"A number to index the nonceBitmap at\"}},\"nonceBitmap(address,uint256)\":{\"details\":\"Uses unordered nonces so that permit messages do not need to be spent in a certain orderThe mapping is indexed first by the token owner, then by an index specified in the nonceIt returns a uint256 bitmapThe index, or wordPosition is capped at type(uint248).max\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"details\":\"Reverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\"}},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\"}},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definitionReverts if the requested amount is greater than the permitted signed amount\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"The spender's requested transfer details for the permitted token\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"details\":\"The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\",\"params\":{\"owner\":\"The owner of the tokens to transfer\",\"permit\":\"The permit data signed over by the owner\",\"signature\":\"The signature to verify\",\"transferDetails\":\"Specifies the recipient and requested amount for the token transfer\",\"witness\":\"Extra data to include when checking the user signature\",\"witnessTypeString\":\"The EIP-712 type definition for remaining string stub of the typehash\"}}},\"title\":\"SignatureTransfer\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidAmount(uint256)\":[{\"notice\":\"Thrown when the requested amount for a transfer is larger than the permissioned amount\"}],\"LengthMismatch()\":[{\"notice\":\"Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\"}]},\"events\":{\"UnorderedNonceInvalidation(address,uint256,uint256)\":{\"notice\":\"Emits an event when the owner successfully invalidates an unordered nonce.\"}},\"kind\":\"user\",\"methods\":{\"invalidateUnorderedNonces(uint256,uint256)\":{\"notice\":\"Invalidates the bits specified in mask for the bitmap at the word position\"},\"nonceBitmap(address,uint256)\":{\"notice\":\"A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\"},\"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)\":{\"notice\":\"Transfers a token using a signed permit message\"},\"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit message\"},\"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)\":{\"notice\":\"Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over\"},\"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)\":{\"notice\":\"Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over\"}},\"notice\":\"Handles ERC20 token transfers through signature based actions\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/interfaces/ISignatureTransfer.sol\":\"ISignatureTransfer\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"errors": {
							"InvalidAmount(uint256)": [
								{
									"notice": "Thrown when the requested amount for a transfer is larger than the permissioned amount"
								}
							],
							"LengthMismatch()": [
								{
									"notice": "Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred"
								}
							]
						},
						"events": {
							"UnorderedNonceInvalidation(address,uint256,uint256)": {
								"notice": "Emits an event when the owner successfully invalidates an unordered nonce."
							}
						},
						"kind": "user",
						"methods": {
							"invalidateUnorderedNonces(uint256,uint256)": {
								"notice": "Invalidates the bits specified in mask for the bitmap at the word position"
							},
							"nonceBitmap(address,uint256)": {
								"notice": "A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection"
							},
							"permitTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes)": {
								"notice": "Transfers a token using a signed permit message"
							},
							"permitTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit message"
							},
							"permitWitnessTransferFrom(((address,uint256),uint256,uint256),(address,uint256),address,bytes32,string,bytes)": {
								"notice": "Transfers a token using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							},
							"permitWitnessTransferFrom(((address,uint256)[],uint256,uint256),(address,uint256)[],address,bytes32,string,bytes)": {
								"notice": "Transfers multiple tokens using a signed permit messageIncludes extra data provided by the caller to verify signature over"
							}
						},
						"notice": "Handles ERC20 token transfers through signature based actions",
						"version": 1
					}
				}
			},
			"contracts/contracts/protocol/TuliaFlashPool.sol": {
				"TuliaFlashPool": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "contract IERC20",
									"name": "_asset",
									"type": "address"
								},
								{
									"internalType": "contract IPermit2",
									"name": "_permit2",
									"type": "address"
								},
								{
									"internalType": "contract IFeeManager",
									"name": "_feeManager",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_flashLoanFeeRate",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "asset",
							"outputs": [
								{
									"internalType": "contract IERC20",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "feeManager",
							"outputs": [
								{
									"internalType": "contract IFeeManager",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "flashFee",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract IERC3156FlashBorrower",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "flashLoan",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "flashLoanFeeRate",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "maxFlashLoan",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "permit2",
							"outputs": [
								{
									"internalType": "contract IPermit2",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "state",
							"outputs": [
								{
									"internalType": "enum TuliaFlashPool.PoolState",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implements flash loan functionalities with integrated fee management. This contract allows issuing flash loans backed by ERC20 tokens.",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"params": {
									"_asset": "The ERC20 token asset used for flash loans",
									"_feeManager": "The contract managing the fee rates for the flash loans",
									"_flashLoanFeeRate": "The initial fee rate for flash loans issued by this pool",
									"_permit2": "The Permit2 contract utilized for permissioned token transfers"
								}
							},
							"flashFee(address,uint256)": {
								"params": {
									"amount": "The amount of the loan",
									"token": "The ERC20 token for which the fee is calculated"
								},
								"returns": {
									"_0": "The calculated fee amount"
								}
							},
							"flashLoan(address,address,uint256,bytes)": {
								"params": {
									"amount": "The amount of tokens to borrow",
									"data": "Arbitrary data passed to the borrower's `onFlashLoan` method",
									"receiver": "The borrower contract that must implement the IERC3156FlashBorrower interface",
									"token": "The ERC20 token to be borrowed"
								},
								"returns": {
									"_0": "true if the flash loan is paid back successfully within the same transaction"
								}
							},
							"maxFlashLoan(address)": {
								"params": {
									"token": "The ERC20 token address for which the max loan amount is queried"
								},
								"returns": {
									"_0": "The maximum amount available for a flash loan"
								}
							}
						},
						"title": "TuliaFlashPool",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  0x80\n  jumpi(tag_11, callvalue)\n  0x1f\n  bytecodeSize\n  codesize\n  dup2\n  swap1\n  sub\n  swap2\n  dup3\n  add\n  not(0x1f)\n  and\n  dup4\n  add\n  swap2\n  sub(shl(0x40, 0x01), 0x01)\n  dup4\n  gt\n  dup5\n  dup5\n  lt\n  or\n  tag_3\n  jumpi\n  dup1\n  dup5\n  swap3\n  0x80\n  swap5\n  0x40\n  mstore\n  dup4\n  codecopy\n  dup2\n  add\n  sub\n  slt\n  tag_11\n  jumpi\n  dup1\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n  swap1\n  dup2\n  dup2\n  and\n  swap1\n  dup2\n  swap1\n  sub\n  tag_11\n  jumpi\n  0x20\n  dup4\n  add\n  mload\n  swap3\n  dup3\n  dup5\n  and\n  dup1\n  swap5\n  sub\n  tag_11\n  jumpi\n  0x40\n  dup2\n  add\n  mload\n  swap3\n  dup4\n  and\n  dup1\n  swap4\n  sub\n  tag_11\n  jumpi\n  0x60\n  add\n  mload\n  swap3\n  sstore(0x00, 0x01)\n  0x01\n  dup1\n  0xa0\n  shl\n  sub\n  not\n  swap2\n  dup3\n  sload(0x01)\n  and\n  or\n  0x01\n  sstore\n  dup2\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1868:1886  permit2 = _permit2 */\n  0x02\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sload\n  and\n  or\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1868:1886  permit2 = _permit2 */\n  0x02\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sstore\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1897:1921  feeManager = _feeManager */\n  0x03\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sload\n  and\n  or\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1897:1921  feeManager = _feeManager */\n  0x03\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sstore\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1932:1968  flashLoanFeeRate = _flashLoanFeeRate */\n  0x04\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sstore\n  not(0xff)\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1979:2001  state = PoolState.IDLE */\n  0x05\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sload\n  and\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1979:2001  state = PoolState.IDLE */\n  0x05\n    /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n  sstore\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_11:\n  0x00\n  dup1\n  revert\ntag_3:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x41)\n  revert(0x00, 0x24)\nstop\n\nsub_0: assembly {\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_9, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_9:\n      shr(0xe0, calldataload(0x00))\n      swap1\n      dup2\n      0x12261ee7\n      eq\n      tag_11\n      jumpi\n      pop\n      dup1\n      0x38d52e0f\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x5cffe9de\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x613255ab\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x8c9f305f\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xc19d93fb\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd0fb0203\n      eq\n      tag_23\n      jumpi\n      0xd9d98ce4\n      eq\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_25:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x40))\n      0x20\n      tag_31\n      tag_32\n      tag_1\n      jump\t// in\n    tag_32:\n      calldataload(0x24)\n      swap1\n      tag_6\n      jump\t// in\n    tag_31:\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_29:\n      0x00\n      dup1\n      revert\n    tag_23:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x03)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_21:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x00))\n      0xff\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":1269:1291  PoolState public state */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload\n      and\n      mload(0x40)\n      0x03\n      dup3\n      lt\n      iszero\n      tag_41\n      jumpi\n      0x20\n      swap2\n      dup2\n      mstore\n      return\n    tag_41:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x21)\n      revert(0x00, 0x24)\n    tag_19:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      sload(0x04)\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_17:\n      jumpi(tag_29, callvalue)\n      0x20\n      dup1\n      add(calldatasize, not(0x03))\n      slt\n      tag_29\n      jumpi\n      tag_51\n      tag_1\n      jump\t// in\n    tag_51:\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap2\n      dup4\n      swap2\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2327:2350  token == address(asset) */\n      dup3\n      sub\n      tag_52\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2377:2381  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      swap2\n      dup3\n      swap1\n      0x24\n      swap1\n      dup3\n      swap1\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_54\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n      swap2\n      tag_56\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2327:2387  token == address(asset) ? asset.balanceOf(address(this)) : 0 */\n    tag_57:\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n    tag_56:\n      swap1\n      pop\n      dup2\n      dup2\n      dup2\n      returndatasize\n      dup4\n      gt\n      tag_59\n      jumpi\n    tag_60:\n      tag_61\n      dup2\n      dup4\n      tag_2\n      jump\t// in\n    tag_61:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_29\n      jumpi\n      mload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2353:2383  asset.balanceOf(address(this)) */\n      dup3\n      jump(tag_57)\n    tag_59:\n      pop\n      returndatasize\n      jump(tag_60)\n    tag_54:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2327:2387  token == address(asset) ? asset.balanceOf(address(this)) : 0 */\n    tag_52:\n      pop\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2327:2387  token == address(asset) ? asset.balanceOf(address(this)) : 0 */\n      jump(tag_31)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_15:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x80))\n      calldataload(0x04)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_29\n      jumpi\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_29\n      jumpi\n      jumpi(tag_29, gt(calldataload(0x64), 0xffffffffffffffff))\n      jumpi(tag_29, iszero(slt(add(calldataload(0x64), 0x23), calldatasize)))\n      jumpi(tag_29, gt(calldataload(add(0x04, calldataload(0x64))), 0xffffffffffffffff))\n      jumpi(tag_29, gt(add(add(calldataload(0x64), calldataload(add(0x04, calldataload(0x64)))), 0x24), calldatasize))\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload(0x00)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":2468:2487  _status != _ENTERED */\n      eq\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      tag_80\n      jumpi\n      0x02\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload(0x01)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap3\n      swap1\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4310:4363  require(token == address(asset), \"Unsupported token\") */\n      tag_82\n      swap1\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup3\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4318:4341  token == address(asset) */\n      dup5\n      eq\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4310:4363  require(token == address(asset), \"Unsupported token\") */\n      tag_3\n      jump\t// in\n    tag_82:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0xff\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4382:4387  state */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload\n      and\n      0x03\n      dup2\n      lt\n      iszero\n      tag_41\n      jumpi\n      tag_85\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4466:4489  flashFee(token, amount) */\n      tag_87\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      calldataload(0x44)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4466:4489  flashFee(token, amount) */\n      dup3\n      tag_6\n      jump\t// in\n    tag_87:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      mload(0x40)\n      swap4\n      shl(0xe0, 0x70a08231)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      dup6\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4548:4552  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      dup7\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      dup6\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x24\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      dup2\n      dup5\n      gas\n      staticcall\n      swap5\n      dup6\n      iszero\n      tag_54\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      swap6\n      tag_90\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_91:\n      pop\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup6\n      and\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      0x44\n      dup1\n      calldataload\n      dup2\n      dup4\n      add\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0xffffffffffffffff\n      0x80\n      dup3\n      add\n      swap1\n      dup2\n      gt\n      swap1\n      dup3\n      gt\n      or\n      tag_102\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      tag_94\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap2\n      0x80\n      dup3\n      add\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      tag_7\n      jump\t// in\n    tag_94:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      swap1\n      shl(0xe0, 0x23e30c8b)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      dup3\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4668:4678  msg.sender */\n      caller\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      dup4\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x24\n      dup3\n      add\n      mstore\n      calldataload(0x44)\n      0x44\n      dup3\n      add\n      mstore\n      dup2\n      0x64\n      dup3\n      add\n      mstore\n      0xa0\n      0x84\n      dup3\n      add\n      mstore\n      calldataload(add(0x04, calldataload(0x64)))\n      0xa4\n      dup3\n      add\n      mstore\n      calldataload(add(0x04, calldataload(0x64)))\n      add(calldataload(0x64), 0x24)\n      0xc4\n      dup4\n      add\n      calldatacopy\n      0x00\n      0xc4\n      calldataload(add(0x04, calldataload(0x64)))\n      dup4\n      add\n      add\n      mstore\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup2\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0xc4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      dup2\n      not(0x1f)\n      0x1f\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      calldataload(add(0x04, calldataload(0x64)))\n      add\n      and\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      sub\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup2\n      0x00\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup9\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      gas\n      call\n      dup1\n      iszero\n      tag_54\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      swap1\n      tag_97\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_98:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4714:4759  keccak256(\"ERC3156FlashBorrower.onFlashLoan\") */\n      0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4759  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) == keccak256(\"ERC3156FlashBorrower.onFlashLoan\") */\n      swap2\n      pop\n      sub\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      tag_99\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4838:4855  amount + totalFee */\n      tag_101\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      calldataload(0x44)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4838:4855  amount + totalFee */\n      tag_5\n      jump\t// in\n    tag_101:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload(0x01)\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap4\n      dup5\n      and\n      0x24\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4548:4552  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      dup1\n      dup3\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap2\n      dup3\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0xa0\n      dup3\n      add\n      swap3\n      and\n      0xffffffffffffffff\n      dup4\n      gt\n      dup3\n      dup5\n      lt\n      or\n      tag_102\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_104\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap3\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1829:1882  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_7\n      jump\t// in\n    tag_104:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload(0x01)\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4548:4552  this */\n      address\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      swap1\n      0x20\n      swap1\n      dup3\n      swap1\n      0x24\n      swap1\n      dup3\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_54\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      swap2\n      tag_107\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_108:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:5002  asset.balanceOf(address(this)) >= balanceBefore */\n      pop\n      lt\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      tag_109\n      jumpi\n      not(0xff)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4382:4387  state */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4382:4387  state */\n      0x05\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sstore\n      0x01\n      0x00\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      sstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_109:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1b\n      0x24\n      dup3\n      add\n      mstore\n      0x466c617368206c6f616e2072657061796d656e74206661696c65640000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n    tag_107:\n      swap1\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      dup2\n      returndatasize\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      gt\n      tag_111\n      jumpi\n    tag_112:\n      dup2\n      tag_113\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      swap4\n      dup4\n      tag_2\n      jump\t// in\n    tag_113:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_29\n      jumpi\n      mload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4955:4985  asset.balanceOf(address(this)) */\n      dup3\n      jump(tag_108)\n    tag_111:\n      returndatasize\n      swap2\n      pop\n      jump(tag_112)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_102:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_99:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x7a, 0x119b185cda081b1bd85b8819985a5b1959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n    tag_97:\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      dup2\n      returndatasize\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      gt\n      tag_116\n      jumpi\n    tag_117:\n      dup2\n      tag_118\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      swap4\n      dup4\n      tag_2\n      jump\t// in\n    tag_118:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_29\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4714:4759  keccak256(\"ERC3156FlashBorrower.onFlashLoan\") */\n      0x439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      mload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4647:4710  receiver.onFlashLoan(msg.sender, token, amount, totalFee, data) */\n      jump(tag_98)\n    tag_116:\n      returndatasize\n      swap2\n      pop\n      jump(tag_117)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n    tag_90:\n      swap1\n      swap5\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      dup2\n      returndatasize\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      gt\n      tag_121\n      jumpi\n    tag_122:\n      dup2\n      tag_123\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      swap4\n      dup4\n      tag_2\n      jump\t// in\n    tag_123:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_29\n      jumpi\n      mload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":4524:4554  asset.balanceOf(address(this)) */\n      swap4\n      dup6\n      jump(tag_91)\n    tag_121:\n      returndatasize\n      swap2\n      pop\n      jump(tag_122)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_85:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x18\n      0x24\n      dup3\n      add\n      mstore\n      0x466c617368206c6f616e206e6f7420617661696c61626c650000000000000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n    tag_80:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup2\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x20\n      0x04\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup3\n      add\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x1f\n      0x24\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      0x5265656e7472616e637947756172643a207265656e7472616e742063616c6c00\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x44\n      dup3\n      add\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      mstore\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x64\n      swap1\n        /* \"@openzeppelin/contracts/security/ReentrancyGuard.sol\":1759:1760  2 */\n      revert\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_13:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x01)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_11:\n      jumpi(tag_29, callvalue)\n      jumpi(tag_29, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":911:934  IPermit2 public permit2 */\n      0x02\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_1:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_29\n      jumpi\n      jump\t// out\n    tag_2:\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      0x1f\n      dup1\n      not\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_102\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_3:\n      iszero\n      tag_138\n      jumpi\n      jump\t// out\n    tag_138:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x79, 0x2ab739bab83837b93a32b2103a37b5b2b7)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_4:\n      dup2\n      dup2\n      mul\n      swap3\n      swap2\n      dup2\n      iszero\n      swap2\n      dup5\n      div\n      eq\n      or\n      iszero\n      tag_140\n      jumpi\n      jump\t// out\n    tag_140:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n    tag_5:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_140\n      jumpi\n      jump\t// out\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2633:2980  function flashFee(address token, uint256 amount) public view override returns (uint256) {... */\n    tag_6:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload(0x01)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2633:2980  function flashFee(address token, uint256 amount) public view override returns (uint256) {... */\n      swap2\n      swap3\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap2\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2732:2785  require(token == address(asset), \"Unsupported token\") */\n      tag_144\n      swap2\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup4\n      and\n      swap1\n      dup4\n      and\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2740:2763  token == address(asset) */\n      eq\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2732:2785  require(token == address(asset), \"Unsupported token\") */\n      tag_3\n      jump\t// in\n    tag_144:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2844:2849  10000 */\n      0x2710\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2824:2840  flashLoanFeeRate */\n      0x04\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2924  feeManager.getflashPoolFeeRate() */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup3\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2815:2840  amount * flashLoanFeeRate */\n      tag_145\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup4\n      sload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2815:2840  amount * flashLoanFeeRate */\n      dup9\n      tag_4\n      jump\t// in\n    tag_145:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      div\n      swap4\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2902  feeManager */\n      0x03\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sload\n      and\n      mload(0x40)\n      swap3\n      dup4\n      dup1\n      swap3\n      shl(0xe0, 0x053e755b)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2924  feeManager.getflashPoolFeeRate() */\n      dup3\n      mstore\n      gas\n      staticcall\n      swap1\n      dup2\n      iszero\n      tag_54\n      jumpi\n      0x00\n      swap2\n      tag_148\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2633:2980  function flashFee(address token, uint256 amount) public view override returns (uint256) {... */\n    tag_149:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2883:2924  amount * feeManager.getflashPoolFeeRate() */\n      pop\n      tag_150\n      swap1\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2951:2972  userFee + protocolFee */\n      tag_151\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2883:2924  amount * feeManager.getflashPoolFeeRate() */\n      swap5\n      swap6\n      tag_4\n      jump\t// in\n    tag_150:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      div\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2951:2972  userFee + protocolFee */\n      swap1\n      tag_5\n      jump\t// in\n    tag_151:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2633:2980  function flashFee(address token, uint256 amount) public view override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2924  feeManager.getflashPoolFeeRate() */\n    tag_148:\n      swap1\n      0x20\n      dup3\n      returndatasize\n      dup3\n      gt\n      tag_152\n      jumpi\n    tag_153:\n      dup2\n      tag_154\n      0x20\n      swap4\n      dup4\n      tag_2\n      jump\t// in\n    tag_154:\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_155\n      jumpi\n      pop\n      mload\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2951:2972  userFee + protocolFee */\n      tag_151\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2924  feeManager.getflashPoolFeeRate() */\n      jump(tag_149)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_155:\n      dup1\n      revert\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":2892:2924  feeManager.getflashPoolFeeRate() */\n    tag_152:\n      returndatasize\n      swap2\n      pop\n      jump(tag_153)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_7:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":2847:2848  0 */\n      swap1\n      0x00\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      dup1\n      dup3\n      0x20\n      dup3\n      swap5\n      mload\n      swap2\n      add\n      dup3\n      dup7\n      gas\n      call\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      jumpi(tag_157, iszero(returndatasize))\n      returndatasize\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_159\n      jumpi\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_161\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap2\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      swap2\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      tag_162\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1412:1455  abi.encodeCall(token.transfer, (to, value)) */\n      not(0x1f)\n      0x1f\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup5\n      add\n      and\n      add\n      dup5\n      tag_2\n      jump\t// in\n    tag_162:\n      dup3\n      mstore\n      returndatasize\n      dup5\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup5\n      add\n      returndatacopy\n    tag_163:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      dup5\n      tag_8\n      jump\t// in\n    tag_161:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4573  returndata.length != 0 */\n      swap2\n      dup3\n      iszero\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      swap3\n      dup4\n      tag_164\n      jumpi\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_165:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      pop\n      pop\n      pop\n      tag_166\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4059:4688  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4547:4682  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n    tag_166:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      0x24\n      swap1\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      swap1\n      shl(0xe0, 0x5274afe7)\n      dup3\n      mstore\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4631:4671  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_164:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      dup2\n      swap3\n      swap4\n      pop\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      swap2\n      dup2\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      sub\n      slt\n      tag_168\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3462:3493  target.call{value: value}(data) */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4578:4608  abi.decode(returndata, (bool)) */\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload\n      swap1\n      dup2\n      iszero\n      swap2\n      dup3\n      iszero\n      sub\n      tag_155\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":4551:4608  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      pop\n      0x00\n      dup1\n      dup1\n      jump(tag_165)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n    tag_168:\n      pop\n      dup1\n      revert\n    tag_159:\n      shl(0xe0, 0x4e487b71)\n      dup4\n      mstore\n      mstore(0x04, 0x41)\n      0x24\n      dup4\n      revert\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":3510:3565  verifyCallResultFromTarget(target, success, returndata) */\n      tag_161\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      0x60\n      swap1\n      jump(tag_163)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4625:5207  function verifyCallResultFromTarget(... */\n    tag_8:\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4797:4805  !success */\n      tag_172\n      jumpi\n      pop\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5895  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5874:5891  returndata.length */\n      tag_174\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6046:6188  assembly {... */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5870:6253  if (returndata.length > 0) {... */\n    tag_174:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":6225:6242  FailedInnerCall() */\n      dup2\n      mstore\n      0x04\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_172:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      dup2\n      mload\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5067  returndata.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      tag_176\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":4793:5201  if (!success) {... */\n    tag_177:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n      tag_178\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5173:5190  return returndata */\n      pop\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5041:5160  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_178:\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mload(0x40)\n      shl(0xe0, 0x9996b315)\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      0x04\n      dup3\n      add\n        /* \"contracts/contracts/protocol/TuliaFlashPool.sol\":651:5102  contract TuliaFlashPool is IERC3156FlashLender, ReentrancyGuard {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5121:5145  AddressEmptyCode(target) */\n      revert\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n    tag_176:\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5089  target.code.length */\n      pop\n      dup1\n      extcodesize\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5071:5094  target.code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/utils/Address.sol\":5045:5094  returndata.length == 0 && target.code.length == 0 */\n      jump(tag_177)\n\n    auxdata: 0xa2646970667358221220a58ad39521a2776269cc347d478eb6ab1ce9ba60d4075628c8eccb62e107ade764736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080346100bb57601f610a4638819003918201601f19168301916001600160401b038311848410176100bf578084926080946040528339810103126100bb5780516001600160a01b0390818116908190036100bb576020830151928284168094036100bb5760408101519283168093036100bb57606001519260015f5560018060a01b031991826001541617600155816002541617600255600354161760035560045560ff196005541660055560405161097290816100d48239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816312261ee71461068c5750806338d52e0f146106645780635cffe9de146101cf578063613255ab146101295780638c9f305f1461010c578063c19d93fb146100cf578063d0fb0203146100a75763d9d98ce414610074575f80fd5b346100a35760403660031901126100a357602061009b6100926106af565b6024359061075b565b604051908152f35b5f80fd5b346100a3575f3660031901126100a3576003546040516001600160a01b039091168152602090f35b346100a3575f3660031901126100a35760ff6005541660405160038210156100f8576020918152f35b634e487b7160e01b5f52602160045260245ffd5b346100a3575f3660031901126100a3576020600454604051908152f35b346100a3576020806003193601126100a3576101436106af565b6001546001600160a01b039081169183911682036101c7576040516370a0823160e01b815230600482015291829060249082905afa9081156101bc575f9161018f575b50604051908152f35b90508181813d83116101b5575b6101a681836106c5565b810103126100a3575182610186565b503d61019c565b6040513d5f823e3d90fd5b50505f61009b565b346100a35760803660031901126100a3576004356001600160a01b03811681036100a357602435906001600160a01b03821682036100a35767ffffffffffffffff606435116100a3573660236064350112156100a35767ffffffffffffffff60643560040135116100a357366024606435600401356064350101116100a35760025f541461061f5760025f556001546001600160a01b03908116929061027890821684146106e7565b60ff6005541660038110156100f8576105da576102976044358261075b565b90604051936370a0823160e01b8552306004860152602085602481845afa9485156101bc575f956105a6575b5060405163a9059cbb60e01b60208201526001600160a01b03851660248201526044803581830152815267ffffffffffffffff6080820190811190821117610507576103159160808201604052610802565b604051906323e30c8b60e01b825233600483015260018060a01b03166024820152604435604482015281606482015260a060848201526064356004013560a48201526064356004013560246064350160c48301375f60c4606435600401358301015260208160c481601f19601f60643560040135011681010301815f60018060a01b0388165af180156101bc575f90610554575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd991500361051b576103dd9060443561074e565b6001546040516323b872dd60e01b60208201526001600160a01b03938416602482015230604482015260648082019390935291825260a08201921667ffffffffffffffff8311828410176105075761043792604052610802565b6001546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9081156101bc575f916104d5575b50106104905760ff196005541660055560015f55602060405160018152f35b60405162461bcd60e51b815260206004820152601b60248201527f466c617368206c6f616e2072657061796d656e74206661696c656400000000006044820152606490fd5b90506020813d6020116104ff575b816104f0602093836106c5565b810103126100a3575182610471565b3d91506104e3565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b8152602060048201526011602482015270119b185cda081b1bd85b8819985a5b1959607a1b6044820152606490fd5b506020813d60201161059e575b8161056e602093836106c5565b810103126100a3577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd990516103a9565b3d9150610561565b9094506020813d6020116105d2575b816105c2602093836106c5565b810103126100a3575193856102c3565b3d91506105b5565b60405162461bcd60e51b815260206004820152601860248201527f466c617368206c6f616e206e6f7420617661696c61626c6500000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346100a3575f3660031901126100a3576001546040516001600160a01b039091168152602090f35b346100a3575f3660031901126100a3576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036100a357565b90601f8019910116810190811067ffffffffffffffff82111761050757604052565b156106ee57565b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b8181029291811591840414171561073a57565b634e487b7160e01b5f52601160045260245ffd5b9190820180921161073a57565b6001549192916001600160a01b0391610779918316908316146106e7565b612710600460208261078c835488610727565b0493600354166040519283809263053e755b60e01b82525afa9081156101bc575f916107cc575b506107c2906107c99495610727565b049061074e565b90565b906020823d82116107fa575b816107e5602093836106c5565b810103126107f75750516107c96107b3565b80fd5b3d91506107d8565b60018060a01b0316905f80826020829451910182865af13d156108cd573d9067ffffffffffffffff82116108b9579061085d916040519161084d6020601f19601f84011601846106c5565b82523d84602084013e5b846108d9565b90815191821515928361088d575b5050506108755750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126108b55760200151908115918215036107f757505f808061086b565b5080fd5b634e487b7160e01b83526041600452602483fd5b61085d90606090610857565b9061090057508051156108ee57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610933575b610911575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561090956fea2646970667358221220a58ad39521a2776269cc347d478eb6ab1ce9ba60d4075628c8eccb62e107ade764736f6c63430008140033",
							"opcodes": "PUSH1 0x80 CALLVALUE PUSH2 0xBB JUMPI PUSH1 0x1F PUSH2 0xA46 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0xBF JUMPI DUP1 DUP5 SWAP3 PUSH1 0x80 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0xBB JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0xBB JUMPI PUSH1 0x20 DUP4 ADD MLOAD SWAP3 DUP3 DUP5 AND DUP1 SWAP5 SUB PUSH2 0xBB JUMPI PUSH1 0x40 DUP2 ADD MLOAD SWAP3 DUP4 AND DUP1 SWAP4 SUB PUSH2 0xBB JUMPI PUSH1 0x60 ADD MLOAD SWAP3 PUSH1 0x1 PUSH0 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 PUSH1 0x1 SLOAD AND OR PUSH1 0x1 SSTORE DUP2 PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH1 0x3 SLOAD AND OR PUSH1 0x3 SSTORE PUSH1 0x4 SSTORE PUSH1 0xFF NOT PUSH1 0x5 SLOAD AND PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD PUSH2 0x972 SWAP1 DUP2 PUSH2 0xD4 DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x12261EE7 EQ PUSH2 0x68C JUMPI POP DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x8C9F305F EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0xC19D93FB EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xD0FB0203 EQ PUSH2 0xA7 JUMPI PUSH4 0xD9D98CE4 EQ PUSH2 0x74 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x20 PUSH2 0x9B PUSH2 0x92 PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x75B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x40 MLOAD PUSH1 0x3 DUP3 LT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x20 SWAP2 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA3 JUMPI PUSH2 0x143 PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 SWAP2 AND DUP3 SUB PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x18F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B5 JUMPI JUMPDEST PUSH2 0x1A6 DUP2 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD DUP3 PUSH2 0x186 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x19C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP PUSH0 PUSH2 0x9B JUMP JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xA3 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD GT PUSH2 0xA3 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x64 CALLDATALOAD ADD SLT ISZERO PUSH2 0xA3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0xA3 JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x64 CALLDATALOAD ADD ADD GT PUSH2 0xA3 JUMPI PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0x61F JUMPI PUSH1 0x2 PUSH0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 SWAP1 PUSH2 0x278 SWAP1 DUP3 AND DUP5 EQ PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF8 JUMPI PUSH2 0x5DA JUMPI PUSH2 0x297 PUSH1 0x44 CALLDATALOAD DUP3 PUSH2 0x75B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 MSTORE ADDRESS PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x20 DUP6 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP6 PUSH2 0x5A6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 CALLDATALOAD DUP2 DUP4 ADD MSTORE DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x80 DUP3 ADD SWAP1 DUP2 GT SWAP1 DUP3 GT OR PUSH2 0x507 JUMPI PUSH2 0x315 SWAP2 PUSH1 0x80 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x802 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE DUP2 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x24 PUSH1 0x64 CALLDATALOAD ADD PUSH1 0xC4 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0xC4 PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 ADD ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC4 DUP2 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ADD AND DUP2 ADD SUB ADD DUP2 PUSH0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP1 PUSH2 0x554 JUMPI JUMPDEST PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP2 POP SUB PUSH2 0x51B JUMPI PUSH2 0x3DD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x74E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x507 JUMPI PUSH2 0x437 SWAP3 PUSH1 0x40 MSTORE PUSH2 0x802 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x4D5 JUMPI JUMPDEST POP LT PUSH2 0x490 JUMPI PUSH1 0xFF NOT PUSH1 0x5 SLOAD AND PUSH1 0x5 SSTORE PUSH1 0x1 PUSH0 SSTORE PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C617368206C6F616E2072657061796D656E74206661696C65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4FF JUMPI JUMPDEST DUP2 PUSH2 0x4F0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD DUP3 PUSH2 0x471 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x119B185CDA081B1BD85B8819985A5B1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x59E JUMPI JUMPDEST DUP2 PUSH2 0x56E PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 MLOAD PUSH2 0x3A9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x561 JUMP JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5D2 JUMPI JUMPDEST DUP2 PUSH2 0x5C2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD SWAP4 DUP6 PUSH2 0x2C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C617368206C6F616E206E6F7420617661696C61626C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x507 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST ISZERO PUSH2 0x6EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2AB739BAB83837B93A32B2103A37B5B2B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x73A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x73A JUMPI JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x779 SWAP2 DUP4 AND SWAP1 DUP4 AND EQ PUSH2 0x6E7 JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x4 PUSH1 0x20 DUP3 PUSH2 0x78C DUP4 SLOAD DUP9 PUSH2 0x727 JUMP JUMPDEST DIV SWAP4 PUSH1 0x3 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x53E755B PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x7CC JUMPI JUMPDEST POP PUSH2 0x7C2 SWAP1 PUSH2 0x7C9 SWAP5 SWAP6 PUSH2 0x727 JUMP JUMPDEST DIV SWAP1 PUSH2 0x74E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x7FA JUMPI JUMPDEST DUP2 PUSH2 0x7E5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x7F7 JUMPI POP MLOAD PUSH2 0x7C9 PUSH2 0x7B3 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x7D8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH0 DUP1 DUP3 PUSH1 0x20 DUP3 SWAP5 MLOAD SWAP2 ADD DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x8CD JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x8B9 JUMPI SWAP1 PUSH2 0x85D SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x84D PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0x6C5 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE DUP5 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP5 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 DUP3 ISZERO ISZERO SWAP3 DUP4 PUSH2 0x88D JUMPI JUMPDEST POP POP POP PUSH2 0x875 JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 SWAP4 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x8B5 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 DUP2 ISZERO SWAP2 DUP3 ISZERO SUB PUSH2 0x7F7 JUMPI POP PUSH0 DUP1 DUP1 PUSH2 0x86B JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH2 0x85D SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x857 JUMP JUMPDEST SWAP1 PUSH2 0x900 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x8EE JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x933 JUMPI JUMPDEST PUSH2 0x911 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x909 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 DUP11 0xD3 SWAP6 0x21 LOG2 PUSH24 0x6269CC347D478EB6AB1CE9BA60D4075628C8ECCB62E107AD 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "651:4451:12:-:0;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;651:4451:12;;;;;;;;;;;;;;;;1868:18;651:4451;;;1868:18;651:4451;1897:24;651:4451;;;1897:24;651:4451;1932:36;651:4451;;;1979:22;651:4451;;1979:22;651:4451;;;;;;;;;;;-1:-1:-1;651:4451:12;;;;;;-1:-1:-1;651:4451:12;;;;;-1:-1:-1;651:4451:12"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 1711,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 1870,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_uint256": {
									"entryPoint": 1831,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 1733,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_callOptionalReturn": {
									"entryPoint": 2050,
									"id": 477,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_flashFee": {
									"entryPoint": 1883,
									"id": 1339,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"fun_verifyCallResultFromTarget": {
									"entryPoint": 2265,
									"id": 739,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"require_helper_stringliteral": {
									"entryPoint": 1767,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080806040526004361015610012575f80fd5b5f3560e01c90816312261ee71461068c5750806338d52e0f146106645780635cffe9de146101cf578063613255ab146101295780638c9f305f1461010c578063c19d93fb146100cf578063d0fb0203146100a75763d9d98ce414610074575f80fd5b346100a35760403660031901126100a357602061009b6100926106af565b6024359061075b565b604051908152f35b5f80fd5b346100a3575f3660031901126100a3576003546040516001600160a01b039091168152602090f35b346100a3575f3660031901126100a35760ff6005541660405160038210156100f8576020918152f35b634e487b7160e01b5f52602160045260245ffd5b346100a3575f3660031901126100a3576020600454604051908152f35b346100a3576020806003193601126100a3576101436106af565b6001546001600160a01b039081169183911682036101c7576040516370a0823160e01b815230600482015291829060249082905afa9081156101bc575f9161018f575b50604051908152f35b90508181813d83116101b5575b6101a681836106c5565b810103126100a3575182610186565b503d61019c565b6040513d5f823e3d90fd5b50505f61009b565b346100a35760803660031901126100a3576004356001600160a01b03811681036100a357602435906001600160a01b03821682036100a35767ffffffffffffffff606435116100a3573660236064350112156100a35767ffffffffffffffff60643560040135116100a357366024606435600401356064350101116100a35760025f541461061f5760025f556001546001600160a01b03908116929061027890821684146106e7565b60ff6005541660038110156100f8576105da576102976044358261075b565b90604051936370a0823160e01b8552306004860152602085602481845afa9485156101bc575f956105a6575b5060405163a9059cbb60e01b60208201526001600160a01b03851660248201526044803581830152815267ffffffffffffffff6080820190811190821117610507576103159160808201604052610802565b604051906323e30c8b60e01b825233600483015260018060a01b03166024820152604435604482015281606482015260a060848201526064356004013560a48201526064356004013560246064350160c48301375f60c4606435600401358301015260208160c481601f19601f60643560040135011681010301815f60018060a01b0388165af180156101bc575f90610554575b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd991500361051b576103dd9060443561074e565b6001546040516323b872dd60e01b60208201526001600160a01b03938416602482015230604482015260648082019390935291825260a08201921667ffffffffffffffff8311828410176105075761043792604052610802565b6001546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa9081156101bc575f916104d5575b50106104905760ff196005541660055560015f55602060405160018152f35b60405162461bcd60e51b815260206004820152601b60248201527f466c617368206c6f616e2072657061796d656e74206661696c656400000000006044820152606490fd5b90506020813d6020116104ff575b816104f0602093836106c5565b810103126100a3575182610471565b3d91506104e3565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b8152602060048201526011602482015270119b185cda081b1bd85b8819985a5b1959607a1b6044820152606490fd5b506020813d60201161059e575b8161056e602093836106c5565b810103126100a3577f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd990516103a9565b3d9150610561565b9094506020813d6020116105d2575b816105c2602093836106c5565b810103126100a3575193856102c3565b3d91506105b5565b60405162461bcd60e51b815260206004820152601860248201527f466c617368206c6f616e206e6f7420617661696c61626c6500000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346100a3575f3660031901126100a3576001546040516001600160a01b039091168152602090f35b346100a3575f3660031901126100a3576002546001600160a01b03168152602090f35b600435906001600160a01b03821682036100a357565b90601f8019910116810190811067ffffffffffffffff82111761050757604052565b156106ee57565b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b2103a37b5b2b760791b6044820152606490fd5b8181029291811591840414171561073a57565b634e487b7160e01b5f52601160045260245ffd5b9190820180921161073a57565b6001549192916001600160a01b0391610779918316908316146106e7565b612710600460208261078c835488610727565b0493600354166040519283809263053e755b60e01b82525afa9081156101bc575f916107cc575b506107c2906107c99495610727565b049061074e565b90565b906020823d82116107fa575b816107e5602093836106c5565b810103126107f75750516107c96107b3565b80fd5b3d91506107d8565b60018060a01b0316905f80826020829451910182865af13d156108cd573d9067ffffffffffffffff82116108b9579061085d916040519161084d6020601f19601f84011601846106c5565b82523d84602084013e5b846108d9565b90815191821515928361088d575b5050506108755750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126108b55760200151908115918215036107f757505f808061086b565b5080fd5b634e487b7160e01b83526041600452602483fd5b61085d90606090610857565b9061090057508051156108ee57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610933575b610911575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561090956fea2646970667358221220a58ad39521a2776269cc347d478eb6ab1ce9ba60d4075628c8eccb62e107ade764736f6c63430008140033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x12261EE7 EQ PUSH2 0x68C JUMPI POP DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x664 JUMPI DUP1 PUSH4 0x5CFFE9DE EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0x613255AB EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x8C9F305F EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0xC19D93FB EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xD0FB0203 EQ PUSH2 0xA7 JUMPI PUSH4 0xD9D98CE4 EQ PUSH2 0x74 JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x20 PUSH2 0x9B PUSH2 0x92 PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x75B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x40 MLOAD PUSH1 0x3 DUP3 LT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x20 SWAP2 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xA3 JUMPI PUSH2 0x143 PUSH2 0x6AF JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP4 SWAP2 AND DUP3 SUB PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x18F JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP2 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1B5 JUMPI JUMPDEST PUSH2 0x1A6 DUP2 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD DUP3 PUSH2 0x186 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x19C JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST POP POP PUSH0 PUSH2 0x9B JUMP JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0xA3 JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD GT PUSH2 0xA3 JUMPI CALLDATASIZE PUSH1 0x23 PUSH1 0x64 CALLDATALOAD ADD SLT ISZERO PUSH2 0xA3 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD GT PUSH2 0xA3 JUMPI CALLDATASIZE PUSH1 0x24 PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x64 CALLDATALOAD ADD ADD GT PUSH2 0xA3 JUMPI PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0x61F JUMPI PUSH1 0x2 PUSH0 SSTORE PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 SWAP1 PUSH2 0x278 SWAP1 DUP3 AND DUP5 EQ PUSH2 0x6E7 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x5 SLOAD AND PUSH1 0x3 DUP2 LT ISZERO PUSH2 0xF8 JUMPI PUSH2 0x5DA JUMPI PUSH2 0x297 PUSH1 0x44 CALLDATALOAD DUP3 PUSH2 0x75B JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP6 MSTORE ADDRESS PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x20 DUP6 PUSH1 0x24 DUP2 DUP5 GAS STATICCALL SWAP5 DUP6 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP6 PUSH2 0x5A6 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 CALLDATALOAD DUP2 DUP4 ADD MSTORE DUP2 MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH1 0x80 DUP3 ADD SWAP1 DUP2 GT SWAP1 DUP3 GT OR PUSH2 0x507 JUMPI PUSH2 0x315 SWAP2 PUSH1 0x80 DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x802 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH4 0x23E30C8B PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE DUP2 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0xA0 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0xA4 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD PUSH1 0x24 PUSH1 0x64 CALLDATALOAD ADD PUSH1 0xC4 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0xC4 PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD DUP4 ADD ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0xC4 DUP2 PUSH1 0x1F NOT PUSH1 0x1F PUSH1 0x64 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD ADD AND DUP2 ADD SUB ADD DUP2 PUSH0 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP9 AND GAS CALL DUP1 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP1 PUSH2 0x554 JUMPI JUMPDEST PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP2 POP SUB PUSH2 0x51B JUMPI PUSH2 0x3DD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH2 0x74E JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP3 MSTORE PUSH1 0xA0 DUP3 ADD SWAP3 AND PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x507 JUMPI PUSH2 0x437 SWAP3 PUSH1 0x40 MSTORE PUSH2 0x802 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP1 PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x4D5 JUMPI JUMPDEST POP LT PUSH2 0x490 JUMPI PUSH1 0xFF NOT PUSH1 0x5 SLOAD AND PUSH1 0x5 SSTORE PUSH1 0x1 PUSH0 SSTORE PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C617368206C6F616E2072657061796D656E74206661696C65640000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x4FF JUMPI JUMPDEST DUP2 PUSH2 0x4F0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD DUP3 PUSH2 0x471 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x4E3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x119B185CDA081B1BD85B8819985A5B1959 PUSH1 0x7A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x59E JUMPI JUMPDEST DUP2 PUSH2 0x56E PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI PUSH32 0x439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9 SWAP1 MLOAD PUSH2 0x3A9 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x561 JUMP JUMPDEST SWAP1 SWAP5 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x5D2 JUMPI JUMPDEST DUP2 PUSH2 0x5C2 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0xA3 JUMPI MLOAD SWAP4 DUP6 PUSH2 0x2C3 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x466C617368206C6F616E206E6F7420617661696C61626C650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0xA3 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xA3 JUMPI PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0xA3 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x507 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST ISZERO PUSH2 0x6EE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x2AB739BAB83837B93A32B2103A37B5B2B7 PUSH1 0x79 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x73A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x73A JUMPI JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 PUSH2 0x779 SWAP2 DUP4 AND SWAP1 DUP4 AND EQ PUSH2 0x6E7 JUMP JUMPDEST PUSH2 0x2710 PUSH1 0x4 PUSH1 0x20 DUP3 PUSH2 0x78C DUP4 SLOAD DUP9 PUSH2 0x727 JUMP JUMPDEST DIV SWAP4 PUSH1 0x3 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x53E755B PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x1BC JUMPI PUSH0 SWAP2 PUSH2 0x7CC JUMPI JUMPDEST POP PUSH2 0x7C2 SWAP1 PUSH2 0x7C9 SWAP5 SWAP6 PUSH2 0x727 JUMP JUMPDEST DIV SWAP1 PUSH2 0x74E JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x7FA JUMPI JUMPDEST DUP2 PUSH2 0x7E5 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x6C5 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x7F7 JUMPI POP MLOAD PUSH2 0x7C9 PUSH2 0x7B3 JUMP JUMPDEST DUP1 REVERT JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x7D8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH0 DUP1 DUP3 PUSH1 0x20 DUP3 SWAP5 MLOAD SWAP2 ADD DUP3 DUP7 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x8CD JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x8B9 JUMPI SWAP1 PUSH2 0x85D SWAP2 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x84D PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP5 PUSH2 0x6C5 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE DUP5 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMPDEST DUP5 PUSH2 0x8D9 JUMP JUMPDEST SWAP1 DUP2 MLOAD SWAP2 DUP3 ISZERO ISZERO SWAP3 DUP4 PUSH2 0x88D JUMPI JUMPDEST POP POP POP PUSH2 0x875 JUMPI POP JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 SWAP3 SWAP4 POP SWAP1 PUSH1 0x20 SWAP2 DUP2 ADD SUB SLT PUSH2 0x8B5 JUMPI PUSH1 0x20 ADD MLOAD SWAP1 DUP2 ISZERO SWAP2 DUP3 ISZERO SUB PUSH2 0x7F7 JUMPI POP PUSH0 DUP1 DUP1 PUSH2 0x86B JUMP JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH2 0x85D SWAP1 PUSH1 0x60 SWAP1 PUSH2 0x857 JUMP JUMPDEST SWAP1 PUSH2 0x900 JUMPI POP DUP1 MLOAD ISZERO PUSH2 0x8EE JUMPI DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP2 MLOAD ISZERO DUP1 PUSH2 0x933 JUMPI JUMPDEST PUSH2 0x911 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE ISZERO PUSH2 0x909 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 DUP11 0xD3 SWAP6 0x21 LOG2 PUSH24 0x6269CC347D478EB6AB1CE9BA60D4075628C8ECCB62E107AD 0xE7 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "651:4451:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;;1269:22;651:4451;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;651:4451:12;;;;;;;2327:23;;;;651:4451;;-1:-1:-1;;;2353:30:12;;2377:4;651:4451;2353:30;;651:4451;;;;;;;;2353:30;;;;;;;651:4451;2353:30;;;2327:60;;651:4451;;;;;;2353:30;;;;;;;;;;;;;;;;:::i;:::-;;;651:4451;;;;;2353:30;;;;;;;;;651:4451;;;;;;;;;2327:60;;;651:4451;2327:60;;651:4451;;;;;;-1:-1:-1;;651:4451:12;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1759:1:2;651:4451:12;;2468:19:2;1759:1;;;651:4451:12;1759:1:2;651:4451:12;;-1:-1:-1;;;;;651:4451:12;;;;;4310:53;;651:4451;;4318:23;;4310:53;:::i;:::-;651:4451;4382:5;651:4451;;;;;;;;;;4466:23;651:4451;;4466:23;;:::i;:::-;651:4451;;;;;;;4524:30;;4548:4;651:4451;4524:30;;651:4451;;4524:30;651:4451;4524:30;;;;;;;;;651:4451;4524:30;;;651:4451;-1:-1:-1;651:4451:12;;-1:-1:-1;;;651:4451:12;1412:43:5;;;-1:-1:-1;;;;;651:4451:12;;;1412:43:5;;651:4451:12;;;;;;;;1412:43:5;;651:4451:12;;;;;;;;;-1:-1:-1;651:4451:12;;;1412:43:5;651:4451:12;;;;;;1412:43:5;:::i;:::-;651:4451:12;;;;;;4647:63;;4668:10;651:4451;4647:63;;651:4451;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1412:43:5;651:4451:12;1412:43:5;;;;651:4451:12;;;;;;;;;4647:63;;651:4451;;;;;;;;;4647:63;;;;;;651:4451;4647:63;;;651:4451;4714:45;4647:112;;;651:4451;;4838:17;651:4451;;;4838:17;:::i;:::-;651:4451;;;;-1:-1:-1;;;651:4451:12;1829:53:5;;;-1:-1:-1;;;;;651:4451:12;;;;1829:53:5;;651:4451:12;4548:4;651:4451;;;;;;;;;;;;1829:53:5;;;651:4451:12;;;;;;;;;;;;;;1829:53:5;651:4451:12;;;1829:53:5;:::i;:::-;651:4451:12;;;;-1:-1:-1;;;4955:30:12;;4548:4;651:4451;4955:30;;651:4451;;;;;;;;;;-1:-1:-1;;;;;651:4451:12;4955:30;;;;;;;651:4451;4955:30;;;651:4451;4955:47;;651:4451;;;;4382:5;651:4451;;4382:5;651:4451;;;1759:1:2;651:4451:12;;;;;;;;;;-1:-1:-1;;;651:4451:12;;;;;;;;;;;;;;;;;;;;4955:30;;;651:4451;4955:30;;651:4451;4955:30;;;;;;651:4451;4955:30;;;:::i;:::-;;;651:4451;;;;;4955:30;;;;;;-1:-1:-1;4955:30:12;;651:4451;;;;;;;;;;;;;;;-1:-1:-1;;;651:4451:12;;;;;;;;;;;;-1:-1:-1;;;651:4451:12;;;;;;;4647:63;;651:4451;4647:63;;651:4451;4647:63;;;;;;651:4451;4647:63;;;:::i;:::-;;;651:4451;;;;4714:45;651:4451;;4647:63;;;;;-1:-1:-1;4647:63:12;;4524:30;;;;651:4451;4524:30;;651:4451;4524:30;;;;;;651:4451;4524:30;;;:::i;:::-;;;651:4451;;;;;4524:30;;;;;;;-1:-1:-1;4524:30:12;;651:4451;;;-1:-1:-1;;;651:4451:12;;;;;;;;;;;;;;;;;;;;1759:1:2;651:4451:12;;-1:-1:-1;;;1759:1:2;;651:4451:12;;1759:1:2;;;651:4451:12;;1759:1:2;;651:4451:12;1759:1:2;651:4451:12;;;1759:1:2;651:4451:12;;1759:1:2;651:4451:12;;;;;;-1:-1:-1;;651:4451:12;;;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;;;;;-1:-1:-1;;651:4451:12;;;;911:23;651:4451;-1:-1:-1;;;;;651:4451:12;;;;;;;;;;-1:-1:-1;;;;;651:4451:12;;;;;;:::o;:::-;;1412:43:5;;;651:4451:12;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;651:4451:12;;;;;;;;;;;;-1:-1:-1;;;651:4451:12;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;2633:347::-;651:4451;;2633:347;;;-1:-1:-1;;;;;651:4451:12;2732:53;;651:4451;;;;;2740:23;2732:53;:::i;:::-;2844:5;2824:16;2892:32;651:4451;2815:25;651:4451;;2815:25;;:::i;:::-;651:4451;;2892:10;651:4451;;;;;;;;;;;2892:32;;;;;;;;;-1:-1:-1;2892:32:12;;;2633:347;2883:41;;;2951:21;2883:41;;;:::i;:::-;651:4451;2951:21;;:::i;:::-;2633:347;:::o;2892:32::-;;;;;;;;;;;;;;;;:::i;:::-;;;651:4451;;;;-1:-1:-1;651:4451:12;2951:21;2892:32;;651:4451;;;2892:32;;;-1:-1:-1;2892:32:12;;4059:629:5;651:4451:12;;;;;;2847:1:6;;3462:31;;;;;;;;;;;;651:4451:12;;;;;;;;;;;;3510:55:6;651:4451:12;;;1412:43:5;651:4451:12;3462:31:6;1412:43:5;;;651:4451:12;;;;;;:::i;:::-;;;;;3462:31:6;651:4451:12;;;;3510:55:6;;:::i;:::-;651:4451:12;;;4551:22:5;;;;:57;;;;651:4451:12;4547:135:5;;;;;4059:629;:::o;4547:135::-;651:4451:12;;;;4631:40:5;;;;;;;;;651:4451:12;4631:40:5;4551:57;4578:30;;;;;3462:31:6;4578:30:5;;;651:4451:12;;;;3462:31:6;4578:30:5;651:4451:12;;;;;;;;;;4551:57:5;;;;;;651:4451:12;;;;;-1:-1:-1;;;651:4451:12;;;;;;;;;3510:55:6;651:4451:12;;;;;4625:582:6;;4797:8;;-1:-1:-1;651:4451:12;;5874:21:6;:17;;6046:142;;;;;;5870:383;651:4451:12;;-1:-1:-1;;;6225:17:6;;;;;4793:408;651:4451:12;;5045:22:6;:49;;;4793:408;5041:119;;5173:17;;:::o;5041:119::-;651:4451:12;;-1:-1:-1;;;5121:24:6;;-1:-1:-1;;;;;651:4451:12;;;5121:24:6;;;651:4451:12;;;5121:24:6;5045:49;5071:18;;;:23;5045:49;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "483600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"asset()": "2302",
								"feeManager()": "2412",
								"flashFee(address,uint256)": "infinite",
								"flashLoan(address,address,uint256,bytes)": "infinite",
								"flashLoanFeeRate()": "2344",
								"maxFlashLoan(address)": "infinite",
								"permit2()": "2266",
								"state()": "2408"
							},
							"internal": {
								"_executeFlashLoan(contract IERC3156FlashBorrower,address,uint256,bytes calldata)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "CALLVALUE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "1F"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSHSIZE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "CODESIZE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "GT",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "LT",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "80"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SLT",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "20"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP5",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP4",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "60"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "ADD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "A0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SUB",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1868,
									"end": 1886,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1868,
									"end": 1886,
									"name": "PUSH",
									"source": 12,
									"value": "2"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1897,
									"end": 1921,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1897,
									"end": 1921,
									"name": "PUSH",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1932,
									"end": 1968,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "FF"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 1979,
									"end": 2001,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1979,
									"end": 2001,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "40"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "RETURN",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "tag",
									"source": 12,
									"value": "11"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "tag",
									"source": 12,
									"value": "3"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "4E487B71"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "E0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "SHL",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "41"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 651,
									"end": 5102,
									"name": "REVERT",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a58ad39521a2776269cc347d478eb6ab1ce9ba60d4075628c8eccb62e107ade764736f6c63430008140033",
									".code": [
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "9"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHR",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "12261EE7"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "38D52E0F"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "5CFFE9DE"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "613255AB"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "8C9F305F"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "C19D93FB"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "D0FB0203"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "D9D98CE4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "25"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "32"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1269,
											"end": 1291,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "21"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "19"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "17"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "51"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 2327,
											"end": 2350,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2377,
											"end": 2381,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "tag",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "tag",
											"source": 12,
											"value": "56"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "tag",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 2353,
											"end": 2383,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "tag",
											"source": 12,
											"value": "61"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "57"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "tag",
											"source": 12,
											"value": "59"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "tag",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 2353,
											"end": 2383,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "tag",
											"source": 12,
											"value": "52"
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "31"
										},
										{
											"begin": 2327,
											"end": 2387,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "15"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "23"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4310,
											"end": 4363,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 4310,
											"end": 4363,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4318,
											"end": 4341,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4318,
											"end": 4341,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 4310,
											"end": 4363,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 4310,
											"end": 4363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4310,
											"end": 4363,
											"name": "tag",
											"source": 12,
											"value": "82"
										},
										{
											"begin": 4310,
											"end": 4363,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 4382,
											"end": 4387,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4466,
											"end": 4489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4466,
											"end": 4489,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4466,
											"end": 4489,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 4466,
											"end": 4489,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4466,
											"end": 4489,
											"name": "tag",
											"source": 12,
											"value": "87"
										},
										{
											"begin": 4466,
											"end": 4489,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "70A08231"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4548,
											"end": 4552,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP7",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 1412,
											"end": 1455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "tag",
											"source": 5,
											"value": "94"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "23E30C8B"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4668,
											"end": 4678,
											"name": "CALLER",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "84"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "C4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATACOPY",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "C4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "C4"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "CALL",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4714,
											"end": 4759,
											"name": "PUSH",
											"source": 12,
											"value": "439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9"
										},
										{
											"begin": 4647,
											"end": 4759,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4759,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4759,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4838,
											"end": 4855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 4838,
											"end": 4855,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 4838,
											"end": 4855,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4838,
											"end": 4855,
											"name": "tag",
											"source": 12,
											"value": "101"
										},
										{
											"begin": 4838,
											"end": 4855,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4548,
											"end": 4552,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 1829,
											"end": 1882,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "tag",
											"source": 5,
											"value": "104"
										},
										{
											"begin": 1829,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4548,
											"end": 4552,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "108"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 5002,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 5002,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 4382,
											"end": 4387,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 4382,
											"end": 4387,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "109"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1B"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "466C617368206C6F616E2072657061796D656E74206661696C65640000000000"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "tag",
											"source": 12,
											"value": "107"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "tag",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 4955,
											"end": 4985,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "tag",
											"source": 12,
											"value": "113"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "108"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "tag",
											"source": 12,
											"value": "111"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "112"
										},
										{
											"begin": 4955,
											"end": 4985,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "99"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "119B185CDA081B1BD85B8819985A5B1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "tag",
											"source": 12,
											"value": "97"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "tag",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 4647,
											"end": 4710,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "tag",
											"source": 12,
											"value": "118"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4714,
											"end": 4759,
											"name": "PUSH",
											"source": 12,
											"value": "439148F0BBC682CA079E46D6E2C2F0C1E3B820F1A291B069D8882ABF8CF18DD9"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "98"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "tag",
											"source": 12,
											"value": "116"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "117"
										},
										{
											"begin": 4647,
											"end": 4710,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "tag",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "tag",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 4524,
											"end": 4554,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "tag",
											"source": 12,
											"value": "123"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "DUP6",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "91"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "tag",
											"source": 12,
											"value": "121"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "122"
										},
										{
											"begin": 4524,
											"end": 4554,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "85"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "18"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "466C617368206C6F616E206E6F7420617661696C61626C650000000000000000"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1F"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "PUSH",
											"source": 2,
											"value": "5265656E7472616E637947756172643A207265656E7472616E742063616C6C00"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1759,
											"end": 1760,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "13"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLVALUE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATASIZE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 911,
											"end": 934,
											"name": "PUSH",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "CALLDATALOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "29"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "LT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "102"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2AB739BAB83837B93A32B2103A37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "79"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "44"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4E487B71"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "11"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "140"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "tag",
											"source": 12,
											"value": "6"
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2732,
											"end": 2785,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "144"
										},
										{
											"begin": 2732,
											"end": 2785,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2740,
											"end": 2763,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 2732,
											"end": 2785,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 2732,
											"end": 2785,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2732,
											"end": 2785,
											"name": "tag",
											"source": 12,
											"value": "144"
										},
										{
											"begin": 2732,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2844,
											"end": 2849,
											"name": "PUSH",
											"source": 12,
											"value": "2710"
										},
										{
											"begin": 2824,
											"end": 2840,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2815,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2815,
											"end": 2840,
											"name": "DUP9",
											"source": 12
										},
										{
											"begin": 2815,
											"end": 2840,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2815,
											"end": 2840,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2815,
											"end": 2840,
											"name": "tag",
											"source": 12,
											"value": "145"
										},
										{
											"begin": 2815,
											"end": 2840,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2902,
											"name": "PUSH",
											"source": 12,
											"value": "3"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "53E755B"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "E0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "GAS",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "STATICCALL",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "54"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "tag",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "SWAP5",
											"source": 12
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "SWAP6",
											"source": 12
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2883,
											"end": 2924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "tag",
											"source": 12,
											"value": "150"
										},
										{
											"begin": 2883,
											"end": 2924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 2951,
											"end": 2972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "tag",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2633,
											"end": 2980,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "tag",
											"source": 12,
											"value": "148"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "tag",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "154"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH",
											"source": 12,
											"value": "20"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP4",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 2892,
											"end": 2924,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "tag",
											"source": 12,
											"value": "154"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2951,
											"end": 2972,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "151"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "149"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "tag",
											"source": 12,
											"value": "152"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "153"
										},
										{
											"begin": 2892,
											"end": 2924,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "tag",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "A0"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SHL",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2847,
											"end": 2848,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP5",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "DUP7",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "GAS",
											"source": 6
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "CALL",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "GT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "162"
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "NOT",
											"source": 5
										},
										{
											"begin": 1412,
											"end": 1455,
											"name": "PUSH",
											"source": 5,
											"value": "1F"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "2"
										},
										{
											"begin": 651,
											"end": 5102,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "162"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATASIZE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP5",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "RETURNDATACOPY",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 3510,
											"end": 3565,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "tag",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4573,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "165"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 4059,
											"end": 4688,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4059,
											"end": 4688,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "tag",
											"source": 5,
											"value": "166"
										},
										{
											"begin": 4547,
											"end": 4682,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 5,
											"value": "5274AFE7"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 4631,
											"end": 4671,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "tag",
											"source": 5,
											"value": "164"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP3",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP4",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SLT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 3462,
											"end": 3493,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4578,
											"end": 4608,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP3",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "155"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "165"
										},
										{
											"begin": 4551,
											"end": 4608,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "168"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "159"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "41"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "tag",
											"source": 12,
											"value": "157"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 3510,
											"end": 3565,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "161"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "60"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "163"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 4625,
											"end": 5207,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 4797,
											"end": 4805,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5874,
											"end": 5895,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 5874,
											"end": 5891,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6046,
											"end": 6188,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "tag",
											"source": 6,
											"value": "174"
										},
										{
											"begin": 5870,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 6225,
											"end": 6242,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 6,
											"value": "172"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 5045,
											"end": 5067,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "tag",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 4793,
											"end": 5201,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5173,
											"end": 5190,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5173,
											"end": 5190,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "tag",
											"source": 6,
											"value": "178"
										},
										{
											"begin": 5041,
											"end": 5160,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9996B315"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "PUSH",
											"source": 12,
											"value": "24"
										},
										{
											"begin": 651,
											"end": 5102,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 5121,
											"end": 5145,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "tag",
											"source": 6,
											"value": "176"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 5071,
											"end": 5089,
											"name": "EXTCODESIZE",
											"source": 6
										},
										{
											"begin": 5071,
											"end": 5094,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "177"
										},
										{
											"begin": 5045,
											"end": 5094,
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
								"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
								"@openzeppelin/contracts/security/ReentrancyGuard.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Address.sol",
								"contracts/contracts/interfaces/IAllowanceTransfer.sol",
								"contracts/contracts/interfaces/IEIP712.sol",
								"contracts/contracts/interfaces/IFeeManager.sol",
								"contracts/contracts/interfaces/IPermit2.sol",
								"contracts/contracts/interfaces/ISignatureTransfer.sol",
								"contracts/contracts/protocol/TuliaFlashPool.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"asset()": "38d52e0f",
							"feeManager()": "d0fb0203",
							"flashFee(address,uint256)": "d9d98ce4",
							"flashLoan(address,address,uint256,bytes)": "5cffe9de",
							"flashLoanFeeRate()": "8c9f305f",
							"maxFlashLoan(address)": "613255ab",
							"permit2()": "12261ee7",
							"state()": "c19d93fb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IPermit2\",\"name\":\"_permit2\",\"type\":\"address\"},{\"internalType\":\"contract IFeeManager\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_flashLoanFeeRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"contract IFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashBorrower\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLoanFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"maxFlashLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permit2\",\"outputs\":[{\"internalType\":\"contract IPermit2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum TuliaFlashPool.PoolState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implements flash loan functionalities with integrated fee management. This contract allows issuing flash loans backed by ERC20 tokens.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_asset\":\"The ERC20 token asset used for flash loans\",\"_feeManager\":\"The contract managing the fee rates for the flash loans\",\"_flashLoanFeeRate\":\"The initial fee rate for flash loans issued by this pool\",\"_permit2\":\"The Permit2 contract utilized for permissioned token transfers\"}},\"flashFee(address,uint256)\":{\"params\":{\"amount\":\"The amount of the loan\",\"token\":\"The ERC20 token for which the fee is calculated\"},\"returns\":{\"_0\":\"The calculated fee amount\"}},\"flashLoan(address,address,uint256,bytes)\":{\"params\":{\"amount\":\"The amount of tokens to borrow\",\"data\":\"Arbitrary data passed to the borrower's `onFlashLoan` method\",\"receiver\":\"The borrower contract that must implement the IERC3156FlashBorrower interface\",\"token\":\"The ERC20 token to be borrowed\"},\"returns\":{\"_0\":\"true if the flash loan is paid back successfully within the same transaction\"}},\"maxFlashLoan(address)\":{\"params\":{\"token\":\"The ERC20 token address for which the max loan amount is queried\"},\"returns\":{\"_0\":\"The maximum amount available for a flash loan\"}}},\"title\":\"TuliaFlashPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"ERC20 asset used for flash loans\"},\"constructor\":{\"notice\":\"Constructs the TuliaFlashPool lending pool\"},\"feeManager()\":{\"notice\":\"Contract managing the fee rates for flash loans\"},\"flashFee(address,uint256)\":{\"notice\":\"Calculates the flash loan fee for a given loan amount\"},\"flashLoan(address,address,uint256,bytes)\":{\"notice\":\"Initiates a flash loan transaction\"},\"flashLoanFeeRate()\":{\"notice\":\"Initial fee rate for flash loans issued by this pool\"},\"maxFlashLoan(address)\":{\"notice\":\"Returns the maximum loanable amount of the asset\"},\"permit2()\":{\"notice\":\"Permit2 contract utilized for permissioned token transfers\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts/protocol/TuliaFlashPool.sol\":\"TuliaFlashPool\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol\":{\"keccak256\":\"0x9f9e6dba43fe0775c400aa384375f1f503efaf733a40187169fdfc195f5ea6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff5fe5fac5e4ecbf9fcd34c42b6d58d1af150263dfe07bc6785a59329dd1e475\",\"dweb:/ipfs/QmX1EhNKKL6n6RFrLLAYh6Uf3itkozjSHyGFs9DqwW4Rzy\"]},\"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol\":{\"keccak256\":\"0x95d9eb59f21e885406d0e28b0510f9e1a0e7b4abe6636b5c966682927c65cfdd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a1cbff4d620ab51abe0c4ede9e4395bae53bcc3a7edd74e0eb08d7bdef155306\",\"dweb:/ipfs/QmQcnBK28GDH4S5uXWqAcdRY1KcusXH4CxAqp87rYLir6n\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://41319e7f621f2dc3733511332c4fd032f8e32ad2aa7fd6f665c19741d9941a34\",\"dweb:/ipfs/QmcYR3bd862GD1Bc7jwrU9bGxrhUu5na1oP964bDCu2id1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3036b3a83b7c48f96641f2a9002b9f2dcb6a5958dd670894ada21ae8229b3d0\",\"dweb:/ipfs/QmUNfSBdoVtjhETaUJCYcaC7pTMgbhht926tJ2uXJbiVd3\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"contracts/contracts/interfaces/IAllowanceTransfer.sol\":{\"keccak256\":\"0x37f0ac203b6ef605c9533e1a739477e8e9dcea90710b40e645a367f8a21ace29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e0104d72aeaec1cd66cc232e7de7b7ead08608efcc179491b8a66387614670b0\",\"dweb:/ipfs/QmfAZDyuNC9FXXbnJUwqHNwmAK6uRrXxtWEytLsxjskPsN\"]},\"contracts/contracts/interfaces/IEIP712.sol\":{\"keccak256\":\"0xfdccf2b9639070803cd0e4198427fb0df3cc452ca59bd3b8a0d957a9a4254138\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7c936ac42ce89e827db905a1544397f8bdf46db34cdb6aa1b90dea42fdb4c72\",\"dweb:/ipfs/QmVgurxo1N31qZqkPBirw9Z7S9tLYmv6jSwQp8R8ur2cBk\"]},\"contracts/contracts/interfaces/IFeeManager.sol\":{\"keccak256\":\"0xfb4947229a6667185236729142241f9a40c8cb2d316a8e1710d44ba07a92cd27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b14648cd3ff808d78e4139c8b2968db331fbf7e282bdba86c5171967754cb52a\",\"dweb:/ipfs/QmRQ4M9Yzi6eKGPPRL4q8wLaUuvkWYfRY5ZmNk7L2BXoFM\"]},\"contracts/contracts/interfaces/IPermit2.sol\":{\"keccak256\":\"0xaa631cc9f53e699301d94233007110a345e6779011def484e8dd97b8fe0af771\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fc0502cf19c9c18f320a3001201e89e350393b75837f6b7971de18b2de06f30d\",\"dweb:/ipfs/QmT9SfhdJ7VJNNrf94g4H5usyi7ShqWGx7Cqsz9jZTjX96\"]},\"contracts/contracts/interfaces/ISignatureTransfer.sol\":{\"keccak256\":\"0xe6df9966f8841dc3958ee86169c89de97e7f614c81c28b9dc947b12d732df64e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3d4eafdee7f48c3be8350a94eb6edd0bfb2af2c105df65787a77174f356c0317\",\"dweb:/ipfs/QmY1j2adeeAhNpn6cUuthemxGCdLXHTfyMh9yTKsY4mZ2d\"]},\"contracts/contracts/protocol/TuliaFlashPool.sol\":{\"keccak256\":\"0x6332398d42b32ddf6ac65a47125ac1215020dd59cda2565c33646ad8c08fc199\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0309220df82eaaa1ad6c17bd0be47d96286f2c6e1e2913c0f4c5c6339e714557\",\"dweb:/ipfs/QmTUWQwySSi54RLUrPKJxrZpCPMF8x4WJHux3tyZ5XnsRH\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 69,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 1211,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "asset",
								"offset": 0,
								"slot": "1",
								"type": "t_contract(IERC20)201"
							},
							{
								"astId": 1215,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "permit2",
								"offset": 0,
								"slot": "2",
								"type": "t_contract(IPermit2)1049"
							},
							{
								"astId": 1219,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "feeManager",
								"offset": 0,
								"slot": "3",
								"type": "t_contract(IFeeManager)1037"
							},
							{
								"astId": 1222,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "flashLoanFeeRate",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1230,
								"contract": "contracts/contracts/protocol/TuliaFlashPool.sol:TuliaFlashPool",
								"label": "state",
								"offset": 0,
								"slot": "5",
								"type": "t_enum(PoolState)1227"
							}
						],
						"types": {
							"t_contract(IERC20)201": {
								"encoding": "inplace",
								"label": "contract IERC20",
								"numberOfBytes": "20"
							},
							"t_contract(IFeeManager)1037": {
								"encoding": "inplace",
								"label": "contract IFeeManager",
								"numberOfBytes": "20"
							},
							"t_contract(IPermit2)1049": {
								"encoding": "inplace",
								"label": "contract IPermit2",
								"numberOfBytes": "20"
							},
							"t_enum(PoolState)1227": {
								"encoding": "inplace",
								"label": "enum TuliaFlashPool.PoolState",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"asset()": {
								"notice": "ERC20 asset used for flash loans"
							},
							"constructor": {
								"notice": "Constructs the TuliaFlashPool lending pool"
							},
							"feeManager()": {
								"notice": "Contract managing the fee rates for flash loans"
							},
							"flashFee(address,uint256)": {
								"notice": "Calculates the flash loan fee for a given loan amount"
							},
							"flashLoan(address,address,uint256,bytes)": {
								"notice": "Initiates a flash loan transaction"
							},
							"flashLoanFeeRate()": {
								"notice": "Initial fee rate for flash loans issued by this pool"
							},
							"maxFlashLoan(address)": {
								"notice": "Returns the maximum loanable amount of the asset"
							},
							"permit2()": {
								"notice": "Permit2 contract utilized for permissioned token transfers"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
					"exportedSymbols": {
						"IERC3156FlashBorrower": [
							19
						]
					},
					"id": 20,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "120:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC3156FlashBorrower",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "146:123:0",
								"text": " @dev Interface of the ERC3156 FlashBorrower, as defined in\n https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]."
							},
							"fullyImplemented": false,
							"id": 19,
							"linearizedBaseContracts": [
								19
							],
							"name": "IERC3156FlashBorrower",
							"nameLocation": "280:21:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "308:405:0",
										"text": " @dev Receive a flash loan.\n @param initiator The initiator of the loan.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @param fee The additional amount of tokens to repay.\n @param data Arbitrary data structure, intended to contain user-defined parameters.\n @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\""
									},
									"functionSelector": "23e30c8b",
									"id": 18,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onFlashLoan",
									"nameLocation": "727:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "initiator",
												"nameLocation": "756:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "748:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "748:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "783:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "775:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "775:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "806:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "798:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "798:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "fee",
												"nameLocation": "830:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "822:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "858:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "843:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 12,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "843:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "738:130:0"
									},
									"returnParameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "887:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 15,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "886:9:0"
									},
									"scope": 19,
									"src": "718:178:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 20,
							"src": "270:628:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "120:779:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
					"exportedSymbols": {
						"IERC3156FlashBorrower": [
							19
						],
						"IERC3156FlashLender": [
							58
						]
					},
					"id": 59,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 21,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
							"file": "./IERC3156FlashBorrower.sol",
							"id": 23,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 59,
							"sourceUnit": 20,
							"src": "144:66:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 22,
										"name": "IERC3156FlashBorrower",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 19,
										"src": "152:21:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC3156FlashLender",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 24,
								"nodeType": "StructuredDocumentation",
								"src": "212:121:1",
								"text": " @dev Interface of the ERC3156 FlashLender, as defined in\n https://eips.ethereum.org/EIPS/eip-3156[ERC-3156]."
							},
							"fullyImplemented": false,
							"id": 58,
							"linearizedBaseContracts": [
								58
							],
							"name": "IERC3156FlashLender",
							"nameLocation": "344:19:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "370:168:1",
										"text": " @dev The amount of currency available to be lended.\n @param token The loan currency.\n @return The amount of `token` that can be borrowed."
									},
									"functionSelector": "613255ab",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "maxFlashLoan",
									"nameLocation": "552:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "573:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "565:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "565:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "564:15:1"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "603:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "603:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "602:9:1"
									},
									"scope": 58,
									"src": "543:69:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "618:249:1",
										"text": " @dev The fee to be charged for a given loan.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @return The amount of `token` to be charged for the loan, on top of the returned principal."
									},
									"functionSelector": "d9d98ce4",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flashFee",
									"nameLocation": "881:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "898:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "890:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "913:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "905:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "905:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:31:1"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "944:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 39,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "944:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "943:9:1"
									},
									"scope": 58,
									"src": "872:81:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "959:320:1",
										"text": " @dev Initiate a flash loan.\n @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n @param token The loan currency.\n @param amount The amount of tokens lent.\n @param data Arbitrary data structure, intended to contain user-defined parameters."
									},
									"functionSelector": "5cffe9de",
									"id": 57,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "flashLoan",
									"nameLocation": "1293:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1334:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1312:30:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
													"typeString": "contract IERC3156FlashBorrower"
												},
												"typeName": {
													"id": 45,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 44,
														"name": "IERC3156FlashBorrower",
														"nameLocations": [
															"1312:21:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 19,
														"src": "1312:21:1"
													},
													"referencedDeclaration": 19,
													"src": "1312:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
														"typeString": "contract IERC3156FlashBorrower"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1360:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1352:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 47,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1383:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1375:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1375:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 52,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1414:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1399:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 51,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1399:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1302:122:1"
									},
									"returnParameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 57,
												"src": "1443:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 54,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1443:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1442:6:1"
									},
									"scope": 58,
									"src": "1284:165:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 59,
							"src": "334:1117:1",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "118:1334:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							123
						]
					},
					"id": 124,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 60,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:2"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "ReentrancyGuard",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 61,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:2",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 123,
							"linearizedBaseContracts": [
								123
							],
							"name": "ReentrancyGuard",
							"nameLocation": "906:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 64,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nameLocation": "1701:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "1676:41:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 62,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 63,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 67,
									"mutability": "constant",
									"name": "_ENTERED",
									"nameLocation": "1748:8:2",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "1723:37:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 65,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 66,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:2",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 69,
									"mutability": "mutable",
									"name": "_status",
									"nameLocation": "1783:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 123,
									"src": "1767:23:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 68,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "1811:39:2",
										"statements": [
											{
												"expression": {
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 72,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "1821:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 73,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 64,
														"src": "1831:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:2"
											}
										]
									},
									"id": 77,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:2"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:2"
									},
									"scope": 123,
									"src": "1797:53:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 87,
										"nodeType": "Block",
										"src": "2251:79:2",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 80,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2261:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 82,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:2"
											},
											{
												"id": 83,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:2"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 84,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2303:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 85,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 86,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:2"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:2",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 88,
									"name": "nonReentrant",
									"nameLocation": "2236:12:2",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:2"
									},
									"src": "2227:103:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "2375:248:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 92,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 69,
																"src": "2468:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 93,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 67,
																"src": "2479:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 96,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 97,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:2"
											},
											{
												"expression": {
													"id": 100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 98,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "2598:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 99,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "2608:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 101,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:2"
											}
										]
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nameLocation": "2345:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:2"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:2"
									},
									"scope": 123,
									"src": "2336:287:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2667:171:2",
										"statements": [
											{
												"expression": {
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 106,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "2809:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 107,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 64,
														"src": "2819:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:2"
											}
										]
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nameLocation": "2638:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:2"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:2"
									},
									"scope": 123,
									"src": "2629:209:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 121,
										"nodeType": "Block",
										"src": "3081:43:2",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 119,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 117,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 69,
														"src": "3098:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 118,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 67,
														"src": "3109:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3098:19:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 116,
												"id": 120,
												"nodeType": "Return",
												"src": "3091:26:2"
											}
										]
									},
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "2844:168:2",
										"text": " @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."
									},
									"id": 122,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_reentrancyGuardEntered",
									"nameLocation": "3026:23:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3049:2:2"
									},
									"returnParameters": {
										"id": 116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 115,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "3075:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 114,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3075:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:6:2"
									},
									"scope": 123,
									"src": "3017:107:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 124,
							"src": "888:2238:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:3015:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							201
						]
					},
					"id": 202,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 125,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 126,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 201,
							"linearizedBaseContracts": [
								201
							],
							"name": "IERC20",
							"nameLocation": "213:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 135,
									"name": "Transfer",
									"nameLocation": "395:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "404:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "426:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 130,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 133,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 135,
												"src": "446:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 132,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:3"
									},
									"src": "389:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 144,
									"name": "Approval",
									"nameLocation": "626:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 138,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "635:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 137,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 140,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "658:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 139,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 142,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "683:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:3"
									},
									"src": "620:78:3"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:3",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 150,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 150,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 147,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 201,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:3",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "930:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:3"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 158,
												"src": "970:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:3"
									},
									"scope": 201,
									"src": "911:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:3",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 168,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1221:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 160,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1233:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 162,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:3"
									},
									"returnParameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "1266:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 165,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:3"
									},
									"scope": 201,
									"src": "1203:69:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 178,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 174,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1566:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 173,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1581:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 172,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:3"
									},
									"returnParameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "1621:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:3"
									},
									"scope": 201,
									"src": "1547:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 179,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:3",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 188,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2325:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2342:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:3"
									},
									"returnParameters": {
										"id": 187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 186,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "2375:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 185,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:3"
									},
									"scope": 201,
									"src": "2308:73:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 200,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2711:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2725:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 192,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2737:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 194,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:3"
									},
									"returnParameters": {
										"id": 199,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 200,
												"src": "2770:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 197,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:3"
									},
									"scope": 201,
									"src": "2689:87:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 202,
							"src": "203:2575:3",
							"usedErrors": [],
							"usedEvents": [
								135,
								144
							]
						}
					],
					"src": "106:2673:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							237
						]
					},
					"id": 238,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 203,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 204,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:4",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 237,
							"linearizedBaseContracts": [
								237
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:4",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 222,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3022:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3045:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 208,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3070:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3093:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 212,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3119:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 214,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3136:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 216,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 222,
												"src": "3155:9:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 218,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:4"
									},
									"returnParameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:4"
									},
									"scope": 237,
									"src": "2997:183:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 223,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:4",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 230,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 225,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3501:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 224,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:4"
									},
									"returnParameters": {
										"id": 229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 230,
												"src": "3539:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:4"
									},
									"scope": 237,
									"src": "3485:63:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 231,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:4",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 236,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 232,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:4"
									},
									"returnParameters": {
										"id": 235,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 236,
												"src": "3791:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 233,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:4"
									},
									"scope": 237,
									"src": "3740:60:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 238,
							"src": "2113:1689:4",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"Address": [
							780
						],
						"IERC20": [
							201
						],
						"IERC20Permit": [
							237
						],
						"SafeERC20": [
							527
						]
					},
					"id": 528,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 239,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 241,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 528,
							"sourceUnit": 202,
							"src": "141:37:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 240,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 201,
										"src": "149:6:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "../extensions/IERC20Permit.sol",
							"id": 243,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 528,
							"sourceUnit": 238,
							"src": "179:60:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 242,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 237,
										"src": "187:12:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
							"file": "../../../utils/Address.sol",
							"id": 245,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 528,
							"sourceUnit": 781,
							"src": "240:51:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 244,
										"name": "Address",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 780,
										"src": "248:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 246,
								"nodeType": "StructuredDocumentation",
								"src": "293:457:5",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 527,
							"linearizedBaseContracts": [
								527
							],
							"name": "SafeERC20",
							"nameLocation": "759:9:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 249,
									"libraryName": {
										"id": 247,
										"name": "Address",
										"nameLocations": [
											"781:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 780,
										"src": "781:7:5"
									},
									"nodeType": "UsingForDirective",
									"src": "775:26:5",
									"typeName": {
										"id": 248,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "793:7:5",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "807:64:5",
										"text": " @dev An operation with an ERC20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 254,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "882:24:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 253,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 252,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "915:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 254,
												"src": "907:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 251,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "907:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "906:15:5"
									},
									"src": "876:46:5"
								},
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "928:71:5",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 263,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "1010:32:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1051:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1043:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1043:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "1068:16:5",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1060:24:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 258,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1060:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1094:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 263,
												"src": "1086:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1086:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1042:70:5"
									},
									"src": "1004:109:5"
								},
								{
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "1375:88:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 275,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 267,
															"src": "1405:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 278,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 267,
																		"src": "1427:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1433:8:5",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 168,
																	"src": "1427:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 280,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 269,
																			"src": "1444:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 281,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 271,
																			"src": "1448:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 282,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1443:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 276,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1412:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1416:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1412:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1412:43:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 274,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "1385:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 284,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1385:71:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 285,
												"nodeType": "ExpressionStatement",
												"src": "1385:71:5"
											}
										]
									},
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "1119:179:5",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1312:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1332:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "1325:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 266,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 265,
														"name": "IERC20",
														"nameLocations": [
															"1325:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "1325:6:5"
													},
													"referencedDeclaration": 201,
													"src": "1325:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1347:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "1339:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1339:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1359:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "1351:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 270,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1351:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1324:41:5"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1375:0:5"
									},
									"scope": 527,
									"src": "1303:160:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 313,
										"nodeType": "Block",
										"src": "1792:98:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 301,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 291,
															"src": "1822:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 304,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 291,
																		"src": "1844:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 305,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1850:12:5",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 200,
																	"src": "1844:18:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 306,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 293,
																			"src": "1865:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 307,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 295,
																			"src": "1871:2:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 308,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 297,
																			"src": "1875:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 309,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1864:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 302,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1829:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 303,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1833:10:5",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1829:14:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1829:53:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 300,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 477,
														"src": "1802:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1802:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 312,
												"nodeType": "ExpressionStatement",
												"src": "1802:81:5"
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "1469:228:5",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1711:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1735:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1728:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 290,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 289,
														"name": "IERC20",
														"nameLocations": [
															"1728:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "1728:6:5"
													},
													"referencedDeclaration": 201,
													"src": "1728:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1750:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1742:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1742:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1764:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1756:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1756:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1776:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "1768:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1768:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1727:55:5"
									},
									"returnParameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1792:0:5"
									},
									"scope": 527,
									"src": "1702:188:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 344,
										"nodeType": "Block",
										"src": "2167:139:5",
										"statements": [
											{
												"assignments": [
													326
												],
												"declarations": [
													{
														"constant": false,
														"id": 326,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "2185:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 344,
														"src": "2177:20:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 325,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2177:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 335,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 331,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2224:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$527",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$527",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 330,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2216:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 329,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2216:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2216:13:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 333,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "2231:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 327,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "2200:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2206:9:5",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 178,
														"src": "2200:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2200:39:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2177:62:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 337,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "2262:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 338,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "2269:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 339,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 326,
																"src": "2278:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 340,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 322,
																"src": "2293:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2278:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 336,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 435,
														"src": "2249:12:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2249:50:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 343,
												"nodeType": "ExpressionStatement",
												"src": "2249:50:5"
											}
										]
									},
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "1896:180:5",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 345,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "2090:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2119:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2112:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 317,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 316,
														"name": "IERC20",
														"nameLocations": [
															"2112:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "2112:6:5"
													},
													"referencedDeclaration": 201,
													"src": "2112:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2134:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2126:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 319,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2126:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 322,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2151:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 345,
												"src": "2143:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2143:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2111:46:5"
									},
									"returnParameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:0:5"
									},
									"scope": 527,
									"src": "2081:225:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "2607:370:5",
										"statements": [
											{
												"id": 386,
												"nodeType": "UncheckedBlock",
												"src": "2617:354:5",
												"statements": [
													{
														"assignments": [
															357
														],
														"declarations": [
															{
																"constant": false,
																"id": 357,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "2649:16:5",
																"nodeType": "VariableDeclaration",
																"scope": 386,
																"src": "2641:24:5",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 356,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2641:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 366,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 362,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2692:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$527",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$527",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 361,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2684:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 360,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2684:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2684:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 364,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "2699:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 358,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "2668:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2674:9:5",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 178,
																"src": "2668:15:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 365,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2668:39:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2641:66:5"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 367,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 357,
																"src": "2725:16:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 368,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 353,
																"src": "2744:17:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2725:36:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 377,
														"nodeType": "IfStatement",
														"src": "2721:160:5",
														"trueBody": {
															"id": 376,
															"nodeType": "Block",
															"src": "2763:118:5",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 371,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 351,
																				"src": "2821:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 372,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 357,
																				"src": "2830:16:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 373,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 353,
																				"src": "2848:17:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 370,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 263,
																			"src": "2788:32:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 374,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2788:78:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 375,
																	"nodeType": "RevertStatement",
																	"src": "2781:85:5"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 379,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 349,
																	"src": "2907:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 380,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "2914:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 381,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 357,
																		"src": "2923:16:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 382,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 353,
																		"src": "2942:17:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2923:36:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 378,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 435,
																"src": "2894:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 384,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2894:66:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 385,
														"nodeType": "ExpressionStatement",
														"src": "2894:66:5"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 346,
										"nodeType": "StructuredDocumentation",
										"src": "2312:192:5",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "2518:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2547:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "2540:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 348,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 347,
														"name": "IERC20",
														"nameLocations": [
															"2540:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "2540:6:5"
													},
													"referencedDeclaration": 201,
													"src": "2540:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 351,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2562:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "2554:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 350,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2554:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 353,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "2579:17:5",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "2571:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 352,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2571:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:58:5"
									},
									"returnParameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2607:0:5"
									},
									"scope": 527,
									"src": "2509:468:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 434,
										"nodeType": "Block",
										"src": "3373:303:5",
										"statements": [
											{
												"assignments": [
													400
												],
												"declarations": [
													{
														"constant": false,
														"id": 400,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "3396:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 434,
														"src": "3383:25:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 399,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3383:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 409,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 403,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 392,
																"src": "3426:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$201",
																	"typeString": "contract IERC20"
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3432:7:5",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 188,
															"src": "3426:13:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 405,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 394,
																	"src": "3442:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 406,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 396,
																	"src": "3451:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 407,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3441:16:5",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 401,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "3411:3:5",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 402,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "3415:10:5",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "3411:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3411:47:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3383:75:5"
											},
											{
												"condition": {
													"id": 414,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3473:45:5",
													"subExpression": {
														"arguments": [
															{
																"id": 411,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 392,
																"src": "3498:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$201",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 412,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "3505:12:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$201",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 410,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 526,
															"src": "3474:23:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3474:44:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 433,
												"nodeType": "IfStatement",
												"src": "3469:201:5",
												"trueBody": {
													"id": 432,
													"nodeType": "Block",
													"src": "3520:150:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 416,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "3554:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 419,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 392,
																					"src": "3576:5:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$201",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 420,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3582:7:5",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 188,
																				"src": "3576:13:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 421,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 394,
																						"src": "3592:7:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 422,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3601:1:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 423,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3591:12:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 417,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3561:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 418,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "3565:10:5",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "3561:14:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 424,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3561:43:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 415,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "3534:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 425,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:71:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 426,
															"nodeType": "ExpressionStatement",
															"src": "3534:71:5"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 428,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "3639:5:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 429,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 400,
																		"src": "3646:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 427,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 477,
																	"src": "3619:19:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3619:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 431,
															"nodeType": "ExpressionStatement",
															"src": "3619:40:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "2983:308:5",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 435,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "3305:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 397,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3325:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "3318:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 391,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 390,
														"name": "IERC20",
														"nameLocations": [
															"3318:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "3318:6:5"
													},
													"referencedDeclaration": 201,
													"src": "3318:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3340:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "3332:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3357:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 435,
												"src": "3349:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 395,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3349:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:46:5"
									},
									"returnParameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3373:0:5"
									},
									"scope": 527,
									"src": "3296:380:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 476,
										"nodeType": "Block",
										"src": "4129:559:5",
										"statements": [
											{
												"assignments": [
													445
												],
												"declarations": [
													{
														"constant": false,
														"id": 445,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4491:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 476,
														"src": "4478:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 444,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4478:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 453,
												"initialValue": {
													"arguments": [
														{
															"id": 451,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "4532:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 448,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 439,
																	"src": "4512:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4504:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 446,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4504:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4504:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4519:12:5",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 601,
														"src": "4504:27:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4504:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4478:59:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 457,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 454,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 445,
																"src": "4551:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 455,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4562:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4551:17:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4572:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4551:22:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 465,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4577:31:5",
														"subExpression": {
															"arguments": [
																{
																	"id": 460,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 445,
																	"src": "4589:10:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 462,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4602:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 461,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "4602:4:5",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 463,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "4601:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 458,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4578:3:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 459,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4582:6:5",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "4578:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 464,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4578:30:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4551:57:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 475,
												"nodeType": "IfStatement",
												"src": "4547:135:5",
												"trueBody": {
													"id": 474,
													"nodeType": "Block",
													"src": "4610:72:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 470,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 439,
																				"src": "4664:5:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$201",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$201",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4656:7:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 468,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4656:7:5",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 471,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4656:14:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 467,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 254,
																	"src": "4631:24:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 472,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4631:40:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 473,
															"nodeType": "RevertStatement",
															"src": "4624:47:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 436,
										"nodeType": "StructuredDocumentation",
										"src": "3682:372:5",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 477,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "4068:19:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4095:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "4088:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 438,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 437,
														"name": "IERC20",
														"nameLocations": [
															"4088:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "4088:6:5"
													},
													"referencedDeclaration": 201,
													"src": "4088:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4115:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 477,
												"src": "4102:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 440,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4102:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4087:33:5"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4129:0:5"
									},
									"scope": 527,
									"src": "4059:629:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "5278:489:5",
										"statements": [
											{
												"assignments": [
													489,
													491
												],
												"declarations": [
													{
														"constant": false,
														"id": 489,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5579:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 525,
														"src": "5574:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 488,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5574:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 491,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5601:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 525,
														"src": "5588:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 490,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5588:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 499,
												"initialValue": {
													"arguments": [
														{
															"id": 497,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "5635:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 494,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 481,
																	"src": "5623:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 493,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5615:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 492,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5615:7:5",
																	"typeDescriptions": {}
																}
															},
															"id": 495,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5615:14:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5630:4:5",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "5615:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5615:25:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5573:67:5"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 500,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 489,
															"src": "5657:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 512,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 504,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 501,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 491,
																				"src": "5669:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 502,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5680:6:5",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "5669:17:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 503,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5690:1:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "5669:22:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 507,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 491,
																				"src": "5706:10:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 509,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "5719:4:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 508,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "5719:4:5",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 510,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5718:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 505,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5695:3:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 506,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5699:6:5",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "5695:10:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 511,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5695:30:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "5669:56:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 513,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5668:58:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "5657:69:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 517,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 481,
																			"src": "5738:5:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$201",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$201",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 516,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5730:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 515,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5730:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 518,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5730:14:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 519,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5745:4:5",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "5730:19:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5750:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "5730:26:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5759:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "5730:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "5657:103:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 487,
												"id": 524,
												"nodeType": "Return",
												"src": "5650:110:5"
											}
										]
									},
									"documentation": {
										"id": 478,
										"nodeType": "StructuredDocumentation",
										"src": "4694:490:5",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "5198:23:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5229:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "5222:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 480,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 479,
														"name": "IERC20",
														"nameLocations": [
															"5222:6:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "5222:6:5"
													},
													"referencedDeclaration": 201,
													"src": "5222:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5249:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "5236:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 482,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5236:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5221:33:5"
									},
									"returnParameters": {
										"id": 487,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 486,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "5272:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 485,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5272:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5271:6:5"
									},
									"scope": 527,
									"src": "5189:578:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 528,
							"src": "751:5018:5",
							"usedErrors": [
								254,
								263
							],
							"usedEvents": []
						}
					],
					"src": "115:5655:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/Address.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Address.sol",
					"exportedSymbols": {
						"Address": [
							780
						]
					},
					"id": 781,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 529,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 530,
								"nodeType": "StructuredDocumentation",
								"src": "127:67:6",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 780,
							"linearizedBaseContracts": [
								780
							],
							"name": "Address",
							"nameLocation": "203:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 531,
										"nodeType": "StructuredDocumentation",
										"src": "217:94:6",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 535,
									"name": "AddressInsufficientBalance",
									"nameLocation": "322:26:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "357:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 535,
												"src": "349:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 532,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "349:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "348:17:6"
									},
									"src": "316:50:6"
								},
								{
									"documentation": {
										"id": 536,
										"nodeType": "StructuredDocumentation",
										"src": "372:75:6",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 540,
									"name": "AddressEmptyCode",
									"nameLocation": "458:16:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 539,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 538,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "483:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 540,
												"src": "475:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 537,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "475:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "474:16:6"
									},
									"src": "452:39:6"
								},
								{
									"documentation": {
										"id": 541,
										"nodeType": "StructuredDocumentation",
										"src": "497:89:6",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 543,
									"name": "FailedInnerCall",
									"nameLocation": "597:15:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 542,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "612:2:6"
									},
									"src": "591:24:6"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "1602:260:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 553,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1624:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$780",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$780",
																		"typeString": "library Address"
																	}
																],
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1616:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 551,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1616:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 554,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1616:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 555,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1630:7:6",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1616:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 556,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "1640:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1616:30:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 566,
												"nodeType": "IfStatement",
												"src": "1612:109:6",
												"trueBody": {
													"id": 565,
													"nodeType": "Block",
													"src": "1648:73:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 561,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1704:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$780",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$780",
																					"typeString": "library Address"
																				}
																			],
																			"id": 560,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1696:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 559,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1696:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 562,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1696:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 558,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "1669:26:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1669:41:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 564,
															"nodeType": "RevertStatement",
															"src": "1662:48:6"
														}
													]
												}
											},
											{
												"assignments": [
													568,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 568,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1737:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 583,
														"src": "1732:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 567,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1732:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 575,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 573,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1780:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 569,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 546,
																"src": "1750:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 570,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1760:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1750:14:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 572,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 571,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 548,
																"src": "1772:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1750:29:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 574,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1750:33:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1731:52:6"
											},
											{
												"condition": {
													"id": 577,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1797:8:6",
													"subExpression": {
														"id": 576,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 568,
														"src": "1798:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 582,
												"nodeType": "IfStatement",
												"src": "1793:63:6",
												"trueBody": {
													"id": 581,
													"nodeType": "Block",
													"src": "1807:49:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 578,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 543,
																	"src": "1828:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 579,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1828:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 580,
															"nodeType": "RevertStatement",
															"src": "1821:24:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "621:905:6",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1540:9:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 549,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1566:9:6",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1550:25:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1550:15:6",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1585:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 584,
												"src": "1577:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 547,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1577:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1549:43:6"
									},
									"returnParameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:0:6"
									},
									"scope": 780,
									"src": "1531:331:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "2794:62:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 595,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 587,
															"src": "2833:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 596,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "2841:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 597,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 594,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 647,
														"src": "2811:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2811:38:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 593,
												"id": 599,
												"nodeType": "Return",
												"src": "2804:45:6"
											}
										]
									},
									"documentation": {
										"id": 585,
										"nodeType": "StructuredDocumentation",
										"src": "1868:832:6",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2714:12:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 587,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2735:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2727:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 586,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2727:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2756:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2743:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 588,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2743:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2726:35:6"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "2780:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 591,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2779:14:6"
									},
									"scope": 780,
									"src": "2705:151:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 646,
										"nodeType": "Block",
										"src": "3293:279:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 615,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3315:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$780",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$780",
																		"typeString": "library Address"
																	}
																],
																"id": 614,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3307:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 613,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3307:7:6",
																	"typeDescriptions": {}
																}
															},
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3307:13:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3321:7:6",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3307:21:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 618,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 608,
														"src": "3331:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3307:29:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 628,
												"nodeType": "IfStatement",
												"src": "3303:108:6",
												"trueBody": {
													"id": 627,
													"nodeType": "Block",
													"src": "3338:73:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 623,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3394:4:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$780",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$780",
																					"typeString": "library Address"
																				}
																			],
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3386:7:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 621,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3386:7:6",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3386:13:6",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 620,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 535,
																	"src": "3359:26:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3359:41:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 626,
															"nodeType": "RevertStatement",
															"src": "3352:48:6"
														}
													]
												}
											},
											{
												"assignments": [
													630,
													632
												],
												"declarations": [
													{
														"constant": false,
														"id": 630,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3426:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3421:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 629,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3421:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 632,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3448:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 646,
														"src": "3435:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 631,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3435:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 639,
												"initialValue": {
													"arguments": [
														{
															"id": 637,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 606,
															"src": "3488:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 633,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 604,
																"src": "3462:6:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 634,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3469:4:6",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3462:11:6",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 636,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 635,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 608,
																"src": "3481:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3462:25:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 638,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3462:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3420:73:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 641,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 604,
															"src": "3537:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 642,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 630,
															"src": "3545:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 643,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 632,
															"src": "3554:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 640,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "3510:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3510:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 612,
												"id": 645,
												"nodeType": "Return",
												"src": "3503:62:6"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "2862:313:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3189:21:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 604,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3219:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3211:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3211:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3240:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3227:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 605,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3227:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3254:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3246:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3246:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3210:50:6"
									},
									"returnParameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 611,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3279:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 610,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3279:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3278:14:6"
									},
									"scope": 780,
									"src": "3180:392:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 672,
										"nodeType": "Block",
										"src": "3811:154:6",
										"statements": [
											{
												"assignments": [
													658,
													660
												],
												"declarations": [
													{
														"constant": false,
														"id": 658,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3827:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 672,
														"src": "3822:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 657,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3822:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 660,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3849:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 672,
														"src": "3836:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 659,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3836:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 665,
												"initialValue": {
													"arguments": [
														{
															"id": 663,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "3881:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 661,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3863:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 662,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3870:10:6",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3863:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3863:23:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3821:65:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 667,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3930:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 668,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 658,
															"src": "3938:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 669,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 660,
															"src": "3947:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 666,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "3903:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3903:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 656,
												"id": 671,
												"nodeType": "Return",
												"src": "3896:62:6"
											}
										]
									},
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "3578:128:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 673,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3720:18:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 653,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3747:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "3739:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 649,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3739:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3768:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "3755:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 651,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3755:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3738:35:6"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 673,
												"src": "3797:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 654,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3797:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3796:14:6"
									},
									"scope": 780,
									"src": "3711:254:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 698,
										"nodeType": "Block",
										"src": "4203:156:6",
										"statements": [
											{
												"assignments": [
													684,
													686
												],
												"declarations": [
													{
														"constant": false,
														"id": 684,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4219:7:6",
														"nodeType": "VariableDeclaration",
														"scope": 698,
														"src": "4214:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 683,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4214:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 686,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4241:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 698,
														"src": "4228:23:6",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 685,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4228:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 691,
												"initialValue": {
													"arguments": [
														{
															"id": 689,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 678,
															"src": "4275:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 687,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 676,
															"src": "4255:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 688,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4262:12:6",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4255:19:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:25:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4213:67:6"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 693,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 676,
															"src": "4324:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 694,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "4332:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 695,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 686,
															"src": "4341:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 692,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 739,
														"src": "4297:26:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 696,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4297:55:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 682,
												"id": 697,
												"nodeType": "Return",
												"src": "4290:62:6"
											}
										]
									},
									"documentation": {
										"id": 674,
										"nodeType": "StructuredDocumentation",
										"src": "3971:130:6",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 699,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4115:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 679,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 676,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4144:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "4136:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 675,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4136:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 678,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4165:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "4152:17:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 677,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4152:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4135:35:6"
									},
									"returnParameters": {
										"id": 682,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 681,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 699,
												"src": "4189:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 680,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4189:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4188:14:6"
									},
									"scope": 780,
									"src": "4106:253:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 738,
										"nodeType": "Block",
										"src": "4783:424:6",
										"statements": [
											{
												"condition": {
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4797:8:6",
													"subExpression": {
														"id": 711,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 704,
														"src": "4798:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 736,
													"nodeType": "Block",
													"src": "4857:344:6",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 721,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 718,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 706,
																			"src": "5045:10:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 719,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5056:6:6",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5045:17:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 720,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5066:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5045:22:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 726,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 722,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 702,
																				"src": "5071:6:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 723,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5078:4:6",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5071:11:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 724,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5083:6:6",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5071:18:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 725,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5093:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5071:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5045:49:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 733,
															"nodeType": "IfStatement",
															"src": "5041:119:6",
															"trueBody": {
																"id": 732,
																"nodeType": "Block",
																"src": "5096:64:6",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 729,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 702,
																					"src": "5138:6:6",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 728,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 540,
																				"src": "5121:16:6",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 730,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5121:24:6",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 731,
																		"nodeType": "RevertStatement",
																		"src": "5114:31:6"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 734,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 706,
																"src": "5180:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 710,
															"id": 735,
															"nodeType": "Return",
															"src": "5173:17:6"
														}
													]
												},
												"id": 737,
												"nodeType": "IfStatement",
												"src": "4793:408:6",
												"trueBody": {
													"id": 717,
													"nodeType": "Block",
													"src": "4807:44:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 714,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 706,
																		"src": "4829:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 713,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "4821:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 715,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4821:19:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 716,
															"nodeType": "ExpressionStatement",
															"src": "4821:19:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 700,
										"nodeType": "StructuredDocumentation",
										"src": "4365:255:6",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4634:26:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4678:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4670:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4670:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4699:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4694:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 703,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4694:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4729:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4716:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 705,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4716:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:85:6"
									},
									"returnParameters": {
										"id": 710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 739,
												"src": "4769:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 708,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4769:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4768:14:6"
									},
									"scope": 780,
									"src": "4625:582:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "5509:122:6",
										"statements": [
											{
												"condition": {
													"id": 750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5523:8:6",
													"subExpression": {
														"id": 749,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 742,
														"src": "5524:7:6",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 758,
													"nodeType": "Block",
													"src": "5583:42:6",
													"statements": [
														{
															"expression": {
																"id": 756,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 744,
																"src": "5604:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 748,
															"id": 757,
															"nodeType": "Return",
															"src": "5597:17:6"
														}
													]
												},
												"id": 759,
												"nodeType": "IfStatement",
												"src": "5519:106:6",
												"trueBody": {
													"id": 755,
													"nodeType": "Block",
													"src": "5533:44:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 752,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 744,
																		"src": "5555:10:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 751,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 779,
																	"src": "5547:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5547:19:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 754,
															"nodeType": "ExpressionStatement",
															"src": "5547:19:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 740,
										"nodeType": "StructuredDocumentation",
										"src": "5213:189:6",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5416:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5438:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "5433:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 741,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5433:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5460:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "5447:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 743,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5447:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5432:39:6"
									},
									"returnParameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "5495:12:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 746,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5495:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:14:6"
									},
									"scope": 780,
									"src": "5407:224:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 778,
										"nodeType": "Block",
										"src": "5798:461:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 770,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 767,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "5874:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 768,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5885:6:6",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5874:17:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 769,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5894:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5874:21:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 776,
													"nodeType": "Block",
													"src": "6204:49:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 773,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 543,
																	"src": "6225:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6225:17:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 775,
															"nodeType": "RevertStatement",
															"src": "6218:24:6"
														}
													]
												},
												"id": 777,
												"nodeType": "IfStatement",
												"src": "5870:383:6",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "5897:301:6",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "6055:133:6",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "6073:40:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "6102:10:6"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "6096:5:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6096:17:6"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "6077:15:6",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6141:2:6",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "6145:10:6"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6137:3:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6137:19:6"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "6158:15:6"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6130:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6130:44:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6130:44:6"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 764,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6102:10:6",
																	"valueSize": 1
																},
																{
																	"declaration": 764,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6145:10:6",
																	"valueSize": 1
																}
															],
															"id": 771,
															"nodeType": "InlineAssembly",
															"src": "6046:142:6"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "5637:101:6",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 779,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5752:7:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 765,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5773:10:6",
												"nodeType": "VariableDeclaration",
												"scope": 779,
												"src": "5760:23:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 763,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5760:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5759:25:6"
									},
									"returnParameters": {
										"id": 766,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5798:0:6"
									},
									"scope": 780,
									"src": "5743:516:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 781,
							"src": "195:6066:6",
							"usedErrors": [
								535,
								540,
								543
							],
							"usedEvents": []
						}
					],
					"src": "101:6161:6"
				},
				"id": 6
			},
			"contracts/contracts/interfaces/IAllowanceTransfer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IAllowanceTransfer.sol",
					"exportedSymbols": {
						"IAllowanceTransfer": [
							992
						],
						"IEIP712": [
							1000
						]
					},
					"id": 993,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 782,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:7"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
							"file": "./IEIP712.sol",
							"id": 784,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 993,
							"sourceUnit": 1001,
							"src": "57:38:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 783,
										"name": "IEIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1000,
										"src": "65:7:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 786,
										"name": "IEIP712",
										"nameLocations": [
											"362:7:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1000,
										"src": "362:7:7"
									},
									"id": 787,
									"nodeType": "InheritanceSpecifier",
									"src": "362:7:7"
								}
							],
							"canonicalName": "IAllowanceTransfer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 785,
								"nodeType": "StructuredDocumentation",
								"src": "97:233:7",
								"text": "@title AllowanceTransfer\n @notice Handles ERC20 token permissions through signature based allowance setting and ERC20 token transfers by checking allowed amounts\n @dev Requires user's token approval on the Permit2 contract"
							},
							"fullyImplemented": false,
							"id": 992,
							"linearizedBaseContracts": [
								992,
								1000
							],
							"name": "IAllowanceTransfer",
							"nameLocation": "340:18:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "376:145:7",
										"text": "@notice Thrown when an allowance on a token has expired.\n @param deadline The timestamp at which the allowed amount is no longer valid"
									},
									"errorSelector": "d81b2f2e",
									"id": 792,
									"name": "AllowanceExpired",
									"nameLocation": "532:16:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "557:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 792,
												"src": "549:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "549:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "548:18:7"
									},
									"src": "526:41:7"
								},
								{
									"documentation": {
										"id": 793,
										"nodeType": "StructuredDocumentation",
										"src": "573:115:7",
										"text": "@notice Thrown when an allowance on a token has been depleted.\n @param amount The maximum amount allowed"
									},
									"errorSelector": "f96fb071",
									"id": 797,
									"name": "InsufficientAllowance",
									"nameLocation": "699:21:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 795,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "729:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 797,
												"src": "721:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 794,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "721:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "720:16:7"
									},
									"src": "693:44:7"
								},
								{
									"documentation": {
										"id": 798,
										"nodeType": "StructuredDocumentation",
										"src": "743:56:7",
										"text": "@notice Thrown when too many nonces are invalidated."
									},
									"errorSelector": "24d35a26",
									"id": 800,
									"name": "ExcessiveInvalidation",
									"nameLocation": "810:21:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 799,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "831:2:7"
									},
									"src": "804:30:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "840:84:7",
										"text": "@notice Emits an event when the owner successfully invalidates an ordered nonce."
									},
									"eventSelector": "55eb90d810e1700b35a8e7e25395ff7f2b2259abd7415ca2284dfb1c246418f3",
									"id": 813,
									"name": "NonceInvalidation",
									"nameLocation": "935:17:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "978:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "962:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "962:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 805,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1001:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "985:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 804,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "985:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 807,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1024:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "1008:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 806,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1008:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 809,
												"indexed": false,
												"mutability": "mutable",
												"name": "newNonce",
												"nameLocation": "1040:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "1033:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 808,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1033:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 811,
												"indexed": false,
												"mutability": "mutable",
												"name": "oldNonce",
												"nameLocation": "1057:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "1050:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 810,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1050:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "952:119:7"
									},
									"src": "929:143:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "1078:99:7",
										"text": "@notice Emits an event when the owner successfully sets permissions on a token for the spender."
									},
									"eventSelector": "da9fa7c1b00402c17d0161b249b1ab8bbec047c5a52207b9c112deffd817036b",
									"id": 826,
									"name": "Approval",
									"nameLocation": "1188:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 825,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1222:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "1206:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1206:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1245:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "1229:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1229:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1268:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "1252:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1252:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 822,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1285:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "1277:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 821,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1277:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 824,
												"indexed": false,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "1300:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 826,
												"src": "1293:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 823,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1293:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1196:120:7"
									},
									"src": "1182:135:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "1323:124:7",
										"text": "@notice Emits an event when the owner successfully sets permissions using a permit signature on a token for the spender."
									},
									"eventSelector": "c6a377bfc4eb120024a8ac08eef205be16b817020812c73223e81d1bdb9708ec",
									"id": 841,
									"name": "Permit",
									"nameLocation": "1458:6:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 829,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1490:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1474:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 828,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 831,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1521:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1505:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 830,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1505:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 833,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1552:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1536:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 832,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1536:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 835,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1577:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1569:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 834,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "1569:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 837,
												"indexed": false,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "1600:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1593:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 836,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1593:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 839,
												"indexed": false,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1627:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 841,
												"src": "1620:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 838,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "1620:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1464:174:7"
									},
									"src": "1452:187:7"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 842,
										"nodeType": "StructuredDocumentation",
										"src": "1645:98:7",
										"text": "@notice Emits an event when the owner sets the allowance back to 0 with the lockdown function."
									},
									"eventSelector": "89b1add15eff56b3dfe299ad94e01f2b52fbcb80ae1a3baea6ae8c04cb2b98a4",
									"id": 850,
									"name": "Lockdown",
									"nameLocation": "1754:8:7",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 844,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1779:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "1763:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1763:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 846,
												"indexed": false,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1794:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "1786:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 845,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1786:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 848,
												"indexed": false,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1809:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 850,
												"src": "1801:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 847,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1801:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1762:55:7"
									},
									"src": "1748:70:7"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitDetails",
									"documentation": {
										"id": 851,
										"nodeType": "StructuredDocumentation",
										"src": "1824:39:7",
										"text": "@notice The permit data for a token"
									},
									"id": 860,
									"members": [
										{
											"constant": false,
											"id": 853,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1938:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 860,
											"src": "1930:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 852,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1930:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 855,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2008:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 860,
											"src": "2000:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 854,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "2000:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 857,
											"mutability": "mutable",
											"name": "expiration",
											"nameLocation": "2105:10:7",
											"nodeType": "VariableDeclaration",
											"scope": 860,
											"src": "2098:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 856,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "2098:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 859,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "2220:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 860,
											"src": "2213:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 858,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "2213:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitDetails",
									"nameLocation": "1875:13:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "1868:364:7",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitSingle",
									"documentation": {
										"id": 861,
										"nodeType": "StructuredDocumentation",
										"src": "2238:66:7",
										"text": "@notice The permit message signed for a single token allowance"
									},
									"id": 869,
									"members": [
										{
											"constant": false,
											"id": 864,
											"mutability": "mutable",
											"name": "details",
											"nameLocation": "2407:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 869,
											"src": "2393:21:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_PermitDetails_$860_storage_ptr",
												"typeString": "struct IAllowanceTransfer.PermitDetails"
											},
											"typeName": {
												"id": 863,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 862,
													"name": "PermitDetails",
													"nameLocations": [
														"2393:13:7"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 860,
													"src": "2393:13:7"
												},
												"referencedDeclaration": 860,
												"src": "2393:13:7",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitDetails_$860_storage_ptr",
													"typeString": "struct IAllowanceTransfer.PermitDetails"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 866,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "2486:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 869,
											"src": "2478:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 865,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2478:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 868,
											"mutability": "mutable",
											"name": "sigDeadline",
											"nameLocation": "2555:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 869,
											"src": "2547:19:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 867,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2547:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitSingle",
									"nameLocation": "2316:12:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "2309:264:7",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PermitBatch",
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "2579:67:7",
										"text": "@notice The permit message signed for multiple token allowances"
									},
									"id": 879,
									"members": [
										{
											"constant": false,
											"id": 874,
											"mutability": "mutable",
											"name": "details",
											"nameLocation": "2753:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 879,
											"src": "2737:23:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_PermitDetails_$860_storage_$dyn_storage_ptr",
												"typeString": "struct IAllowanceTransfer.PermitDetails[]"
											},
											"typeName": {
												"baseType": {
													"id": 872,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 871,
														"name": "PermitDetails",
														"nameLocations": [
															"2737:13:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 860,
														"src": "2737:13:7"
													},
													"referencedDeclaration": 860,
													"src": "2737:13:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitDetails_$860_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitDetails"
													}
												},
												"id": 873,
												"nodeType": "ArrayTypeName",
												"src": "2737:15:7",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_PermitDetails_$860_storage_$dyn_storage_ptr",
													"typeString": "struct IAllowanceTransfer.PermitDetails[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 876,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "2832:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 879,
											"src": "2824:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 875,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2824:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 878,
											"mutability": "mutable",
											"name": "sigDeadline",
											"nameLocation": "2901:11:7",
											"nodeType": "VariableDeclaration",
											"scope": 879,
											"src": "2893:19:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 877,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2893:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitBatch",
									"nameLocation": "2658:11:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "2651:268:7",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.PackedAllowance",
									"documentation": {
										"id": 880,
										"nodeType": "StructuredDocumentation",
										"src": "2925:217:7",
										"text": "@notice The saved permissions\n @dev This info is saved per owner, per token, per spender and all signed over in the permit message\n @dev Setting amount to type(uint160).max sets an unlimited approval"
									},
									"id": 887,
									"members": [
										{
											"constant": false,
											"id": 882,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "3214:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 887,
											"src": "3206:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 881,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "3206:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 884,
											"mutability": "mutable",
											"name": "expiration",
											"nameLocation": "3266:10:7",
											"nodeType": "VariableDeclaration",
											"scope": 887,
											"src": "3259:17:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 883,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "3259:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 886,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "3381:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 887,
											"src": "3374:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint48",
												"typeString": "uint48"
											},
											"typeName": {
												"id": 885,
												"name": "uint48",
												"nodeType": "ElementaryTypeName",
												"src": "3374:6:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PackedAllowance",
									"nameLocation": "3154:15:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "3147:246:7",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.TokenSpenderPair",
									"documentation": {
										"id": 888,
										"nodeType": "StructuredDocumentation",
										"src": "3399:33:7",
										"text": "@notice A token spender pair."
									},
									"id": 893,
									"members": [
										{
											"constant": false,
											"id": 890,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "3524:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 893,
											"src": "3516:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 889,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3516:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 892,
											"mutability": "mutable",
											"name": "spender",
											"nameLocation": "3578:7:7",
											"nodeType": "VariableDeclaration",
											"scope": 893,
											"src": "3570:15:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 891,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3570:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenSpenderPair",
									"nameLocation": "3444:16:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "3437:155:7",
									"visibility": "public"
								},
								{
									"canonicalName": "IAllowanceTransfer.AllowanceTransferDetails",
									"documentation": {
										"id": 894,
										"nodeType": "StructuredDocumentation",
										"src": "3598:41:7",
										"text": "@notice Details for a token transfer."
									},
									"id": 903,
									"members": [
										{
											"constant": false,
											"id": 896,
											"mutability": "mutable",
											"name": "from",
											"nameLocation": "3728:4:7",
											"nodeType": "VariableDeclaration",
											"scope": 903,
											"src": "3720:12:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 895,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3720:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 898,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "3788:2:7",
											"nodeType": "VariableDeclaration",
											"scope": 903,
											"src": "3780:10:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 897,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3780:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 900,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "3843:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 903,
											"src": "3835:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint160",
												"typeString": "uint160"
											},
											"typeName": {
												"id": 899,
												"name": "uint160",
												"nodeType": "ElementaryTypeName",
												"src": "3835:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 902,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "3906:5:7",
											"nodeType": "VariableDeclaration",
											"scope": 903,
											"src": "3898:13:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 901,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "3898:7:7",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AllowanceTransferDetails",
									"nameLocation": "3651:24:7",
									"nodeType": "StructDefinition",
									"scope": 992,
									"src": "3644:274:7",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 904,
										"nodeType": "StructuredDocumentation",
										"src": "3924:455:7",
										"text": "@notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\n @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\n @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals."
									},
									"functionSelector": "927da105",
									"id": 919,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4393:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 911,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 906,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "4411:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4403:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 905,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4403:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 908,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4425:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4417:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 907,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4417:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 910,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4440:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4432:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 909,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4432:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4402:46:7"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 913,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4504:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4496:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 912,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "4496:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 915,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "4519:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4512:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 914,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "4512:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 917,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "4538:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 919,
												"src": "4531:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 916,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "4531:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4495:49:7"
									},
									"scope": 992,
									"src": "4384:161:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 920,
										"nodeType": "StructuredDocumentation",
										"src": "4551:498:7",
										"text": "@notice Approves the spender to use up to amount of the specified token up until the expiration\n @param token The token to approve\n @param spender The spender address to approve\n @param amount The approved amount of the token\n @param expiration The timestamp at which the approval is no longer valid\n @dev The packed allowance also holds a nonce, which will stay unchanged in approve\n @dev Setting amount to type(uint160).max sets an unlimited approval"
									},
									"functionSelector": "87517c45",
									"id": 931,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "5063:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 922,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5079:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "5071:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 921,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5071:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5094:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "5086:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5086:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 926,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5111:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "5103:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 925,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "5103:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "expiration",
												"nameLocation": "5126:10:7",
												"nodeType": "VariableDeclaration",
												"scope": 931,
												"src": "5119:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 927,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "5119:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5070:67:7"
									},
									"returnParameters": {
										"id": 930,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5146:0:7"
									},
									"scope": 992,
									"src": "5054:93:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 932,
										"nodeType": "StructuredDocumentation",
										"src": "5153:407:7",
										"text": "@notice Permit a spender to a given amount of the owners token via the owner's EIP-712 signature\n @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n @param owner The owner of the tokens being approved\n @param permitSingle Data signed over by the owner specifying the terms of approval\n @param signature The owner's signature over the permit data"
									},
									"functionSelector": "2b67b570",
									"id": 942,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "5574:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 940,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5589:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "5581:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 933,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5581:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "permitSingle",
												"nameLocation": "5616:12:7",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "5596:32:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitSingle_$869_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitSingle"
												},
												"typeName": {
													"id": 936,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 935,
														"name": "PermitSingle",
														"nameLocations": [
															"5596:12:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 869,
														"src": "5596:12:7"
													},
													"referencedDeclaration": 869,
													"src": "5596:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitSingle_$869_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitSingle"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 939,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "5645:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 942,
												"src": "5630:24:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 938,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5630:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5580:75:7"
									},
									"returnParameters": {
										"id": 941,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5664:0:7"
									},
									"scope": 992,
									"src": "5565:100:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 943,
										"nodeType": "StructuredDocumentation",
										"src": "5671:411:7",
										"text": "@notice Permit a spender to the signed amounts of the owners tokens via the owner's EIP-712 signature\n @dev May fail if the owner's nonce was invalidated in-flight by invalidateNonce\n @param owner The owner of the tokens being approved\n @param permitBatch Data signed over by the owner specifying the terms of approval\n @param signature The owner's signature over the permit data"
									},
									"functionSelector": "2a2d80d1",
									"id": 953,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "6096:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 951,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6111:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "6103:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 944,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6103:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "permitBatch",
												"nameLocation": "6137:11:7",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "6118:30:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatch_$879_memory_ptr",
													"typeString": "struct IAllowanceTransfer.PermitBatch"
												},
												"typeName": {
													"id": 947,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 946,
														"name": "PermitBatch",
														"nameLocations": [
															"6118:11:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 879,
														"src": "6118:11:7"
													},
													"referencedDeclaration": 879,
													"src": "6118:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatch_$879_storage_ptr",
														"typeString": "struct IAllowanceTransfer.PermitBatch"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 950,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "6165:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 953,
												"src": "6150:24:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 949,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6150:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6102:73:7"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6184:0:7"
									},
									"scope": 992,
									"src": "6087:98:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 954,
										"nodeType": "StructuredDocumentation",
										"src": "6191:386:7",
										"text": "@notice Transfer approved tokens from one address to another\n @param from The address to transfer from\n @param to The address of the recipient\n @param amount The amount of the token to transfer\n @param token The token address to transfer\n @dev Requires the from address to have approved at least the desired amount\n of tokens to msg.sender."
									},
									"functionSelector": "36c78516",
									"id": 965,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6591:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6612:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "6604:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 955,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6604:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 958,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6626:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "6618:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6618:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "6638:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "6630:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint160",
													"typeString": "uint160"
												},
												"typeName": {
													"id": 959,
													"name": "uint160",
													"nodeType": "ElementaryTypeName",
													"src": "6630:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint160",
														"typeString": "uint160"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6654:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 965,
												"src": "6646:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6646:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6603:57:7"
									},
									"returnParameters": {
										"id": 964,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6669:0:7"
									},
									"scope": 992,
									"src": "6582:88:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 966,
										"nodeType": "StructuredDocumentation",
										"src": "6676:264:7",
										"text": "@notice Transfer approved tokens in a batch\n @param transferDetails Array of owners, recipients, amounts, and tokens for the transfers\n @dev Requires the from addresses to have approved at least the desired amount\n of tokens to msg.sender."
									},
									"functionSelector": "0d58b1db",
									"id": 973,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "6954:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "7003:15:7",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "6967:51:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_AllowanceTransferDetails_$903_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 968,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 967,
															"name": "AllowanceTransferDetails",
															"nameLocations": [
																"6967:24:7"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 903,
															"src": "6967:24:7"
														},
														"referencedDeclaration": 903,
														"src": "6967:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_AllowanceTransferDetails_$903_storage_ptr",
															"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails"
														}
													},
													"id": 969,
													"nodeType": "ArrayTypeName",
													"src": "6967:26:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_AllowanceTransferDetails_$903_storage_$dyn_storage_ptr",
														"typeString": "struct IAllowanceTransfer.AllowanceTransferDetails[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6966:53:7"
									},
									"returnParameters": {
										"id": 972,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7028:0:7"
									},
									"scope": 992,
									"src": "6945:84:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 974,
										"nodeType": "StructuredDocumentation",
										"src": "7035:167:7",
										"text": "@notice Enables performing a \"lockdown\" of the sender's Permit2 identity\n by batch revoking approvals\n @param approvals Array of approvals to revoke."
									},
									"functionSelector": "cc53287f",
									"id": 981,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "lockdown",
									"nameLocation": "7216:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 979,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "approvals",
												"nameLocation": "7253:9:7",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "7225:37:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenSpenderPair_$893_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct IAllowanceTransfer.TokenSpenderPair[]"
												},
												"typeName": {
													"baseType": {
														"id": 976,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 975,
															"name": "TokenSpenderPair",
															"nameLocations": [
																"7225:16:7"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 893,
															"src": "7225:16:7"
														},
														"referencedDeclaration": 893,
														"src": "7225:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenSpenderPair_$893_storage_ptr",
															"typeString": "struct IAllowanceTransfer.TokenSpenderPair"
														}
													},
													"id": 977,
													"nodeType": "ArrayTypeName",
													"src": "7225:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TokenSpenderPair_$893_storage_$dyn_storage_ptr",
														"typeString": "struct IAllowanceTransfer.TokenSpenderPair[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7224:39:7"
									},
									"returnParameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7272:0:7"
									},
									"scope": 992,
									"src": "7207:66:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 982,
										"nodeType": "StructuredDocumentation",
										"src": "7279:332:7",
										"text": "@notice Invalidate nonces for a given (token, spender) pair\n @param token The token to invalidate nonces for\n @param spender The spender to invalidate nonces for\n @param newNonce The new nonce to set. Invalidates all nonces less than it.\n @dev Can't invalidate more than 2**16 nonces per transaction."
									},
									"functionSelector": "65d9723c",
									"id": 991,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invalidateNonces",
									"nameLocation": "7625:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7650:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "7642:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7642:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7665:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "7657:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 985,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7657:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "newNonce",
												"nameLocation": "7681:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 991,
												"src": "7674:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint48",
													"typeString": "uint48"
												},
												"typeName": {
													"id": 987,
													"name": "uint48",
													"nodeType": "ElementaryTypeName",
													"src": "7674:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint48",
														"typeString": "uint48"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7641:49:7"
									},
									"returnParameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7699:0:7"
									},
									"scope": 992,
									"src": "7616:84:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 993,
							"src": "330:7372:7",
							"usedErrors": [
								792,
								797,
								800
							],
							"usedEvents": [
								813,
								826,
								841,
								850
							]
						}
					],
					"src": "32:7671:7"
				},
				"id": 7
			},
			"contracts/contracts/interfaces/IEIP712.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
					"exportedSymbols": {
						"IEIP712": [
							1000
						]
					},
					"id": 1001,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 994,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IEIP712",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1000,
							"linearizedBaseContracts": [
								1000
							],
							"name": "IEIP712",
							"nameLocation": "67:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "3644e515",
									"id": 999,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "90:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "106:2:8"
									},
									"returnParameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 999,
												"src": "132:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 996,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "132:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "131:9:8"
									},
									"scope": 1000,
									"src": "81:60:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1001,
							"src": "57:86:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:112:8"
				},
				"id": 8
			},
			"contracts/contracts/interfaces/IFeeManager.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IFeeManager.sol",
					"exportedSymbols": {
						"IFeeManager": [
							1037
						]
					},
					"id": 1038,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1002,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IFeeManager",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 1037,
							"linearizedBaseContracts": [
								1037
							],
							"name": "IFeeManager",
							"nameLocation": "70:11:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "89:102:9",
										"text": "@notice Get the current tuliaPool fee rate\n @return The tuliaPool fee rate in basis points"
									},
									"functionSelector": "26d03cd9",
									"id": 1008,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "gettuliaPoolFeeRate",
									"nameLocation": "206:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "225:2:9"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1008,
												"src": "251:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "251:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "250:9:9"
									},
									"scope": 1037,
									"src": "197:63:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1009,
										"nodeType": "StructuredDocumentation",
										"src": "268:108:9",
										"text": "@notice Set the tuliaPool fee rate\n @param newFeeRate The new tuliaPool fee rate in basis points"
									},
									"functionSelector": "24d8af8d",
									"id": 1014,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "settuliaPoolFeeRate",
									"nameLocation": "391:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "newFeeRate",
												"nameLocation": "419:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1014,
												"src": "411:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "411:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "410:20:9"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "439:0:9"
									},
									"scope": 1037,
									"src": "382:58:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1015,
										"nodeType": "StructuredDocumentation",
										"src": "448:102:9",
										"text": "@notice Get the current flashPool fee rate\n @return The flashPool fee rate in basis points"
									},
									"functionSelector": "053e755b",
									"id": 1020,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getflashPoolFeeRate",
									"nameLocation": "565:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1016,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "584:2:9"
									},
									"returnParameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "610:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1017,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "610:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "609:9:9"
									},
									"scope": 1037,
									"src": "556:63:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "627:108:9",
										"text": "@notice Set the flashPool fee rate\n @param newFeeRate The new flashPool fee rate in basis points"
									},
									"functionSelector": "369058bb",
									"id": 1026,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setflashPoolFeeRate",
									"nameLocation": "750:19:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "newFeeRate",
												"nameLocation": "778:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1026,
												"src": "770:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1022,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "770:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "769:20:9"
									},
									"returnParameters": {
										"id": 1025,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "798:0:9"
									},
									"scope": 1037,
									"src": "741:58:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1027,
										"nodeType": "StructuredDocumentation",
										"src": "807:136:9",
										"text": "@notice Event emitted when the tuliaPool fee rate is updated\n @param newFeeRate The new tuliaPool fee rate that has been set"
									},
									"eventSelector": "7319226f48bdce05a3e89ab188c3a70245772b46d6ffedcb9d05b6786bfaa8fc",
									"id": 1031,
									"name": "tuliaPoolFeeRateUpdated",
									"nameLocation": "955:23:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1029,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFeeRate",
												"nameLocation": "987:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "979:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "979:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "978:20:9"
									},
									"src": "949:50:9"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1032,
										"nodeType": "StructuredDocumentation",
										"src": "1007:136:9",
										"text": "@notice Event emitted when the flashPool fee rate is updated\n @param newFeeRate The new flashPool fee rate that has been set"
									},
									"eventSelector": "93785b15ebbc916d52986b4f3f53b719a4895974f421918b77407c81cd9dfbc8",
									"id": 1036,
									"name": "flashPoolFeeRateUpdated",
									"nameLocation": "1155:23:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1034,
												"indexed": false,
												"mutability": "mutable",
												"name": "newFeeRate",
												"nameLocation": "1187:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1036,
												"src": "1179:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1179:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1178:20:9"
									},
									"src": "1149:50:9"
								}
							],
							"scope": 1038,
							"src": "60:1142:9",
							"usedErrors": [],
							"usedEvents": [
								1031,
								1036
							]
						}
					],
					"src": "33:1171:9"
				},
				"id": 9
			},
			"contracts/contracts/interfaces/IPermit2.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/IPermit2.sol",
					"exportedSymbols": {
						"IAllowanceTransfer": [
							992
						],
						"IPermit2": [
							1049
						],
						"ISignatureTransfer": [
							1189
						]
					},
					"id": 1050,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1039,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:10"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/ISignatureTransfer.sol",
							"file": "./ISignatureTransfer.sol",
							"id": 1041,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1050,
							"sourceUnit": 1190,
							"src": "57:60:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1040,
										"name": "ISignatureTransfer",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1189,
										"src": "65:18:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IAllowanceTransfer.sol",
							"file": "./IAllowanceTransfer.sol",
							"id": 1043,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1050,
							"sourceUnit": 993,
							"src": "118:60:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1042,
										"name": "IAllowanceTransfer",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 992,
										"src": "126:18:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1045,
										"name": "ISignatureTransfer",
										"nameLocations": [
											"411:18:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1189,
										"src": "411:18:10"
									},
									"id": 1046,
									"nodeType": "InheritanceSpecifier",
									"src": "411:18:10"
								},
								{
									"baseName": {
										"id": 1047,
										"name": "IAllowanceTransfer",
										"nameLocations": [
											"431:18:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 992,
										"src": "431:18:10"
									},
									"id": 1048,
									"nodeType": "InheritanceSpecifier",
									"src": "431:18:10"
								}
							],
							"canonicalName": "IPermit2",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1044,
								"nodeType": "StructuredDocumentation",
								"src": "180:209:10",
								"text": "@notice Permit2 handles signature-based transfers in SignatureTransfer and allowance-based transfers in AllowanceTransfer.\n @dev Users must approve Permit2 before calling any of the transfer functions."
							},
							"fullyImplemented": false,
							"id": 1049,
							"linearizedBaseContracts": [
								1049,
								992,
								1189,
								1000
							],
							"name": "IPermit2",
							"nameLocation": "399:8:10",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 1050,
							"src": "389:158:10",
							"usedErrors": [
								792,
								797,
								800,
								1061,
								1064
							],
							"usedEvents": [
								813,
								826,
								841,
								850,
								1073
							]
						}
					],
					"src": "32:516:10"
				},
				"id": 10
			},
			"contracts/contracts/interfaces/ISignatureTransfer.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/interfaces/ISignatureTransfer.sol",
					"exportedSymbols": {
						"IEIP712": [
							1000
						],
						"ISignatureTransfer": [
							1189
						]
					},
					"id": 1190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1051,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IEIP712.sol",
							"file": "./IEIP712.sol",
							"id": 1053,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 1001,
							"src": "57:38:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1052,
										"name": "IEIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1000,
										"src": "65:7:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1055,
										"name": "IEIP712",
										"nameLocations": [
											"296:7:11"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1000,
										"src": "296:7:11"
									},
									"id": 1056,
									"nodeType": "InheritanceSpecifier",
									"src": "296:7:11"
								}
							],
							"canonicalName": "ISignatureTransfer",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1054,
								"nodeType": "StructuredDocumentation",
								"src": "97:167:11",
								"text": "@title SignatureTransfer\n @notice Handles ERC20 token transfers through signature based actions\n @dev Requires user's token approval on the Permit2 contract"
							},
							"fullyImplemented": false,
							"id": 1189,
							"linearizedBaseContracts": [
								1189,
								1000
							],
							"name": "ISignatureTransfer",
							"nameLocation": "274:18:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1057,
										"nodeType": "StructuredDocumentation",
										"src": "310:176:11",
										"text": "@notice Thrown when the requested amount for a transfer is larger than the permissioned amount\n @param maxAmount The maximum amount a spender can request to transfer"
									},
									"errorSelector": "3728b83d",
									"id": 1061,
									"name": "InvalidAmount",
									"nameLocation": "497:13:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "maxAmount",
												"nameLocation": "519:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1061,
												"src": "511:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "510:19:11"
									},
									"src": "491:39:11"
								},
								{
									"documentation": {
										"id": 1062,
										"nodeType": "StructuredDocumentation",
										"src": "536:261:11",
										"text": "@notice Thrown when the number of tokens permissioned to a spender does not match the number of tokens being transferred\n @dev If the spender does not need to transfer the number of tokens permitted, the spender can request amount 0 to be transferred"
									},
									"errorSelector": "ff633a38",
									"id": 1064,
									"name": "LengthMismatch",
									"nameLocation": "808:14:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "822:2:11"
									},
									"src": "802:23:11"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1065,
										"nodeType": "StructuredDocumentation",
										"src": "831:86:11",
										"text": "@notice Emits an event when the owner successfully invalidates an unordered nonce."
									},
									"eventSelector": "3704902f963766a4e561bbaab6e6cdc1b1dd12f6e9e99648da8843b3f46b918d",
									"id": 1073,
									"name": "UnorderedNonceInvalidation",
									"nameLocation": "928:26:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1072,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1067,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "971:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "955:21:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1066,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "955:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1069,
												"indexed": false,
												"mutability": "mutable",
												"name": "word",
												"nameLocation": "986:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "978:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1068,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "978:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1071,
												"indexed": false,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "1000:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1073,
												"src": "992:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1070,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "992:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "954:51:11"
									},
									"src": "922:84:11"
								},
								{
									"canonicalName": "ISignatureTransfer.TokenPermissions",
									"documentation": {
										"id": 1074,
										"nodeType": "StructuredDocumentation",
										"src": "1012:95:11",
										"text": "@notice The token and amount details for a transfer signed in the permit transfer signature"
									},
									"id": 1079,
									"members": [
										{
											"constant": false,
											"id": 1076,
											"mutability": "mutable",
											"name": "token",
											"nameLocation": "1185:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1079,
											"src": "1177:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1075,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1177:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1078,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1256:6:11",
											"nodeType": "VariableDeclaration",
											"scope": 1079,
											"src": "1248:14:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1077,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1248:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "TokenPermissions",
									"nameLocation": "1119:16:11",
									"nodeType": "StructDefinition",
									"scope": 1189,
									"src": "1112:157:11",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitTransferFrom",
									"documentation": {
										"id": 1080,
										"nodeType": "StructuredDocumentation",
										"src": "1275:65:11",
										"text": "@notice The signed permit message for a single token transfer"
									},
									"id": 1088,
									"members": [
										{
											"constant": false,
											"id": 1083,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "1398:9:11",
											"nodeType": "VariableDeclaration",
											"scope": 1088,
											"src": "1381:26:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_TokenPermissions_$1079_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions"
											},
											"typeName": {
												"id": 1082,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1081,
													"name": "TokenPermissions",
													"nameLocations": [
														"1381:16:11"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1079,
													"src": "1381:16:11"
												},
												"referencedDeclaration": 1079,
												"src": "1381:16:11",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_TokenPermissions_$1079_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1085,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "1514:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1088,
											"src": "1506:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1084,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1506:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1087,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "1581:8:11",
											"nodeType": "VariableDeclaration",
											"scope": 1088,
											"src": "1573:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1086,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1573:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitTransferFrom",
									"nameLocation": "1352:18:11",
									"nodeType": "StructDefinition",
									"scope": 1189,
									"src": "1345:251:11",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.SignatureTransferDetails",
									"documentation": {
										"id": 1089,
										"nodeType": "StructuredDocumentation",
										"src": "1602:266:11",
										"text": "@notice Specifies the recipient address and amount for batched transfers.\n @dev Recipients and amounts correspond to the index of the signed token permissions array.\n @dev Reverts if the requested amount is greater than the permitted signed amount."
									},
									"id": 1094,
									"members": [
										{
											"constant": false,
											"id": 1091,
											"mutability": "mutable",
											"name": "to",
											"nameLocation": "1952:2:11",
											"nodeType": "VariableDeclaration",
											"scope": 1094,
											"src": "1944:10:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1090,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1944:7:11",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1093,
											"mutability": "mutable",
											"name": "requestedAmount",
											"nameLocation": "2008:15:11",
											"nodeType": "VariableDeclaration",
											"scope": 1094,
											"src": "2000:23:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1092,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2000:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "SignatureTransferDetails",
									"nameLocation": "1880:24:11",
									"nodeType": "StructDefinition",
									"scope": 1189,
									"src": "1873:157:11",
									"visibility": "public"
								},
								{
									"canonicalName": "ISignatureTransfer.PermitBatchTransferFrom",
									"documentation": {
										"id": 1095,
										"nodeType": "StructuredDocumentation",
										"src": "2036:243:11",
										"text": "@notice Used to reconstruct the signed permit message for multiple token transfers\n @dev Do not need to pass in spender address as it is required that it is msg.sender\n @dev Note that a user still signs over a spender address"
									},
									"id": 1104,
									"members": [
										{
											"constant": false,
											"id": 1099,
											"mutability": "mutable",
											"name": "permitted",
											"nameLocation": "2417:9:11",
											"nodeType": "VariableDeclaration",
											"scope": 1104,
											"src": "2398:28:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$1079_storage_$dyn_storage_ptr",
												"typeString": "struct ISignatureTransfer.TokenPermissions[]"
											},
											"typeName": {
												"baseType": {
													"id": 1097,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1096,
														"name": "TokenPermissions",
														"nameLocations": [
															"2398:16:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1079,
														"src": "2398:16:11"
													},
													"referencedDeclaration": 1079,
													"src": "2398:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_TokenPermissions_$1079_storage_ptr",
														"typeString": "struct ISignatureTransfer.TokenPermissions"
													}
												},
												"id": 1098,
												"nodeType": "ArrayTypeName",
												"src": "2398:18:11",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenPermissions_$1079_storage_$dyn_storage_ptr",
													"typeString": "struct ISignatureTransfer.TokenPermissions[]"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1101,
											"mutability": "mutable",
											"name": "nonce",
											"nameLocation": "2533:5:11",
											"nodeType": "VariableDeclaration",
											"scope": 1104,
											"src": "2525:13:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1100,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2525:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1103,
											"mutability": "mutable",
											"name": "deadline",
											"nameLocation": "2600:8:11",
											"nodeType": "VariableDeclaration",
											"scope": 1104,
											"src": "2592:16:11",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1102,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2592:7:11",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "PermitBatchTransferFrom",
									"nameLocation": "2291:23:11",
									"nodeType": "StructDefinition",
									"scope": 1189,
									"src": "2284:331:11",
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 1105,
										"nodeType": "StructuredDocumentation",
										"src": "2621:483:11",
										"text": "@notice A map from token owner address and a caller specified word index to a bitmap. Used to set bits in the bitmap to prevent against signature replay protection\n @dev Uses unordered nonces so that permit messages do not need to be spent in a certain order\n @dev The mapping is indexed first by the token owner, then by an index specified in the nonce\n @dev It returns a uint256 bitmap\n @dev The index, or wordPosition is capped at type(uint248).max"
									},
									"functionSelector": "4fe02b44",
									"id": 1114,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonceBitmap",
									"nameLocation": "3118:11:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "3130:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3130:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1109,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "3139:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3139:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3129:18:11"
									},
									"returnParameters": {
										"id": 1113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "3171:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1111,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3171:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3170:9:11"
									},
									"scope": 1189,
									"src": "3109:71:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1115,
										"nodeType": "StructuredDocumentation",
										"src": "3186:413:11",
										"text": "@notice Transfers a token using a signed permit message\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param signature The signature to verify"
									},
									"functionSelector": "30f28b7a",
									"id": 1128,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "3613:18:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "3667:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "3641:32:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$1088_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 1117,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1116,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"3641:18:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1088,
														"src": "3641:18:11"
													},
													"referencedDeclaration": 1088,
													"src": "3641:18:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$1088_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "3717:15:11",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "3683:49:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 1120,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1119,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"3683:24:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1094,
														"src": "3683:24:11"
													},
													"referencedDeclaration": 1094,
													"src": "3683:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3750:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "3742:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3742:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3780:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1128,
												"src": "3765:24:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1124,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3765:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3631:164:11"
									},
									"returnParameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3804:0:11"
									},
									"scope": 1189,
									"src": "3604:201:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1129,
										"nodeType": "StructuredDocumentation",
										"src": "3811:815:11",
										"text": "@notice Transfers a token using a signed permit message\n @notice Includes extra data provided by the caller to verify signature over\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @dev Reverts if the requested amount is greater than the permitted signed amount\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails The spender's requested transfer details for the permitted token\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "137c29fe",
									"id": 1146,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "4640:25:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1144,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "4701:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4675:32:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitTransferFrom_$1088_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitTransferFrom"
												},
												"typeName": {
													"id": 1131,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1130,
														"name": "PermitTransferFrom",
														"nameLocations": [
															"4675:18:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1088,
														"src": "4675:18:11"
													},
													"referencedDeclaration": 1088,
													"src": "4675:18:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitTransferFrom_$1088_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "4751:15:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4717:49:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
												},
												"typeName": {
													"id": 1134,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1133,
														"name": "SignatureTransferDetails",
														"nameLocations": [
															"4717:24:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1094,
														"src": "4717:24:11"
													},
													"referencedDeclaration": 1094,
													"src": "4717:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1137,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4784:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4776:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4776:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "4807:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4799:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1138,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4799:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1141,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "4840:17:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4824:33:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1140,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4824:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1143,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4882:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1146,
												"src": "4867:24:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1142,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4867:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4665:232:11"
									},
									"returnParameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4906:0:11"
									},
									"scope": 1189,
									"src": "4631:276:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1147,
										"nodeType": "StructuredDocumentation",
										"src": "4913:335:11",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param signature The signature to verify"
									},
									"functionSelector": "edd9444b",
									"id": 1161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitTransferFrom",
									"nameLocation": "5262:18:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1150,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "5321:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "5290:37:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$1104_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 1149,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1148,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"5290:23:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1104,
														"src": "5290:23:11"
													},
													"referencedDeclaration": 1104,
													"src": "5290:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$1104_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "5373:15:11",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "5337:51:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$1094_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 1152,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1151,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"5337:24:11"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1094,
															"src": "5337:24:11"
														},
														"referencedDeclaration": 1094,
														"src": "5337:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 1153,
													"nodeType": "ArrayTypeName",
													"src": "5337:26:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$1094_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5406:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "5398:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1155,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5398:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "5436:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "5421:24:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1157,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5421:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5280:171:11"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5460:0:11"
									},
									"scope": 1189,
									"src": "5253:208:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1162,
										"nodeType": "StructuredDocumentation",
										"src": "5467:737:11",
										"text": "@notice Transfers multiple tokens using a signed permit message\n @dev The witness type string must follow EIP712 ordering of nested structs and must include the TokenPermissions type definition\n @notice Includes extra data provided by the caller to verify signature over\n @param permit The permit data signed over by the owner\n @param owner The owner of the tokens to transfer\n @param transferDetails Specifies the recipient and requested amount for the token transfer\n @param witness Extra data to include when checking the user signature\n @param witnessTypeString The EIP-712 type definition for remaining string stub of the typehash\n @param signature The signature to verify"
									},
									"functionSelector": "fe8ec1a7",
									"id": 1180,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permitWitnessTransferFrom",
									"nameLocation": "6218:25:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "permit",
												"nameLocation": "6284:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6253:37:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$1104_memory_ptr",
													"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
												},
												"typeName": {
													"id": 1164,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1163,
														"name": "PermitBatchTransferFrom",
														"nameLocations": [
															"6253:23:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1104,
														"src": "6253:23:11"
													},
													"referencedDeclaration": 1104,
													"src": "6253:23:11",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_PermitBatchTransferFrom_$1104_storage_ptr",
														"typeString": "struct ISignatureTransfer.PermitBatchTransferFrom"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "transferDetails",
												"nameLocation": "6336:15:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6300:51:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$1094_calldata_ptr_$dyn_calldata_ptr",
													"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
												},
												"typeName": {
													"baseType": {
														"id": 1167,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 1166,
															"name": "SignatureTransferDetails",
															"nameLocations": [
																"6300:24:11"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 1094,
															"src": "6300:24:11"
														},
														"referencedDeclaration": 1094,
														"src": "6300:24:11",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_SignatureTransferDetails_$1094_storage_ptr",
															"typeString": "struct ISignatureTransfer.SignatureTransferDetails"
														}
													},
													"id": 1168,
													"nodeType": "ArrayTypeName",
													"src": "6300:26:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_SignatureTransferDetails_$1094_storage_$dyn_storage_ptr",
														"typeString": "struct ISignatureTransfer.SignatureTransferDetails[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6369:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6361:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6361:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "witness",
												"nameLocation": "6392:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6384:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1172,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6384:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "witnessTypeString",
												"nameLocation": "6425:17:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6409:33:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1174,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6409:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "6467:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1180,
												"src": "6452:24:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1176,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6452:5:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6243:239:11"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6491:0:11"
									},
									"scope": 1189,
									"src": "6209:283:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1181,
										"nodeType": "StructuredDocumentation",
										"src": "6498:294:11",
										"text": "@notice Invalidates the bits specified in mask for the bitmap at the word position\n @dev The wordPos is maxed at type(uint248).max\n @param wordPos A number to index the nonceBitmap at\n @param mask A bitmap masked against msg.sender's current bitmap at the word position"
									},
									"functionSelector": "3ff9dcb1",
									"id": 1188,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "invalidateUnorderedNonces",
									"nameLocation": "6806:25:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "wordPos",
												"nameLocation": "6840:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "6832:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6832:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1185,
												"mutability": "mutable",
												"name": "mask",
												"nameLocation": "6857:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "6849:12:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6849:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6831:31:11"
									},
									"returnParameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6871:0:11"
									},
									"scope": 1189,
									"src": "6797:75:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1190,
							"src": "264:6610:11",
							"usedErrors": [
								1061,
								1064
							],
							"usedEvents": [
								1073
							]
						}
					],
					"src": "32:6843:11"
				},
				"id": 11
			},
			"contracts/contracts/protocol/TuliaFlashPool.sol": {
				"ast": {
					"absolutePath": "contracts/contracts/protocol/TuliaFlashPool.sol",
					"exportedSymbols": {
						"Address": [
							780
						],
						"IAllowanceTransfer": [
							992
						],
						"IERC20": [
							201
						],
						"IERC20Permit": [
							237
						],
						"IERC3156FlashBorrower": [
							19
						],
						"IERC3156FlashLender": [
							58
						],
						"IFeeManager": [
							1037
						],
						"IPermit2": [
							1049
						],
						"ISignatureTransfer": [
							1189
						],
						"ReentrancyGuard": [
							123
						],
						"SafeERC20": [
							527
						],
						"TuliaFlashPool": [
							1484
						]
					},
					"id": 1485,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1191,
							"literals": [
								"solidity",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 202,
							"src": "60:56:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1193,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 528,
							"src": "118:65:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1194,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 124,
							"src": "185:62:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
							"file": "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol",
							"id": 1195,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 59,
							"src": "249:68:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
							"file": "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol",
							"id": 1196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 20,
							"src": "319:70:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IPermit2.sol",
							"file": "../interfaces/IPermit2.sol",
							"id": 1197,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 1050,
							"src": "391:36:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/contracts/interfaces/IFeeManager.sol",
							"file": "../interfaces/IFeeManager.sol",
							"id": 1198,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1485,
							"sourceUnit": 1038,
							"src": "429:39:12",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1200,
										"name": "IERC3156FlashLender",
										"nameLocations": [
											"678:19:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 58,
										"src": "678:19:12"
									},
									"id": 1201,
									"nodeType": "InheritanceSpecifier",
									"src": "678:19:12"
								},
								{
									"baseName": {
										"id": 1202,
										"name": "ReentrancyGuard",
										"nameLocations": [
											"699:15:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 123,
										"src": "699:15:12"
									},
									"id": 1203,
									"nodeType": "InheritanceSpecifier",
									"src": "699:15:12"
								}
							],
							"canonicalName": "TuliaFlashPool",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1199,
								"nodeType": "StructuredDocumentation",
								"src": "474:177:12",
								"text": "@title TuliaFlashPool\n @dev Implements flash loan functionalities with integrated fee management.\n This contract allows issuing flash loans backed by ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 1484,
							"linearizedBaseContracts": [
								1484,
								123,
								58
							],
							"name": "TuliaFlashPool",
							"nameLocation": "660:14:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1207,
									"libraryName": {
										"id": 1204,
										"name": "SafeERC20",
										"nameLocations": [
											"728:9:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 527,
										"src": "728:9:12"
									},
									"nodeType": "UsingForDirective",
									"src": "722:27:12",
									"typeName": {
										"id": 1206,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1205,
											"name": "IERC20",
											"nameLocations": [
												"742:6:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 201,
											"src": "742:6:12"
										},
										"referencedDeclaration": 201,
										"src": "742:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$201",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 1208,
										"nodeType": "StructuredDocumentation",
										"src": "757:44:12",
										"text": "@notice ERC20 asset used for flash loans"
									},
									"functionSelector": "38d52e0f",
									"id": 1211,
									"mutability": "mutable",
									"name": "asset",
									"nameLocation": "821:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 1484,
									"src": "807:19:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20_$201",
										"typeString": "contract IERC20"
									},
									"typeName": {
										"id": 1210,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1209,
											"name": "IERC20",
											"nameLocations": [
												"807:6:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 201,
											"src": "807:6:12"
										},
										"referencedDeclaration": 201,
										"src": "807:6:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$201",
											"typeString": "contract IERC20"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1212,
										"nodeType": "StructuredDocumentation",
										"src": "835:70:12",
										"text": "@notice Permit2 contract utilized for permissioned token transfers"
									},
									"functionSelector": "12261ee7",
									"id": 1215,
									"mutability": "mutable",
									"name": "permit2",
									"nameLocation": "927:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 1484,
									"src": "911:23:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IPermit2_$1049",
										"typeString": "contract IPermit2"
									},
									"typeName": {
										"id": 1214,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1213,
											"name": "IPermit2",
											"nameLocations": [
												"911:8:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1049,
											"src": "911:8:12"
										},
										"referencedDeclaration": 1049,
										"src": "911:8:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IPermit2_$1049",
											"typeString": "contract IPermit2"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1216,
										"nodeType": "StructuredDocumentation",
										"src": "943:59:12",
										"text": "@notice Contract managing the fee rates for flash loans"
									},
									"functionSelector": "d0fb0203",
									"id": 1219,
									"mutability": "mutable",
									"name": "feeManager",
									"nameLocation": "1027:10:12",
									"nodeType": "VariableDeclaration",
									"scope": 1484,
									"src": "1008:29:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IFeeManager_$1037",
										"typeString": "contract IFeeManager"
									},
									"typeName": {
										"id": 1218,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1217,
											"name": "IFeeManager",
											"nameLocations": [
												"1008:11:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1037,
											"src": "1008:11:12"
										},
										"referencedDeclaration": 1037,
										"src": "1008:11:12",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IFeeManager_$1037",
											"typeString": "contract IFeeManager"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1220,
										"nodeType": "StructuredDocumentation",
										"src": "1046:64:12",
										"text": "@notice Initial fee rate for flash loans issued by this pool"
									},
									"functionSelector": "8c9f305f",
									"id": 1222,
									"mutability": "mutable",
									"name": "flashLoanFeeRate",
									"nameLocation": "1131:16:12",
									"nodeType": "VariableDeclaration",
									"scope": 1484,
									"src": "1116:31:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1221,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1116:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "TuliaFlashPool.PoolState",
									"documentation": {
										"id": 1223,
										"nodeType": "StructuredDocumentation",
										"src": "1156:51:12",
										"text": "@notice Enum representing the state of the pool"
									},
									"id": 1227,
									"members": [
										{
											"id": 1224,
											"name": "IDLE",
											"nameLocation": "1230:4:12",
											"nodeType": "EnumValue",
											"src": "1230:4:12"
										},
										{
											"id": 1225,
											"name": "AWAITING_BORROWER",
											"nameLocation": "1236:17:12",
											"nodeType": "EnumValue",
											"src": "1236:17:12"
										},
										{
											"id": 1226,
											"name": "ACTIVE",
											"nameLocation": "1255:6:12",
											"nodeType": "EnumValue",
											"src": "1255:6:12"
										}
									],
									"name": "PoolState",
									"nameLocation": "1218:9:12",
									"nodeType": "EnumDefinition",
									"src": "1213:50:12"
								},
								{
									"constant": false,
									"functionSelector": "c19d93fb",
									"id": 1230,
									"mutability": "mutable",
									"name": "state",
									"nameLocation": "1286:5:12",
									"nodeType": "VariableDeclaration",
									"scope": 1484,
									"src": "1269:22:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_enum$_PoolState_$1227",
										"typeString": "enum TuliaFlashPool.PoolState"
									},
									"typeName": {
										"id": 1229,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1228,
											"name": "PoolState",
											"nameLocations": [
												"1269:9:12"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1227,
											"src": "1269:9:12"
										},
										"referencedDeclaration": 1227,
										"src": "1269:9:12",
										"typeDescriptions": {
											"typeIdentifier": "t_enum$_PoolState_$1227",
											"typeString": "enum TuliaFlashPool.PoolState"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1266,
										"nodeType": "Block",
										"src": "1832:177:12",
										"statements": [
											{
												"expression": {
													"id": 1247,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1245,
														"name": "asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1211,
														"src": "1843:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$201",
															"typeString": "contract IERC20"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1246,
														"name": "_asset",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1234,
														"src": "1851:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20_$201",
															"typeString": "contract IERC20"
														}
													},
													"src": "1843:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"id": 1248,
												"nodeType": "ExpressionStatement",
												"src": "1843:14:12"
											},
											{
												"expression": {
													"id": 1251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1249,
														"name": "permit2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1215,
														"src": "1868:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$1049",
															"typeString": "contract IPermit2"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1250,
														"name": "_permit2",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1237,
														"src": "1878:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IPermit2_$1049",
															"typeString": "contract IPermit2"
														}
													},
													"src": "1868:18:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$1049",
														"typeString": "contract IPermit2"
													}
												},
												"id": 1252,
												"nodeType": "ExpressionStatement",
												"src": "1868:18:12"
											},
											{
												"expression": {
													"id": 1255,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1253,
														"name": "feeManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1219,
														"src": "1897:10:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IFeeManager_$1037",
															"typeString": "contract IFeeManager"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1254,
														"name": "_feeManager",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "1910:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IFeeManager_$1037",
															"typeString": "contract IFeeManager"
														}
													},
													"src": "1897:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFeeManager_$1037",
														"typeString": "contract IFeeManager"
													}
												},
												"id": 1256,
												"nodeType": "ExpressionStatement",
												"src": "1897:24:12"
											},
											{
												"expression": {
													"id": 1259,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1257,
														"name": "flashLoanFeeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1222,
														"src": "1932:16:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1258,
														"name": "_flashLoanFeeRate",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1242,
														"src": "1951:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1932:36:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1260,
												"nodeType": "ExpressionStatement",
												"src": "1932:36:12"
											},
											{
												"expression": {
													"id": 1264,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1261,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1230,
														"src": "1979:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_PoolState_$1227",
															"typeString": "enum TuliaFlashPool.PoolState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1262,
															"name": "PoolState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1227,
															"src": "1987:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_PoolState_$1227_$",
																"typeString": "type(enum TuliaFlashPool.PoolState)"
															}
														},
														"id": 1263,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1997:4:12",
														"memberName": "IDLE",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1224,
														"src": "1987:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_PoolState_$1227",
															"typeString": "enum TuliaFlashPool.PoolState"
														}
													},
													"src": "1979:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolState_$1227",
														"typeString": "enum TuliaFlashPool.PoolState"
													}
												},
												"id": 1265,
												"nodeType": "ExpressionStatement",
												"src": "1979:22:12"
											}
										]
									},
									"documentation": {
										"id": 1231,
										"nodeType": "StructuredDocumentation",
										"src": "1300:383:12",
										"text": "@notice Constructs the TuliaFlashPool lending pool\n @param _asset The ERC20 token asset used for flash loans\n @param _permit2 The Permit2 contract utilized for permissioned token transfers\n @param _feeManager The contract managing the fee rates for the flash loans\n @param _flashLoanFeeRate The initial fee rate for flash loans issued by this pool"
									},
									"id": 1267,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1234,
												"mutability": "mutable",
												"name": "_asset",
												"nameLocation": "1718:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "1711:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$201",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1233,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1232,
														"name": "IERC20",
														"nameLocations": [
															"1711:6:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 201,
														"src": "1711:6:12"
													},
													"referencedDeclaration": 201,
													"src": "1711:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$201",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "_permit2",
												"nameLocation": "1745:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "1736:17:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IPermit2_$1049",
													"typeString": "contract IPermit2"
												},
												"typeName": {
													"id": 1236,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1235,
														"name": "IPermit2",
														"nameLocations": [
															"1736:8:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1049,
														"src": "1736:8:12"
													},
													"referencedDeclaration": 1049,
													"src": "1736:8:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IPermit2_$1049",
														"typeString": "contract IPermit2"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1240,
												"mutability": "mutable",
												"name": "_feeManager",
												"nameLocation": "1777:11:12",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "1765:23:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IFeeManager_$1037",
													"typeString": "contract IFeeManager"
												},
												"typeName": {
													"id": 1239,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1238,
														"name": "IFeeManager",
														"nameLocations": [
															"1765:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1037,
														"src": "1765:11:12"
													},
													"referencedDeclaration": 1037,
													"src": "1765:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IFeeManager_$1037",
														"typeString": "contract IFeeManager"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1242,
												"mutability": "mutable",
												"name": "_flashLoanFeeRate",
												"nameLocation": "1807:17:12",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "1799:25:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1241,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1799:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1700:131:12"
									},
									"returnParameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1832:0:12"
									},
									"scope": 1484,
									"src": "1689:320:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										32
									],
									"body": {
										"id": 1292,
										"nodeType": "Block",
										"src": "2309:86:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1281,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1276,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1270,
															"src": "2327:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"id": 1279,
																	"name": "asset",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1211,
																	"src": "2344:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$201",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 1278,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2336:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1277,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2336:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2336:14:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "2327:23:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "30",
														"id": 1289,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2386:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2327:60:12",
													"trueExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1286,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2377:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																			"typeString": "contract TuliaFlashPool"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																			"typeString": "contract TuliaFlashPool"
																		}
																	],
																	"id": 1285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2369:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1284,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2369:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1287,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2369:13:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 1282,
																"name": "asset",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1211,
																"src": "2353:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$201",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2359:9:12",
															"memberName": "balanceOf",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 158,
															"src": "2353:15:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address) view external returns (uint256)"
															}
														},
														"id": 1288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2353:30:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1275,
												"id": 1291,
												"nodeType": "Return",
												"src": "2320:67:12"
											}
										]
									},
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "2017:210:12",
										"text": "@notice Returns the maximum loanable amount of the asset\n @param token The ERC20 token address for which the max loan amount is queried\n @return The maximum amount available for a flash loan"
									},
									"functionSelector": "613255ab",
									"id": 1293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "maxFlashLoan",
									"nameLocation": "2242:12:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1272,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2282:8:12"
									},
									"parameters": {
										"id": 1271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1270,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2263:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2255:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1269,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2255:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2254:15:12"
									},
									"returnParameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1293,
												"src": "2300:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1273,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2300:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2299:9:12"
									},
									"scope": 1484,
									"src": "2233:162:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										42
									],
									"body": {
										"id": 1338,
										"nodeType": "Block",
										"src": "2721:259:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1305,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1296,
																"src": "2740:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1308,
																		"name": "asset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1211,
																		"src": "2757:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 1307,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2749:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1306,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2749:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1309,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2749:14:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2740:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e737570706f7274656420746f6b656e",
															"id": 1311,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2765:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_35557054842e6bac2d5677ccc2aeb32b43981809d9c333559406d70b18885a3e",
																"typeString": "literal_string \"Unsupported token\""
															},
															"value": "Unsupported token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_35557054842e6bac2d5677ccc2aeb32b43981809d9c333559406d70b18885a3e",
																"typeString": "literal_string \"Unsupported token\""
															}
														],
														"id": 1304,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2732:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2732:53:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1313,
												"nodeType": "ExpressionStatement",
												"src": "2732:53:12"
											},
											{
												"assignments": [
													1315
												],
												"declarations": [
													{
														"constant": false,
														"id": 1315,
														"mutability": "mutable",
														"name": "userFee",
														"nameLocation": "2804:7:12",
														"nodeType": "VariableDeclaration",
														"scope": 1338,
														"src": "2796:15:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1314,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2796:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1322,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1316,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1298,
																	"src": "2815:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1317,
																	"name": "flashLoanFeeRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1222,
																	"src": "2824:16:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2815:25:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1319,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2814:27:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3130303030",
														"id": 1320,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2844:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10000_by_1",
															"typeString": "int_const 10000"
														},
														"value": "10000"
													},
													"src": "2814:35:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2796:53:12"
											},
											{
												"assignments": [
													1324
												],
												"declarations": [
													{
														"constant": false,
														"id": 1324,
														"mutability": "mutable",
														"name": "protocolFee",
														"nameLocation": "2868:11:12",
														"nodeType": "VariableDeclaration",
														"scope": 1338,
														"src": "2860:19:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1323,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2860:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1333,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1329,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1325,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1298,
																	"src": "2883:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"id": 1326,
																			"name": "feeManager",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1219,
																			"src": "2892:10:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IFeeManager_$1037",
																				"typeString": "contract IFeeManager"
																			}
																		},
																		"id": 1327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2903:19:12",
																		"memberName": "getflashPoolFeeRate",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1020,
																		"src": "2892:30:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																			"typeString": "function () view external returns (uint256)"
																		}
																	},
																	"id": 1328,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2892:32:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2883:41:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1330,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2882:43:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"hexValue": "3130303030",
														"id": 1331,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2928:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_10000_by_1",
															"typeString": "int_const 10000"
														},
														"value": "10000"
													},
													"src": "2882:51:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2860:73:12"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1334,
														"name": "userFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "2951:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1335,
														"name": "protocolFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1324,
														"src": "2961:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2951:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1303,
												"id": 1337,
												"nodeType": "Return",
												"src": "2944:28:12"
											}
										]
									},
									"documentation": {
										"id": 1294,
										"nodeType": "StructuredDocumentation",
										"src": "2403:224:12",
										"text": "@notice Calculates the flash loan fee for a given loan amount\n @param token The ERC20 token for which the fee is calculated\n @param amount The amount of the loan\n @return The calculated fee amount"
									},
									"functionSelector": "d9d98ce4",
									"id": 1339,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "flashFee",
									"nameLocation": "2642:8:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1300,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2694:8:12"
									},
									"parameters": {
										"id": 1299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2659:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2651:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2651:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1298,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2674:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2666:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1297,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2666:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2650:31:12"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1339,
												"src": "2712:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:9:12"
									},
									"scope": 1484,
									"src": "2633:347:12",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										57
									],
									"body": {
										"id": 1364,
										"nodeType": "Block",
										"src": "3618:74:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1358,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1343,
															"src": "3654:8:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																"typeString": "contract IERC3156FlashBorrower"
															}
														},
														{
															"id": 1359,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1345,
															"src": "3664:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1360,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1347,
															"src": "3671:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1361,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1349,
															"src": "3679:4:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																"typeString": "contract IERC3156FlashBorrower"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 1357,
														"name": "_executeFlashLoan",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1483,
														"src": "3636:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC3156FlashBorrower_$19_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC3156FlashBorrower,address,uint256,bytes calldata) returns (bool)"
														}
													},
													"id": 1362,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3636:48:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1356,
												"id": 1363,
												"nodeType": "Return",
												"src": "3629:55:12"
											}
										]
									},
									"documentation": {
										"id": 1340,
										"nodeType": "StructuredDocumentation",
										"src": "2988:432:12",
										"text": "@notice Initiates a flash loan transaction\n @param receiver The borrower contract that must implement the IERC3156FlashBorrower interface\n @param token The ERC20 token to be borrowed\n @param amount The amount of tokens to borrow\n @param data Arbitrary data passed to the borrower's `onFlashLoan` method\n @return true if the flash loan is paid back successfully within the same transaction"
									},
									"functionSelector": "5cffe9de",
									"id": 1365,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1353,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1352,
												"name": "nonReentrant",
												"nameLocations": [
													"3590:12:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 88,
												"src": "3590:12:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "3590:12:12"
										}
									],
									"name": "flashLoan",
									"nameLocation": "3435:9:12",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1351,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3581:8:12"
									},
									"parameters": {
										"id": 1350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1343,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3477:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3455:30:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
													"typeString": "contract IERC3156FlashBorrower"
												},
												"typeName": {
													"id": 1342,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1341,
														"name": "IERC3156FlashBorrower",
														"nameLocations": [
															"3455:21:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 19,
														"src": "3455:21:12"
													},
													"referencedDeclaration": 19,
													"src": "3455:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
														"typeString": "contract IERC3156FlashBorrower"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3504:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3496:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3496:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3528:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3520:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3520:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1349,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3560:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3545:19:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1348,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3545:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3444:127:12"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1365,
												"src": "3612:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1354,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3612:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3611:6:12"
									},
									"scope": 1484,
									"src": "3426:266:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1482,
										"nodeType": "Block",
										"src": "4299:800:12",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1386,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1381,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1371,
																"src": "4318:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"id": 1384,
																		"name": "asset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1211,
																		"src": "4335:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	],
																	"id": 1383,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4327:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1382,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4327:7:12",
																		"typeDescriptions": {}
																	}
																},
																"id": 1385,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4327:14:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4318:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "556e737570706f7274656420746f6b656e",
															"id": 1387,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4343:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_35557054842e6bac2d5677ccc2aeb32b43981809d9c333559406d70b18885a3e",
																"typeString": "literal_string \"Unsupported token\""
															},
															"value": "Unsupported token"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_35557054842e6bac2d5677ccc2aeb32b43981809d9c333559406d70b18885a3e",
																"typeString": "literal_string \"Unsupported token\""
															}
														],
														"id": 1380,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4310:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4310:53:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1389,
												"nodeType": "ExpressionStatement",
												"src": "4310:53:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_enum$_PoolState_$1227",
																"typeString": "enum TuliaFlashPool.PoolState"
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1391,
																"name": "state",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1230,
																"src": "4382:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_PoolState_$1227",
																	"typeString": "enum TuliaFlashPool.PoolState"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 1392,
																	"name": "PoolState",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1227,
																	"src": "4391:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_PoolState_$1227_$",
																		"typeString": "type(enum TuliaFlashPool.PoolState)"
																	}
																},
																"id": 1393,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4401:4:12",
																"memberName": "IDLE",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1224,
																"src": "4391:14:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_PoolState_$1227",
																	"typeString": "enum TuliaFlashPool.PoolState"
																}
															},
															"src": "4382:23:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466c617368206c6f616e206e6f7420617661696c61626c65",
															"id": 1395,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4407:26:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c1db526d6321ace3efb6ff8bb238026102a12f5a1b89798615edebb834de8780",
																"typeString": "literal_string \"Flash loan not available\""
															},
															"value": "Flash loan not available"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c1db526d6321ace3efb6ff8bb238026102a12f5a1b89798615edebb834de8780",
																"typeString": "literal_string \"Flash loan not available\""
															}
														],
														"id": 1390,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4374:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4374:60:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1397,
												"nodeType": "ExpressionStatement",
												"src": "4374:60:12"
											},
											{
												"assignments": [
													1399
												],
												"declarations": [
													{
														"constant": false,
														"id": 1399,
														"mutability": "mutable",
														"name": "totalFee",
														"nameLocation": "4455:8:12",
														"nodeType": "VariableDeclaration",
														"scope": 1482,
														"src": "4447:16:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1398,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4447:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1404,
												"initialValue": {
													"arguments": [
														{
															"id": 1401,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "4475:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1402,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1373,
															"src": "4482:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1400,
														"name": "flashFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1339,
														"src": "4466:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (address,uint256) view returns (uint256)"
														}
													},
													"id": 1403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4466:23:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4447:42:12"
											},
											{
												"assignments": [
													1406
												],
												"declarations": [
													{
														"constant": false,
														"id": 1406,
														"mutability": "mutable",
														"name": "balanceBefore",
														"nameLocation": "4508:13:12",
														"nodeType": "VariableDeclaration",
														"scope": 1482,
														"src": "4500:21:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1405,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4500:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1414,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1411,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4548:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																		"typeString": "contract TuliaFlashPool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																		"typeString": "contract TuliaFlashPool"
																	}
																],
																"id": 1410,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4540:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1409,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4540:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4540:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1407,
															"name": "asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1211,
															"src": "4524:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														"id": 1408,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4530:9:12",
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 158,
														"src": "4524:15:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4524:30:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4500:54:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1420,
																	"name": "receiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1369,
																	"src": "4594:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																],
																"id": 1419,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4586:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1418,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4586:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4586:17:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1422,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1373,
															"src": "4605:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1415,
															"name": "asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1211,
															"src": "4567:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														"id": 1417,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4573:12:12",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 287,
														"src": "4567:18:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$201_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4567:45:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1424,
												"nodeType": "ExpressionStatement",
												"src": "4567:45:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1428,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "4668:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1429,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "4672:6:12",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "4668:10:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1430,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1371,
																		"src": "4680:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1431,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1373,
																		"src": "4687:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1432,
																		"name": "totalFee",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1399,
																		"src": "4695:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1433,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1375,
																		"src": "4705:4:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_calldata_ptr",
																			"typeString": "bytes calldata"
																		}
																	],
																	"expression": {
																		"id": 1426,
																		"name": "receiver",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1369,
																		"src": "4647:8:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																			"typeString": "contract IERC3156FlashBorrower"
																		}
																	},
																	"id": 1427,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4656:11:12",
																	"memberName": "onFlashLoan",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 18,
																	"src": "4647:20:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (address,address,uint256,uint256,bytes memory) external returns (bytes32)"
																	}
																},
																"id": 1434,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4647:63:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "45524333313536466c617368426f72726f7765722e6f6e466c6173684c6f616e",
																		"id": 1436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4724:34:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9",
																			"typeString": "literal_string \"ERC3156FlashBorrower.onFlashLoan\""
																		},
																		"value": "ERC3156FlashBorrower.onFlashLoan"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_stringliteral_439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd9",
																			"typeString": "literal_string \"ERC3156FlashBorrower.onFlashLoan\""
																		}
																	],
																	"id": 1435,
																	"name": "keccak256",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967288,
																	"src": "4714:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																		"typeString": "function (bytes memory) pure returns (bytes32)"
																	}
																},
																"id": 1437,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4714:45:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4647:112:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466c617368206c6f616e206661696c6564",
															"id": 1439,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4774:19:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_63b9b223ee638cd0ab97f0a72b926003f28084afe15ca83039d9a810e771c94b",
																"typeString": "literal_string \"Flash loan failed\""
															},
															"value": "Flash loan failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_63b9b223ee638cd0ab97f0a72b926003f28084afe15ca83039d9a810e771c94b",
																"typeString": "literal_string \"Flash loan failed\""
															}
														],
														"id": 1425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4625:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1440,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4625:179:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1441,
												"nodeType": "ExpressionStatement",
												"src": "4625:179:12"
											},
											{
												"assignments": [
													1443
												],
												"declarations": [
													{
														"constant": false,
														"id": 1443,
														"mutability": "mutable",
														"name": "amountOwed",
														"nameLocation": "4825:10:12",
														"nodeType": "VariableDeclaration",
														"scope": 1482,
														"src": "4817:18:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1442,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4817:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1447,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1446,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1444,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1373,
														"src": "4838:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1445,
														"name": "totalFee",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1399,
														"src": "4847:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4838:17:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4817:38:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1453,
																	"name": "receiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1369,
																	"src": "4897:8:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
																		"typeString": "contract IERC3156FlashBorrower"
																	}
																],
																"id": 1452,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4889:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1451,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4889:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1454,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4889:17:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1457,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4916:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																		"typeString": "contract TuliaFlashPool"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																		"typeString": "contract TuliaFlashPool"
																	}
																],
																"id": 1456,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4908:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1455,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4908:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 1458,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4908:13:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1459,
															"name": "amountOwed",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1443,
															"src": "4923:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1448,
															"name": "asset",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1211,
															"src": "4866:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$201",
																"typeString": "contract IERC20"
															}
														},
														"id": 1450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4872:16:12",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 314,
														"src": "4866:22:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$201_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$201_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1460,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4866:68:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1461,
												"nodeType": "ExpressionStatement",
												"src": "4866:68:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1467,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "4979:4:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																					"typeString": "contract TuliaFlashPool"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_TuliaFlashPool_$1484",
																					"typeString": "contract TuliaFlashPool"
																				}
																			],
																			"id": 1466,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4971:7:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1465,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4971:7:12",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1468,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4971:13:12",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1463,
																		"name": "asset",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1211,
																		"src": "4955:5:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$201",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 1464,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4961:9:12",
																	"memberName": "balanceOf",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 158,
																	"src": "4955:15:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address) view external returns (uint256)"
																	}
																},
																"id": 1469,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4955:30:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1470,
																"name": "balanceBefore",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1406,
																"src": "4989:13:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4955:47:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466c617368206c6f616e2072657061796d656e74206661696c6564",
															"id": 1472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5004:29:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6a194ecd5810fa14ab3aae881c21c82acc6b18a75f7dcdcc28989e1e38f4d297",
																"typeString": "literal_string \"Flash loan repayment failed\""
															},
															"value": "Flash loan repayment failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6a194ecd5810fa14ab3aae881c21c82acc6b18a75f7dcdcc28989e1e38f4d297",
																"typeString": "literal_string \"Flash loan repayment failed\""
															}
														],
														"id": 1462,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4947:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4947:87:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1474,
												"nodeType": "ExpressionStatement",
												"src": "4947:87:12"
											},
											{
												"expression": {
													"id": 1478,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1475,
														"name": "state",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1230,
														"src": "5045:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_PoolState_$1227",
															"typeString": "enum TuliaFlashPool.PoolState"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1476,
															"name": "PoolState",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1227,
															"src": "5053:9:12",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_PoolState_$1227_$",
																"typeString": "type(enum TuliaFlashPool.PoolState)"
															}
														},
														"id": 1477,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5063:4:12",
														"memberName": "IDLE",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1224,
														"src": "5053:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_PoolState_$1227",
															"typeString": "enum TuliaFlashPool.PoolState"
														}
													},
													"src": "5045:22:12",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_PoolState_$1227",
														"typeString": "enum TuliaFlashPool.PoolState"
													}
												},
												"id": 1479,
												"nodeType": "ExpressionStatement",
												"src": "5045:22:12"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1480,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5087:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1379,
												"id": 1481,
												"nodeType": "Return",
												"src": "5080:11:12"
											}
										]
									},
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "3700:415:12",
										"text": "@dev Internal function to execute a flash loan transaction\n Handles the lifecycle of a flash loan including fee calculation, asset transfer, and repayment check\n @param receiver The borrower contract\n @param token The ERC20 token for the loan\n @param amount The loan amount\n @param data Data payload for the borrower\n @return true if the transaction is successful"
									},
									"id": 1483,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_executeFlashLoan",
									"nameLocation": "4130:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1369,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "4180:8:12",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "4158:30:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
													"typeString": "contract IERC3156FlashBorrower"
												},
												"typeName": {
													"id": 1368,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1367,
														"name": "IERC3156FlashBorrower",
														"nameLocations": [
															"4158:21:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 19,
														"src": "4158:21:12"
													},
													"referencedDeclaration": 19,
													"src": "4158:21:12",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC3156FlashBorrower_$19",
														"typeString": "contract IERC3156FlashBorrower"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1371,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4207:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "4199:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4199:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4231:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "4223:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4223:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4263:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "4248:19:12",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4248:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4147:127:12"
									},
									"returnParameters": {
										"id": 1379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1378,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1483,
												"src": "4293:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1377,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4293:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4292:6:12"
									},
									"scope": 1484,
									"src": "4121:978:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1485,
							"src": "651:4451:12",
							"usedErrors": [
								254,
								535,
								540,
								543
							],
							"usedEvents": []
						}
					],
					"src": "33:5071:12"
				},
				"id": 12
			}
		}
	}
}